
Group52.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000004da  0000056e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800106  00800106  00000574  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000574  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  000005a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ff1  00000000  00000000  0000067c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004db  00000000  00000000  0000166d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000422  00000000  00000000  00001b48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001e8  00000000  00000000  00001f6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000306  00000000  00000000  00002154  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003fb  00000000  00000000  0000245a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000108  00000000  00000000  00002855  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ea ed       	ldi	r30, 0xDA	; 218
  84:	f4 e0       	ldi	r31, 0x04	; 4
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a6 30       	cpi	r26, 0x06	; 6
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a6 e0       	ldi	r26, 0x06	; 6
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a0 31       	cpi	r26, 0x10	; 16
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 57 00 	call	0xae	; 0xae <main>
  a6:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <main>:
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
  ae:	62 ed       	ldi	r22, 0xD2	; 210
  b0:	70 e0       	ldi	r23, 0x00	; 0
  b2:	8e ec       	ldi	r24, 0xCE	; 206
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	0e 94 d6 00 	call	0x1ac	; 0x1ac <fdevopen>
			retrieval_errors++;
  ba:	8f e1       	ldi	r24, 0x1F	; 31
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	0e 94 c7 00 	call	0x18e	; 0x18e <usart_Init>
  c2:	85 b7       	in	r24, 0x35	; 53
  c4:	80 68       	ori	r24, 0x80	; 128
  c6:	85 bf       	out	0x35, r24	; 53
  c8:	0e 94 85 00 	call	0x10a	; 0x10a <OLED_home>
  cc:	81 e4       	ldi	r24, 0x41	; 65
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
  ce:	0e 94 82 00 	call	0x104	; 0x104 <OLED_write_d>
  d2:	81 e4       	ldi	r24, 0x41	; 65
  d4:	0e 94 82 00 	call	0x104	; 0x104 <OLED_write_d>
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	printf("SRAM test completed with\n%4d errorsin write phase and\n%4d errors in retrieval phase\n\n", write_errors, retrieval_errors);
  d8:	81 e4       	ldi	r24, 0x41	; 65
  da:	0e 94 82 00 	call	0x104	; 0x104 <OLED_write_d>
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	0e 94 9a 00 	call	0x134	; 0x134 <OLED_clear_line>
  e4:	62 e3       	ldi	r22, 0x32	; 50
  e6:	84 e0       	ldi	r24, 0x04	; 4
  e8:	0e 94 ac 00 	call	0x158	; 0x158 <OLED_pos>
  ec:	81 e4       	ldi	r24, 0x41	; 65
  ee:	0e 94 82 00 	call	0x104	; 0x104 <OLED_write_d>
  f2:	81 e4       	ldi	r24, 0x41	; 65
  f4:	0e 94 82 00 	call	0x104	; 0x104 <OLED_write_d>
}
  f8:	81 e4       	ldi	r24, 0x41	; 65
  fa:	0e 94 82 00 	call	0x104	; 0x104 <OLED_write_d>
  fe:	0e 94 b9 00 	call	0x172	; 0x172 <OLED_reset>
 102:	ff cf       	rjmp	.-2      	; 0x102 <main+0x54>

00000104 <OLED_write_d>:
}

void OLED_write_d(char chr)
{
	volatile char *oled = (char *) 0x1200;
	oled[0] = chr;
 104:	80 93 00 12 	sts	0x1200, r24
 108:	08 95       	ret

0000010a <OLED_home>:


void OLED_write_c(char chr)
{
	volatile char *oled = (char *) 0x1000;
	oled[0] = chr;
 10a:	e0 e0       	ldi	r30, 0x00	; 0
 10c:	f0 e1       	ldi	r31, 0x10	; 16
 10e:	82 e2       	ldi	r24, 0x22	; 34
 110:	80 83       	st	Z, r24
 112:	10 82       	st	Z, r1
 114:	87 e0       	ldi	r24, 0x07	; 7
 116:	80 83       	st	Z, r24
 118:	81 e2       	ldi	r24, 0x21	; 33
 11a:	80 83       	st	Z, r24
 11c:	10 82       	st	Z, r1
 11e:	8f e7       	ldi	r24, 0x7F	; 127
 120:	80 83       	st	Z, r24
 122:	08 95       	ret

00000124 <OLED_goto_line>:
 124:	e0 e0       	ldi	r30, 0x00	; 0
 126:	f0 e1       	ldi	r31, 0x10	; 16
 128:	92 e2       	ldi	r25, 0x22	; 34
 12a:	90 83       	st	Z, r25
 12c:	80 83       	st	Z, r24
 12e:	87 e0       	ldi	r24, 0x07	; 7
 130:	80 83       	st	Z, r24
 132:	08 95       	ret

00000134 <OLED_clear_line>:
	OLED_write_c(0x07);
}

void OLED_clear_line(uint8_t line)
{
	OLED_goto_line(line);
 134:	0e 94 92 00 	call	0x124	; 0x124 <OLED_goto_line>


void OLED_write_c(char chr)
{
	volatile char *oled = (char *) 0x1000;
	oled[0] = chr;
 138:	e0 e0       	ldi	r30, 0x00	; 0
 13a:	f0 e1       	ldi	r31, 0x10	; 16
 13c:	81 e2       	ldi	r24, 0x21	; 33
 13e:	80 83       	st	Z, r24
 140:	10 82       	st	Z, r1
 142:	8f e7       	ldi	r24, 0x7F	; 127
 144:	80 83       	st	Z, r24
 146:	80 e8       	ldi	r24, 0x80	; 128
 148:	90 e0       	ldi	r25, 0x00	; 0
}

void OLED_write_d(char chr)
{
	volatile char *oled = (char *) 0x1200;
	oled[0] = chr;
 14a:	e0 e0       	ldi	r30, 0x00	; 0
 14c:	f2 e1       	ldi	r31, 0x12	; 18
 14e:	10 82       	st	Z, r1
 150:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_c(0x21);
	OLED_write_c(0x00);
	OLED_write_c(0x7F);

	/* Write zeros to line */
	for (int i = 0; i < 128; i++) {
 152:	00 97       	sbiw	r24, 0x00	; 0
 154:	e1 f7       	brne	.-8      	; 0x14e <OLED_clear_line+0x1a>
		OLED_write_d(0x00);
	}
}
 156:	08 95       	ret

00000158 <OLED_pos>:


void OLED_write_c(char chr)
{
	volatile char *oled = (char *) 0x1000;
	oled[0] = chr;
 158:	e0 e0       	ldi	r30, 0x00	; 0
 15a:	f0 e1       	ldi	r31, 0x10	; 16
 15c:	92 e2       	ldi	r25, 0x22	; 34
 15e:	90 83       	st	Z, r25
 160:	80 83       	st	Z, r24
 162:	87 e0       	ldi	r24, 0x07	; 7
 164:	80 83       	st	Z, r24
 166:	81 e2       	ldi	r24, 0x21	; 33
 168:	80 83       	st	Z, r24
 16a:	60 83       	st	Z, r22
 16c:	8f e7       	ldi	r24, 0x7F	; 127
 16e:	80 83       	st	Z, r24
 170:	08 95       	ret

00000172 <OLED_reset>:
	OLED_write_c(column);
	OLED_write_c(0x7F);
}

void OLED_reset(void)
{
 172:	cf 93       	push	r28
 174:	c0 e0       	ldi	r28, 0x00	; 0
	for (int i = 0; i < 8; i++) {
		OLED_clear_line(i);
 176:	8c 2f       	mov	r24, r28
 178:	0e 94 9a 00 	call	0x134	; 0x134 <OLED_clear_line>
 17c:	cf 5f       	subi	r28, 0xFF	; 255
	OLED_write_c(0x7F);
}

void OLED_reset(void)
{
	for (int i = 0; i < 8; i++) {
 17e:	c8 30       	cpi	r28, 0x08	; 8
 180:	d1 f7       	brne	.-12     	; 0x176 <OLED_reset+0x4>
		OLED_clear_line(i);
	}
	OLED_pos(0,0);
 182:	60 e0       	ldi	r22, 0x00	; 0
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	0e 94 ac 00 	call	0x158	; 0x158 <OLED_pos>
 18a:	cf 91       	pop	r28
 18c:	08 95       	ret

0000018e <usart_Init>:
#include <avr/io.h>

void usart_Init(unsigned int ubrr)
{
	/* Set baud rate*/
	UBRR0H = (unsigned char)(ubrr >> 8 );
 18e:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
 190:	89 b9       	out	0x09, r24	; 9
	/*Enable receiver and transmitter*/
	UCSR0B = (1 << RXEN0)|(1 << TXEN0);
 192:	88 e1       	ldi	r24, 0x18	; 24
 194:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1 << URSEL0)|(1 << USBS0)|(3 << UCSZ10);
 196:	8e e8       	ldi	r24, 0x8E	; 142
 198:	80 bd       	out	0x20, r24	; 32
 19a:	08 95       	ret

0000019c <usart_Transmit>:
}

void usart_Transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while (!( UCSR0A & (1 << UDRE0)))
 19c:	5d 9b       	sbis	0x0b, 5	; 11
 19e:	fe cf       	rjmp	.-4      	; 0x19c <usart_Transmit>
		;
	/* Put data into buffer, sends the data */
	UDR0 = data;
 1a0:	8c b9       	out	0x0c, r24	; 12
 1a2:	08 95       	ret

000001a4 <usart_Receive>:
}

unsigned char usart_Receive(void)
{
	/* Wait for data to be received */
	while ( !(UCSR0A & ( 1 << RXC0)) )
 1a4:	5f 9b       	sbis	0x0b, 7	; 11
 1a6:	fe cf       	rjmp	.-4      	; 0x1a4 <usart_Receive>
		;
	/* Get and return received data from buffer */
	return UDR0;
 1a8:	8c b1       	in	r24, 0x0c	; 12
}
 1aa:	08 95       	ret

000001ac <fdevopen>:
 1ac:	0f 93       	push	r16
 1ae:	1f 93       	push	r17
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	ec 01       	movw	r28, r24
 1b6:	8b 01       	movw	r16, r22
 1b8:	00 97       	sbiw	r24, 0x00	; 0
 1ba:	31 f4       	brne	.+12     	; 0x1c8 <fdevopen+0x1c>
 1bc:	61 15       	cp	r22, r1
 1be:	71 05       	cpc	r23, r1
 1c0:	19 f4       	brne	.+6      	; 0x1c8 <fdevopen+0x1c>
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	38 c0       	rjmp	.+112    	; 0x238 <fdevopen+0x8c>
 1c8:	6e e0       	ldi	r22, 0x0E	; 14
 1ca:	70 e0       	ldi	r23, 0x00	; 0
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 21 01 	call	0x242	; 0x242 <calloc>
 1d4:	fc 01       	movw	r30, r24
 1d6:	00 97       	sbiw	r24, 0x00	; 0
 1d8:	a1 f3       	breq	.-24     	; 0x1c2 <fdevopen+0x16>
 1da:	80 e8       	ldi	r24, 0x80	; 128
 1dc:	83 83       	std	Z+3, r24	; 0x03
 1de:	01 15       	cp	r16, r1
 1e0:	11 05       	cpc	r17, r1
 1e2:	71 f0       	breq	.+28     	; 0x200 <fdevopen+0x54>
 1e4:	13 87       	std	Z+11, r17	; 0x0b
 1e6:	02 87       	std	Z+10, r16	; 0x0a
 1e8:	81 e8       	ldi	r24, 0x81	; 129
 1ea:	83 83       	std	Z+3, r24	; 0x03
 1ec:	80 91 06 01 	lds	r24, 0x0106
 1f0:	90 91 07 01 	lds	r25, 0x0107
 1f4:	89 2b       	or	r24, r25
 1f6:	21 f4       	brne	.+8      	; 0x200 <fdevopen+0x54>
 1f8:	f0 93 07 01 	sts	0x0107, r31
 1fc:	e0 93 06 01 	sts	0x0106, r30
 200:	20 97       	sbiw	r28, 0x00	; 0
 202:	c9 f0       	breq	.+50     	; 0x236 <fdevopen+0x8a>
 204:	d1 87       	std	Z+9, r29	; 0x09
 206:	c0 87       	std	Z+8, r28	; 0x08
 208:	83 81       	ldd	r24, Z+3	; 0x03
 20a:	82 60       	ori	r24, 0x02	; 2
 20c:	83 83       	std	Z+3, r24	; 0x03
 20e:	80 91 08 01 	lds	r24, 0x0108
 212:	90 91 09 01 	lds	r25, 0x0109
 216:	89 2b       	or	r24, r25
 218:	71 f4       	brne	.+28     	; 0x236 <fdevopen+0x8a>
 21a:	f0 93 09 01 	sts	0x0109, r31
 21e:	e0 93 08 01 	sts	0x0108, r30
 222:	80 91 0a 01 	lds	r24, 0x010A
 226:	90 91 0b 01 	lds	r25, 0x010B
 22a:	89 2b       	or	r24, r25
 22c:	21 f4       	brne	.+8      	; 0x236 <fdevopen+0x8a>
 22e:	f0 93 0b 01 	sts	0x010B, r31
 232:	e0 93 0a 01 	sts	0x010A, r30
 236:	cf 01       	movw	r24, r30
 238:	df 91       	pop	r29
 23a:	cf 91       	pop	r28
 23c:	1f 91       	pop	r17
 23e:	0f 91       	pop	r16
 240:	08 95       	ret

00000242 <calloc>:
 242:	0f 93       	push	r16
 244:	1f 93       	push	r17
 246:	cf 93       	push	r28
 248:	df 93       	push	r29
 24a:	86 9f       	mul	r24, r22
 24c:	80 01       	movw	r16, r0
 24e:	87 9f       	mul	r24, r23
 250:	10 0d       	add	r17, r0
 252:	96 9f       	mul	r25, r22
 254:	10 0d       	add	r17, r0
 256:	11 24       	eor	r1, r1
 258:	c8 01       	movw	r24, r16
 25a:	0e 94 3d 01 	call	0x27a	; 0x27a <malloc>
 25e:	ec 01       	movw	r28, r24
 260:	00 97       	sbiw	r24, 0x00	; 0
 262:	29 f0       	breq	.+10     	; 0x26e <calloc+0x2c>
 264:	a8 01       	movw	r20, r16
 266:	60 e0       	ldi	r22, 0x00	; 0
 268:	70 e0       	ldi	r23, 0x00	; 0
 26a:	0e 94 64 02 	call	0x4c8	; 0x4c8 <memset>
 26e:	ce 01       	movw	r24, r28
 270:	df 91       	pop	r29
 272:	cf 91       	pop	r28
 274:	1f 91       	pop	r17
 276:	0f 91       	pop	r16
 278:	08 95       	ret

0000027a <malloc>:
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
 27e:	82 30       	cpi	r24, 0x02	; 2
 280:	91 05       	cpc	r25, r1
 282:	10 f4       	brcc	.+4      	; 0x288 <malloc+0xe>
 284:	82 e0       	ldi	r24, 0x02	; 2
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	e0 91 0e 01 	lds	r30, 0x010E
 28c:	f0 91 0f 01 	lds	r31, 0x010F
 290:	20 e0       	ldi	r18, 0x00	; 0
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	a0 e0       	ldi	r26, 0x00	; 0
 296:	b0 e0       	ldi	r27, 0x00	; 0
 298:	30 97       	sbiw	r30, 0x00	; 0
 29a:	39 f1       	breq	.+78     	; 0x2ea <malloc+0x70>
 29c:	40 81       	ld	r20, Z
 29e:	51 81       	ldd	r21, Z+1	; 0x01
 2a0:	48 17       	cp	r20, r24
 2a2:	59 07       	cpc	r21, r25
 2a4:	b8 f0       	brcs	.+46     	; 0x2d4 <malloc+0x5a>
 2a6:	48 17       	cp	r20, r24
 2a8:	59 07       	cpc	r21, r25
 2aa:	71 f4       	brne	.+28     	; 0x2c8 <malloc+0x4e>
 2ac:	82 81       	ldd	r24, Z+2	; 0x02
 2ae:	93 81       	ldd	r25, Z+3	; 0x03
 2b0:	10 97       	sbiw	r26, 0x00	; 0
 2b2:	29 f0       	breq	.+10     	; 0x2be <malloc+0x44>
 2b4:	13 96       	adiw	r26, 0x03	; 3
 2b6:	9c 93       	st	X, r25
 2b8:	8e 93       	st	-X, r24
 2ba:	12 97       	sbiw	r26, 0x02	; 2
 2bc:	2c c0       	rjmp	.+88     	; 0x316 <malloc+0x9c>
 2be:	90 93 0f 01 	sts	0x010F, r25
 2c2:	80 93 0e 01 	sts	0x010E, r24
 2c6:	27 c0       	rjmp	.+78     	; 0x316 <malloc+0x9c>
 2c8:	21 15       	cp	r18, r1
 2ca:	31 05       	cpc	r19, r1
 2cc:	31 f0       	breq	.+12     	; 0x2da <malloc+0x60>
 2ce:	42 17       	cp	r20, r18
 2d0:	53 07       	cpc	r21, r19
 2d2:	18 f0       	brcs	.+6      	; 0x2da <malloc+0x60>
 2d4:	a9 01       	movw	r20, r18
 2d6:	db 01       	movw	r26, r22
 2d8:	01 c0       	rjmp	.+2      	; 0x2dc <malloc+0x62>
 2da:	ef 01       	movw	r28, r30
 2dc:	9a 01       	movw	r18, r20
 2de:	bd 01       	movw	r22, r26
 2e0:	df 01       	movw	r26, r30
 2e2:	02 80       	ldd	r0, Z+2	; 0x02
 2e4:	f3 81       	ldd	r31, Z+3	; 0x03
 2e6:	e0 2d       	mov	r30, r0
 2e8:	d7 cf       	rjmp	.-82     	; 0x298 <malloc+0x1e>
 2ea:	21 15       	cp	r18, r1
 2ec:	31 05       	cpc	r19, r1
 2ee:	f9 f0       	breq	.+62     	; 0x32e <malloc+0xb4>
 2f0:	28 1b       	sub	r18, r24
 2f2:	39 0b       	sbc	r19, r25
 2f4:	24 30       	cpi	r18, 0x04	; 4
 2f6:	31 05       	cpc	r19, r1
 2f8:	80 f4       	brcc	.+32     	; 0x31a <malloc+0xa0>
 2fa:	8a 81       	ldd	r24, Y+2	; 0x02
 2fc:	9b 81       	ldd	r25, Y+3	; 0x03
 2fe:	61 15       	cp	r22, r1
 300:	71 05       	cpc	r23, r1
 302:	21 f0       	breq	.+8      	; 0x30c <malloc+0x92>
 304:	fb 01       	movw	r30, r22
 306:	93 83       	std	Z+3, r25	; 0x03
 308:	82 83       	std	Z+2, r24	; 0x02
 30a:	04 c0       	rjmp	.+8      	; 0x314 <malloc+0x9a>
 30c:	90 93 0f 01 	sts	0x010F, r25
 310:	80 93 0e 01 	sts	0x010E, r24
 314:	fe 01       	movw	r30, r28
 316:	32 96       	adiw	r30, 0x02	; 2
 318:	44 c0       	rjmp	.+136    	; 0x3a2 <malloc+0x128>
 31a:	fe 01       	movw	r30, r28
 31c:	e2 0f       	add	r30, r18
 31e:	f3 1f       	adc	r31, r19
 320:	81 93       	st	Z+, r24
 322:	91 93       	st	Z+, r25
 324:	22 50       	subi	r18, 0x02	; 2
 326:	31 09       	sbc	r19, r1
 328:	39 83       	std	Y+1, r19	; 0x01
 32a:	28 83       	st	Y, r18
 32c:	3a c0       	rjmp	.+116    	; 0x3a2 <malloc+0x128>
 32e:	20 91 0c 01 	lds	r18, 0x010C
 332:	30 91 0d 01 	lds	r19, 0x010D
 336:	23 2b       	or	r18, r19
 338:	41 f4       	brne	.+16     	; 0x34a <malloc+0xd0>
 33a:	20 91 02 01 	lds	r18, 0x0102
 33e:	30 91 03 01 	lds	r19, 0x0103
 342:	30 93 0d 01 	sts	0x010D, r19
 346:	20 93 0c 01 	sts	0x010C, r18
 34a:	20 91 00 01 	lds	r18, 0x0100
 34e:	30 91 01 01 	lds	r19, 0x0101
 352:	21 15       	cp	r18, r1
 354:	31 05       	cpc	r19, r1
 356:	41 f4       	brne	.+16     	; 0x368 <malloc+0xee>
 358:	2d b7       	in	r18, 0x3d	; 61
 35a:	3e b7       	in	r19, 0x3e	; 62
 35c:	40 91 04 01 	lds	r20, 0x0104
 360:	50 91 05 01 	lds	r21, 0x0105
 364:	24 1b       	sub	r18, r20
 366:	35 0b       	sbc	r19, r21
 368:	e0 91 0c 01 	lds	r30, 0x010C
 36c:	f0 91 0d 01 	lds	r31, 0x010D
 370:	e2 17       	cp	r30, r18
 372:	f3 07       	cpc	r31, r19
 374:	a0 f4       	brcc	.+40     	; 0x39e <malloc+0x124>
 376:	2e 1b       	sub	r18, r30
 378:	3f 0b       	sbc	r19, r31
 37a:	28 17       	cp	r18, r24
 37c:	39 07       	cpc	r19, r25
 37e:	78 f0       	brcs	.+30     	; 0x39e <malloc+0x124>
 380:	ac 01       	movw	r20, r24
 382:	4e 5f       	subi	r20, 0xFE	; 254
 384:	5f 4f       	sbci	r21, 0xFF	; 255
 386:	24 17       	cp	r18, r20
 388:	35 07       	cpc	r19, r21
 38a:	48 f0       	brcs	.+18     	; 0x39e <malloc+0x124>
 38c:	4e 0f       	add	r20, r30
 38e:	5f 1f       	adc	r21, r31
 390:	50 93 0d 01 	sts	0x010D, r21
 394:	40 93 0c 01 	sts	0x010C, r20
 398:	81 93       	st	Z+, r24
 39a:	91 93       	st	Z+, r25
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <malloc+0x128>
 39e:	e0 e0       	ldi	r30, 0x00	; 0
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	cf 01       	movw	r24, r30
 3a4:	df 91       	pop	r29
 3a6:	cf 91       	pop	r28
 3a8:	08 95       	ret

000003aa <free>:
 3aa:	cf 93       	push	r28
 3ac:	df 93       	push	r29
 3ae:	00 97       	sbiw	r24, 0x00	; 0
 3b0:	09 f4       	brne	.+2      	; 0x3b4 <free+0xa>
 3b2:	87 c0       	rjmp	.+270    	; 0x4c2 <free+0x118>
 3b4:	fc 01       	movw	r30, r24
 3b6:	32 97       	sbiw	r30, 0x02	; 2
 3b8:	13 82       	std	Z+3, r1	; 0x03
 3ba:	12 82       	std	Z+2, r1	; 0x02
 3bc:	c0 91 0e 01 	lds	r28, 0x010E
 3c0:	d0 91 0f 01 	lds	r29, 0x010F
 3c4:	20 97       	sbiw	r28, 0x00	; 0
 3c6:	81 f4       	brne	.+32     	; 0x3e8 <free+0x3e>
 3c8:	20 81       	ld	r18, Z
 3ca:	31 81       	ldd	r19, Z+1	; 0x01
 3cc:	28 0f       	add	r18, r24
 3ce:	39 1f       	adc	r19, r25
 3d0:	80 91 0c 01 	lds	r24, 0x010C
 3d4:	90 91 0d 01 	lds	r25, 0x010D
 3d8:	82 17       	cp	r24, r18
 3da:	93 07       	cpc	r25, r19
 3dc:	79 f5       	brne	.+94     	; 0x43c <free+0x92>
 3de:	f0 93 0d 01 	sts	0x010D, r31
 3e2:	e0 93 0c 01 	sts	0x010C, r30
 3e6:	6d c0       	rjmp	.+218    	; 0x4c2 <free+0x118>
 3e8:	de 01       	movw	r26, r28
 3ea:	20 e0       	ldi	r18, 0x00	; 0
 3ec:	30 e0       	ldi	r19, 0x00	; 0
 3ee:	ae 17       	cp	r26, r30
 3f0:	bf 07       	cpc	r27, r31
 3f2:	50 f4       	brcc	.+20     	; 0x408 <free+0x5e>
 3f4:	12 96       	adiw	r26, 0x02	; 2
 3f6:	4d 91       	ld	r20, X+
 3f8:	5c 91       	ld	r21, X
 3fa:	13 97       	sbiw	r26, 0x03	; 3
 3fc:	9d 01       	movw	r18, r26
 3fe:	41 15       	cp	r20, r1
 400:	51 05       	cpc	r21, r1
 402:	09 f1       	breq	.+66     	; 0x446 <free+0x9c>
 404:	da 01       	movw	r26, r20
 406:	f3 cf       	rjmp	.-26     	; 0x3ee <free+0x44>
 408:	b3 83       	std	Z+3, r27	; 0x03
 40a:	a2 83       	std	Z+2, r26	; 0x02
 40c:	40 81       	ld	r20, Z
 40e:	51 81       	ldd	r21, Z+1	; 0x01
 410:	84 0f       	add	r24, r20
 412:	95 1f       	adc	r25, r21
 414:	8a 17       	cp	r24, r26
 416:	9b 07       	cpc	r25, r27
 418:	71 f4       	brne	.+28     	; 0x436 <free+0x8c>
 41a:	8d 91       	ld	r24, X+
 41c:	9c 91       	ld	r25, X
 41e:	11 97       	sbiw	r26, 0x01	; 1
 420:	84 0f       	add	r24, r20
 422:	95 1f       	adc	r25, r21
 424:	02 96       	adiw	r24, 0x02	; 2
 426:	91 83       	std	Z+1, r25	; 0x01
 428:	80 83       	st	Z, r24
 42a:	12 96       	adiw	r26, 0x02	; 2
 42c:	8d 91       	ld	r24, X+
 42e:	9c 91       	ld	r25, X
 430:	13 97       	sbiw	r26, 0x03	; 3
 432:	93 83       	std	Z+3, r25	; 0x03
 434:	82 83       	std	Z+2, r24	; 0x02
 436:	21 15       	cp	r18, r1
 438:	31 05       	cpc	r19, r1
 43a:	29 f4       	brne	.+10     	; 0x446 <free+0x9c>
 43c:	f0 93 0f 01 	sts	0x010F, r31
 440:	e0 93 0e 01 	sts	0x010E, r30
 444:	3e c0       	rjmp	.+124    	; 0x4c2 <free+0x118>
 446:	d9 01       	movw	r26, r18
 448:	13 96       	adiw	r26, 0x03	; 3
 44a:	fc 93       	st	X, r31
 44c:	ee 93       	st	-X, r30
 44e:	12 97       	sbiw	r26, 0x02	; 2
 450:	4d 91       	ld	r20, X+
 452:	5d 91       	ld	r21, X+
 454:	a4 0f       	add	r26, r20
 456:	b5 1f       	adc	r27, r21
 458:	ea 17       	cp	r30, r26
 45a:	fb 07       	cpc	r31, r27
 45c:	79 f4       	brne	.+30     	; 0x47c <free+0xd2>
 45e:	80 81       	ld	r24, Z
 460:	91 81       	ldd	r25, Z+1	; 0x01
 462:	84 0f       	add	r24, r20
 464:	95 1f       	adc	r25, r21
 466:	02 96       	adiw	r24, 0x02	; 2
 468:	d9 01       	movw	r26, r18
 46a:	11 96       	adiw	r26, 0x01	; 1
 46c:	9c 93       	st	X, r25
 46e:	8e 93       	st	-X, r24
 470:	82 81       	ldd	r24, Z+2	; 0x02
 472:	93 81       	ldd	r25, Z+3	; 0x03
 474:	13 96       	adiw	r26, 0x03	; 3
 476:	9c 93       	st	X, r25
 478:	8e 93       	st	-X, r24
 47a:	12 97       	sbiw	r26, 0x02	; 2
 47c:	e0 e0       	ldi	r30, 0x00	; 0
 47e:	f0 e0       	ldi	r31, 0x00	; 0
 480:	8a 81       	ldd	r24, Y+2	; 0x02
 482:	9b 81       	ldd	r25, Y+3	; 0x03
 484:	00 97       	sbiw	r24, 0x00	; 0
 486:	19 f0       	breq	.+6      	; 0x48e <free+0xe4>
 488:	fe 01       	movw	r30, r28
 48a:	ec 01       	movw	r28, r24
 48c:	f9 cf       	rjmp	.-14     	; 0x480 <free+0xd6>
 48e:	ce 01       	movw	r24, r28
 490:	02 96       	adiw	r24, 0x02	; 2
 492:	28 81       	ld	r18, Y
 494:	39 81       	ldd	r19, Y+1	; 0x01
 496:	82 0f       	add	r24, r18
 498:	93 1f       	adc	r25, r19
 49a:	20 91 0c 01 	lds	r18, 0x010C
 49e:	30 91 0d 01 	lds	r19, 0x010D
 4a2:	28 17       	cp	r18, r24
 4a4:	39 07       	cpc	r19, r25
 4a6:	69 f4       	brne	.+26     	; 0x4c2 <free+0x118>
 4a8:	30 97       	sbiw	r30, 0x00	; 0
 4aa:	29 f4       	brne	.+10     	; 0x4b6 <free+0x10c>
 4ac:	10 92 0f 01 	sts	0x010F, r1
 4b0:	10 92 0e 01 	sts	0x010E, r1
 4b4:	02 c0       	rjmp	.+4      	; 0x4ba <free+0x110>
 4b6:	13 82       	std	Z+3, r1	; 0x03
 4b8:	12 82       	std	Z+2, r1	; 0x02
 4ba:	d0 93 0d 01 	sts	0x010D, r29
 4be:	c0 93 0c 01 	sts	0x010C, r28
 4c2:	df 91       	pop	r29
 4c4:	cf 91       	pop	r28
 4c6:	08 95       	ret

000004c8 <memset>:
 4c8:	dc 01       	movw	r26, r24
 4ca:	01 c0       	rjmp	.+2      	; 0x4ce <memset+0x6>
 4cc:	6d 93       	st	X+, r22
 4ce:	41 50       	subi	r20, 0x01	; 1
 4d0:	50 40       	sbci	r21, 0x00	; 0
 4d2:	e0 f7       	brcc	.-8      	; 0x4cc <memset+0x4>
 4d4:	08 95       	ret

000004d6 <_exit>:
 4d6:	f8 94       	cli

000004d8 <__stop_program>:
 4d8:	ff cf       	rjmp	.-2      	; 0x4d8 <__stop_program>
