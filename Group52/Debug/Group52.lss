
Group52.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  00000fee  00001082  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080014a  0080014a  000010cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010cc  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000238  00000000  00000000  000010fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002586  00000000  00000000  00001334  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c52  00000000  00000000  000038ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c05  00000000  00000000  0000450c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004e8  00000000  00000000  00005114  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006d8  00000000  00000000  000055fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001212  00000000  00000000  00005cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001d0  00000000  00000000  00006ee6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__ctors_end>
   4:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
   8:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
   c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  10:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  14:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  18:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  1c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  20:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  24:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  28:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  2c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  30:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  34:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  38:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  3c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  40:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  44:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  48:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  4c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  50:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  54:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  58:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  5c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  60:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  64:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  68:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  6c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>

00000070 <__trampolines_end>:
  70:	00 00       	nop
  72:	00 00       	nop
  74:	00 5c       	subi	r16, 0xC0	; 192
  76:	00 00       	nop
  78:	0c 00       	.word	0x000c	; ????
  7a:	0c 00       	.word	0x000c	; ????
  7c:	7c 28       	or	r7, r12
  7e:	7c 28       	or	r7, r12
  80:	58 dc       	rcall	.-1872   	; 0xfffff932 <__eeprom_end+0xff7ef932>
  82:	68 00       	.word	0x0068	; ????
  84:	24 10       	cpse	r2, r4
  86:	48 00       	.word	0x0048	; ????
  88:	28 54       	subi	r18, 0x48	; 72
  8a:	28 40       	sbci	r18, 0x08	; 8
  8c:	00 0c       	add	r0, r0
  8e:	00 00       	nop
  90:	00 78       	andi	r16, 0x80	; 128
  92:	84 00       	.word	0x0084	; ????
  94:	84 78       	andi	r24, 0x84	; 132
  96:	00 00       	nop
  98:	54 38       	cpi	r21, 0x84	; 132
  9a:	54 00       	.word	0x0054	; ????
  9c:	10 7c       	andi	r17, 0xC0	; 192
  9e:	10 00       	.word	0x0010	; ????
  a0:	80 40       	sbci	r24, 0x00	; 0
  a2:	00 00       	nop
  a4:	10 10       	cpse	r1, r0
  a6:	10 00       	.word	0x0010	; ????
  a8:	00 40       	sbci	r16, 0x00	; 0
  aa:	00 00       	nop
  ac:	60 10       	cpse	r6, r0
  ae:	0c 00       	.word	0x000c	; ????
  b0:	38 54       	subi	r19, 0x48	; 72
  b2:	38 00       	.word	0x0038	; ????
  b4:	48 7c       	andi	r20, 0xC8	; 200
  b6:	40 00       	.word	0x0040	; ????
  b8:	48 64       	ori	r20, 0x48	; 72
  ba:	58 00       	.word	0x0058	; ????
  bc:	44 54       	subi	r20, 0x44	; 68
  be:	2c 00       	.word	0x002c	; ????
  c0:	1c 10       	cpse	r1, r12
  c2:	7c 00       	.word	0x007c	; ????
  c4:	5c 54       	subi	r21, 0x4C	; 76
  c6:	24 00       	.word	0x0024	; ????
  c8:	38 54       	subi	r19, 0x48	; 72
  ca:	24 00       	.word	0x0024	; ????
  cc:	64 14       	cp	r6, r4
  ce:	0c 00       	.word	0x000c	; ????
  d0:	68 54       	subi	r22, 0x48	; 72
  d2:	2c 00       	.word	0x002c	; ????
  d4:	48 54       	subi	r20, 0x48	; 72
  d6:	38 00       	.word	0x0038	; ????
  d8:	00 48       	sbci	r16, 0x80	; 128
  da:	00 00       	nop
  dc:	80 48       	sbci	r24, 0x80	; 128
  de:	00 00       	nop
  e0:	10 28       	or	r1, r0
  e2:	44 00       	.word	0x0044	; ????
  e4:	28 28       	or	r2, r8
  e6:	28 00       	.word	0x0028	; ????
  e8:	44 28       	or	r4, r4
  ea:	10 00       	.word	0x0010	; ????
  ec:	04 54       	subi	r16, 0x44	; 68
  ee:	08 00       	.word	0x0008	; ????
  f0:	38 44       	sbci	r19, 0x48	; 72
  f2:	5c 00       	.word	0x005c	; ????
  f4:	78 14       	cp	r7, r8
  f6:	78 00       	.word	0x0078	; ????
  f8:	7c 54       	subi	r23, 0x4C	; 76
  fa:	28 00       	.word	0x0028	; ????
  fc:	38 44       	sbci	r19, 0x48	; 72
  fe:	28 00       	.word	0x0028	; ????
 100:	7c 44       	sbci	r23, 0x4C	; 76
 102:	38 00       	.word	0x0038	; ????
 104:	7c 54       	subi	r23, 0x4C	; 76
 106:	44 00       	.word	0x0044	; ????
 108:	7c 14       	cp	r7, r12
 10a:	04 00       	.word	0x0004	; ????
 10c:	38 44       	sbci	r19, 0x48	; 72
 10e:	74 00       	.word	0x0074	; ????
 110:	7c 10       	cpse	r7, r12
 112:	7c 00       	.word	0x007c	; ????
 114:	44 7c       	andi	r20, 0xC4	; 196
 116:	44 00       	.word	0x0044	; ????
 118:	20 40       	sbci	r18, 0x00	; 0
 11a:	3c 00       	.word	0x003c	; ????
 11c:	7c 10       	cpse	r7, r12
 11e:	6c 00       	.word	0x006c	; ????
 120:	7c 40       	sbci	r23, 0x0C	; 12
 122:	40 00       	.word	0x0040	; ????
 124:	7c 18       	sub	r7, r12
 126:	7c 00       	.word	0x007c	; ????
 128:	78 10       	cpse	r7, r8
 12a:	3c 00       	.word	0x003c	; ????
 12c:	38 44       	sbci	r19, 0x48	; 72
 12e:	38 00       	.word	0x0038	; ????
 130:	7c 14       	cp	r7, r12
 132:	08 00       	.word	0x0008	; ????
 134:	38 44       	sbci	r19, 0x48	; 72
 136:	b8 00       	.word	0x00b8	; ????
 138:	7c 14       	cp	r7, r12
 13a:	68 00       	.word	0x0068	; ????
 13c:	48 54       	subi	r20, 0x48	; 72
 13e:	24 00       	.word	0x0024	; ????
 140:	04 7c       	andi	r16, 0xC4	; 196
 142:	04 00       	.word	0x0004	; ????
 144:	7c 40       	sbci	r23, 0x0C	; 12
 146:	7c 00       	.word	0x007c	; ????
 148:	3c 60       	ori	r19, 0x0C	; 12
 14a:	3c 00       	.word	0x003c	; ????
 14c:	7c 30       	cpi	r23, 0x0C	; 12
 14e:	7c 00       	.word	0x007c	; ????
 150:	6c 10       	cpse	r6, r12
 152:	6c 00       	.word	0x006c	; ????
 154:	0c 70       	andi	r16, 0x0C	; 12
 156:	0c 00       	.word	0x000c	; ????
 158:	64 54       	subi	r22, 0x44	; 68
 15a:	4c 00       	.word	0x004c	; ????
 15c:	00 7c       	andi	r16, 0xC0	; 192
 15e:	44 00       	.word	0x0044	; ????
 160:	0c 10       	cpse	r0, r12
 162:	60 00       	.word	0x0060	; ????
 164:	44 7c       	andi	r20, 0xC4	; 196
 166:	00 00       	nop
 168:	08 04       	cpc	r0, r8
 16a:	08 00       	.word	0x0008	; ????
 16c:	80 80       	ld	r8, Z
 16e:	80 00       	.word	0x0080	; ????
 170:	00 04       	cpc	r0, r0
 172:	08 00       	.word	0x0008	; ????
 174:	30 48       	sbci	r19, 0x80	; 128
 176:	78 00       	.word	0x0078	; ????
 178:	7c 48       	sbci	r23, 0x8C	; 140
 17a:	30 00       	.word	0x0030	; ????
 17c:	30 48       	sbci	r19, 0x80	; 128
 17e:	48 00       	.word	0x0048	; ????
 180:	30 48       	sbci	r19, 0x80	; 128
 182:	7c 00       	.word	0x007c	; ????
 184:	30 68       	ori	r19, 0x80	; 128
 186:	50 00       	.word	0x0050	; ????
 188:	10 78       	andi	r17, 0x80	; 128
 18a:	14 00       	.word	0x0014	; ????
 18c:	90 a8       	ldd	r9, Z+48	; 0x30
 18e:	78 00       	.word	0x0078	; ????
 190:	7c 08       	sbc	r7, r12
 192:	70 00       	.word	0x0070	; ????
 194:	50 74       	andi	r21, 0x40	; 64
 196:	40 00       	.word	0x0040	; ????
 198:	80 80       	ld	r8, Z
 19a:	74 00       	.word	0x0074	; ????
 19c:	7c 10       	cpse	r7, r12
 19e:	68 00       	.word	0x0068	; ????
 1a0:	44 7c       	andi	r20, 0xC4	; 196
 1a2:	40 00       	.word	0x0040	; ????
 1a4:	78 10       	cpse	r7, r8
 1a6:	78 00       	.word	0x0078	; ????
 1a8:	78 08       	sbc	r7, r8
 1aa:	70 00       	.word	0x0070	; ????
 1ac:	30 48       	sbci	r19, 0x80	; 128
 1ae:	30 00       	.word	0x0030	; ????
 1b0:	f8 28       	or	r15, r8
 1b2:	10 00       	.word	0x0010	; ????
 1b4:	30 48       	sbci	r19, 0x80	; 128
 1b6:	f8 00       	.word	0x00f8	; ????
 1b8:	78 10       	cpse	r7, r8
 1ba:	08 00       	.word	0x0008	; ????
 1bc:	50 58       	subi	r21, 0x80	; 128
 1be:	28 00       	.word	0x0028	; ????
 1c0:	08 3c       	cpi	r16, 0xC8	; 200
 1c2:	48 00       	.word	0x0048	; ????
 1c4:	38 40       	sbci	r19, 0x08	; 8
 1c6:	78 00       	.word	0x0078	; ????
 1c8:	38 40       	sbci	r19, 0x08	; 8
 1ca:	38 00       	.word	0x0038	; ????
 1cc:	78 20       	and	r7, r8
 1ce:	78 00       	.word	0x0078	; ????
 1d0:	48 30       	cpi	r20, 0x08	; 8
 1d2:	48 00       	.word	0x0048	; ????
 1d4:	98 a0       	ldd	r9, Y+32	; 0x20
 1d6:	78 00       	.word	0x0078	; ????
 1d8:	48 68       	ori	r20, 0x88	; 136
 1da:	58 00       	.word	0x0058	; ????
 1dc:	10 78       	andi	r17, 0x80	; 128
 1de:	84 00       	.word	0x0084	; ????
 1e0:	00 7c       	andi	r16, 0xC0	; 192
 1e2:	00 00       	nop
 1e4:	84 78       	andi	r24, 0x84	; 132
 1e6:	10 00       	.word	0x0010	; ????
 1e8:	08 04       	cpc	r0, r8
 1ea:	08 04       	cpc	r0, r8

000001ec <__ctors_end>:
 1ec:	11 24       	eor	r1, r1
 1ee:	1f be       	out	0x3f, r1	; 63
 1f0:	cf ef       	ldi	r28, 0xFF	; 255
 1f2:	d4 e0       	ldi	r29, 0x04	; 4
 1f4:	de bf       	out	0x3e, r29	; 62
 1f6:	cd bf       	out	0x3d, r28	; 61

000001f8 <__do_copy_data>:
 1f8:	11 e0       	ldi	r17, 0x01	; 1
 1fa:	a0 e0       	ldi	r26, 0x00	; 0
 1fc:	b1 e0       	ldi	r27, 0x01	; 1
 1fe:	ee ee       	ldi	r30, 0xEE	; 238
 200:	ff e0       	ldi	r31, 0x0F	; 15
 202:	02 c0       	rjmp	.+4      	; 0x208 <__do_copy_data+0x10>
 204:	05 90       	lpm	r0, Z+
 206:	0d 92       	st	X+, r0
 208:	aa 34       	cpi	r26, 0x4A	; 74
 20a:	b1 07       	cpc	r27, r17
 20c:	d9 f7       	brne	.-10     	; 0x204 <__do_copy_data+0xc>

0000020e <__do_clear_bss>:
 20e:	21 e0       	ldi	r18, 0x01	; 1
 210:	aa e4       	ldi	r26, 0x4A	; 74
 212:	b1 e0       	ldi	r27, 0x01	; 1
 214:	01 c0       	rjmp	.+2      	; 0x218 <.do_clear_bss_start>

00000216 <.do_clear_bss_loop>:
 216:	1d 92       	st	X+, r1

00000218 <.do_clear_bss_start>:
 218:	a4 35       	cpi	r26, 0x54	; 84
 21a:	b2 07       	cpc	r27, r18
 21c:	e1 f7       	brne	.-8      	; 0x216 <.do_clear_bss_loop>
 21e:	0e 94 0e 02 	call	0x41c	; 0x41c <main>
 222:	0c 94 f5 07 	jmp	0xfea	; 0xfea <_exit>

00000226 <__bad_interrupt>:
 226:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000022a <adc_read>:
#include <util/delay.h>
#include "adc.h"

uint8_t adc_read(DeviceType device){
	volatile char *adc = (char *) 0x1400;
	switch (device) {
 22a:	82 30       	cpi	r24, 0x02	; 2
 22c:	69 f0       	breq	.+26     	; 0x248 <adc_read+0x1e>
 22e:	18 f4       	brcc	.+6      	; 0x236 <adc_read+0xc>
 230:	81 30       	cpi	r24, 0x01	; 1
 232:	31 f0       	breq	.+12     	; 0x240 <adc_read+0x16>
 234:	14 c0       	rjmp	.+40     	; 0x25e <adc_read+0x34>
 236:	83 30       	cpi	r24, 0x03	; 3
 238:	59 f0       	breq	.+22     	; 0x250 <adc_read+0x26>
 23a:	84 30       	cpi	r24, 0x04	; 4
 23c:	69 f0       	breq	.+26     	; 0x258 <adc_read+0x2e>
 23e:	0f c0       	rjmp	.+30     	; 0x25e <adc_read+0x34>
		case JOYAXIS1:
		/* Select CH1 */
		adc[0] = 0b00000100;
 240:	84 e0       	ldi	r24, 0x04	; 4
 242:	80 93 00 14 	sts	0x1400, r24
		break;
 246:	0b c0       	rjmp	.+22     	; 0x25e <adc_read+0x34>
		
		case JOYAXIS2:
		/* Select CH2 */
		adc[0] = 0b00000101;
 248:	85 e0       	ldi	r24, 0x05	; 5
 24a:	80 93 00 14 	sts	0x1400, r24
		break;
 24e:	07 c0       	rjmp	.+14     	; 0x25e <adc_read+0x34>
		
		case LSLIDER:
		/* Select CH3 */
		adc[0] = 0b00000110;
 250:	86 e0       	ldi	r24, 0x06	; 6
 252:	80 93 00 14 	sts	0x1400, r24
		break;
 256:	03 c0       	rjmp	.+6      	; 0x25e <adc_read+0x34>
		
		case RSLIDER:
		/* Select CH1 */
		adc[0] = 0b00000111;
 258:	87 e0       	ldi	r24, 0x07	; 7
 25a:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 25e:	2c ec       	ldi	r18, 0xCC	; 204
 260:	8c e0       	ldi	r24, 0x0C	; 12
 262:	91 e0       	ldi	r25, 0x01	; 1
 264:	21 50       	subi	r18, 0x01	; 1
 266:	80 40       	sbci	r24, 0x00	; 0
 268:	90 40       	sbci	r25, 0x00	; 0
 26a:	e1 f7       	brne	.-8      	; 0x264 <adc_read+0x3a>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <adc_read+0x44>
		break;
		default:
		break;
	}
	_delay_ms(70);
	return adc[0];
 26e:	80 91 00 14 	lds	r24, 0x1400
 272:	08 95       	ret

00000274 <CAN_init>:
#include "MCP2515.h"
#include "can.h"

void CAN_init(void)
{
	MCP_init();
 274:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <MCP_init>
 278:	08 95       	ret

0000027a <CAN_message_send>:
}

/* High level function for sending a message on the CAN bus */
void CAN_message_send(can_message_t* msg)
{
 27a:	1f 93       	push	r17
 27c:	cf 93       	push	r28
 27e:	df 93       	push	r29
 280:	ec 01       	movw	r28, r24
	
	/* Only transmit buffer TXB0 is used */
	
	/* Loop until TXREQ is cleared */
	uint8_t status = MCP_read_status();
 282:	0e 94 b4 02 	call	0x568	; 0x568 <MCP_read_status>
	uint8_t TXREQ = (status & (1 << 2));
	while (TXREQ) {
 286:	82 ff       	sbrs	r24, 2
 288:	04 c0       	rjmp	.+8      	; 0x292 <CAN_message_send+0x18>
		status = MCP_read_status();
 28a:	0e 94 b4 02 	call	0x568	; 0x568 <MCP_read_status>
	/* Only transmit buffer TXB0 is used */
	
	/* Loop until TXREQ is cleared */
	uint8_t status = MCP_read_status();
	uint8_t TXREQ = (status & (1 << 2));
	while (TXREQ) {
 28e:	82 fd       	sbrc	r24, 2
 290:	fc cf       	rjmp	.-8      	; 0x28a <CAN_message_send+0x10>
		status = MCP_read_status();
		TXREQ = (status & (1 << 2));
	}
	
	/* Set message ID, standard mode*/
	MCP_write(MCP_TXB0CTRL + 1, 0); // High level identifier
 292:	60 e0       	ldi	r22, 0x00	; 0
 294:	81 e3       	ldi	r24, 0x31	; 49
 296:	0e 94 9d 02 	call	0x53a	; 0x53a <MCP_write>
	MCP_write(MCP_TXB0CTRL + 2, (msg->id << 5)); // Low level identifier
 29a:	68 81       	ld	r22, Y
 29c:	62 95       	swap	r22
 29e:	66 0f       	add	r22, r22
 2a0:	60 7e       	andi	r22, 0xE0	; 224
 2a2:	82 e3       	ldi	r24, 0x32	; 50
 2a4:	0e 94 9d 02 	call	0x53a	; 0x53a <MCP_write>
	
	/* Set data length */
	MCP_write(MCP_TXB0CTRL + 5, msg->length & 0x0F);
 2a8:	6a 81       	ldd	r22, Y+2	; 0x02
 2aa:	6f 70       	andi	r22, 0x0F	; 15
 2ac:	85 e3       	ldi	r24, 0x35	; 53
 2ae:	0e 94 9d 02 	call	0x53a	; 0x53a <MCP_write>
	
	/* Load message data */
	for (uint8_t i = 0; i < msg->length; i++) {
 2b2:	8a 81       	ldd	r24, Y+2	; 0x02
 2b4:	88 23       	and	r24, r24
 2b6:	69 f0       	breq	.+26     	; 0x2d2 <CAN_message_send+0x58>
 2b8:	10 e0       	ldi	r17, 0x00	; 0
		MCP_write(MCP_TXB0CTRL + 6 + i, msg->data[i]);
 2ba:	fe 01       	movw	r30, r28
 2bc:	e1 0f       	add	r30, r17
 2be:	f1 1d       	adc	r31, r1
 2c0:	63 81       	ldd	r22, Z+3	; 0x03
 2c2:	86 e3       	ldi	r24, 0x36	; 54
 2c4:	81 0f       	add	r24, r17
 2c6:	0e 94 9d 02 	call	0x53a	; 0x53a <MCP_write>
	
	/* Set data length */
	MCP_write(MCP_TXB0CTRL + 5, msg->length & 0x0F);
	
	/* Load message data */
	for (uint8_t i = 0; i < msg->length; i++) {
 2ca:	1f 5f       	subi	r17, 0xFF	; 255
 2cc:	8a 81       	ldd	r24, Y+2	; 0x02
 2ce:	18 17       	cp	r17, r24
 2d0:	a0 f3       	brcs	.-24     	; 0x2ba <CAN_message_send+0x40>
		MCP_write(MCP_TXB0CTRL + 6 + i, msg->data[i]);
	}
	
	/* Request to send contents of TXB0 */
	MCP_request_to_send(MCP_RTS_TX0);
 2d2:	81 e8       	ldi	r24, 0x81	; 129
 2d4:	0e 94 af 02 	call	0x55e	; 0x55e <MCP_request_to_send>
}
 2d8:	df 91       	pop	r29
 2da:	cf 91       	pop	r28
 2dc:	1f 91       	pop	r17
 2de:	08 95       	ret

000002e0 <JOYSTICK_init>:
#include "math.h"

void JOYSTICK_init(void)
{
	/* Set PB2 as input for button*/
	DDRB &= ~(1 << PB2);
 2e0:	ba 98       	cbi	0x17, 2	; 23
	PORTB &= (1 << PB2);
 2e2:	88 b3       	in	r24, 0x18	; 24
 2e4:	84 70       	andi	r24, 0x04	; 4
 2e6:	88 bb       	out	0x18, r24	; 24
 2e8:	08 95       	ret

000002ea <toPositionPercent>:
	return NEUTRAL;
}

int16_t toPositionPercent(int16_t value)
{
	value -= 127;
 2ea:	8f 57       	subi	r24, 0x7F	; 127
 2ec:	91 09       	sbc	r25, r1
	int16_t percentValue = round((float)value / 127 * 100);
 2ee:	bc 01       	movw	r22, r24
 2f0:	88 27       	eor	r24, r24
 2f2:	77 fd       	sbrc	r23, 7
 2f4:	80 95       	com	r24
 2f6:	98 2f       	mov	r25, r24
 2f8:	0e 94 ef 04 	call	0x9de	; 0x9de <__floatsisf>
 2fc:	20 e0       	ldi	r18, 0x00	; 0
 2fe:	30 e0       	ldi	r19, 0x00	; 0
 300:	4e ef       	ldi	r20, 0xFE	; 254
 302:	52 e4       	ldi	r21, 0x42	; 66
 304:	0e 94 54 04 	call	0x8a8	; 0x8a8 <__divsf3>
 308:	20 e0       	ldi	r18, 0x00	; 0
 30a:	30 e0       	ldi	r19, 0x00	; 0
 30c:	48 ec       	ldi	r20, 0xC8	; 200
 30e:	52 e4       	ldi	r21, 0x42	; 66
 310:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <__mulsf3>
 314:	0e 94 de 05 	call	0xbbc	; 0xbbc <round>
 318:	0e 94 bc 04 	call	0x978	; 0x978 <__fixsfsi>
	return percentValue;
}
 31c:	cb 01       	movw	r24, r22
 31e:	08 95       	ret

00000320 <JOYSTICK_get_position>:
{
	
}

struct positions JOYSTICK_get_position(void)
{
 320:	ff 92       	push	r15
 322:	0f 93       	push	r16
 324:	1f 93       	push	r17
 326:	cf 93       	push	r28
 328:	df 93       	push	r29
 32a:	cd b7       	in	r28, 0x3d	; 61
 32c:	de b7       	in	r29, 0x3e	; 62
 32e:	28 97       	sbiw	r28, 0x08	; 8
 330:	0f b6       	in	r0, 0x3f	; 63
 332:	f8 94       	cli
 334:	de bf       	out	0x3e, r29	; 62
 336:	0f be       	out	0x3f, r0	; 63
 338:	cd bf       	out	0x3d, r28	; 61
	int16_t yValue = (int16_t) adc_read(JOYAXIS1);
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	0e 94 15 01 	call	0x22a	; 0x22a <adc_read>
 340:	f8 2e       	mov	r15, r24
	int16_t xValue = (int16_t) adc_read(JOYAXIS2);
 342:	82 e0       	ldi	r24, 0x02	; 2
 344:	0e 94 15 01 	call	0x22a	; 0x22a <adc_read>
	
	int16_t xPosition = toPositionPercent(xValue);
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	0e 94 75 01 	call	0x2ea	; 0x2ea <toPositionPercent>
 34e:	18 2f       	mov	r17, r24
 350:	09 2f       	mov	r16, r25
	int16_t yPosition = toPositionPercent(yValue);
 352:	8f 2d       	mov	r24, r15
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	0e 94 75 01 	call	0x2ea	; 0x2ea <toPositionPercent>
	
	struct positions pos;
	pos.x = xPosition;
	pos.y = yPosition;
	
	return pos;
 35a:	19 83       	std	Y+1, r17	; 0x01
 35c:	0a 83       	std	Y+2, r16	; 0x02
 35e:	8b 83       	std	Y+3, r24	; 0x03
 360:	9c 83       	std	Y+4, r25	; 0x04
 362:	21 2f       	mov	r18, r17
 364:	30 2f       	mov	r19, r16
 366:	48 2f       	mov	r20, r24
 368:	59 2f       	mov	r21, r25
 36a:	6d 81       	ldd	r22, Y+5	; 0x05
 36c:	7e 81       	ldd	r23, Y+6	; 0x06
}
 36e:	8f 81       	ldd	r24, Y+7	; 0x07
 370:	98 85       	ldd	r25, Y+8	; 0x08
 372:	28 96       	adiw	r28, 0x08	; 8
 374:	0f b6       	in	r0, 0x3f	; 63
 376:	f8 94       	cli
 378:	de bf       	out	0x3e, r29	; 62
 37a:	0f be       	out	0x3f, r0	; 63
 37c:	cd bf       	out	0x3d, r28	; 61
 37e:	df 91       	pop	r29
 380:	cf 91       	pop	r28
 382:	1f 91       	pop	r17
 384:	0f 91       	pop	r16
 386:	ff 90       	pop	r15
 388:	08 95       	ret

0000038a <JOYSTICK_get_direction>:


DirectionType JOYSTICK_get_direction(void)
{
 38a:	cf 93       	push	r28
 38c:	df 93       	push	r29
 38e:	cd b7       	in	r28, 0x3d	; 61
 390:	de b7       	in	r29, 0x3e	; 62
 392:	28 97       	sbiw	r28, 0x08	; 8
 394:	0f b6       	in	r0, 0x3f	; 63
 396:	f8 94       	cli
 398:	de bf       	out	0x3e, r29	; 62
 39a:	0f be       	out	0x3f, r0	; 63
 39c:	cd bf       	out	0x3d, r28	; 61
	struct positions pos = JOYSTICK_get_position();
 39e:	0e 94 90 01 	call	0x320	; 0x320 <JOYSTICK_get_position>
 3a2:	29 83       	std	Y+1, r18	; 0x01
 3a4:	3a 83       	std	Y+2, r19	; 0x02
 3a6:	4b 83       	std	Y+3, r20	; 0x03
 3a8:	5c 83       	std	Y+4, r21	; 0x04
 3aa:	29 81       	ldd	r18, Y+1	; 0x01
 3ac:	3a 81       	ldd	r19, Y+2	; 0x02
 3ae:	8b 81       	ldd	r24, Y+3	; 0x03
 3b0:	9c 81       	ldd	r25, Y+4	; 0x04
	int8_t THRESHOLD = 25;
	
	if (pos.y < THRESHOLD && pos.y > -THRESHOLD) {
 3b2:	ac 01       	movw	r20, r24
 3b4:	48 5e       	subi	r20, 0xE8	; 232
 3b6:	5f 4f       	sbci	r21, 0xFF	; 255
 3b8:	41 33       	cpi	r20, 0x31	; 49
 3ba:	51 05       	cpc	r21, r1
 3bc:	48 f4       	brcc	.+18     	; 0x3d0 <JOYSTICK_get_direction+0x46>
		
		if (pos.x < -THRESHOLD) {
 3be:	27 3e       	cpi	r18, 0xE7	; 231
 3c0:	8f ef       	ldi	r24, 0xFF	; 255
 3c2:	38 07       	cpc	r19, r24
 3c4:	94 f0       	brlt	.+36     	; 0x3ea <JOYSTICK_get_direction+0x60>
			return LEFT;
		} else if (pos.x > THRESHOLD) {
 3c6:	2a 31       	cpi	r18, 0x1A	; 26
 3c8:	31 05       	cpc	r19, r1
 3ca:	8c f4       	brge	.+34     	; 0x3ee <JOYSTICK_get_direction+0x64>
			return UP;
		}
		
	}
	
	return NEUTRAL;
 3cc:	80 e0       	ldi	r24, 0x00	; 0
 3ce:	16 c0       	rjmp	.+44     	; 0x3fc <JOYSTICK_get_direction+0x72>
			return LEFT;
		} else if (pos.x > THRESHOLD) {
			return RIGHT;
		}
		
	} else if (pos.x < THRESHOLD && pos.x > -THRESHOLD) {
 3d0:	28 5e       	subi	r18, 0xE8	; 232
 3d2:	3f 4f       	sbci	r19, 0xFF	; 255
 3d4:	21 33       	cpi	r18, 0x31	; 49
 3d6:	31 05       	cpc	r19, r1
 3d8:	60 f4       	brcc	.+24     	; 0x3f2 <JOYSTICK_get_direction+0x68>
		
		if (pos.y < -THRESHOLD) {
 3da:	87 3e       	cpi	r24, 0xE7	; 231
 3dc:	2f ef       	ldi	r18, 0xFF	; 255
 3de:	92 07       	cpc	r25, r18
 3e0:	54 f0       	brlt	.+20     	; 0x3f6 <JOYSTICK_get_direction+0x6c>
			return DOWN;
		} else if (pos.y > THRESHOLD) {
 3e2:	4a 97       	sbiw	r24, 0x1a	; 26
 3e4:	54 f4       	brge	.+20     	; 0x3fa <JOYSTICK_get_direction+0x70>
			return UP;
		}
		
	}
	
	return NEUTRAL;
 3e6:	80 e0       	ldi	r24, 0x00	; 0
 3e8:	09 c0       	rjmp	.+18     	; 0x3fc <JOYSTICK_get_direction+0x72>
	int8_t THRESHOLD = 25;
	
	if (pos.y < THRESHOLD && pos.y > -THRESHOLD) {
		
		if (pos.x < -THRESHOLD) {
			return LEFT;
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	07 c0       	rjmp	.+14     	; 0x3fc <JOYSTICK_get_direction+0x72>
		} else if (pos.x > THRESHOLD) {
			return RIGHT;
 3ee:	82 e0       	ldi	r24, 0x02	; 2
 3f0:	05 c0       	rjmp	.+10     	; 0x3fc <JOYSTICK_get_direction+0x72>
			return UP;
		}
		
	}
	
	return NEUTRAL;
 3f2:	80 e0       	ldi	r24, 0x00	; 0
 3f4:	03 c0       	rjmp	.+6      	; 0x3fc <JOYSTICK_get_direction+0x72>
		}
		
	} else if (pos.x < THRESHOLD && pos.x > -THRESHOLD) {
		
		if (pos.y < -THRESHOLD) {
			return DOWN;
 3f6:	84 e0       	ldi	r24, 0x04	; 4
 3f8:	01 c0       	rjmp	.+2      	; 0x3fc <JOYSTICK_get_direction+0x72>
		} else if (pos.y > THRESHOLD) {
			return UP;
 3fa:	83 e0       	ldi	r24, 0x03	; 3
		}
		
	}
	
	return NEUTRAL;
}
 3fc:	28 96       	adiw	r28, 0x08	; 8
 3fe:	0f b6       	in	r0, 0x3f	; 63
 400:	f8 94       	cli
 402:	de bf       	out	0x3e, r29	; 62
 404:	0f be       	out	0x3f, r0	; 63
 406:	cd bf       	out	0x3d, r28	; 61
 408:	df 91       	pop	r29
 40a:	cf 91       	pop	r28
 40c:	08 95       	ret

0000040e <JOYSTICK_read_button>:
	return pos;
}

uint8_t JOYSTICK_read_button(void)
{
	return (PINB & (1 << PB2)) == 0;
 40e:	86 b3       	in	r24, 0x16	; 22
 410:	82 fb       	bst	r24, 2
 412:	88 27       	eor	r24, r24
 414:	80 f9       	bld	r24, 0
 416:	91 e0       	ldi	r25, 0x01	; 1
 418:	89 27       	eor	r24, r25
 41a:	08 95       	ret

0000041c <main>:

void blink();


int main(void)
{
 41c:	cf 93       	push	r28
 41e:	df 93       	push	r29
 420:	cd b7       	in	r28, 0x3d	; 61
 422:	de b7       	in	r29, 0x3e	; 62
 424:	2b 97       	sbiw	r28, 0x0b	; 11
 426:	0f b6       	in	r0, 0x3f	; 63
 428:	f8 94       	cli
 42a:	de bf       	out	0x3e, r29	; 62
 42c:	0f be       	out	0x3f, r0	; 63
 42e:	cd bf       	out	0x3d, r28	; 61
	/* Needs to be set when using external memory */
	MCUCR |= (1 << SRE);
 430:	85 b7       	in	r24, 0x35	; 53
 432:	80 68       	ori	r24, 0x80	; 128
 434:	85 bf       	out	0x35, r24	; 53

	fdevopen(USART_transmit, USART_receive);
 436:	60 e5       	ldi	r22, 0x50	; 80
 438:	74 e0       	ldi	r23, 0x04	; 4
 43a:	8c e4       	ldi	r24, 0x4C	; 76
 43c:	94 e0       	ldi	r25, 0x04	; 4
 43e:	0e 94 4e 07 	call	0xe9c	; 0xe9c <fdevopen>
	USART_init(MYUBBR);
 442:	8f e1       	ldi	r24, 0x1F	; 31
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	0e 94 45 04 	call	0x88a	; 0x88a <USART_init>
	OLED_init();
 44a:	0e 94 23 03 	call	0x646	; 0x646 <OLED_init>
	JOYSTICK_init();
 44e:	0e 94 70 01 	call	0x2e0	; 0x2e0 <JOYSTICK_init>
	CAN_init();
 452:	0e 94 3a 01 	call	0x274	; 0x274 <CAN_init>
	
	OLED_reset();
 456:	0e 94 15 03 	call	0x62a	; 0x62a <OLED_reset>
	OLED_pos(2,20);
 45a:	64 e1       	ldi	r22, 0x14	; 20
 45c:	82 e0       	ldi	r24, 0x02	; 2
 45e:	0e 94 08 03 	call	0x610	; 0x610 <OLED_pos>
	
	menuNode *menu = OLED_generate_menu();
 462:	0e 94 b8 03 	call	0x770	; 0x770 <OLED_generate_menu>
	OLED_print_menu(menu);
 466:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <OLED_print_menu>
	DirectionType joydir = NEUTRAL;
	uint8_t buttonPressed = 0;
	
	/* MCP TEST */
	
	uint8_t status = MCP_read(MCP_CANCTRL);
 46a:	8f e0       	ldi	r24, 0x0F	; 15
 46c:	0e 94 8d 02 	call	0x51a	; 0x51a <MCP_read>
	//printf("CANCTRL: %02x\n", status);
	
	uint8_t RXB0CTRL = MCP_read(MCP_RXB0CTRL);
 470:	80 e6       	ldi	r24, 0x60	; 96
 472:	0e 94 8d 02 	call	0x51a	; 0x51a <MCP_read>
	//printf("RXB0CTRL: %02x\n", RXB0CTRL);
	
	printf("\n");
 476:	8a e0       	ldi	r24, 0x0A	; 10
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	0e 94 99 07 	call	0xf32	; 0xf32 <putchar>
	can_message_t joydata_received;
	
	uint8_t msg_arrived;
	can_message_t received_message;
	can_message_t can_message;
	can_message.data[0] = 0x01;
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	8c 83       	std	Y+4, r24	; 0x04
	can_message.data[1] = 0x02;
 482:	82 e0       	ldi	r24, 0x02	; 2
 484:	8d 83       	std	Y+5, r24	; 0x05
	can_message.data[2] = 0x03;
 486:	83 e0       	ldi	r24, 0x03	; 3
 488:	8e 83       	std	Y+6, r24	; 0x06
	can_message.data[3] = 0x04;
 48a:	84 e0       	ldi	r24, 0x04	; 4
 48c:	8f 83       	std	Y+7, r24	; 0x07
	can_message.data[4] = 0x05;
 48e:	85 e0       	ldi	r24, 0x05	; 5
 490:	88 87       	std	Y+8, r24	; 0x08
	can_message.data[5] = 0x06;
 492:	86 e0       	ldi	r24, 0x06	; 6
 494:	89 87       	std	Y+9, r24	; 0x09
	can_message.data[6] = 0x07;
 496:	87 e0       	ldi	r24, 0x07	; 7
 498:	8a 87       	std	Y+10, r24	; 0x0a
	can_message.data[7] = 0x08;
 49a:	88 e0       	ldi	r24, 0x08	; 8
 49c:	8b 87       	std	Y+11, r24	; 0x0b
	can_message.length = 8;
 49e:	8b 83       	std	Y+3, r24	; 0x03
	can_message.id = 2;
 4a0:	82 e0       	ldi	r24, 0x02	; 2
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	9a 83       	std	Y+2, r25	; 0x02
 4a6:	89 83       	std	Y+1, r24	; 0x01
	OLED_pos(2,20);
	
	menuNode *menu = OLED_generate_menu();
	OLED_print_menu(menu);
	
	uint8_t currentRow = 1;
 4a8:	11 e0       	ldi	r17, 0x01	; 1
				currentRow -= 1;
			}
			
		} else if (joydir == DOWN) {
			if (currentRow == 7) {
				currentRow = 1;
 4aa:	ee 24       	eor	r14, r14
 4ac:	e3 94       	inc	r14
		joydir = JOYSTICK_get_direction();
		
		lastRow = currentRow;
		if (joydir == UP) {
			if (currentRow == 1) {
				currentRow = 7;
 4ae:	0f 2e       	mov	r0, r31
 4b0:	f7 e0       	ldi	r31, 0x07	; 7
 4b2:	ff 2e       	mov	r15, r31
 4b4:	f0 2d       	mov	r31, r0
	can_message.length = 8;
	can_message.id = 2;
	
	while(1)
	{	
		CAN_message_send(&can_message);
 4b6:	ce 01       	movw	r24, r28
 4b8:	01 96       	adiw	r24, 0x01	; 1
 4ba:	0e 94 3d 01 	call	0x27a	; 0x27a <CAN_message_send>
 4be:	2f ef       	ldi	r18, 0xFF	; 255
 4c0:	8f e7       	ldi	r24, 0x7F	; 127
 4c2:	97 e0       	ldi	r25, 0x07	; 7
 4c4:	21 50       	subi	r18, 0x01	; 1
 4c6:	80 40       	sbci	r24, 0x00	; 0
 4c8:	90 40       	sbci	r25, 0x00	; 0
 4ca:	e1 f7       	brne	.-8      	; 0x4c4 <main+0xa8>
 4cc:	00 c0       	rjmp	.+0      	; 0x4ce <main+0xb2>
 4ce:	00 00       	nop
		
		/* CAN test end */
		_delay_ms(500);
		
		/* Create seperate function for this */
		joydir = JOYSTICK_get_direction();
 4d0:	0e 94 c5 01 	call	0x38a	; 0x38a <JOYSTICK_get_direction>
		
		lastRow = currentRow;
		if (joydir == UP) {
 4d4:	83 30       	cpi	r24, 0x03	; 3
 4d6:	29 f4       	brne	.+10     	; 0x4e2 <main+0xc6>
			if (currentRow == 1) {
 4d8:	11 30       	cpi	r17, 0x01	; 1
 4da:	51 f0       	breq	.+20     	; 0x4f0 <main+0xd4>
				currentRow = 7;
			} else {
				currentRow -= 1;
 4dc:	0f ef       	ldi	r16, 0xFF	; 255
 4de:	01 0f       	add	r16, r17
 4e0:	0c c0       	rjmp	.+24     	; 0x4fa <main+0xde>
			}
			
		} else if (joydir == DOWN) {
 4e2:	84 30       	cpi	r24, 0x04	; 4
 4e4:	39 f4       	brne	.+14     	; 0x4f4 <main+0xd8>
			if (currentRow == 7) {
 4e6:	17 30       	cpi	r17, 0x07	; 7
 4e8:	39 f0       	breq	.+14     	; 0x4f8 <main+0xdc>
				currentRow = 1;
			} else {
				currentRow += 1;
 4ea:	01 e0       	ldi	r16, 0x01	; 1
 4ec:	01 0f       	add	r16, r17
 4ee:	05 c0       	rjmp	.+10     	; 0x4fa <main+0xde>
		joydir = JOYSTICK_get_direction();
		
		lastRow = currentRow;
		if (joydir == UP) {
			if (currentRow == 1) {
				currentRow = 7;
 4f0:	0f 2d       	mov	r16, r15
 4f2:	03 c0       	rjmp	.+6      	; 0x4fa <main+0xde>
 4f4:	01 2f       	mov	r16, r17
 4f6:	01 c0       	rjmp	.+2      	; 0x4fa <main+0xde>
				currentRow -= 1;
			}
			
		} else if (joydir == DOWN) {
			if (currentRow == 7) {
				currentRow = 1;
 4f8:	0e 2d       	mov	r16, r14
			} else {
				currentRow += 1;
			}
		}
		
		OLED_move_arrow(currentRow, 20, lastRow, 20);
 4fa:	24 e1       	ldi	r18, 0x14	; 20
 4fc:	41 2f       	mov	r20, r17
 4fe:	64 e1       	ldi	r22, 0x14	; 20
 500:	80 2f       	mov	r24, r16
 502:	0e 94 93 03 	call	0x726	; 0x726 <OLED_move_arrow>
		buttonPressed = JOYSTICK_read_button();
 506:	0e 94 07 02 	call	0x40e	; 0x40e <JOYSTICK_read_button>
 50a:	10 2f       	mov	r17, r16
 50c:	d4 cf       	rjmp	.-88     	; 0x4b6 <main+0x9a>

0000050e <MCP_reset>:
	MCP_set_mode(MODE_NORMAL); // Sets normal operation mode
}

void MCP_reset(void)
{
	PORTB &= ~(1 << PB4);
 50e:	c4 98       	cbi	0x18, 4	; 24
	SPI_master_transmit(MCP_RESET);
 510:	80 ec       	ldi	r24, 0xC0	; 192
 512:	0e 94 41 04 	call	0x882	; 0x882 <SPI_master_transmit>
	PORTB |= (1 << PB4);
 516:	c4 9a       	sbi	0x18, 4	; 24
 518:	08 95       	ret

0000051a <MCP_read>:
}

/* Returns the content of a register */
uint8_t MCP_read(uint8_t addr)
{
 51a:	cf 93       	push	r28
 51c:	c8 2f       	mov	r28, r24
	PORTB &= ~(1 << PB4);
 51e:	c4 98       	cbi	0x18, 4	; 24
	SPI_master_transmit(MCP_READ);
 520:	83 e0       	ldi	r24, 0x03	; 3
 522:	0e 94 41 04 	call	0x882	; 0x882 <SPI_master_transmit>
	SPI_master_transmit(addr);
 526:	8c 2f       	mov	r24, r28
 528:	0e 94 41 04 	call	0x882	; 0x882 <SPI_master_transmit>
	SPI_master_transmit(0x00);
 52c:	80 e0       	ldi	r24, 0x00	; 0
 52e:	0e 94 41 04 	call	0x882	; 0x882 <SPI_master_transmit>
	char data = SPDR;
 532:	8f b1       	in	r24, 0x0f	; 15
	PORTB |= (1 << PB4);
 534:	c4 9a       	sbi	0x18, 4	; 24
	return data;
}
 536:	cf 91       	pop	r28
 538:	08 95       	ret

0000053a <MCP_write>:

void MCP_write(uint8_t addr, uint8_t data)
{
 53a:	cf 93       	push	r28
 53c:	df 93       	push	r29
 53e:	d8 2f       	mov	r29, r24
 540:	c6 2f       	mov	r28, r22
	PORTB &= ~(1 << PB4);
 542:	c4 98       	cbi	0x18, 4	; 24
	SPI_master_transmit(MCP_WRITE);
 544:	82 e0       	ldi	r24, 0x02	; 2
 546:	0e 94 41 04 	call	0x882	; 0x882 <SPI_master_transmit>
	SPI_master_transmit(addr);
 54a:	8d 2f       	mov	r24, r29
 54c:	0e 94 41 04 	call	0x882	; 0x882 <SPI_master_transmit>
	SPI_master_transmit(data);
 550:	8c 2f       	mov	r24, r28
 552:	0e 94 41 04 	call	0x882	; 0x882 <SPI_master_transmit>
	PORTB |= (1 << PB4);
 556:	c4 9a       	sbi	0x18, 4	; 24
}
 558:	df 91       	pop	r29
 55a:	cf 91       	pop	r28
 55c:	08 95       	ret

0000055e <MCP_request_to_send>:
}

/* Instructs controller to begin message transmission for the selected buffers */
void MCP_request_to_send(uint8_t buffer)
{
	PORTB &= ~(1 << PB4);
 55e:	c4 98       	cbi	0x18, 4	; 24
	SPI_master_transmit(buffer);
 560:	0e 94 41 04 	call	0x882	; 0x882 <SPI_master_transmit>
	PORTB |= (1 << PB4);
 564:	c4 9a       	sbi	0x18, 4	; 24
 566:	08 95       	ret

00000568 <MCP_read_status>:
}

/* Returns some status bits for transmit and receive functions */
uint8_t MCP_read_status(void)
{
	PORTB &= ~(1 << PB4);
 568:	c4 98       	cbi	0x18, 4	; 24
	SPI_master_transmit(MCP_READ_STATUS);
 56a:	80 ea       	ldi	r24, 0xA0	; 160
 56c:	0e 94 41 04 	call	0x882	; 0x882 <SPI_master_transmit>
	SPI_master_transmit(0x00); // Unneccessary because of "repeat data out"?
 570:	80 e0       	ldi	r24, 0x00	; 0
 572:	0e 94 41 04 	call	0x882	; 0x882 <SPI_master_transmit>
	char status = SPDR;
 576:	8f b1       	in	r24, 0x0f	; 15
	PORTB |= (1 << PB4);
 578:	c4 9a       	sbi	0x18, 4	; 24
	return status;
}
 57a:	08 95       	ret

0000057c <MCP_modify_bit>:
	MCP_modify_bit(MCP_CANCTRL, mask, mode);
}

/* Changes the value of the register bits specified by the mask */
void MCP_modify_bit(uint8_t addr, uint8_t mask, uint8_t data)
{
 57c:	1f 93       	push	r17
 57e:	cf 93       	push	r28
 580:	df 93       	push	r29
 582:	18 2f       	mov	r17, r24
 584:	d6 2f       	mov	r29, r22
 586:	c4 2f       	mov	r28, r20
	PORTB &= ~(1 << PB4);
 588:	c4 98       	cbi	0x18, 4	; 24
	SPI_master_transmit(MCP_BITMOD);
 58a:	85 e0       	ldi	r24, 0x05	; 5
 58c:	0e 94 41 04 	call	0x882	; 0x882 <SPI_master_transmit>
	SPI_master_transmit(addr);
 590:	81 2f       	mov	r24, r17
 592:	0e 94 41 04 	call	0x882	; 0x882 <SPI_master_transmit>
	SPI_master_transmit(mask);
 596:	8d 2f       	mov	r24, r29
 598:	0e 94 41 04 	call	0x882	; 0x882 <SPI_master_transmit>
	SPI_master_transmit(data);
 59c:	8c 2f       	mov	r24, r28
 59e:	0e 94 41 04 	call	0x882	; 0x882 <SPI_master_transmit>
	PORTB |= (1 << PB4);
 5a2:	c4 9a       	sbi	0x18, 4	; 24
 5a4:	df 91       	pop	r29
 5a6:	cf 91       	pop	r28
 5a8:	1f 91       	pop	r17
 5aa:	08 95       	ret

000005ac <MCP_set_mode>:
			break;
		default:
			break;
	}
	
	MCP_modify_bit(MCP_CANCTRL, mask, mode);
 5ac:	48 2f       	mov	r20, r24
 5ae:	60 ee       	ldi	r22, 0xE0	; 224
 5b0:	8f e0       	ldi	r24, 0x0F	; 15
 5b2:	0e 94 be 02 	call	0x57c	; 0x57c <MCP_modify_bit>
 5b6:	08 95       	ret

000005b8 <MCP_init>:
#include "MCP2515.h"
#include "mcp.h"

void MCP_init(void)
{
	SPI_master_init();
 5b8:	0e 94 3c 04 	call	0x878	; 0x878 <SPI_master_init>
	MCP_reset();
 5bc:	0e 94 87 02 	call	0x50e	; 0x50e <MCP_reset>
	
	MCP_modify_bit(MCP_RXB0CTRL, 0b01100000, 0xFF); // Turns masks/filters off for RX0
 5c0:	4f ef       	ldi	r20, 0xFF	; 255
 5c2:	60 e6       	ldi	r22, 0x60	; 96
 5c4:	80 e6       	ldi	r24, 0x60	; 96
 5c6:	0e 94 be 02 	call	0x57c	; 0x57c <MCP_modify_bit>
	MCP_modify_bit(MCP_RXB1CTRL, 0b01100000, 0xFF); // Turns masks/filters off for RX1
 5ca:	4f ef       	ldi	r20, 0xFF	; 255
 5cc:	60 e6       	ldi	r22, 0x60	; 96
 5ce:	80 e7       	ldi	r24, 0x70	; 112
 5d0:	0e 94 be 02 	call	0x57c	; 0x57c <MCP_modify_bit>
	//MCP_set_mode(MODE_LOOPBACK); // Sets loopback operation mode for testing
	MCP_set_mode(MODE_NORMAL); // Sets normal operation mode
 5d4:	80 e0       	ldi	r24, 0x00	; 0
 5d6:	0e 94 d6 02 	call	0x5ac	; 0x5ac <MCP_set_mode>
 5da:	08 95       	ret

000005dc <OLED_goto_line>:
}

void OLED_write_c(char chr)
{
	volatile char *oled = (char *) 0x1000;
	oled[0] = chr;
 5dc:	e0 e0       	ldi	r30, 0x00	; 0
 5de:	f0 e1       	ldi	r31, 0x10	; 16
 5e0:	92 e2       	ldi	r25, 0x22	; 34
 5e2:	90 83       	st	Z, r25
 5e4:	80 83       	st	Z, r24
 5e6:	87 e0       	ldi	r24, 0x07	; 7
 5e8:	80 83       	st	Z, r24
 5ea:	08 95       	ret

000005ec <OLED_clear_line>:
	OLED_write_c(0x07);
}

void OLED_clear_line(uint8_t line)
{
	OLED_goto_line(line);
 5ec:	0e 94 ee 02 	call	0x5dc	; 0x5dc <OLED_goto_line>
}

void OLED_write_c(char chr)
{
	volatile char *oled = (char *) 0x1000;
	oled[0] = chr;
 5f0:	e0 e0       	ldi	r30, 0x00	; 0
 5f2:	f0 e1       	ldi	r31, 0x10	; 16
 5f4:	81 e2       	ldi	r24, 0x21	; 33
 5f6:	80 83       	st	Z, r24
 5f8:	10 82       	st	Z, r1
 5fa:	8f e7       	ldi	r24, 0x7F	; 127
 5fc:	80 83       	st	Z, r24
 5fe:	80 e8       	ldi	r24, 0x80	; 128
 600:	90 e0       	ldi	r25, 0x00	; 0
}

void OLED_write_d(char chr)
{
	volatile char *oled = (char *) 0x1200;
	oled[0] = chr;
 602:	e0 e0       	ldi	r30, 0x00	; 0
 604:	f2 e1       	ldi	r31, 0x12	; 18
 606:	10 82       	st	Z, r1
 608:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_c(0x21);
	OLED_write_c(0x00);
	OLED_write_c(0x7F);

	/* Write zeros to line */
	for (int i = 0; i < 128; i++) {
 60a:	00 97       	sbiw	r24, 0x00	; 0
 60c:	e1 f7       	brne	.-8      	; 0x606 <OLED_clear_line+0x1a>
		OLED_write_d(0x00);
	}
}
 60e:	08 95       	ret

00000610 <OLED_pos>:
}

void OLED_write_c(char chr)
{
	volatile char *oled = (char *) 0x1000;
	oled[0] = chr;
 610:	e0 e0       	ldi	r30, 0x00	; 0
 612:	f0 e1       	ldi	r31, 0x10	; 16
 614:	92 e2       	ldi	r25, 0x22	; 34
 616:	90 83       	st	Z, r25
 618:	80 83       	st	Z, r24
 61a:	87 e0       	ldi	r24, 0x07	; 7
 61c:	80 83       	st	Z, r24
 61e:	81 e2       	ldi	r24, 0x21	; 33
 620:	80 83       	st	Z, r24
 622:	60 83       	st	Z, r22
 624:	8f e7       	ldi	r24, 0x7F	; 127
 626:	80 83       	st	Z, r24
 628:	08 95       	ret

0000062a <OLED_reset>:
	OLED_write_c(column);
	OLED_write_c(0x7F);
}

void OLED_reset(void)
{
 62a:	cf 93       	push	r28
	for (uint8_t i = 0; i < 8; i++) {
 62c:	c0 e0       	ldi	r28, 0x00	; 0
		OLED_clear_line(i);
 62e:	8c 2f       	mov	r24, r28
 630:	0e 94 f6 02 	call	0x5ec	; 0x5ec <OLED_clear_line>
	OLED_write_c(0x7F);
}

void OLED_reset(void)
{
	for (uint8_t i = 0; i < 8; i++) {
 634:	cf 5f       	subi	r28, 0xFF	; 255
 636:	c8 30       	cpi	r28, 0x08	; 8
 638:	d1 f7       	brne	.-12     	; 0x62e <OLED_reset+0x4>
		OLED_clear_line(i);
	}
	OLED_pos(0,0);
 63a:	60 e0       	ldi	r22, 0x00	; 0
 63c:	80 e0       	ldi	r24, 0x00	; 0
 63e:	0e 94 08 03 	call	0x610	; 0x610 <OLED_pos>

	// Redraw from SRAM?
}
 642:	cf 91       	pop	r28
 644:	08 95       	ret

00000646 <OLED_init>:
}

void OLED_write_c(char chr)
{
	volatile char *oled = (char *) 0x1000;
	oled[0] = chr;
 646:	e0 e0       	ldi	r30, 0x00	; 0
 648:	f0 e1       	ldi	r31, 0x10	; 16
 64a:	8e ea       	ldi	r24, 0xAE	; 174
 64c:	80 83       	st	Z, r24
 64e:	81 ea       	ldi	r24, 0xA1	; 161
 650:	80 83       	st	Z, r24
 652:	8a ed       	ldi	r24, 0xDA	; 218
 654:	80 83       	st	Z, r24
 656:	82 e1       	ldi	r24, 0x12	; 18
 658:	80 83       	st	Z, r24
 65a:	88 ec       	ldi	r24, 0xC8	; 200
 65c:	80 83       	st	Z, r24
 65e:	88 ea       	ldi	r24, 0xA8	; 168
 660:	80 83       	st	Z, r24
 662:	8f e3       	ldi	r24, 0x3F	; 63
 664:	80 83       	st	Z, r24
 666:	85 ed       	ldi	r24, 0xD5	; 213
 668:	80 83       	st	Z, r24
 66a:	80 e8       	ldi	r24, 0x80	; 128
 66c:	80 83       	st	Z, r24
 66e:	81 e8       	ldi	r24, 0x81	; 129
 670:	80 83       	st	Z, r24
 672:	80 e5       	ldi	r24, 0x50	; 80
 674:	80 83       	st	Z, r24
 676:	89 ed       	ldi	r24, 0xD9	; 217
 678:	80 83       	st	Z, r24
 67a:	81 e2       	ldi	r24, 0x21	; 33
 67c:	80 83       	st	Z, r24
 67e:	80 e2       	ldi	r24, 0x20	; 32
 680:	80 83       	st	Z, r24
 682:	10 82       	st	Z, r1
 684:	8b ed       	ldi	r24, 0xDB	; 219
 686:	80 83       	st	Z, r24
 688:	80 e3       	ldi	r24, 0x30	; 48
 68a:	80 83       	st	Z, r24
 68c:	8d ea       	ldi	r24, 0xAD	; 173
 68e:	80 83       	st	Z, r24
 690:	10 82       	st	Z, r1
 692:	84 ea       	ldi	r24, 0xA4	; 164
 694:	80 83       	st	Z, r24
 696:	86 ea       	ldi	r24, 0xA6	; 166
 698:	80 83       	st	Z, r24
 69a:	8f ea       	ldi	r24, 0xAF	; 175
 69c:	80 83       	st	Z, r24
 69e:	80 e0       	ldi	r24, 0x00	; 0
 6a0:	92 e0       	ldi	r25, 0x02	; 2
}

void OLED_write_d(char chr)
{
	volatile char *oled = (char *) 0x1200;
	oled[0] = chr;
 6a2:	e0 e0       	ldi	r30, 0x00	; 0
 6a4:	f2 e1       	ldi	r31, 0x12	; 18
 6a6:	2f ef       	ldi	r18, 0xFF	; 255
 6a8:	20 83       	st	Z, r18
 6aa:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_c(0x00);
	OLED_write_c(0xa4); //out follows RAM content
	OLED_write_c(0xa6); //set normal display
	OLED_write_c(0xaf); // display on
	
	for (int i = 0; i < 512; i++)
 6ac:	00 97       	sbiw	r24, 0x00	; 0
 6ae:	e1 f7       	brne	.-8      	; 0x6a8 <OLED_init+0x62>
	{
		OLED_write_d(0xFF);
	}
	
	OLED_reset();
 6b0:	0e 94 15 03 	call	0x62a	; 0x62a <OLED_reset>
 6b4:	08 95       	ret

000006b6 <OLED_print_string>:

	// Redraw from SRAM?
}

void OLED_print_string(char* str)
{
 6b6:	cf 93       	push	r28
 6b8:	df 93       	push	r29
	uint8_t c;
	uint8_t font_width = 4; // Use sizeof array here
	uint8_t i = 0;
	while (str[i] != '\0') {
 6ba:	fc 01       	movw	r30, r24
 6bc:	20 81       	ld	r18, Z
 6be:	22 23       	and	r18, r18
 6c0:	11 f1       	breq	.+68     	; 0x706 <OLED_print_string+0x50>
 6c2:	dc 01       	movw	r26, r24

void OLED_print_string(char* str)
{
	uint8_t c;
	uint8_t font_width = 4; // Use sizeof array here
	uint8_t i = 0;
 6c4:	40 e0       	ldi	r20, 0x00	; 0

	// Redraw from SRAM?
}

void OLED_print_string(char* str)
{
 6c6:	60 e0       	ldi	r22, 0x00	; 0
 6c8:	50 e0       	ldi	r21, 0x00	; 0
}

void OLED_write_d(char chr)
{
	volatile char *oled = (char *) 0x1200;
	oled[0] = chr;
 6ca:	c0 e0       	ldi	r28, 0x00	; 0
 6cc:	d2 e1       	ldi	r29, 0x12	; 18
 6ce:	18 c0       	rjmp	.+48     	; 0x700 <OLED_print_string+0x4a>
	uint8_t c;
	uint8_t font_width = 4; // Use sizeof array here
	uint8_t i = 0;
	while (str[i] != '\0') {
		for (uint8_t j = 0; j < font_width; j++) {
			c = pgm_read_byte_near(font[str[i]-32] + j);
 6d0:	ec 91       	ld	r30, X
 6d2:	f0 e0       	ldi	r31, 0x00	; 0
 6d4:	ee 0f       	add	r30, r30
 6d6:	ff 1f       	adc	r31, r31
 6d8:	ee 0f       	add	r30, r30
 6da:	ff 1f       	adc	r31, r31
 6dc:	e0 51       	subi	r30, 0x10	; 16
 6de:	f0 40       	sbci	r31, 0x00	; 0
 6e0:	e2 0f       	add	r30, r18
 6e2:	f3 1f       	adc	r31, r19
 6e4:	e4 91       	lpm	r30, Z
}

void OLED_write_d(char chr)
{
	volatile char *oled = (char *) 0x1200;
	oled[0] = chr;
 6e6:	e8 83       	st	Y, r30
 6e8:	2f 5f       	subi	r18, 0xFF	; 255
 6ea:	3f 4f       	sbci	r19, 0xFF	; 255
{
	uint8_t c;
	uint8_t font_width = 4; // Use sizeof array here
	uint8_t i = 0;
	while (str[i] != '\0') {
		for (uint8_t j = 0; j < font_width; j++) {
 6ec:	24 30       	cpi	r18, 0x04	; 4
 6ee:	31 05       	cpc	r19, r1
 6f0:	79 f7       	brne	.-34     	; 0x6d0 <OLED_print_string+0x1a>
			c = pgm_read_byte_near(font[str[i]-32] + j);
			OLED_write_d(c);
		}
		i++;
 6f2:	4f 5f       	subi	r20, 0xFF	; 255
void OLED_print_string(char* str)
{
	uint8_t c;
	uint8_t font_width = 4; // Use sizeof array here
	uint8_t i = 0;
	while (str[i] != '\0') {
 6f4:	dc 01       	movw	r26, r24
 6f6:	a4 0f       	add	r26, r20
 6f8:	b1 1d       	adc	r27, r1
 6fa:	2c 91       	ld	r18, X
 6fc:	22 23       	and	r18, r18
 6fe:	19 f0       	breq	.+6      	; 0x706 <OLED_print_string+0x50>

	// Redraw from SRAM?
}

void OLED_print_string(char* str)
{
 700:	26 2f       	mov	r18, r22
 702:	35 2f       	mov	r19, r21
 704:	e5 cf       	rjmp	.-54     	; 0x6d0 <OLED_print_string+0x1a>
			c = pgm_read_byte_near(font[str[i]-32] + j);
			OLED_write_d(c);
		}
		i++;
	}
}
 706:	df 91       	pop	r29
 708:	cf 91       	pop	r28
 70a:	08 95       	ret

0000070c <OLED_print_arrow>:

void OLED_print_arrow(uint8_t row, uint8_t col)
{
	OLED_pos(row, col);
 70c:	0e 94 08 03 	call	0x610	; 0x610 <OLED_pos>
}

void OLED_write_d(char chr)
{
	volatile char *oled = (char *) 0x1200;
	oled[0] = chr;
 710:	e0 e0       	ldi	r30, 0x00	; 0
 712:	f2 e1       	ldi	r31, 0x12	; 18
 714:	88 e1       	ldi	r24, 0x18	; 24
 716:	80 83       	st	Z, r24
 718:	80 83       	st	Z, r24
 71a:	9e e7       	ldi	r25, 0x7E	; 126
 71c:	90 83       	st	Z, r25
 71e:	9c e3       	ldi	r25, 0x3C	; 60
 720:	90 83       	st	Z, r25
 722:	80 83       	st	Z, r24
 724:	08 95       	ret

00000726 <OLED_move_arrow>:
	OLED_write_d(0b00111100);
	OLED_write_d(0b00011000);
}

void OLED_move_arrow(uint8_t newRow, uint8_t newCol, uint8_t currentRow, uint8_t currentCol)
{
 726:	cf 93       	push	r28
 728:	df 93       	push	r29
 72a:	c8 2f       	mov	r28, r24
 72c:	d6 2f       	mov	r29, r22
 72e:	84 2f       	mov	r24, r20
	OLED_pos(currentRow, currentCol);
 730:	62 2f       	mov	r22, r18
 732:	0e 94 08 03 	call	0x610	; 0x610 <OLED_pos>
}

void OLED_write_d(char chr)
{
	volatile char *oled = (char *) 0x1200;
	oled[0] = chr;
 736:	e0 e0       	ldi	r30, 0x00	; 0
 738:	f2 e1       	ldi	r31, 0x12	; 18
 73a:	10 82       	st	Z, r1
 73c:	10 82       	st	Z, r1
 73e:	10 82       	st	Z, r1
 740:	10 82       	st	Z, r1
 742:	10 82       	st	Z, r1
	OLED_write_d(0b00000000);
	OLED_write_d(0b00000000);
	OLED_write_d(0b00000000);
	OLED_write_d(0b00000000);
	
	OLED_print_arrow(newRow, newCol);
 744:	6d 2f       	mov	r22, r29
 746:	8c 2f       	mov	r24, r28
 748:	0e 94 86 03 	call	0x70c	; 0x70c <OLED_print_arrow>
}
 74c:	df 91       	pop	r29
 74e:	cf 91       	pop	r28
 750:	08 95       	ret

00000752 <OLED_create_node>:


menuNode *OLED_create_node(char* name, menuNode* parent)
{
 752:	cf 93       	push	r28
 754:	df 93       	push	r29
 756:	ec 01       	movw	r28, r24
	menuNode* ret = (menuNode*) malloc(sizeof(menuNode));
 758:	84 e1       	ldi	r24, 0x14	; 20
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	0e 94 27 06 	call	0xc4e	; 0xc4e <malloc>
	ret->name = name;
 760:	fc 01       	movw	r30, r24
 762:	d1 83       	std	Z+1, r29	; 0x01
 764:	c0 83       	st	Z, r28
	ret->parent = NULL;
 766:	13 82       	std	Z+3, r1	; 0x03
 768:	12 82       	std	Z+2, r1	; 0x02
	return ret;
}
 76a:	df 91       	pop	r29
 76c:	cf 91       	pop	r28
 76e:	08 95       	ret

00000770 <OLED_generate_menu>:

// Implement function for freeing memory

menuNode *OLED_generate_menu(void)
{	
 770:	af 92       	push	r10
 772:	bf 92       	push	r11
 774:	cf 92       	push	r12
 776:	df 92       	push	r13
 778:	ef 92       	push	r14
 77a:	ff 92       	push	r15
 77c:	0f 93       	push	r16
 77e:	1f 93       	push	r17
 780:	cf 93       	push	r28
 782:	df 93       	push	r29
	menuNode *mainmenu = OLED_create_node("MAIN MENU", NULL);
 784:	60 e0       	ldi	r22, 0x00	; 0
 786:	70 e0       	ldi	r23, 0x00	; 0
 788:	86 e0       	ldi	r24, 0x06	; 6
 78a:	91 e0       	ldi	r25, 0x01	; 1
 78c:	0e 94 a9 03 	call	0x752	; 0x752 <OLED_create_node>
 790:	ec 01       	movw	r28, r24
	menuNode *highscores = OLED_create_node("Highscores", mainmenu);
 792:	bc 01       	movw	r22, r24
 794:	80 e1       	ldi	r24, 0x10	; 16
 796:	91 e0       	ldi	r25, 0x01	; 1
 798:	0e 94 a9 03 	call	0x752	; 0x752 <OLED_create_node>
 79c:	6c 01       	movw	r12, r24
	menuNode *playgame = OLED_create_node("Start new game", mainmenu);
 79e:	be 01       	movw	r22, r28
 7a0:	8b e1       	ldi	r24, 0x1B	; 27
 7a2:	91 e0       	ldi	r25, 0x01	; 1
 7a4:	0e 94 a9 03 	call	0x752	; 0x752 <OLED_create_node>
 7a8:	5c 01       	movw	r10, r24
	menuNode *debugging = OLED_create_node("Debugging", mainmenu);
 7aa:	be 01       	movw	r22, r28
 7ac:	8a e2       	ldi	r24, 0x2A	; 42
 7ae:	91 e0       	ldi	r25, 0x01	; 1
 7b0:	0e 94 a9 03 	call	0x752	; 0x752 <OLED_create_node>
 7b4:	8c 01       	movw	r16, r24
	menuNode *calibrate = OLED_create_node("Calibrate", mainmenu);
 7b6:	be 01       	movw	r22, r28
 7b8:	84 e3       	ldi	r24, 0x34	; 52
 7ba:	91 e0       	ldi	r25, 0x01	; 1
 7bc:	0e 94 a9 03 	call	0x752	; 0x752 <OLED_create_node>
 7c0:	7c 01       	movw	r14, r24
	menuNode *difficulty = OLED_create_node("Difficulty", mainmenu);
 7c2:	be 01       	movw	r22, r28
 7c4:	8e e3       	ldi	r24, 0x3E	; 62
 7c6:	91 e0       	ldi	r25, 0x01	; 1
 7c8:	0e 94 a9 03 	call	0x752	; 0x752 <OLED_create_node>
	calibrate->parent = mainmenu;
	difficulty->parent = mainmenu;
	debugging->parent = mainmenu;
	*/
	
	mainmenu->children[1] = playgame;
 7cc:	bf 82       	std	Y+7, r11	; 0x07
 7ce:	ae 82       	std	Y+6, r10	; 0x06
	mainmenu->children[2] = highscores;
 7d0:	d9 86       	std	Y+9, r13	; 0x09
 7d2:	c8 86       	std	Y+8, r12	; 0x08
	mainmenu->children[3] = difficulty;
 7d4:	9b 87       	std	Y+11, r25	; 0x0b
 7d6:	8a 87       	std	Y+10, r24	; 0x0a
	mainmenu->children[4] = calibrate;
 7d8:	fd 86       	std	Y+13, r15	; 0x0d
 7da:	ec 86       	std	Y+12, r14	; 0x0c
	mainmenu->children[5] = debugging;
 7dc:	1f 87       	std	Y+15, r17	; 0x0f
 7de:	0e 87       	std	Y+14, r16	; 0x0e
	
	return mainmenu;
}
 7e0:	ce 01       	movw	r24, r28
 7e2:	df 91       	pop	r29
 7e4:	cf 91       	pop	r28
 7e6:	1f 91       	pop	r17
 7e8:	0f 91       	pop	r16
 7ea:	ff 90       	pop	r15
 7ec:	ef 90       	pop	r14
 7ee:	df 90       	pop	r13
 7f0:	cf 90       	pop	r12
 7f2:	bf 90       	pop	r11
 7f4:	af 90       	pop	r10
 7f6:	08 95       	ret

000007f8 <OLED_print_menu>:

void OLED_print_menu(menuNode *node)
{
 7f8:	cf 93       	push	r28
 7fa:	df 93       	push	r29
 7fc:	ec 01       	movw	r28, r24
	OLED_pos(0,50);
 7fe:	62 e3       	ldi	r22, 0x32	; 50
 800:	80 e0       	ldi	r24, 0x00	; 0
 802:	0e 94 08 03 	call	0x610	; 0x610 <OLED_pos>
	OLED_print_string(node->name);
 806:	88 81       	ld	r24, Y
 808:	99 81       	ldd	r25, Y+1	; 0x01
 80a:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <OLED_print_string>
	//printf("%s\n", node->name);
	OLED_pos(1,50);
 80e:	62 e3       	ldi	r22, 0x32	; 50
 810:	81 e0       	ldi	r24, 0x01	; 1
 812:	0e 94 08 03 	call	0x610	; 0x610 <OLED_pos>
	OLED_print_string(node->children[1]->name);
 816:	ee 81       	ldd	r30, Y+6	; 0x06
 818:	ff 81       	ldd	r31, Y+7	; 0x07
 81a:	80 81       	ld	r24, Z
 81c:	91 81       	ldd	r25, Z+1	; 0x01
 81e:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <OLED_print_string>
	OLED_pos(2,50);
 822:	62 e3       	ldi	r22, 0x32	; 50
 824:	82 e0       	ldi	r24, 0x02	; 2
 826:	0e 94 08 03 	call	0x610	; 0x610 <OLED_pos>
	OLED_print_string(node->children[2]->name);
 82a:	e8 85       	ldd	r30, Y+8	; 0x08
 82c:	f9 85       	ldd	r31, Y+9	; 0x09
 82e:	80 81       	ld	r24, Z
 830:	91 81       	ldd	r25, Z+1	; 0x01
 832:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <OLED_print_string>
	OLED_pos(3,50);
 836:	62 e3       	ldi	r22, 0x32	; 50
 838:	83 e0       	ldi	r24, 0x03	; 3
 83a:	0e 94 08 03 	call	0x610	; 0x610 <OLED_pos>
	OLED_print_string(node->children[3]->name);
 83e:	ea 85       	ldd	r30, Y+10	; 0x0a
 840:	fb 85       	ldd	r31, Y+11	; 0x0b
 842:	80 81       	ld	r24, Z
 844:	91 81       	ldd	r25, Z+1	; 0x01
 846:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <OLED_print_string>
	OLED_pos(4,50);
 84a:	62 e3       	ldi	r22, 0x32	; 50
 84c:	84 e0       	ldi	r24, 0x04	; 4
 84e:	0e 94 08 03 	call	0x610	; 0x610 <OLED_pos>
	OLED_print_string(node->children[4]->name);
 852:	ec 85       	ldd	r30, Y+12	; 0x0c
 854:	fd 85       	ldd	r31, Y+13	; 0x0d
 856:	80 81       	ld	r24, Z
 858:	91 81       	ldd	r25, Z+1	; 0x01
 85a:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <OLED_print_string>
	OLED_pos(5,50);
 85e:	62 e3       	ldi	r22, 0x32	; 50
 860:	85 e0       	ldi	r24, 0x05	; 5
 862:	0e 94 08 03 	call	0x610	; 0x610 <OLED_pos>
	OLED_print_string(node->children[5]->name);
 866:	ee 85       	ldd	r30, Y+14	; 0x0e
 868:	ff 85       	ldd	r31, Y+15	; 0x0f
 86a:	80 81       	ld	r24, Z
 86c:	91 81       	ldd	r25, Z+1	; 0x01
 86e:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <OLED_print_string>
 872:	df 91       	pop	r29
 874:	cf 91       	pop	r28
 876:	08 95       	ret

00000878 <SPI_master_init>:
#include <avr/delay.h>

void SPI_master_init(void)
{
	/* Set ~SS, MOSI and SCK output, all others input */
	DDRB = (1 << PB4)|(1 << PB5)|(1 << PB7);
 878:	80 eb       	ldi	r24, 0xB0	; 176
 87a:	87 bb       	out	0x17, r24	; 23
	
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1 << SPE)|(1 << MSTR)|(1 << SPR0);
 87c:	81 e5       	ldi	r24, 0x51	; 81
 87e:	8d b9       	out	0x0d, r24	; 13
 880:	08 95       	ret

00000882 <SPI_master_transmit>:
}

void SPI_master_transmit(uint8_t cData)
{
	/* Start transmission */
	SPDR = cData;
 882:	8f b9       	out	0x0f, r24	; 15
	
	/* Wait for transmission to complete */
	while (!(SPSR & (1 << SPIF))) {
 884:	77 9b       	sbis	0x0e, 7	; 14
 886:	fe cf       	rjmp	.-4      	; 0x884 <SPI_master_transmit+0x2>
		;
	}
}
 888:	08 95       	ret

0000088a <USART_init>:
#include <avr/io.h>

void USART_init(unsigned int ubrr)
{
	/* Set baud rate*/
	UBRR0H = (unsigned char)(ubrr >> 8 );
 88a:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
 88c:	89 b9       	out	0x09, r24	; 9
	/*Enable receiver and transmitter*/
	UCSR0B = (1 << RXEN0)|(1 << TXEN0);
 88e:	88 e1       	ldi	r24, 0x18	; 24
 890:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1 << URSEL0)|(1 << USBS0)|(3 << UCSZ10);
 892:	8e e8       	ldi	r24, 0x8E	; 142
 894:	80 bd       	out	0x20, r24	; 32
 896:	08 95       	ret

00000898 <USART_transmit>:
}

void USART_transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while (!( UCSR0A & (1 << UDRE0)))
 898:	5d 9b       	sbis	0x0b, 5	; 11
 89a:	fe cf       	rjmp	.-4      	; 0x898 <USART_transmit>
		;
	/* Put data into buffer, sends the data */
	UDR0 = data;
 89c:	8c b9       	out	0x0c, r24	; 12
 89e:	08 95       	ret

000008a0 <USART_receive>:
}

unsigned char USART_receive(void)
{
	/* Wait for data to be received */
	while ( !(UCSR0A & ( 1 << RXC0)) )
 8a0:	5f 9b       	sbis	0x0b, 7	; 11
 8a2:	fe cf       	rjmp	.-4      	; 0x8a0 <USART_receive>
		;
	/* Get and return received data from buffer */
	return UDR0;
 8a4:	8c b1       	in	r24, 0x0c	; 12
}
 8a6:	08 95       	ret

000008a8 <__divsf3>:
 8a8:	0c d0       	rcall	.+24     	; 0x8c2 <__divsf3x>
 8aa:	eb c0       	rjmp	.+470    	; 0xa82 <__fp_round>
 8ac:	e3 d0       	rcall	.+454    	; 0xa74 <__fp_pscB>
 8ae:	40 f0       	brcs	.+16     	; 0x8c0 <__divsf3+0x18>
 8b0:	da d0       	rcall	.+436    	; 0xa66 <__fp_pscA>
 8b2:	30 f0       	brcs	.+12     	; 0x8c0 <__divsf3+0x18>
 8b4:	21 f4       	brne	.+8      	; 0x8be <__divsf3+0x16>
 8b6:	5f 3f       	cpi	r21, 0xFF	; 255
 8b8:	19 f0       	breq	.+6      	; 0x8c0 <__divsf3+0x18>
 8ba:	cc c0       	rjmp	.+408    	; 0xa54 <__fp_inf>
 8bc:	51 11       	cpse	r21, r1
 8be:	15 c1       	rjmp	.+554    	; 0xaea <__fp_szero>
 8c0:	cf c0       	rjmp	.+414    	; 0xa60 <__fp_nan>

000008c2 <__divsf3x>:
 8c2:	f0 d0       	rcall	.+480    	; 0xaa4 <__fp_split3>
 8c4:	98 f3       	brcs	.-26     	; 0x8ac <__divsf3+0x4>

000008c6 <__divsf3_pse>:
 8c6:	99 23       	and	r25, r25
 8c8:	c9 f3       	breq	.-14     	; 0x8bc <__divsf3+0x14>
 8ca:	55 23       	and	r21, r21
 8cc:	b1 f3       	breq	.-20     	; 0x8ba <__divsf3+0x12>
 8ce:	95 1b       	sub	r25, r21
 8d0:	55 0b       	sbc	r21, r21
 8d2:	bb 27       	eor	r27, r27
 8d4:	aa 27       	eor	r26, r26
 8d6:	62 17       	cp	r22, r18
 8d8:	73 07       	cpc	r23, r19
 8da:	84 07       	cpc	r24, r20
 8dc:	38 f0       	brcs	.+14     	; 0x8ec <__divsf3_pse+0x26>
 8de:	9f 5f       	subi	r25, 0xFF	; 255
 8e0:	5f 4f       	sbci	r21, 0xFF	; 255
 8e2:	22 0f       	add	r18, r18
 8e4:	33 1f       	adc	r19, r19
 8e6:	44 1f       	adc	r20, r20
 8e8:	aa 1f       	adc	r26, r26
 8ea:	a9 f3       	breq	.-22     	; 0x8d6 <__divsf3_pse+0x10>
 8ec:	33 d0       	rcall	.+102    	; 0x954 <__divsf3_pse+0x8e>
 8ee:	0e 2e       	mov	r0, r30
 8f0:	3a f0       	brmi	.+14     	; 0x900 <__divsf3_pse+0x3a>
 8f2:	e0 e8       	ldi	r30, 0x80	; 128
 8f4:	30 d0       	rcall	.+96     	; 0x956 <__divsf3_pse+0x90>
 8f6:	91 50       	subi	r25, 0x01	; 1
 8f8:	50 40       	sbci	r21, 0x00	; 0
 8fa:	e6 95       	lsr	r30
 8fc:	00 1c       	adc	r0, r0
 8fe:	ca f7       	brpl	.-14     	; 0x8f2 <__divsf3_pse+0x2c>
 900:	29 d0       	rcall	.+82     	; 0x954 <__divsf3_pse+0x8e>
 902:	fe 2f       	mov	r31, r30
 904:	27 d0       	rcall	.+78     	; 0x954 <__divsf3_pse+0x8e>
 906:	66 0f       	add	r22, r22
 908:	77 1f       	adc	r23, r23
 90a:	88 1f       	adc	r24, r24
 90c:	bb 1f       	adc	r27, r27
 90e:	26 17       	cp	r18, r22
 910:	37 07       	cpc	r19, r23
 912:	48 07       	cpc	r20, r24
 914:	ab 07       	cpc	r26, r27
 916:	b0 e8       	ldi	r27, 0x80	; 128
 918:	09 f0       	breq	.+2      	; 0x91c <__divsf3_pse+0x56>
 91a:	bb 0b       	sbc	r27, r27
 91c:	80 2d       	mov	r24, r0
 91e:	bf 01       	movw	r22, r30
 920:	ff 27       	eor	r31, r31
 922:	93 58       	subi	r25, 0x83	; 131
 924:	5f 4f       	sbci	r21, 0xFF	; 255
 926:	2a f0       	brmi	.+10     	; 0x932 <__divsf3_pse+0x6c>
 928:	9e 3f       	cpi	r25, 0xFE	; 254
 92a:	51 05       	cpc	r21, r1
 92c:	68 f0       	brcs	.+26     	; 0x948 <__divsf3_pse+0x82>
 92e:	92 c0       	rjmp	.+292    	; 0xa54 <__fp_inf>
 930:	dc c0       	rjmp	.+440    	; 0xaea <__fp_szero>
 932:	5f 3f       	cpi	r21, 0xFF	; 255
 934:	ec f3       	brlt	.-6      	; 0x930 <__divsf3_pse+0x6a>
 936:	98 3e       	cpi	r25, 0xE8	; 232
 938:	dc f3       	brlt	.-10     	; 0x930 <__divsf3_pse+0x6a>
 93a:	86 95       	lsr	r24
 93c:	77 95       	ror	r23
 93e:	67 95       	ror	r22
 940:	b7 95       	ror	r27
 942:	f7 95       	ror	r31
 944:	9f 5f       	subi	r25, 0xFF	; 255
 946:	c9 f7       	brne	.-14     	; 0x93a <__divsf3_pse+0x74>
 948:	88 0f       	add	r24, r24
 94a:	91 1d       	adc	r25, r1
 94c:	96 95       	lsr	r25
 94e:	87 95       	ror	r24
 950:	97 f9       	bld	r25, 7
 952:	08 95       	ret
 954:	e1 e0       	ldi	r30, 0x01	; 1
 956:	66 0f       	add	r22, r22
 958:	77 1f       	adc	r23, r23
 95a:	88 1f       	adc	r24, r24
 95c:	bb 1f       	adc	r27, r27
 95e:	62 17       	cp	r22, r18
 960:	73 07       	cpc	r23, r19
 962:	84 07       	cpc	r24, r20
 964:	ba 07       	cpc	r27, r26
 966:	20 f0       	brcs	.+8      	; 0x970 <__divsf3_pse+0xaa>
 968:	62 1b       	sub	r22, r18
 96a:	73 0b       	sbc	r23, r19
 96c:	84 0b       	sbc	r24, r20
 96e:	ba 0b       	sbc	r27, r26
 970:	ee 1f       	adc	r30, r30
 972:	88 f7       	brcc	.-30     	; 0x956 <__divsf3_pse+0x90>
 974:	e0 95       	com	r30
 976:	08 95       	ret

00000978 <__fixsfsi>:
 978:	04 d0       	rcall	.+8      	; 0x982 <__fixunssfsi>
 97a:	68 94       	set
 97c:	b1 11       	cpse	r27, r1
 97e:	b5 c0       	rjmp	.+362    	; 0xaea <__fp_szero>
 980:	08 95       	ret

00000982 <__fixunssfsi>:
 982:	98 d0       	rcall	.+304    	; 0xab4 <__fp_splitA>
 984:	88 f0       	brcs	.+34     	; 0x9a8 <__fixunssfsi+0x26>
 986:	9f 57       	subi	r25, 0x7F	; 127
 988:	90 f0       	brcs	.+36     	; 0x9ae <__fixunssfsi+0x2c>
 98a:	b9 2f       	mov	r27, r25
 98c:	99 27       	eor	r25, r25
 98e:	b7 51       	subi	r27, 0x17	; 23
 990:	a0 f0       	brcs	.+40     	; 0x9ba <__fixunssfsi+0x38>
 992:	d1 f0       	breq	.+52     	; 0x9c8 <__fixunssfsi+0x46>
 994:	66 0f       	add	r22, r22
 996:	77 1f       	adc	r23, r23
 998:	88 1f       	adc	r24, r24
 99a:	99 1f       	adc	r25, r25
 99c:	1a f0       	brmi	.+6      	; 0x9a4 <__fixunssfsi+0x22>
 99e:	ba 95       	dec	r27
 9a0:	c9 f7       	brne	.-14     	; 0x994 <__fixunssfsi+0x12>
 9a2:	12 c0       	rjmp	.+36     	; 0x9c8 <__fixunssfsi+0x46>
 9a4:	b1 30       	cpi	r27, 0x01	; 1
 9a6:	81 f0       	breq	.+32     	; 0x9c8 <__fixunssfsi+0x46>
 9a8:	9f d0       	rcall	.+318    	; 0xae8 <__fp_zero>
 9aa:	b1 e0       	ldi	r27, 0x01	; 1
 9ac:	08 95       	ret
 9ae:	9c c0       	rjmp	.+312    	; 0xae8 <__fp_zero>
 9b0:	67 2f       	mov	r22, r23
 9b2:	78 2f       	mov	r23, r24
 9b4:	88 27       	eor	r24, r24
 9b6:	b8 5f       	subi	r27, 0xF8	; 248
 9b8:	39 f0       	breq	.+14     	; 0x9c8 <__fixunssfsi+0x46>
 9ba:	b9 3f       	cpi	r27, 0xF9	; 249
 9bc:	cc f3       	brlt	.-14     	; 0x9b0 <__fixunssfsi+0x2e>
 9be:	86 95       	lsr	r24
 9c0:	77 95       	ror	r23
 9c2:	67 95       	ror	r22
 9c4:	b3 95       	inc	r27
 9c6:	d9 f7       	brne	.-10     	; 0x9be <__fixunssfsi+0x3c>
 9c8:	3e f4       	brtc	.+14     	; 0x9d8 <__fixunssfsi+0x56>
 9ca:	90 95       	com	r25
 9cc:	80 95       	com	r24
 9ce:	70 95       	com	r23
 9d0:	61 95       	neg	r22
 9d2:	7f 4f       	sbci	r23, 0xFF	; 255
 9d4:	8f 4f       	sbci	r24, 0xFF	; 255
 9d6:	9f 4f       	sbci	r25, 0xFF	; 255
 9d8:	08 95       	ret

000009da <__floatunsisf>:
 9da:	e8 94       	clt
 9dc:	09 c0       	rjmp	.+18     	; 0x9f0 <__floatsisf+0x12>

000009de <__floatsisf>:
 9de:	97 fb       	bst	r25, 7
 9e0:	3e f4       	brtc	.+14     	; 0x9f0 <__floatsisf+0x12>
 9e2:	90 95       	com	r25
 9e4:	80 95       	com	r24
 9e6:	70 95       	com	r23
 9e8:	61 95       	neg	r22
 9ea:	7f 4f       	sbci	r23, 0xFF	; 255
 9ec:	8f 4f       	sbci	r24, 0xFF	; 255
 9ee:	9f 4f       	sbci	r25, 0xFF	; 255
 9f0:	99 23       	and	r25, r25
 9f2:	a9 f0       	breq	.+42     	; 0xa1e <__floatsisf+0x40>
 9f4:	f9 2f       	mov	r31, r25
 9f6:	96 e9       	ldi	r25, 0x96	; 150
 9f8:	bb 27       	eor	r27, r27
 9fa:	93 95       	inc	r25
 9fc:	f6 95       	lsr	r31
 9fe:	87 95       	ror	r24
 a00:	77 95       	ror	r23
 a02:	67 95       	ror	r22
 a04:	b7 95       	ror	r27
 a06:	f1 11       	cpse	r31, r1
 a08:	f8 cf       	rjmp	.-16     	; 0x9fa <__floatsisf+0x1c>
 a0a:	fa f4       	brpl	.+62     	; 0xa4a <__floatsisf+0x6c>
 a0c:	bb 0f       	add	r27, r27
 a0e:	11 f4       	brne	.+4      	; 0xa14 <__floatsisf+0x36>
 a10:	60 ff       	sbrs	r22, 0
 a12:	1b c0       	rjmp	.+54     	; 0xa4a <__floatsisf+0x6c>
 a14:	6f 5f       	subi	r22, 0xFF	; 255
 a16:	7f 4f       	sbci	r23, 0xFF	; 255
 a18:	8f 4f       	sbci	r24, 0xFF	; 255
 a1a:	9f 4f       	sbci	r25, 0xFF	; 255
 a1c:	16 c0       	rjmp	.+44     	; 0xa4a <__floatsisf+0x6c>
 a1e:	88 23       	and	r24, r24
 a20:	11 f0       	breq	.+4      	; 0xa26 <__floatsisf+0x48>
 a22:	96 e9       	ldi	r25, 0x96	; 150
 a24:	11 c0       	rjmp	.+34     	; 0xa48 <__floatsisf+0x6a>
 a26:	77 23       	and	r23, r23
 a28:	21 f0       	breq	.+8      	; 0xa32 <__floatsisf+0x54>
 a2a:	9e e8       	ldi	r25, 0x8E	; 142
 a2c:	87 2f       	mov	r24, r23
 a2e:	76 2f       	mov	r23, r22
 a30:	05 c0       	rjmp	.+10     	; 0xa3c <__floatsisf+0x5e>
 a32:	66 23       	and	r22, r22
 a34:	71 f0       	breq	.+28     	; 0xa52 <__floatsisf+0x74>
 a36:	96 e8       	ldi	r25, 0x86	; 134
 a38:	86 2f       	mov	r24, r22
 a3a:	70 e0       	ldi	r23, 0x00	; 0
 a3c:	60 e0       	ldi	r22, 0x00	; 0
 a3e:	2a f0       	brmi	.+10     	; 0xa4a <__floatsisf+0x6c>
 a40:	9a 95       	dec	r25
 a42:	66 0f       	add	r22, r22
 a44:	77 1f       	adc	r23, r23
 a46:	88 1f       	adc	r24, r24
 a48:	da f7       	brpl	.-10     	; 0xa40 <__floatsisf+0x62>
 a4a:	88 0f       	add	r24, r24
 a4c:	96 95       	lsr	r25
 a4e:	87 95       	ror	r24
 a50:	97 f9       	bld	r25, 7
 a52:	08 95       	ret

00000a54 <__fp_inf>:
 a54:	97 f9       	bld	r25, 7
 a56:	9f 67       	ori	r25, 0x7F	; 127
 a58:	80 e8       	ldi	r24, 0x80	; 128
 a5a:	70 e0       	ldi	r23, 0x00	; 0
 a5c:	60 e0       	ldi	r22, 0x00	; 0
 a5e:	08 95       	ret

00000a60 <__fp_nan>:
 a60:	9f ef       	ldi	r25, 0xFF	; 255
 a62:	80 ec       	ldi	r24, 0xC0	; 192
 a64:	08 95       	ret

00000a66 <__fp_pscA>:
 a66:	00 24       	eor	r0, r0
 a68:	0a 94       	dec	r0
 a6a:	16 16       	cp	r1, r22
 a6c:	17 06       	cpc	r1, r23
 a6e:	18 06       	cpc	r1, r24
 a70:	09 06       	cpc	r0, r25
 a72:	08 95       	ret

00000a74 <__fp_pscB>:
 a74:	00 24       	eor	r0, r0
 a76:	0a 94       	dec	r0
 a78:	12 16       	cp	r1, r18
 a7a:	13 06       	cpc	r1, r19
 a7c:	14 06       	cpc	r1, r20
 a7e:	05 06       	cpc	r0, r21
 a80:	08 95       	ret

00000a82 <__fp_round>:
 a82:	09 2e       	mov	r0, r25
 a84:	03 94       	inc	r0
 a86:	00 0c       	add	r0, r0
 a88:	11 f4       	brne	.+4      	; 0xa8e <__fp_round+0xc>
 a8a:	88 23       	and	r24, r24
 a8c:	52 f0       	brmi	.+20     	; 0xaa2 <__fp_round+0x20>
 a8e:	bb 0f       	add	r27, r27
 a90:	40 f4       	brcc	.+16     	; 0xaa2 <__fp_round+0x20>
 a92:	bf 2b       	or	r27, r31
 a94:	11 f4       	brne	.+4      	; 0xa9a <__fp_round+0x18>
 a96:	60 ff       	sbrs	r22, 0
 a98:	04 c0       	rjmp	.+8      	; 0xaa2 <__fp_round+0x20>
 a9a:	6f 5f       	subi	r22, 0xFF	; 255
 a9c:	7f 4f       	sbci	r23, 0xFF	; 255
 a9e:	8f 4f       	sbci	r24, 0xFF	; 255
 aa0:	9f 4f       	sbci	r25, 0xFF	; 255
 aa2:	08 95       	ret

00000aa4 <__fp_split3>:
 aa4:	57 fd       	sbrc	r21, 7
 aa6:	90 58       	subi	r25, 0x80	; 128
 aa8:	44 0f       	add	r20, r20
 aaa:	55 1f       	adc	r21, r21
 aac:	59 f0       	breq	.+22     	; 0xac4 <__fp_splitA+0x10>
 aae:	5f 3f       	cpi	r21, 0xFF	; 255
 ab0:	71 f0       	breq	.+28     	; 0xace <__fp_splitA+0x1a>
 ab2:	47 95       	ror	r20

00000ab4 <__fp_splitA>:
 ab4:	88 0f       	add	r24, r24
 ab6:	97 fb       	bst	r25, 7
 ab8:	99 1f       	adc	r25, r25
 aba:	61 f0       	breq	.+24     	; 0xad4 <__fp_splitA+0x20>
 abc:	9f 3f       	cpi	r25, 0xFF	; 255
 abe:	79 f0       	breq	.+30     	; 0xade <__fp_splitA+0x2a>
 ac0:	87 95       	ror	r24
 ac2:	08 95       	ret
 ac4:	12 16       	cp	r1, r18
 ac6:	13 06       	cpc	r1, r19
 ac8:	14 06       	cpc	r1, r20
 aca:	55 1f       	adc	r21, r21
 acc:	f2 cf       	rjmp	.-28     	; 0xab2 <__fp_split3+0xe>
 ace:	46 95       	lsr	r20
 ad0:	f1 df       	rcall	.-30     	; 0xab4 <__fp_splitA>
 ad2:	08 c0       	rjmp	.+16     	; 0xae4 <__fp_splitA+0x30>
 ad4:	16 16       	cp	r1, r22
 ad6:	17 06       	cpc	r1, r23
 ad8:	18 06       	cpc	r1, r24
 ada:	99 1f       	adc	r25, r25
 adc:	f1 cf       	rjmp	.-30     	; 0xac0 <__fp_splitA+0xc>
 ade:	86 95       	lsr	r24
 ae0:	71 05       	cpc	r23, r1
 ae2:	61 05       	cpc	r22, r1
 ae4:	08 94       	sec
 ae6:	08 95       	ret

00000ae8 <__fp_zero>:
 ae8:	e8 94       	clt

00000aea <__fp_szero>:
 aea:	bb 27       	eor	r27, r27
 aec:	66 27       	eor	r22, r22
 aee:	77 27       	eor	r23, r23
 af0:	cb 01       	movw	r24, r22
 af2:	97 f9       	bld	r25, 7
 af4:	08 95       	ret

00000af6 <__mulsf3>:
 af6:	0b d0       	rcall	.+22     	; 0xb0e <__mulsf3x>
 af8:	c4 cf       	rjmp	.-120    	; 0xa82 <__fp_round>
 afa:	b5 df       	rcall	.-150    	; 0xa66 <__fp_pscA>
 afc:	28 f0       	brcs	.+10     	; 0xb08 <__mulsf3+0x12>
 afe:	ba df       	rcall	.-140    	; 0xa74 <__fp_pscB>
 b00:	18 f0       	brcs	.+6      	; 0xb08 <__mulsf3+0x12>
 b02:	95 23       	and	r25, r21
 b04:	09 f0       	breq	.+2      	; 0xb08 <__mulsf3+0x12>
 b06:	a6 cf       	rjmp	.-180    	; 0xa54 <__fp_inf>
 b08:	ab cf       	rjmp	.-170    	; 0xa60 <__fp_nan>
 b0a:	11 24       	eor	r1, r1
 b0c:	ee cf       	rjmp	.-36     	; 0xaea <__fp_szero>

00000b0e <__mulsf3x>:
 b0e:	ca df       	rcall	.-108    	; 0xaa4 <__fp_split3>
 b10:	a0 f3       	brcs	.-24     	; 0xafa <__mulsf3+0x4>

00000b12 <__mulsf3_pse>:
 b12:	95 9f       	mul	r25, r21
 b14:	d1 f3       	breq	.-12     	; 0xb0a <__mulsf3+0x14>
 b16:	95 0f       	add	r25, r21
 b18:	50 e0       	ldi	r21, 0x00	; 0
 b1a:	55 1f       	adc	r21, r21
 b1c:	62 9f       	mul	r22, r18
 b1e:	f0 01       	movw	r30, r0
 b20:	72 9f       	mul	r23, r18
 b22:	bb 27       	eor	r27, r27
 b24:	f0 0d       	add	r31, r0
 b26:	b1 1d       	adc	r27, r1
 b28:	63 9f       	mul	r22, r19
 b2a:	aa 27       	eor	r26, r26
 b2c:	f0 0d       	add	r31, r0
 b2e:	b1 1d       	adc	r27, r1
 b30:	aa 1f       	adc	r26, r26
 b32:	64 9f       	mul	r22, r20
 b34:	66 27       	eor	r22, r22
 b36:	b0 0d       	add	r27, r0
 b38:	a1 1d       	adc	r26, r1
 b3a:	66 1f       	adc	r22, r22
 b3c:	82 9f       	mul	r24, r18
 b3e:	22 27       	eor	r18, r18
 b40:	b0 0d       	add	r27, r0
 b42:	a1 1d       	adc	r26, r1
 b44:	62 1f       	adc	r22, r18
 b46:	73 9f       	mul	r23, r19
 b48:	b0 0d       	add	r27, r0
 b4a:	a1 1d       	adc	r26, r1
 b4c:	62 1f       	adc	r22, r18
 b4e:	83 9f       	mul	r24, r19
 b50:	a0 0d       	add	r26, r0
 b52:	61 1d       	adc	r22, r1
 b54:	22 1f       	adc	r18, r18
 b56:	74 9f       	mul	r23, r20
 b58:	33 27       	eor	r19, r19
 b5a:	a0 0d       	add	r26, r0
 b5c:	61 1d       	adc	r22, r1
 b5e:	23 1f       	adc	r18, r19
 b60:	84 9f       	mul	r24, r20
 b62:	60 0d       	add	r22, r0
 b64:	21 1d       	adc	r18, r1
 b66:	82 2f       	mov	r24, r18
 b68:	76 2f       	mov	r23, r22
 b6a:	6a 2f       	mov	r22, r26
 b6c:	11 24       	eor	r1, r1
 b6e:	9f 57       	subi	r25, 0x7F	; 127
 b70:	50 40       	sbci	r21, 0x00	; 0
 b72:	8a f0       	brmi	.+34     	; 0xb96 <__mulsf3_pse+0x84>
 b74:	e1 f0       	breq	.+56     	; 0xbae <__mulsf3_pse+0x9c>
 b76:	88 23       	and	r24, r24
 b78:	4a f0       	brmi	.+18     	; 0xb8c <__mulsf3_pse+0x7a>
 b7a:	ee 0f       	add	r30, r30
 b7c:	ff 1f       	adc	r31, r31
 b7e:	bb 1f       	adc	r27, r27
 b80:	66 1f       	adc	r22, r22
 b82:	77 1f       	adc	r23, r23
 b84:	88 1f       	adc	r24, r24
 b86:	91 50       	subi	r25, 0x01	; 1
 b88:	50 40       	sbci	r21, 0x00	; 0
 b8a:	a9 f7       	brne	.-22     	; 0xb76 <__mulsf3_pse+0x64>
 b8c:	9e 3f       	cpi	r25, 0xFE	; 254
 b8e:	51 05       	cpc	r21, r1
 b90:	70 f0       	brcs	.+28     	; 0xbae <__mulsf3_pse+0x9c>
 b92:	60 cf       	rjmp	.-320    	; 0xa54 <__fp_inf>
 b94:	aa cf       	rjmp	.-172    	; 0xaea <__fp_szero>
 b96:	5f 3f       	cpi	r21, 0xFF	; 255
 b98:	ec f3       	brlt	.-6      	; 0xb94 <__mulsf3_pse+0x82>
 b9a:	98 3e       	cpi	r25, 0xE8	; 232
 b9c:	dc f3       	brlt	.-10     	; 0xb94 <__mulsf3_pse+0x82>
 b9e:	86 95       	lsr	r24
 ba0:	77 95       	ror	r23
 ba2:	67 95       	ror	r22
 ba4:	b7 95       	ror	r27
 ba6:	f7 95       	ror	r31
 ba8:	e7 95       	ror	r30
 baa:	9f 5f       	subi	r25, 0xFF	; 255
 bac:	c1 f7       	brne	.-16     	; 0xb9e <__mulsf3_pse+0x8c>
 bae:	fe 2b       	or	r31, r30
 bb0:	88 0f       	add	r24, r24
 bb2:	91 1d       	adc	r25, r1
 bb4:	96 95       	lsr	r25
 bb6:	87 95       	ror	r24
 bb8:	97 f9       	bld	r25, 7
 bba:	08 95       	ret

00000bbc <round>:
 bbc:	7b df       	rcall	.-266    	; 0xab4 <__fp_splitA>
 bbe:	e0 f0       	brcs	.+56     	; 0xbf8 <round+0x3c>
 bc0:	9e 37       	cpi	r25, 0x7E	; 126
 bc2:	d8 f0       	brcs	.+54     	; 0xbfa <round+0x3e>
 bc4:	96 39       	cpi	r25, 0x96	; 150
 bc6:	b8 f4       	brcc	.+46     	; 0xbf6 <round+0x3a>
 bc8:	9e 38       	cpi	r25, 0x8E	; 142
 bca:	48 f4       	brcc	.+18     	; 0xbde <round+0x22>
 bcc:	67 2f       	mov	r22, r23
 bce:	78 2f       	mov	r23, r24
 bd0:	88 27       	eor	r24, r24
 bd2:	98 5f       	subi	r25, 0xF8	; 248
 bd4:	f9 cf       	rjmp	.-14     	; 0xbc8 <round+0xc>
 bd6:	86 95       	lsr	r24
 bd8:	77 95       	ror	r23
 bda:	67 95       	ror	r22
 bdc:	93 95       	inc	r25
 bde:	95 39       	cpi	r25, 0x95	; 149
 be0:	d0 f3       	brcs	.-12     	; 0xbd6 <round+0x1a>
 be2:	b6 2f       	mov	r27, r22
 be4:	b1 70       	andi	r27, 0x01	; 1
 be6:	6b 0f       	add	r22, r27
 be8:	71 1d       	adc	r23, r1
 bea:	81 1d       	adc	r24, r1
 bec:	20 f4       	brcc	.+8      	; 0xbf6 <round+0x3a>
 bee:	87 95       	ror	r24
 bf0:	77 95       	ror	r23
 bf2:	67 95       	ror	r22
 bf4:	93 95       	inc	r25
 bf6:	02 c0       	rjmp	.+4      	; 0xbfc <__fp_mintl>
 bf8:	1c c0       	rjmp	.+56     	; 0xc32 <__fp_mpack>
 bfa:	77 cf       	rjmp	.-274    	; 0xaea <__fp_szero>

00000bfc <__fp_mintl>:
 bfc:	88 23       	and	r24, r24
 bfe:	71 f4       	brne	.+28     	; 0xc1c <__fp_mintl+0x20>
 c00:	77 23       	and	r23, r23
 c02:	21 f0       	breq	.+8      	; 0xc0c <__fp_mintl+0x10>
 c04:	98 50       	subi	r25, 0x08	; 8
 c06:	87 2b       	or	r24, r23
 c08:	76 2f       	mov	r23, r22
 c0a:	07 c0       	rjmp	.+14     	; 0xc1a <__fp_mintl+0x1e>
 c0c:	66 23       	and	r22, r22
 c0e:	11 f4       	brne	.+4      	; 0xc14 <__fp_mintl+0x18>
 c10:	99 27       	eor	r25, r25
 c12:	0d c0       	rjmp	.+26     	; 0xc2e <__fp_mintl+0x32>
 c14:	90 51       	subi	r25, 0x10	; 16
 c16:	86 2b       	or	r24, r22
 c18:	70 e0       	ldi	r23, 0x00	; 0
 c1a:	60 e0       	ldi	r22, 0x00	; 0
 c1c:	2a f0       	brmi	.+10     	; 0xc28 <__fp_mintl+0x2c>
 c1e:	9a 95       	dec	r25
 c20:	66 0f       	add	r22, r22
 c22:	77 1f       	adc	r23, r23
 c24:	88 1f       	adc	r24, r24
 c26:	da f7       	brpl	.-10     	; 0xc1e <__fp_mintl+0x22>
 c28:	88 0f       	add	r24, r24
 c2a:	96 95       	lsr	r25
 c2c:	87 95       	ror	r24
 c2e:	97 f9       	bld	r25, 7
 c30:	08 95       	ret

00000c32 <__fp_mpack>:
 c32:	9f 3f       	cpi	r25, 0xFF	; 255
 c34:	31 f0       	breq	.+12     	; 0xc42 <__fp_mpack_finite+0xc>

00000c36 <__fp_mpack_finite>:
 c36:	91 50       	subi	r25, 0x01	; 1
 c38:	20 f4       	brcc	.+8      	; 0xc42 <__fp_mpack_finite+0xc>
 c3a:	87 95       	ror	r24
 c3c:	77 95       	ror	r23
 c3e:	67 95       	ror	r22
 c40:	b7 95       	ror	r27
 c42:	88 0f       	add	r24, r24
 c44:	91 1d       	adc	r25, r1
 c46:	96 95       	lsr	r25
 c48:	87 95       	ror	r24
 c4a:	97 f9       	bld	r25, 7
 c4c:	08 95       	ret

00000c4e <malloc>:
 c4e:	cf 93       	push	r28
 c50:	df 93       	push	r29
 c52:	82 30       	cpi	r24, 0x02	; 2
 c54:	91 05       	cpc	r25, r1
 c56:	10 f4       	brcc	.+4      	; 0xc5c <malloc+0xe>
 c58:	82 e0       	ldi	r24, 0x02	; 2
 c5a:	90 e0       	ldi	r25, 0x00	; 0
 c5c:	e0 91 4c 01 	lds	r30, 0x014C
 c60:	f0 91 4d 01 	lds	r31, 0x014D
 c64:	20 e0       	ldi	r18, 0x00	; 0
 c66:	30 e0       	ldi	r19, 0x00	; 0
 c68:	a0 e0       	ldi	r26, 0x00	; 0
 c6a:	b0 e0       	ldi	r27, 0x00	; 0
 c6c:	30 97       	sbiw	r30, 0x00	; 0
 c6e:	39 f1       	breq	.+78     	; 0xcbe <malloc+0x70>
 c70:	40 81       	ld	r20, Z
 c72:	51 81       	ldd	r21, Z+1	; 0x01
 c74:	48 17       	cp	r20, r24
 c76:	59 07       	cpc	r21, r25
 c78:	b8 f0       	brcs	.+46     	; 0xca8 <malloc+0x5a>
 c7a:	48 17       	cp	r20, r24
 c7c:	59 07       	cpc	r21, r25
 c7e:	71 f4       	brne	.+28     	; 0xc9c <malloc+0x4e>
 c80:	82 81       	ldd	r24, Z+2	; 0x02
 c82:	93 81       	ldd	r25, Z+3	; 0x03
 c84:	10 97       	sbiw	r26, 0x00	; 0
 c86:	29 f0       	breq	.+10     	; 0xc92 <malloc+0x44>
 c88:	13 96       	adiw	r26, 0x03	; 3
 c8a:	9c 93       	st	X, r25
 c8c:	8e 93       	st	-X, r24
 c8e:	12 97       	sbiw	r26, 0x02	; 2
 c90:	2c c0       	rjmp	.+88     	; 0xcea <malloc+0x9c>
 c92:	90 93 4d 01 	sts	0x014D, r25
 c96:	80 93 4c 01 	sts	0x014C, r24
 c9a:	27 c0       	rjmp	.+78     	; 0xcea <malloc+0x9c>
 c9c:	21 15       	cp	r18, r1
 c9e:	31 05       	cpc	r19, r1
 ca0:	31 f0       	breq	.+12     	; 0xcae <malloc+0x60>
 ca2:	42 17       	cp	r20, r18
 ca4:	53 07       	cpc	r21, r19
 ca6:	18 f0       	brcs	.+6      	; 0xcae <malloc+0x60>
 ca8:	a9 01       	movw	r20, r18
 caa:	db 01       	movw	r26, r22
 cac:	01 c0       	rjmp	.+2      	; 0xcb0 <malloc+0x62>
 cae:	ef 01       	movw	r28, r30
 cb0:	9a 01       	movw	r18, r20
 cb2:	bd 01       	movw	r22, r26
 cb4:	df 01       	movw	r26, r30
 cb6:	02 80       	ldd	r0, Z+2	; 0x02
 cb8:	f3 81       	ldd	r31, Z+3	; 0x03
 cba:	e0 2d       	mov	r30, r0
 cbc:	d7 cf       	rjmp	.-82     	; 0xc6c <malloc+0x1e>
 cbe:	21 15       	cp	r18, r1
 cc0:	31 05       	cpc	r19, r1
 cc2:	f9 f0       	breq	.+62     	; 0xd02 <malloc+0xb4>
 cc4:	28 1b       	sub	r18, r24
 cc6:	39 0b       	sbc	r19, r25
 cc8:	24 30       	cpi	r18, 0x04	; 4
 cca:	31 05       	cpc	r19, r1
 ccc:	80 f4       	brcc	.+32     	; 0xcee <malloc+0xa0>
 cce:	8a 81       	ldd	r24, Y+2	; 0x02
 cd0:	9b 81       	ldd	r25, Y+3	; 0x03
 cd2:	61 15       	cp	r22, r1
 cd4:	71 05       	cpc	r23, r1
 cd6:	21 f0       	breq	.+8      	; 0xce0 <malloc+0x92>
 cd8:	fb 01       	movw	r30, r22
 cda:	93 83       	std	Z+3, r25	; 0x03
 cdc:	82 83       	std	Z+2, r24	; 0x02
 cde:	04 c0       	rjmp	.+8      	; 0xce8 <malloc+0x9a>
 ce0:	90 93 4d 01 	sts	0x014D, r25
 ce4:	80 93 4c 01 	sts	0x014C, r24
 ce8:	fe 01       	movw	r30, r28
 cea:	32 96       	adiw	r30, 0x02	; 2
 cec:	44 c0       	rjmp	.+136    	; 0xd76 <malloc+0x128>
 cee:	fe 01       	movw	r30, r28
 cf0:	e2 0f       	add	r30, r18
 cf2:	f3 1f       	adc	r31, r19
 cf4:	81 93       	st	Z+, r24
 cf6:	91 93       	st	Z+, r25
 cf8:	22 50       	subi	r18, 0x02	; 2
 cfa:	31 09       	sbc	r19, r1
 cfc:	39 83       	std	Y+1, r19	; 0x01
 cfe:	28 83       	st	Y, r18
 d00:	3a c0       	rjmp	.+116    	; 0xd76 <malloc+0x128>
 d02:	20 91 4a 01 	lds	r18, 0x014A
 d06:	30 91 4b 01 	lds	r19, 0x014B
 d0a:	23 2b       	or	r18, r19
 d0c:	41 f4       	brne	.+16     	; 0xd1e <malloc+0xd0>
 d0e:	20 91 02 01 	lds	r18, 0x0102
 d12:	30 91 03 01 	lds	r19, 0x0103
 d16:	30 93 4b 01 	sts	0x014B, r19
 d1a:	20 93 4a 01 	sts	0x014A, r18
 d1e:	20 91 00 01 	lds	r18, 0x0100
 d22:	30 91 01 01 	lds	r19, 0x0101
 d26:	21 15       	cp	r18, r1
 d28:	31 05       	cpc	r19, r1
 d2a:	41 f4       	brne	.+16     	; 0xd3c <malloc+0xee>
 d2c:	2d b7       	in	r18, 0x3d	; 61
 d2e:	3e b7       	in	r19, 0x3e	; 62
 d30:	40 91 04 01 	lds	r20, 0x0104
 d34:	50 91 05 01 	lds	r21, 0x0105
 d38:	24 1b       	sub	r18, r20
 d3a:	35 0b       	sbc	r19, r21
 d3c:	e0 91 4a 01 	lds	r30, 0x014A
 d40:	f0 91 4b 01 	lds	r31, 0x014B
 d44:	e2 17       	cp	r30, r18
 d46:	f3 07       	cpc	r31, r19
 d48:	a0 f4       	brcc	.+40     	; 0xd72 <malloc+0x124>
 d4a:	2e 1b       	sub	r18, r30
 d4c:	3f 0b       	sbc	r19, r31
 d4e:	28 17       	cp	r18, r24
 d50:	39 07       	cpc	r19, r25
 d52:	78 f0       	brcs	.+30     	; 0xd72 <malloc+0x124>
 d54:	ac 01       	movw	r20, r24
 d56:	4e 5f       	subi	r20, 0xFE	; 254
 d58:	5f 4f       	sbci	r21, 0xFF	; 255
 d5a:	24 17       	cp	r18, r20
 d5c:	35 07       	cpc	r19, r21
 d5e:	48 f0       	brcs	.+18     	; 0xd72 <malloc+0x124>
 d60:	4e 0f       	add	r20, r30
 d62:	5f 1f       	adc	r21, r31
 d64:	50 93 4b 01 	sts	0x014B, r21
 d68:	40 93 4a 01 	sts	0x014A, r20
 d6c:	81 93       	st	Z+, r24
 d6e:	91 93       	st	Z+, r25
 d70:	02 c0       	rjmp	.+4      	; 0xd76 <malloc+0x128>
 d72:	e0 e0       	ldi	r30, 0x00	; 0
 d74:	f0 e0       	ldi	r31, 0x00	; 0
 d76:	cf 01       	movw	r24, r30
 d78:	df 91       	pop	r29
 d7a:	cf 91       	pop	r28
 d7c:	08 95       	ret

00000d7e <free>:
 d7e:	cf 93       	push	r28
 d80:	df 93       	push	r29
 d82:	00 97       	sbiw	r24, 0x00	; 0
 d84:	09 f4       	brne	.+2      	; 0xd88 <free+0xa>
 d86:	87 c0       	rjmp	.+270    	; 0xe96 <free+0x118>
 d88:	fc 01       	movw	r30, r24
 d8a:	32 97       	sbiw	r30, 0x02	; 2
 d8c:	13 82       	std	Z+3, r1	; 0x03
 d8e:	12 82       	std	Z+2, r1	; 0x02
 d90:	c0 91 4c 01 	lds	r28, 0x014C
 d94:	d0 91 4d 01 	lds	r29, 0x014D
 d98:	20 97       	sbiw	r28, 0x00	; 0
 d9a:	81 f4       	brne	.+32     	; 0xdbc <free+0x3e>
 d9c:	20 81       	ld	r18, Z
 d9e:	31 81       	ldd	r19, Z+1	; 0x01
 da0:	28 0f       	add	r18, r24
 da2:	39 1f       	adc	r19, r25
 da4:	80 91 4a 01 	lds	r24, 0x014A
 da8:	90 91 4b 01 	lds	r25, 0x014B
 dac:	82 17       	cp	r24, r18
 dae:	93 07       	cpc	r25, r19
 db0:	79 f5       	brne	.+94     	; 0xe10 <free+0x92>
 db2:	f0 93 4b 01 	sts	0x014B, r31
 db6:	e0 93 4a 01 	sts	0x014A, r30
 dba:	6d c0       	rjmp	.+218    	; 0xe96 <free+0x118>
 dbc:	de 01       	movw	r26, r28
 dbe:	20 e0       	ldi	r18, 0x00	; 0
 dc0:	30 e0       	ldi	r19, 0x00	; 0
 dc2:	ae 17       	cp	r26, r30
 dc4:	bf 07       	cpc	r27, r31
 dc6:	50 f4       	brcc	.+20     	; 0xddc <free+0x5e>
 dc8:	12 96       	adiw	r26, 0x02	; 2
 dca:	4d 91       	ld	r20, X+
 dcc:	5c 91       	ld	r21, X
 dce:	13 97       	sbiw	r26, 0x03	; 3
 dd0:	9d 01       	movw	r18, r26
 dd2:	41 15       	cp	r20, r1
 dd4:	51 05       	cpc	r21, r1
 dd6:	09 f1       	breq	.+66     	; 0xe1a <free+0x9c>
 dd8:	da 01       	movw	r26, r20
 dda:	f3 cf       	rjmp	.-26     	; 0xdc2 <free+0x44>
 ddc:	b3 83       	std	Z+3, r27	; 0x03
 dde:	a2 83       	std	Z+2, r26	; 0x02
 de0:	40 81       	ld	r20, Z
 de2:	51 81       	ldd	r21, Z+1	; 0x01
 de4:	84 0f       	add	r24, r20
 de6:	95 1f       	adc	r25, r21
 de8:	8a 17       	cp	r24, r26
 dea:	9b 07       	cpc	r25, r27
 dec:	71 f4       	brne	.+28     	; 0xe0a <free+0x8c>
 dee:	8d 91       	ld	r24, X+
 df0:	9c 91       	ld	r25, X
 df2:	11 97       	sbiw	r26, 0x01	; 1
 df4:	84 0f       	add	r24, r20
 df6:	95 1f       	adc	r25, r21
 df8:	02 96       	adiw	r24, 0x02	; 2
 dfa:	91 83       	std	Z+1, r25	; 0x01
 dfc:	80 83       	st	Z, r24
 dfe:	12 96       	adiw	r26, 0x02	; 2
 e00:	8d 91       	ld	r24, X+
 e02:	9c 91       	ld	r25, X
 e04:	13 97       	sbiw	r26, 0x03	; 3
 e06:	93 83       	std	Z+3, r25	; 0x03
 e08:	82 83       	std	Z+2, r24	; 0x02
 e0a:	21 15       	cp	r18, r1
 e0c:	31 05       	cpc	r19, r1
 e0e:	29 f4       	brne	.+10     	; 0xe1a <free+0x9c>
 e10:	f0 93 4d 01 	sts	0x014D, r31
 e14:	e0 93 4c 01 	sts	0x014C, r30
 e18:	3e c0       	rjmp	.+124    	; 0xe96 <free+0x118>
 e1a:	d9 01       	movw	r26, r18
 e1c:	13 96       	adiw	r26, 0x03	; 3
 e1e:	fc 93       	st	X, r31
 e20:	ee 93       	st	-X, r30
 e22:	12 97       	sbiw	r26, 0x02	; 2
 e24:	4d 91       	ld	r20, X+
 e26:	5d 91       	ld	r21, X+
 e28:	a4 0f       	add	r26, r20
 e2a:	b5 1f       	adc	r27, r21
 e2c:	ea 17       	cp	r30, r26
 e2e:	fb 07       	cpc	r31, r27
 e30:	79 f4       	brne	.+30     	; 0xe50 <free+0xd2>
 e32:	80 81       	ld	r24, Z
 e34:	91 81       	ldd	r25, Z+1	; 0x01
 e36:	84 0f       	add	r24, r20
 e38:	95 1f       	adc	r25, r21
 e3a:	02 96       	adiw	r24, 0x02	; 2
 e3c:	d9 01       	movw	r26, r18
 e3e:	11 96       	adiw	r26, 0x01	; 1
 e40:	9c 93       	st	X, r25
 e42:	8e 93       	st	-X, r24
 e44:	82 81       	ldd	r24, Z+2	; 0x02
 e46:	93 81       	ldd	r25, Z+3	; 0x03
 e48:	13 96       	adiw	r26, 0x03	; 3
 e4a:	9c 93       	st	X, r25
 e4c:	8e 93       	st	-X, r24
 e4e:	12 97       	sbiw	r26, 0x02	; 2
 e50:	e0 e0       	ldi	r30, 0x00	; 0
 e52:	f0 e0       	ldi	r31, 0x00	; 0
 e54:	8a 81       	ldd	r24, Y+2	; 0x02
 e56:	9b 81       	ldd	r25, Y+3	; 0x03
 e58:	00 97       	sbiw	r24, 0x00	; 0
 e5a:	19 f0       	breq	.+6      	; 0xe62 <free+0xe4>
 e5c:	fe 01       	movw	r30, r28
 e5e:	ec 01       	movw	r28, r24
 e60:	f9 cf       	rjmp	.-14     	; 0xe54 <free+0xd6>
 e62:	ce 01       	movw	r24, r28
 e64:	02 96       	adiw	r24, 0x02	; 2
 e66:	28 81       	ld	r18, Y
 e68:	39 81       	ldd	r19, Y+1	; 0x01
 e6a:	82 0f       	add	r24, r18
 e6c:	93 1f       	adc	r25, r19
 e6e:	20 91 4a 01 	lds	r18, 0x014A
 e72:	30 91 4b 01 	lds	r19, 0x014B
 e76:	28 17       	cp	r18, r24
 e78:	39 07       	cpc	r19, r25
 e7a:	69 f4       	brne	.+26     	; 0xe96 <free+0x118>
 e7c:	30 97       	sbiw	r30, 0x00	; 0
 e7e:	29 f4       	brne	.+10     	; 0xe8a <free+0x10c>
 e80:	10 92 4d 01 	sts	0x014D, r1
 e84:	10 92 4c 01 	sts	0x014C, r1
 e88:	02 c0       	rjmp	.+4      	; 0xe8e <free+0x110>
 e8a:	13 82       	std	Z+3, r1	; 0x03
 e8c:	12 82       	std	Z+2, r1	; 0x02
 e8e:	d0 93 4b 01 	sts	0x014B, r29
 e92:	c0 93 4a 01 	sts	0x014A, r28
 e96:	df 91       	pop	r29
 e98:	cf 91       	pop	r28
 e9a:	08 95       	ret

00000e9c <fdevopen>:
 e9c:	0f 93       	push	r16
 e9e:	1f 93       	push	r17
 ea0:	cf 93       	push	r28
 ea2:	df 93       	push	r29
 ea4:	ec 01       	movw	r28, r24
 ea6:	8b 01       	movw	r16, r22
 ea8:	00 97       	sbiw	r24, 0x00	; 0
 eaa:	31 f4       	brne	.+12     	; 0xeb8 <fdevopen+0x1c>
 eac:	61 15       	cp	r22, r1
 eae:	71 05       	cpc	r23, r1
 eb0:	19 f4       	brne	.+6      	; 0xeb8 <fdevopen+0x1c>
 eb2:	80 e0       	ldi	r24, 0x00	; 0
 eb4:	90 e0       	ldi	r25, 0x00	; 0
 eb6:	38 c0       	rjmp	.+112    	; 0xf28 <fdevopen+0x8c>
 eb8:	6e e0       	ldi	r22, 0x0E	; 14
 eba:	70 e0       	ldi	r23, 0x00	; 0
 ebc:	81 e0       	ldi	r24, 0x01	; 1
 ebe:	90 e0       	ldi	r25, 0x00	; 0
 ec0:	0e 94 a0 07 	call	0xf40	; 0xf40 <calloc>
 ec4:	fc 01       	movw	r30, r24
 ec6:	00 97       	sbiw	r24, 0x00	; 0
 ec8:	a1 f3       	breq	.-24     	; 0xeb2 <fdevopen+0x16>
 eca:	80 e8       	ldi	r24, 0x80	; 128
 ecc:	83 83       	std	Z+3, r24	; 0x03
 ece:	01 15       	cp	r16, r1
 ed0:	11 05       	cpc	r17, r1
 ed2:	71 f0       	breq	.+28     	; 0xef0 <fdevopen+0x54>
 ed4:	13 87       	std	Z+11, r17	; 0x0b
 ed6:	02 87       	std	Z+10, r16	; 0x0a
 ed8:	81 e8       	ldi	r24, 0x81	; 129
 eda:	83 83       	std	Z+3, r24	; 0x03
 edc:	80 91 4e 01 	lds	r24, 0x014E
 ee0:	90 91 4f 01 	lds	r25, 0x014F
 ee4:	89 2b       	or	r24, r25
 ee6:	21 f4       	brne	.+8      	; 0xef0 <fdevopen+0x54>
 ee8:	f0 93 4f 01 	sts	0x014F, r31
 eec:	e0 93 4e 01 	sts	0x014E, r30
 ef0:	20 97       	sbiw	r28, 0x00	; 0
 ef2:	c9 f0       	breq	.+50     	; 0xf26 <fdevopen+0x8a>
 ef4:	d1 87       	std	Z+9, r29	; 0x09
 ef6:	c0 87       	std	Z+8, r28	; 0x08
 ef8:	83 81       	ldd	r24, Z+3	; 0x03
 efa:	82 60       	ori	r24, 0x02	; 2
 efc:	83 83       	std	Z+3, r24	; 0x03
 efe:	80 91 50 01 	lds	r24, 0x0150
 f02:	90 91 51 01 	lds	r25, 0x0151
 f06:	89 2b       	or	r24, r25
 f08:	71 f4       	brne	.+28     	; 0xf26 <fdevopen+0x8a>
 f0a:	f0 93 51 01 	sts	0x0151, r31
 f0e:	e0 93 50 01 	sts	0x0150, r30
 f12:	80 91 52 01 	lds	r24, 0x0152
 f16:	90 91 53 01 	lds	r25, 0x0153
 f1a:	89 2b       	or	r24, r25
 f1c:	21 f4       	brne	.+8      	; 0xf26 <fdevopen+0x8a>
 f1e:	f0 93 53 01 	sts	0x0153, r31
 f22:	e0 93 52 01 	sts	0x0152, r30
 f26:	cf 01       	movw	r24, r30
 f28:	df 91       	pop	r29
 f2a:	cf 91       	pop	r28
 f2c:	1f 91       	pop	r17
 f2e:	0f 91       	pop	r16
 f30:	08 95       	ret

00000f32 <putchar>:
 f32:	60 91 50 01 	lds	r22, 0x0150
 f36:	70 91 51 01 	lds	r23, 0x0151
 f3a:	0e 94 c3 07 	call	0xf86	; 0xf86 <fputc>
 f3e:	08 95       	ret

00000f40 <calloc>:
 f40:	0f 93       	push	r16
 f42:	1f 93       	push	r17
 f44:	cf 93       	push	r28
 f46:	df 93       	push	r29
 f48:	86 9f       	mul	r24, r22
 f4a:	80 01       	movw	r16, r0
 f4c:	87 9f       	mul	r24, r23
 f4e:	10 0d       	add	r17, r0
 f50:	96 9f       	mul	r25, r22
 f52:	10 0d       	add	r17, r0
 f54:	11 24       	eor	r1, r1
 f56:	c8 01       	movw	r24, r16
 f58:	0e 94 27 06 	call	0xc4e	; 0xc4e <malloc>
 f5c:	ec 01       	movw	r28, r24
 f5e:	00 97       	sbiw	r24, 0x00	; 0
 f60:	29 f0       	breq	.+10     	; 0xf6c <calloc+0x2c>
 f62:	a8 01       	movw	r20, r16
 f64:	60 e0       	ldi	r22, 0x00	; 0
 f66:	70 e0       	ldi	r23, 0x00	; 0
 f68:	0e 94 bc 07 	call	0xf78	; 0xf78 <memset>
 f6c:	ce 01       	movw	r24, r28
 f6e:	df 91       	pop	r29
 f70:	cf 91       	pop	r28
 f72:	1f 91       	pop	r17
 f74:	0f 91       	pop	r16
 f76:	08 95       	ret

00000f78 <memset>:
 f78:	dc 01       	movw	r26, r24
 f7a:	01 c0       	rjmp	.+2      	; 0xf7e <memset+0x6>
 f7c:	6d 93       	st	X+, r22
 f7e:	41 50       	subi	r20, 0x01	; 1
 f80:	50 40       	sbci	r21, 0x00	; 0
 f82:	e0 f7       	brcc	.-8      	; 0xf7c <memset+0x4>
 f84:	08 95       	ret

00000f86 <fputc>:
 f86:	0f 93       	push	r16
 f88:	1f 93       	push	r17
 f8a:	cf 93       	push	r28
 f8c:	df 93       	push	r29
 f8e:	18 2f       	mov	r17, r24
 f90:	09 2f       	mov	r16, r25
 f92:	eb 01       	movw	r28, r22
 f94:	8b 81       	ldd	r24, Y+3	; 0x03
 f96:	81 fd       	sbrc	r24, 1
 f98:	03 c0       	rjmp	.+6      	; 0xfa0 <fputc+0x1a>
 f9a:	8f ef       	ldi	r24, 0xFF	; 255
 f9c:	9f ef       	ldi	r25, 0xFF	; 255
 f9e:	20 c0       	rjmp	.+64     	; 0xfe0 <fputc+0x5a>
 fa0:	82 ff       	sbrs	r24, 2
 fa2:	10 c0       	rjmp	.+32     	; 0xfc4 <fputc+0x3e>
 fa4:	4e 81       	ldd	r20, Y+6	; 0x06
 fa6:	5f 81       	ldd	r21, Y+7	; 0x07
 fa8:	2c 81       	ldd	r18, Y+4	; 0x04
 faa:	3d 81       	ldd	r19, Y+5	; 0x05
 fac:	42 17       	cp	r20, r18
 fae:	53 07       	cpc	r21, r19
 fb0:	7c f4       	brge	.+30     	; 0xfd0 <fputc+0x4a>
 fb2:	e8 81       	ld	r30, Y
 fb4:	f9 81       	ldd	r31, Y+1	; 0x01
 fb6:	9f 01       	movw	r18, r30
 fb8:	2f 5f       	subi	r18, 0xFF	; 255
 fba:	3f 4f       	sbci	r19, 0xFF	; 255
 fbc:	39 83       	std	Y+1, r19	; 0x01
 fbe:	28 83       	st	Y, r18
 fc0:	10 83       	st	Z, r17
 fc2:	06 c0       	rjmp	.+12     	; 0xfd0 <fputc+0x4a>
 fc4:	e8 85       	ldd	r30, Y+8	; 0x08
 fc6:	f9 85       	ldd	r31, Y+9	; 0x09
 fc8:	81 2f       	mov	r24, r17
 fca:	09 95       	icall
 fcc:	89 2b       	or	r24, r25
 fce:	29 f7       	brne	.-54     	; 0xf9a <fputc+0x14>
 fd0:	2e 81       	ldd	r18, Y+6	; 0x06
 fd2:	3f 81       	ldd	r19, Y+7	; 0x07
 fd4:	2f 5f       	subi	r18, 0xFF	; 255
 fd6:	3f 4f       	sbci	r19, 0xFF	; 255
 fd8:	3f 83       	std	Y+7, r19	; 0x07
 fda:	2e 83       	std	Y+6, r18	; 0x06
 fdc:	81 2f       	mov	r24, r17
 fde:	90 2f       	mov	r25, r16
 fe0:	df 91       	pop	r29
 fe2:	cf 91       	pop	r28
 fe4:	1f 91       	pop	r17
 fe6:	0f 91       	pop	r16
 fe8:	08 95       	ret

00000fea <_exit>:
 fea:	f8 94       	cli

00000fec <__stop_program>:
 fec:	ff cf       	rjmp	.-2      	; 0xfec <__stop_program>
