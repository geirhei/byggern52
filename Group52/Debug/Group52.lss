
Group52.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000484  00000518  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000484  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800106  00800106  0000051e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000051e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  0000054e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a8a  00000000  00000000  000005fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000457  00000000  00000000  00001088  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000039c  00000000  00000000  000014df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000190  00000000  00000000  0000187c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002ca  00000000  00000000  00001a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002ac  00000000  00000000  00001cd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  00001f82  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e4 e8       	ldi	r30, 0x84	; 132
  84:	f4 e0       	ldi	r31, 0x04	; 4
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a6 30       	cpi	r26, 0x06	; 6
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a6 e0       	ldi	r26, 0x06	; 6
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a0 31       	cpi	r26, 0x10	; 16
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 57 00 	call	0xae	; 0xae <main>
  a6:	0c 94 40 02 	jmp	0x480	; 0x480 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <main>:
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
  ae:	67 ea       	ldi	r22, 0xA7	; 167
  b0:	70 e0       	ldi	r23, 0x00	; 0
  b2:	83 ea       	ldi	r24, 0xA3	; 163
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	0e 94 ab 00 	call	0x156	; 0x156 <fdevopen>
			retrieval_errors++;
  ba:	8f e1       	ldi	r24, 0x1F	; 31
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	0e 94 9c 00 	call	0x138	; 0x138 <usart_Init>
  c2:	85 b7       	in	r24, 0x35	; 53
  c4:	80 68       	ori	r24, 0x80	; 128
  c6:	85 bf       	out	0x35, r24	; 53
  c8:	0e 94 67 00 	call	0xce	; 0xce <oled_init>
  cc:	ff cf       	rjmp	.-2      	; 0xcc <main+0x1e>

000000ce <oled_init>:


void oled_write_c(char chr)
{
	volatile char *oled = (char *) 0x1000;
	oled[0] = chr;
  ce:	e0 e0       	ldi	r30, 0x00	; 0
  d0:	f0 e1       	ldi	r31, 0x10	; 16
  d2:	8e ea       	ldi	r24, 0xAE	; 174
  d4:	80 83       	st	Z, r24
  d6:	81 ea       	ldi	r24, 0xA1	; 161
  d8:	80 83       	st	Z, r24
  da:	8a ed       	ldi	r24, 0xDA	; 218
  dc:	80 83       	st	Z, r24
  de:	82 e1       	ldi	r24, 0x12	; 18
  e0:	80 83       	st	Z, r24
  e2:	88 ec       	ldi	r24, 0xC8	; 200
  e4:	80 83       	st	Z, r24
  e6:	88 ea       	ldi	r24, 0xA8	; 168
  e8:	80 83       	st	Z, r24
  ea:	8f e3       	ldi	r24, 0x3F	; 63
  ec:	80 83       	st	Z, r24
  ee:	85 ed       	ldi	r24, 0xD5	; 213
  f0:	80 83       	st	Z, r24
  f2:	80 e8       	ldi	r24, 0x80	; 128
  f4:	80 83       	st	Z, r24
  f6:	81 e8       	ldi	r24, 0x81	; 129
  f8:	80 83       	st	Z, r24
  fa:	80 e5       	ldi	r24, 0x50	; 80
  fc:	80 83       	st	Z, r24
  fe:	89 ed       	ldi	r24, 0xD9	; 217
 100:	80 83       	st	Z, r24
 102:	81 e2       	ldi	r24, 0x21	; 33
 104:	80 83       	st	Z, r24
 106:	80 e2       	ldi	r24, 0x20	; 32
 108:	80 83       	st	Z, r24
 10a:	10 82       	st	Z, r1
 10c:	8b ed       	ldi	r24, 0xDB	; 219
 10e:	80 83       	st	Z, r24
 110:	80 e3       	ldi	r24, 0x30	; 48
 112:	80 83       	st	Z, r24
 114:	8d ea       	ldi	r24, 0xAD	; 173
 116:	80 83       	st	Z, r24
 118:	10 82       	st	Z, r1
 11a:	84 ea       	ldi	r24, 0xA4	; 164
 11c:	80 83       	st	Z, r24
 11e:	86 ea       	ldi	r24, 0xA6	; 166
 120:	80 83       	st	Z, r24
 122:	8f ea       	ldi	r24, 0xAF	; 175
 124:	80 83       	st	Z, r24
 126:	84 e0       	ldi	r24, 0x04	; 4
 128:	94 e0       	ldi	r25, 0x04	; 4
}

void oled_write_d(char chr)
{
	volatile char *oled = (char *) 0x1200;
	oled[0] = chr;
 12a:	e0 e0       	ldi	r30, 0x00	; 0
 12c:	f2 e1       	ldi	r31, 0x12	; 18
 12e:	10 82       	st	Z, r1
 130:	01 97       	sbiw	r24, 0x01	; 1
	oled_write_c(0x00);
	oled_write_c(0xa4); //out follows RAM content
	oled_write_c(0xa6); //set normal display
	oled_write_c(0xaf); // display on
	
	for (int i = 0; i < 1028; i++)
 132:	00 97       	sbiw	r24, 0x00	; 0
 134:	e1 f7       	brne	.-8      	; 0x12e <oled_init+0x60>
	{
		oled_write_d(0x00);
	}
}
 136:	08 95       	ret

00000138 <usart_Init>:
#include <avr/io.h>

void usart_Init(unsigned int ubrr)
{
	/* Set baud rate*/
	UBRR0H = (unsigned char)(ubrr >> 8 );
 138:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
 13a:	89 b9       	out	0x09, r24	; 9
	/*Enable receiver and transmitter*/
	UCSR0B = (1 << RXEN0)|(1 << TXEN0);
 13c:	88 e1       	ldi	r24, 0x18	; 24
 13e:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1 << URSEL0)|(1 << USBS0)|(3 << UCSZ10);
 140:	8e e8       	ldi	r24, 0x8E	; 142
 142:	80 bd       	out	0x20, r24	; 32
 144:	08 95       	ret

00000146 <usart_Transmit>:
}

void usart_Transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while (!( UCSR0A & (1 << UDRE0)))
 146:	5d 9b       	sbis	0x0b, 5	; 11
 148:	fe cf       	rjmp	.-4      	; 0x146 <usart_Transmit>
		;
	/* Put data into buffer, sends the data */
	UDR0 = data;
 14a:	8c b9       	out	0x0c, r24	; 12
 14c:	08 95       	ret

0000014e <usart_Receive>:
}

unsigned char usart_Receive(void)
{
	/* Wait for data to be received */
	while ( !(UCSR0A & ( 1 << RXC0)) )
 14e:	5f 9b       	sbis	0x0b, 7	; 11
 150:	fe cf       	rjmp	.-4      	; 0x14e <usart_Receive>
		;
	/* Get and return received data from buffer */
	return UDR0;
 152:	8c b1       	in	r24, 0x0c	; 12
}
 154:	08 95       	ret

00000156 <fdevopen>:
 156:	0f 93       	push	r16
 158:	1f 93       	push	r17
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
 15e:	ec 01       	movw	r28, r24
 160:	8b 01       	movw	r16, r22
 162:	00 97       	sbiw	r24, 0x00	; 0
 164:	31 f4       	brne	.+12     	; 0x172 <fdevopen+0x1c>
 166:	61 15       	cp	r22, r1
 168:	71 05       	cpc	r23, r1
 16a:	19 f4       	brne	.+6      	; 0x172 <fdevopen+0x1c>
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	38 c0       	rjmp	.+112    	; 0x1e2 <fdevopen+0x8c>
 172:	6e e0       	ldi	r22, 0x0E	; 14
 174:	70 e0       	ldi	r23, 0x00	; 0
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <calloc>
 17e:	fc 01       	movw	r30, r24
 180:	00 97       	sbiw	r24, 0x00	; 0
 182:	a1 f3       	breq	.-24     	; 0x16c <fdevopen+0x16>
 184:	80 e8       	ldi	r24, 0x80	; 128
 186:	83 83       	std	Z+3, r24	; 0x03
 188:	01 15       	cp	r16, r1
 18a:	11 05       	cpc	r17, r1
 18c:	71 f0       	breq	.+28     	; 0x1aa <fdevopen+0x54>
 18e:	13 87       	std	Z+11, r17	; 0x0b
 190:	02 87       	std	Z+10, r16	; 0x0a
 192:	81 e8       	ldi	r24, 0x81	; 129
 194:	83 83       	std	Z+3, r24	; 0x03
 196:	80 91 06 01 	lds	r24, 0x0106
 19a:	90 91 07 01 	lds	r25, 0x0107
 19e:	89 2b       	or	r24, r25
 1a0:	21 f4       	brne	.+8      	; 0x1aa <fdevopen+0x54>
 1a2:	f0 93 07 01 	sts	0x0107, r31
 1a6:	e0 93 06 01 	sts	0x0106, r30
 1aa:	20 97       	sbiw	r28, 0x00	; 0
 1ac:	c9 f0       	breq	.+50     	; 0x1e0 <fdevopen+0x8a>
 1ae:	d1 87       	std	Z+9, r29	; 0x09
 1b0:	c0 87       	std	Z+8, r28	; 0x08
 1b2:	83 81       	ldd	r24, Z+3	; 0x03
 1b4:	82 60       	ori	r24, 0x02	; 2
 1b6:	83 83       	std	Z+3, r24	; 0x03
 1b8:	80 91 08 01 	lds	r24, 0x0108
 1bc:	90 91 09 01 	lds	r25, 0x0109
 1c0:	89 2b       	or	r24, r25
 1c2:	71 f4       	brne	.+28     	; 0x1e0 <fdevopen+0x8a>
 1c4:	f0 93 09 01 	sts	0x0109, r31
 1c8:	e0 93 08 01 	sts	0x0108, r30
 1cc:	80 91 0a 01 	lds	r24, 0x010A
 1d0:	90 91 0b 01 	lds	r25, 0x010B
 1d4:	89 2b       	or	r24, r25
 1d6:	21 f4       	brne	.+8      	; 0x1e0 <fdevopen+0x8a>
 1d8:	f0 93 0b 01 	sts	0x010B, r31
 1dc:	e0 93 0a 01 	sts	0x010A, r30
 1e0:	cf 01       	movw	r24, r30
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	1f 91       	pop	r17
 1e8:	0f 91       	pop	r16
 1ea:	08 95       	ret

000001ec <calloc>:
 1ec:	0f 93       	push	r16
 1ee:	1f 93       	push	r17
 1f0:	cf 93       	push	r28
 1f2:	df 93       	push	r29
 1f4:	86 9f       	mul	r24, r22
 1f6:	80 01       	movw	r16, r0
 1f8:	87 9f       	mul	r24, r23
 1fa:	10 0d       	add	r17, r0
 1fc:	96 9f       	mul	r25, r22
 1fe:	10 0d       	add	r17, r0
 200:	11 24       	eor	r1, r1
 202:	c8 01       	movw	r24, r16
 204:	0e 94 12 01 	call	0x224	; 0x224 <malloc>
 208:	ec 01       	movw	r28, r24
 20a:	00 97       	sbiw	r24, 0x00	; 0
 20c:	29 f0       	breq	.+10     	; 0x218 <calloc+0x2c>
 20e:	a8 01       	movw	r20, r16
 210:	60 e0       	ldi	r22, 0x00	; 0
 212:	70 e0       	ldi	r23, 0x00	; 0
 214:	0e 94 39 02 	call	0x472	; 0x472 <memset>
 218:	ce 01       	movw	r24, r28
 21a:	df 91       	pop	r29
 21c:	cf 91       	pop	r28
 21e:	1f 91       	pop	r17
 220:	0f 91       	pop	r16
 222:	08 95       	ret

00000224 <malloc>:
 224:	cf 93       	push	r28
 226:	df 93       	push	r29
 228:	82 30       	cpi	r24, 0x02	; 2
 22a:	91 05       	cpc	r25, r1
 22c:	10 f4       	brcc	.+4      	; 0x232 <malloc+0xe>
 22e:	82 e0       	ldi	r24, 0x02	; 2
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	e0 91 0e 01 	lds	r30, 0x010E
 236:	f0 91 0f 01 	lds	r31, 0x010F
 23a:	20 e0       	ldi	r18, 0x00	; 0
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	a0 e0       	ldi	r26, 0x00	; 0
 240:	b0 e0       	ldi	r27, 0x00	; 0
 242:	30 97       	sbiw	r30, 0x00	; 0
 244:	39 f1       	breq	.+78     	; 0x294 <malloc+0x70>
 246:	40 81       	ld	r20, Z
 248:	51 81       	ldd	r21, Z+1	; 0x01
 24a:	48 17       	cp	r20, r24
 24c:	59 07       	cpc	r21, r25
 24e:	b8 f0       	brcs	.+46     	; 0x27e <malloc+0x5a>
 250:	48 17       	cp	r20, r24
 252:	59 07       	cpc	r21, r25
 254:	71 f4       	brne	.+28     	; 0x272 <malloc+0x4e>
 256:	82 81       	ldd	r24, Z+2	; 0x02
 258:	93 81       	ldd	r25, Z+3	; 0x03
 25a:	10 97       	sbiw	r26, 0x00	; 0
 25c:	29 f0       	breq	.+10     	; 0x268 <malloc+0x44>
 25e:	13 96       	adiw	r26, 0x03	; 3
 260:	9c 93       	st	X, r25
 262:	8e 93       	st	-X, r24
 264:	12 97       	sbiw	r26, 0x02	; 2
 266:	2c c0       	rjmp	.+88     	; 0x2c0 <malloc+0x9c>
 268:	90 93 0f 01 	sts	0x010F, r25
 26c:	80 93 0e 01 	sts	0x010E, r24
 270:	27 c0       	rjmp	.+78     	; 0x2c0 <malloc+0x9c>
 272:	21 15       	cp	r18, r1
 274:	31 05       	cpc	r19, r1
 276:	31 f0       	breq	.+12     	; 0x284 <malloc+0x60>
 278:	42 17       	cp	r20, r18
 27a:	53 07       	cpc	r21, r19
 27c:	18 f0       	brcs	.+6      	; 0x284 <malloc+0x60>
 27e:	a9 01       	movw	r20, r18
 280:	db 01       	movw	r26, r22
 282:	01 c0       	rjmp	.+2      	; 0x286 <malloc+0x62>
 284:	ef 01       	movw	r28, r30
 286:	9a 01       	movw	r18, r20
 288:	bd 01       	movw	r22, r26
 28a:	df 01       	movw	r26, r30
 28c:	02 80       	ldd	r0, Z+2	; 0x02
 28e:	f3 81       	ldd	r31, Z+3	; 0x03
 290:	e0 2d       	mov	r30, r0
 292:	d7 cf       	rjmp	.-82     	; 0x242 <malloc+0x1e>
 294:	21 15       	cp	r18, r1
 296:	31 05       	cpc	r19, r1
 298:	f9 f0       	breq	.+62     	; 0x2d8 <malloc+0xb4>
 29a:	28 1b       	sub	r18, r24
 29c:	39 0b       	sbc	r19, r25
 29e:	24 30       	cpi	r18, 0x04	; 4
 2a0:	31 05       	cpc	r19, r1
 2a2:	80 f4       	brcc	.+32     	; 0x2c4 <malloc+0xa0>
 2a4:	8a 81       	ldd	r24, Y+2	; 0x02
 2a6:	9b 81       	ldd	r25, Y+3	; 0x03
 2a8:	61 15       	cp	r22, r1
 2aa:	71 05       	cpc	r23, r1
 2ac:	21 f0       	breq	.+8      	; 0x2b6 <malloc+0x92>
 2ae:	fb 01       	movw	r30, r22
 2b0:	93 83       	std	Z+3, r25	; 0x03
 2b2:	82 83       	std	Z+2, r24	; 0x02
 2b4:	04 c0       	rjmp	.+8      	; 0x2be <malloc+0x9a>
 2b6:	90 93 0f 01 	sts	0x010F, r25
 2ba:	80 93 0e 01 	sts	0x010E, r24
 2be:	fe 01       	movw	r30, r28
 2c0:	32 96       	adiw	r30, 0x02	; 2
 2c2:	44 c0       	rjmp	.+136    	; 0x34c <malloc+0x128>
 2c4:	fe 01       	movw	r30, r28
 2c6:	e2 0f       	add	r30, r18
 2c8:	f3 1f       	adc	r31, r19
 2ca:	81 93       	st	Z+, r24
 2cc:	91 93       	st	Z+, r25
 2ce:	22 50       	subi	r18, 0x02	; 2
 2d0:	31 09       	sbc	r19, r1
 2d2:	39 83       	std	Y+1, r19	; 0x01
 2d4:	28 83       	st	Y, r18
 2d6:	3a c0       	rjmp	.+116    	; 0x34c <malloc+0x128>
 2d8:	20 91 0c 01 	lds	r18, 0x010C
 2dc:	30 91 0d 01 	lds	r19, 0x010D
 2e0:	23 2b       	or	r18, r19
 2e2:	41 f4       	brne	.+16     	; 0x2f4 <malloc+0xd0>
 2e4:	20 91 02 01 	lds	r18, 0x0102
 2e8:	30 91 03 01 	lds	r19, 0x0103
 2ec:	30 93 0d 01 	sts	0x010D, r19
 2f0:	20 93 0c 01 	sts	0x010C, r18
 2f4:	20 91 00 01 	lds	r18, 0x0100
 2f8:	30 91 01 01 	lds	r19, 0x0101
 2fc:	21 15       	cp	r18, r1
 2fe:	31 05       	cpc	r19, r1
 300:	41 f4       	brne	.+16     	; 0x312 <malloc+0xee>
 302:	2d b7       	in	r18, 0x3d	; 61
 304:	3e b7       	in	r19, 0x3e	; 62
 306:	40 91 04 01 	lds	r20, 0x0104
 30a:	50 91 05 01 	lds	r21, 0x0105
 30e:	24 1b       	sub	r18, r20
 310:	35 0b       	sbc	r19, r21
 312:	e0 91 0c 01 	lds	r30, 0x010C
 316:	f0 91 0d 01 	lds	r31, 0x010D
 31a:	e2 17       	cp	r30, r18
 31c:	f3 07       	cpc	r31, r19
 31e:	a0 f4       	brcc	.+40     	; 0x348 <malloc+0x124>
 320:	2e 1b       	sub	r18, r30
 322:	3f 0b       	sbc	r19, r31
 324:	28 17       	cp	r18, r24
 326:	39 07       	cpc	r19, r25
 328:	78 f0       	brcs	.+30     	; 0x348 <malloc+0x124>
 32a:	ac 01       	movw	r20, r24
 32c:	4e 5f       	subi	r20, 0xFE	; 254
 32e:	5f 4f       	sbci	r21, 0xFF	; 255
 330:	24 17       	cp	r18, r20
 332:	35 07       	cpc	r19, r21
 334:	48 f0       	brcs	.+18     	; 0x348 <malloc+0x124>
 336:	4e 0f       	add	r20, r30
 338:	5f 1f       	adc	r21, r31
 33a:	50 93 0d 01 	sts	0x010D, r21
 33e:	40 93 0c 01 	sts	0x010C, r20
 342:	81 93       	st	Z+, r24
 344:	91 93       	st	Z+, r25
 346:	02 c0       	rjmp	.+4      	; 0x34c <malloc+0x128>
 348:	e0 e0       	ldi	r30, 0x00	; 0
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	cf 01       	movw	r24, r30
 34e:	df 91       	pop	r29
 350:	cf 91       	pop	r28
 352:	08 95       	ret

00000354 <free>:
 354:	cf 93       	push	r28
 356:	df 93       	push	r29
 358:	00 97       	sbiw	r24, 0x00	; 0
 35a:	09 f4       	brne	.+2      	; 0x35e <free+0xa>
 35c:	87 c0       	rjmp	.+270    	; 0x46c <free+0x118>
 35e:	fc 01       	movw	r30, r24
 360:	32 97       	sbiw	r30, 0x02	; 2
 362:	13 82       	std	Z+3, r1	; 0x03
 364:	12 82       	std	Z+2, r1	; 0x02
 366:	c0 91 0e 01 	lds	r28, 0x010E
 36a:	d0 91 0f 01 	lds	r29, 0x010F
 36e:	20 97       	sbiw	r28, 0x00	; 0
 370:	81 f4       	brne	.+32     	; 0x392 <free+0x3e>
 372:	20 81       	ld	r18, Z
 374:	31 81       	ldd	r19, Z+1	; 0x01
 376:	28 0f       	add	r18, r24
 378:	39 1f       	adc	r19, r25
 37a:	80 91 0c 01 	lds	r24, 0x010C
 37e:	90 91 0d 01 	lds	r25, 0x010D
 382:	82 17       	cp	r24, r18
 384:	93 07       	cpc	r25, r19
 386:	79 f5       	brne	.+94     	; 0x3e6 <free+0x92>
 388:	f0 93 0d 01 	sts	0x010D, r31
 38c:	e0 93 0c 01 	sts	0x010C, r30
 390:	6d c0       	rjmp	.+218    	; 0x46c <free+0x118>
 392:	de 01       	movw	r26, r28
 394:	20 e0       	ldi	r18, 0x00	; 0
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	ae 17       	cp	r26, r30
 39a:	bf 07       	cpc	r27, r31
 39c:	50 f4       	brcc	.+20     	; 0x3b2 <free+0x5e>
 39e:	12 96       	adiw	r26, 0x02	; 2
 3a0:	4d 91       	ld	r20, X+
 3a2:	5c 91       	ld	r21, X
 3a4:	13 97       	sbiw	r26, 0x03	; 3
 3a6:	9d 01       	movw	r18, r26
 3a8:	41 15       	cp	r20, r1
 3aa:	51 05       	cpc	r21, r1
 3ac:	09 f1       	breq	.+66     	; 0x3f0 <free+0x9c>
 3ae:	da 01       	movw	r26, r20
 3b0:	f3 cf       	rjmp	.-26     	; 0x398 <free+0x44>
 3b2:	b3 83       	std	Z+3, r27	; 0x03
 3b4:	a2 83       	std	Z+2, r26	; 0x02
 3b6:	40 81       	ld	r20, Z
 3b8:	51 81       	ldd	r21, Z+1	; 0x01
 3ba:	84 0f       	add	r24, r20
 3bc:	95 1f       	adc	r25, r21
 3be:	8a 17       	cp	r24, r26
 3c0:	9b 07       	cpc	r25, r27
 3c2:	71 f4       	brne	.+28     	; 0x3e0 <free+0x8c>
 3c4:	8d 91       	ld	r24, X+
 3c6:	9c 91       	ld	r25, X
 3c8:	11 97       	sbiw	r26, 0x01	; 1
 3ca:	84 0f       	add	r24, r20
 3cc:	95 1f       	adc	r25, r21
 3ce:	02 96       	adiw	r24, 0x02	; 2
 3d0:	91 83       	std	Z+1, r25	; 0x01
 3d2:	80 83       	st	Z, r24
 3d4:	12 96       	adiw	r26, 0x02	; 2
 3d6:	8d 91       	ld	r24, X+
 3d8:	9c 91       	ld	r25, X
 3da:	13 97       	sbiw	r26, 0x03	; 3
 3dc:	93 83       	std	Z+3, r25	; 0x03
 3de:	82 83       	std	Z+2, r24	; 0x02
 3e0:	21 15       	cp	r18, r1
 3e2:	31 05       	cpc	r19, r1
 3e4:	29 f4       	brne	.+10     	; 0x3f0 <free+0x9c>
 3e6:	f0 93 0f 01 	sts	0x010F, r31
 3ea:	e0 93 0e 01 	sts	0x010E, r30
 3ee:	3e c0       	rjmp	.+124    	; 0x46c <free+0x118>
 3f0:	d9 01       	movw	r26, r18
 3f2:	13 96       	adiw	r26, 0x03	; 3
 3f4:	fc 93       	st	X, r31
 3f6:	ee 93       	st	-X, r30
 3f8:	12 97       	sbiw	r26, 0x02	; 2
 3fa:	4d 91       	ld	r20, X+
 3fc:	5d 91       	ld	r21, X+
 3fe:	a4 0f       	add	r26, r20
 400:	b5 1f       	adc	r27, r21
 402:	ea 17       	cp	r30, r26
 404:	fb 07       	cpc	r31, r27
 406:	79 f4       	brne	.+30     	; 0x426 <free+0xd2>
 408:	80 81       	ld	r24, Z
 40a:	91 81       	ldd	r25, Z+1	; 0x01
 40c:	84 0f       	add	r24, r20
 40e:	95 1f       	adc	r25, r21
 410:	02 96       	adiw	r24, 0x02	; 2
 412:	d9 01       	movw	r26, r18
 414:	11 96       	adiw	r26, 0x01	; 1
 416:	9c 93       	st	X, r25
 418:	8e 93       	st	-X, r24
 41a:	82 81       	ldd	r24, Z+2	; 0x02
 41c:	93 81       	ldd	r25, Z+3	; 0x03
 41e:	13 96       	adiw	r26, 0x03	; 3
 420:	9c 93       	st	X, r25
 422:	8e 93       	st	-X, r24
 424:	12 97       	sbiw	r26, 0x02	; 2
 426:	e0 e0       	ldi	r30, 0x00	; 0
 428:	f0 e0       	ldi	r31, 0x00	; 0
 42a:	8a 81       	ldd	r24, Y+2	; 0x02
 42c:	9b 81       	ldd	r25, Y+3	; 0x03
 42e:	00 97       	sbiw	r24, 0x00	; 0
 430:	19 f0       	breq	.+6      	; 0x438 <free+0xe4>
 432:	fe 01       	movw	r30, r28
 434:	ec 01       	movw	r28, r24
 436:	f9 cf       	rjmp	.-14     	; 0x42a <free+0xd6>
 438:	ce 01       	movw	r24, r28
 43a:	02 96       	adiw	r24, 0x02	; 2
 43c:	28 81       	ld	r18, Y
 43e:	39 81       	ldd	r19, Y+1	; 0x01
 440:	82 0f       	add	r24, r18
 442:	93 1f       	adc	r25, r19
 444:	20 91 0c 01 	lds	r18, 0x010C
 448:	30 91 0d 01 	lds	r19, 0x010D
 44c:	28 17       	cp	r18, r24
 44e:	39 07       	cpc	r19, r25
 450:	69 f4       	brne	.+26     	; 0x46c <free+0x118>
 452:	30 97       	sbiw	r30, 0x00	; 0
 454:	29 f4       	brne	.+10     	; 0x460 <free+0x10c>
 456:	10 92 0f 01 	sts	0x010F, r1
 45a:	10 92 0e 01 	sts	0x010E, r1
 45e:	02 c0       	rjmp	.+4      	; 0x464 <free+0x110>
 460:	13 82       	std	Z+3, r1	; 0x03
 462:	12 82       	std	Z+2, r1	; 0x02
 464:	d0 93 0d 01 	sts	0x010D, r29
 468:	c0 93 0c 01 	sts	0x010C, r28
 46c:	df 91       	pop	r29
 46e:	cf 91       	pop	r28
 470:	08 95       	ret

00000472 <memset>:
 472:	dc 01       	movw	r26, r24
 474:	01 c0       	rjmp	.+2      	; 0x478 <memset+0x6>
 476:	6d 93       	st	X+, r22
 478:	41 50       	subi	r20, 0x01	; 1
 47a:	50 40       	sbci	r21, 0x00	; 0
 47c:	e0 f7       	brcc	.-8      	; 0x476 <memset+0x4>
 47e:	08 95       	ret

00000480 <_exit>:
 480:	f8 94       	cli

00000482 <__stop_program>:
 482:	ff cf       	rjmp	.-2      	; 0x482 <__stop_program>
