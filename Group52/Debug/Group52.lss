
Group52.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000058  00800100  00001044  000010d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001044  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800158  00800158  00001130  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001130  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000240  00000000  00000000  0000118c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002517  00000000  00000000  000013cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000cf5  00000000  00000000  000038e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bf7  00000000  00000000  000045d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004c8  00000000  00000000  000051d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000697  00000000  00000000  00005698  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000f3f  00000000  00000000  00005d2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001d8  00000000  00000000  00006c6e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__ctors_end>
       4:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
       8:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
       c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      10:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      14:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      18:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      1c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      20:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      24:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      28:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      2c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      30:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      34:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      38:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      3c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      40:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      44:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      48:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      4c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      50:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      54:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      58:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      5c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      60:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      64:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      68:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      6c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	00 00       	nop
      72:	00 00       	nop
      74:	00 5c       	subi	r16, 0xC0	; 192
      76:	00 00       	nop
      78:	0c 00       	.word	0x000c	; ????
      7a:	0c 00       	.word	0x000c	; ????
      7c:	7c 28       	or	r7, r12
      7e:	7c 28       	or	r7, r12
      80:	58 dc       	rcall	.-1872   	; 0xfffff932 <__eeprom_end+0xff7ef932>
      82:	68 00       	.word	0x0068	; ????
      84:	24 10       	cpse	r2, r4
      86:	48 00       	.word	0x0048	; ????
      88:	28 54       	subi	r18, 0x48	; 72
      8a:	28 40       	sbci	r18, 0x08	; 8
      8c:	00 0c       	add	r0, r0
      8e:	00 00       	nop
      90:	00 78       	andi	r16, 0x80	; 128
      92:	84 00       	.word	0x0084	; ????
      94:	84 78       	andi	r24, 0x84	; 132
      96:	00 00       	nop
      98:	54 38       	cpi	r21, 0x84	; 132
      9a:	54 00       	.word	0x0054	; ????
      9c:	10 7c       	andi	r17, 0xC0	; 192
      9e:	10 00       	.word	0x0010	; ????
      a0:	80 40       	sbci	r24, 0x00	; 0
      a2:	00 00       	nop
      a4:	10 10       	cpse	r1, r0
      a6:	10 00       	.word	0x0010	; ????
      a8:	00 40       	sbci	r16, 0x00	; 0
      aa:	00 00       	nop
      ac:	60 10       	cpse	r6, r0
      ae:	0c 00       	.word	0x000c	; ????
      b0:	38 54       	subi	r19, 0x48	; 72
      b2:	38 00       	.word	0x0038	; ????
      b4:	48 7c       	andi	r20, 0xC8	; 200
      b6:	40 00       	.word	0x0040	; ????
      b8:	48 64       	ori	r20, 0x48	; 72
      ba:	58 00       	.word	0x0058	; ????
      bc:	44 54       	subi	r20, 0x44	; 68
      be:	2c 00       	.word	0x002c	; ????
      c0:	1c 10       	cpse	r1, r12
      c2:	7c 00       	.word	0x007c	; ????
      c4:	5c 54       	subi	r21, 0x4C	; 76
      c6:	24 00       	.word	0x0024	; ????
      c8:	38 54       	subi	r19, 0x48	; 72
      ca:	24 00       	.word	0x0024	; ????
      cc:	64 14       	cp	r6, r4
      ce:	0c 00       	.word	0x000c	; ????
      d0:	68 54       	subi	r22, 0x48	; 72
      d2:	2c 00       	.word	0x002c	; ????
      d4:	48 54       	subi	r20, 0x48	; 72
      d6:	38 00       	.word	0x0038	; ????
      d8:	00 48       	sbci	r16, 0x80	; 128
      da:	00 00       	nop
      dc:	80 48       	sbci	r24, 0x80	; 128
      de:	00 00       	nop
      e0:	10 28       	or	r1, r0
      e2:	44 00       	.word	0x0044	; ????
      e4:	28 28       	or	r2, r8
      e6:	28 00       	.word	0x0028	; ????
      e8:	44 28       	or	r4, r4
      ea:	10 00       	.word	0x0010	; ????
      ec:	04 54       	subi	r16, 0x44	; 68
      ee:	08 00       	.word	0x0008	; ????
      f0:	38 44       	sbci	r19, 0x48	; 72
      f2:	5c 00       	.word	0x005c	; ????
      f4:	78 14       	cp	r7, r8
      f6:	78 00       	.word	0x0078	; ????
      f8:	7c 54       	subi	r23, 0x4C	; 76
      fa:	28 00       	.word	0x0028	; ????
      fc:	38 44       	sbci	r19, 0x48	; 72
      fe:	28 00       	.word	0x0028	; ????
     100:	7c 44       	sbci	r23, 0x4C	; 76
     102:	38 00       	.word	0x0038	; ????
     104:	7c 54       	subi	r23, 0x4C	; 76
     106:	44 00       	.word	0x0044	; ????
     108:	7c 14       	cp	r7, r12
     10a:	04 00       	.word	0x0004	; ????
     10c:	38 44       	sbci	r19, 0x48	; 72
     10e:	74 00       	.word	0x0074	; ????
     110:	7c 10       	cpse	r7, r12
     112:	7c 00       	.word	0x007c	; ????
     114:	44 7c       	andi	r20, 0xC4	; 196
     116:	44 00       	.word	0x0044	; ????
     118:	20 40       	sbci	r18, 0x00	; 0
     11a:	3c 00       	.word	0x003c	; ????
     11c:	7c 10       	cpse	r7, r12
     11e:	6c 00       	.word	0x006c	; ????
     120:	7c 40       	sbci	r23, 0x0C	; 12
     122:	40 00       	.word	0x0040	; ????
     124:	7c 18       	sub	r7, r12
     126:	7c 00       	.word	0x007c	; ????
     128:	78 10       	cpse	r7, r8
     12a:	3c 00       	.word	0x003c	; ????
     12c:	38 44       	sbci	r19, 0x48	; 72
     12e:	38 00       	.word	0x0038	; ????
     130:	7c 14       	cp	r7, r12
     132:	08 00       	.word	0x0008	; ????
     134:	38 44       	sbci	r19, 0x48	; 72
     136:	b8 00       	.word	0x00b8	; ????
     138:	7c 14       	cp	r7, r12
     13a:	68 00       	.word	0x0068	; ????
     13c:	48 54       	subi	r20, 0x48	; 72
     13e:	24 00       	.word	0x0024	; ????
     140:	04 7c       	andi	r16, 0xC4	; 196
     142:	04 00       	.word	0x0004	; ????
     144:	7c 40       	sbci	r23, 0x0C	; 12
     146:	7c 00       	.word	0x007c	; ????
     148:	3c 60       	ori	r19, 0x0C	; 12
     14a:	3c 00       	.word	0x003c	; ????
     14c:	7c 30       	cpi	r23, 0x0C	; 12
     14e:	7c 00       	.word	0x007c	; ????
     150:	6c 10       	cpse	r6, r12
     152:	6c 00       	.word	0x006c	; ????
     154:	0c 70       	andi	r16, 0x0C	; 12
     156:	0c 00       	.word	0x000c	; ????
     158:	64 54       	subi	r22, 0x44	; 68
     15a:	4c 00       	.word	0x004c	; ????
     15c:	00 7c       	andi	r16, 0xC0	; 192
     15e:	44 00       	.word	0x0044	; ????
     160:	0c 10       	cpse	r0, r12
     162:	60 00       	.word	0x0060	; ????
     164:	44 7c       	andi	r20, 0xC4	; 196
     166:	00 00       	nop
     168:	08 04       	cpc	r0, r8
     16a:	08 00       	.word	0x0008	; ????
     16c:	80 80       	ld	r8, Z
     16e:	80 00       	.word	0x0080	; ????
     170:	00 04       	cpc	r0, r0
     172:	08 00       	.word	0x0008	; ????
     174:	30 48       	sbci	r19, 0x80	; 128
     176:	78 00       	.word	0x0078	; ????
     178:	7c 48       	sbci	r23, 0x8C	; 140
     17a:	30 00       	.word	0x0030	; ????
     17c:	30 48       	sbci	r19, 0x80	; 128
     17e:	48 00       	.word	0x0048	; ????
     180:	30 48       	sbci	r19, 0x80	; 128
     182:	7c 00       	.word	0x007c	; ????
     184:	30 68       	ori	r19, 0x80	; 128
     186:	50 00       	.word	0x0050	; ????
     188:	10 78       	andi	r17, 0x80	; 128
     18a:	14 00       	.word	0x0014	; ????
     18c:	90 a8       	ldd	r9, Z+48	; 0x30
     18e:	78 00       	.word	0x0078	; ????
     190:	7c 08       	sbc	r7, r12
     192:	70 00       	.word	0x0070	; ????
     194:	50 74       	andi	r21, 0x40	; 64
     196:	40 00       	.word	0x0040	; ????
     198:	80 80       	ld	r8, Z
     19a:	74 00       	.word	0x0074	; ????
     19c:	7c 10       	cpse	r7, r12
     19e:	68 00       	.word	0x0068	; ????
     1a0:	44 7c       	andi	r20, 0xC4	; 196
     1a2:	40 00       	.word	0x0040	; ????
     1a4:	78 10       	cpse	r7, r8
     1a6:	78 00       	.word	0x0078	; ????
     1a8:	78 08       	sbc	r7, r8
     1aa:	70 00       	.word	0x0070	; ????
     1ac:	30 48       	sbci	r19, 0x80	; 128
     1ae:	30 00       	.word	0x0030	; ????
     1b0:	f8 28       	or	r15, r8
     1b2:	10 00       	.word	0x0010	; ????
     1b4:	30 48       	sbci	r19, 0x80	; 128
     1b6:	f8 00       	.word	0x00f8	; ????
     1b8:	78 10       	cpse	r7, r8
     1ba:	08 00       	.word	0x0008	; ????
     1bc:	50 58       	subi	r21, 0x80	; 128
     1be:	28 00       	.word	0x0028	; ????
     1c0:	08 3c       	cpi	r16, 0xC8	; 200
     1c2:	48 00       	.word	0x0048	; ????
     1c4:	38 40       	sbci	r19, 0x08	; 8
     1c6:	78 00       	.word	0x0078	; ????
     1c8:	38 40       	sbci	r19, 0x08	; 8
     1ca:	38 00       	.word	0x0038	; ????
     1cc:	78 20       	and	r7, r8
     1ce:	78 00       	.word	0x0078	; ????
     1d0:	48 30       	cpi	r20, 0x08	; 8
     1d2:	48 00       	.word	0x0048	; ????
     1d4:	98 a0       	ldd	r9, Y+32	; 0x20
     1d6:	78 00       	.word	0x0078	; ????
     1d8:	48 68       	ori	r20, 0x88	; 136
     1da:	58 00       	.word	0x0058	; ????
     1dc:	10 78       	andi	r17, 0x80	; 128
     1de:	84 00       	.word	0x0084	; ????
     1e0:	00 7c       	andi	r16, 0xC0	; 192
     1e2:	00 00       	nop
     1e4:	84 78       	andi	r24, 0x84	; 132
     1e6:	10 00       	.word	0x0010	; ????
     1e8:	08 04       	cpc	r0, r8
     1ea:	08 04       	cpc	r0, r8

000001ec <__ctors_end>:
     1ec:	11 24       	eor	r1, r1
     1ee:	1f be       	out	0x3f, r1	; 63
     1f0:	cf ef       	ldi	r28, 0xFF	; 255
     1f2:	d4 e0       	ldi	r29, 0x04	; 4
     1f4:	de bf       	out	0x3e, r29	; 62
     1f6:	cd bf       	out	0x3d, r28	; 61

000001f8 <__do_copy_data>:
     1f8:	11 e0       	ldi	r17, 0x01	; 1
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b1 e0       	ldi	r27, 0x01	; 1
     1fe:	e4 e4       	ldi	r30, 0x44	; 68
     200:	f0 e1       	ldi	r31, 0x10	; 16
     202:	02 c0       	rjmp	.+4      	; 0x208 <__do_copy_data+0x10>
     204:	05 90       	lpm	r0, Z+
     206:	0d 92       	st	X+, r0
     208:	a8 35       	cpi	r26, 0x58	; 88
     20a:	b1 07       	cpc	r27, r17
     20c:	d9 f7       	brne	.-10     	; 0x204 <__do_copy_data+0xc>

0000020e <__do_clear_bss>:
     20e:	21 e0       	ldi	r18, 0x01	; 1
     210:	a8 e5       	ldi	r26, 0x58	; 88
     212:	b1 e0       	ldi	r27, 0x01	; 1
     214:	01 c0       	rjmp	.+2      	; 0x218 <.do_clear_bss_start>

00000216 <.do_clear_bss_loop>:
     216:	1d 92       	st	X+, r1

00000218 <.do_clear_bss_start>:
     218:	a2 36       	cpi	r26, 0x62	; 98
     21a:	b2 07       	cpc	r27, r18
     21c:	e1 f7       	brne	.-8      	; 0x216 <.do_clear_bss_loop>
     21e:	0e 94 5f 02 	call	0x4be	; 0x4be <main>
     222:	0c 94 20 08 	jmp	0x1040	; 0x1040 <_exit>

00000226 <__bad_interrupt>:
     226:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000022a <adc_read>:
#include <util/delay.h>
#include "adc.h"

uint8_t adc_read(DeviceType device){
	volatile char *adc = (char *) 0x1400;
	switch (device) {
     22a:	82 30       	cpi	r24, 0x02	; 2
     22c:	69 f0       	breq	.+26     	; 0x248 <adc_read+0x1e>
     22e:	18 f4       	brcc	.+6      	; 0x236 <adc_read+0xc>
     230:	81 30       	cpi	r24, 0x01	; 1
     232:	31 f0       	breq	.+12     	; 0x240 <adc_read+0x16>
     234:	14 c0       	rjmp	.+40     	; 0x25e <adc_read+0x34>
     236:	83 30       	cpi	r24, 0x03	; 3
     238:	59 f0       	breq	.+22     	; 0x250 <adc_read+0x26>
     23a:	84 30       	cpi	r24, 0x04	; 4
     23c:	69 f0       	breq	.+26     	; 0x258 <adc_read+0x2e>
     23e:	0f c0       	rjmp	.+30     	; 0x25e <adc_read+0x34>
		case JOYAXIS1:
			/* Select CH1 */
			adc[0] = 0b00000100;
     240:	84 e0       	ldi	r24, 0x04	; 4
     242:	80 93 00 14 	sts	0x1400, r24
			break;
     246:	0b c0       	rjmp	.+22     	; 0x25e <adc_read+0x34>
		
		case JOYAXIS2:
			/* Select CH2 */
			adc[0] = 0b00000101;
     248:	85 e0       	ldi	r24, 0x05	; 5
     24a:	80 93 00 14 	sts	0x1400, r24
			break;
     24e:	07 c0       	rjmp	.+14     	; 0x25e <adc_read+0x34>
		
		case LSLIDER:
			/* Select CH3 */
			adc[0] = 0b00000110;
     250:	86 e0       	ldi	r24, 0x06	; 6
     252:	80 93 00 14 	sts	0x1400, r24
			break;
     256:	03 c0       	rjmp	.+6      	; 0x25e <adc_read+0x34>
		
		case RSLIDER:
			/* Select CH4 */
			adc[0] = 0b00000111;
     258:	87 e0       	ldi	r24, 0x07	; 7
     25a:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     25e:	2c ec       	ldi	r18, 0xCC	; 204
     260:	8c e0       	ldi	r24, 0x0C	; 12
     262:	91 e0       	ldi	r25, 0x01	; 1
     264:	21 50       	subi	r18, 0x01	; 1
     266:	80 40       	sbci	r24, 0x00	; 0
     268:	90 40       	sbci	r25, 0x00	; 0
     26a:	e1 f7       	brne	.-8      	; 0x264 <adc_read+0x3a>
     26c:	00 c0       	rjmp	.+0      	; 0x26e <adc_read+0x44>
		
		default:
			break;
	}
	_delay_ms(70);
	return adc[0];
     26e:	80 91 00 14 	lds	r24, 0x1400
     272:	08 95       	ret

00000274 <CAN_init>:
#include "MCP2515.h"
#include "can.h"

void CAN_init(void)
{
	MCP_init();
     274:	0e 94 4d 02 	call	0x49a	; 0x49a <MCP_init>
     278:	08 95       	ret

0000027a <CAN_message_send>:
}

/* High level function for sending a message on the CAN bus */
void CAN_message_send(can_message_t* msg)
{
     27a:	1f 93       	push	r17
     27c:	cf 93       	push	r28
     27e:	df 93       	push	r29
     280:	ec 01       	movw	r28, r24
	
	/* Only transmit buffer TXB0 is used */
	
	/* Loop until TXREQ is cleared */
	uint8_t status = MCP_read_status();
     282:	0e 94 25 02 	call	0x44a	; 0x44a <MCP_read_status>
	uint8_t TXREQ = (status & (1 << 2));
	while (TXREQ) {
     286:	82 ff       	sbrs	r24, 2
     288:	04 c0       	rjmp	.+8      	; 0x292 <CAN_message_send+0x18>
		status = MCP_read_status();
     28a:	0e 94 25 02 	call	0x44a	; 0x44a <MCP_read_status>
	/* Only transmit buffer TXB0 is used */
	
	/* Loop until TXREQ is cleared */
	uint8_t status = MCP_read_status();
	uint8_t TXREQ = (status & (1 << 2));
	while (TXREQ) {
     28e:	82 fd       	sbrc	r24, 2
     290:	fc cf       	rjmp	.-8      	; 0x28a <CAN_message_send+0x10>
		status = MCP_read_status();
		TXREQ = (status & (1 << 2));
	}
	
	/* Set message ID, standard mode*/
	MCP_write(MCP_TXB0CTRL + 1, 0); // High level identifier
     292:	60 e0       	ldi	r22, 0x00	; 0
     294:	81 e3       	ldi	r24, 0x31	; 49
     296:	0e 94 0e 02 	call	0x41c	; 0x41c <MCP_write>
	MCP_write(MCP_TXB0CTRL + 2, (msg->id << 5)); // Low level identifier
     29a:	68 81       	ld	r22, Y
     29c:	62 95       	swap	r22
     29e:	66 0f       	add	r22, r22
     2a0:	60 7e       	andi	r22, 0xE0	; 224
     2a2:	82 e3       	ldi	r24, 0x32	; 50
     2a4:	0e 94 0e 02 	call	0x41c	; 0x41c <MCP_write>
	
	/* Set data length */
	MCP_write(MCP_TXB0CTRL + 5, msg->length & 0x0F);
     2a8:	6a 81       	ldd	r22, Y+2	; 0x02
     2aa:	6f 70       	andi	r22, 0x0F	; 15
     2ac:	85 e3       	ldi	r24, 0x35	; 53
     2ae:	0e 94 0e 02 	call	0x41c	; 0x41c <MCP_write>
	
	/* Load message data */
	for (uint8_t i = 0; i < msg->length; i++) {
     2b2:	8a 81       	ldd	r24, Y+2	; 0x02
     2b4:	88 23       	and	r24, r24
     2b6:	69 f0       	breq	.+26     	; 0x2d2 <CAN_message_send+0x58>
     2b8:	10 e0       	ldi	r17, 0x00	; 0
		MCP_write(MCP_TXB0CTRL + 6 + i, msg->data[i]);
     2ba:	fe 01       	movw	r30, r28
     2bc:	e1 0f       	add	r30, r17
     2be:	f1 1d       	adc	r31, r1
     2c0:	63 81       	ldd	r22, Z+3	; 0x03
     2c2:	86 e3       	ldi	r24, 0x36	; 54
     2c4:	81 0f       	add	r24, r17
     2c6:	0e 94 0e 02 	call	0x41c	; 0x41c <MCP_write>
	
	/* Set data length */
	MCP_write(MCP_TXB0CTRL + 5, msg->length & 0x0F);
	
	/* Load message data */
	for (uint8_t i = 0; i < msg->length; i++) {
     2ca:	1f 5f       	subi	r17, 0xFF	; 255
     2cc:	8a 81       	ldd	r24, Y+2	; 0x02
     2ce:	18 17       	cp	r17, r24
     2d0:	a0 f3       	brcs	.-24     	; 0x2ba <CAN_message_send+0x40>
		MCP_write(MCP_TXB0CTRL + 6 + i, msg->data[i]);
	}
	
	/* Request to send contents of TXB0 */
	MCP_request_to_send(MCP_RTS_TX0);
     2d2:	81 e8       	ldi	r24, 0x81	; 129
     2d4:	0e 94 20 02 	call	0x440	; 0x440 <MCP_request_to_send>
}
     2d8:	df 91       	pop	r29
     2da:	cf 91       	pop	r28
     2dc:	1f 91       	pop	r17
     2de:	08 95       	ret

000002e0 <JOYSTICK_init>:
#include "can.h"

void JOYSTICK_init(void)
{
	/* Set PB2 as input for button*/
	DDRB &= ~(1 << PB2);
     2e0:	ba 98       	cbi	0x17, 2	; 23
	PORTB &= (1 << PB2);
     2e2:	88 b3       	in	r24, 0x18	; 24
     2e4:	84 70       	andi	r24, 0x04	; 4
     2e6:	88 bb       	out	0x18, r24	; 24
     2e8:	08 95       	ret

000002ea <JOYSTICK_get_position>:
{
	
}

position_t JOYSTICK_get_position(void)
{
     2ea:	cf 93       	push	r28
	uint8_t x_value = adc_read(JOYAXIS2);
     2ec:	82 e0       	ldi	r24, 0x02	; 2
     2ee:	0e 94 15 01 	call	0x22a	; 0x22a <adc_read>
     2f2:	c8 2f       	mov	r28, r24
	uint8_t y_value = adc_read(JOYAXIS1);
     2f4:	81 e0       	ldi	r24, 0x01	; 1
     2f6:	0e 94 15 01 	call	0x22a	; 0x22a <adc_read>
	
	position_t position;
	position.x = x_value;
	position.y = y_value;
	return position;
}
     2fa:	6c 2f       	mov	r22, r28
     2fc:	78 2f       	mov	r23, r24
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	cf 91       	pop	r28
     304:	08 95       	ret

00000306 <JOYSTICK_get_direction>:

Direction JOYSTICK_get_direction(position_t pos)
{
	const uint8_t THRESHOLD = 64;
	
	if (pos.y < 127+THRESHOLD && pos.y > 127-THRESHOLD) {
     306:	80 ec       	ldi	r24, 0xC0	; 192
     308:	87 0f       	add	r24, r23
     30a:	8f 37       	cpi	r24, 0x7F	; 127
     30c:	48 f4       	brcc	.+18     	; 0x320 <JOYSTICK_get_direction+0x1a>
		if (pos.x < 127-THRESHOLD) {
     30e:	70 e0       	ldi	r23, 0x00	; 0
     310:	6f 33       	cpi	r22, 0x3F	; 63
     312:	71 05       	cpc	r23, r1
     314:	94 f0       	brlt	.+36     	; 0x33a <JOYSTICK_get_direction+0x34>
			return LEFT;
		} else if (pos.x > 127+THRESHOLD) {
     316:	60 3c       	cpi	r22, 0xC0	; 192
     318:	71 05       	cpc	r23, r1
     31a:	8c f4       	brge	.+34     	; 0x33e <JOYSTICK_get_direction+0x38>
			return DOWN;
		} else if (pos.y > 127+THRESHOLD) {
			return UP;
		}
	}
	return NEUTRAL;
     31c:	80 e0       	ldi	r24, 0x00	; 0
     31e:	08 95       	ret
			return LEFT;
		} else if (pos.x > 127+THRESHOLD) {
			return RIGHT;
		}
		
	} else if (pos.x < 127+THRESHOLD && pos.x > 127-THRESHOLD) {
     320:	60 54       	subi	r22, 0x40	; 64
     322:	6f 37       	cpi	r22, 0x7F	; 127
     324:	70 f4       	brcc	.+28     	; 0x342 <JOYSTICK_get_direction+0x3c>
		if (pos.y < 127-THRESHOLD) {
     326:	87 2f       	mov	r24, r23
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	8f 33       	cpi	r24, 0x3F	; 63
     32c:	91 05       	cpc	r25, r1
     32e:	5c f0       	brlt	.+22     	; 0x346 <JOYSTICK_get_direction+0x40>
			return DOWN;
		} else if (pos.y > 127+THRESHOLD) {
     330:	80 3c       	cpi	r24, 0xC0	; 192
     332:	91 05       	cpc	r25, r1
     334:	54 f4       	brge	.+20     	; 0x34a <JOYSTICK_get_direction+0x44>
			return UP;
		}
	}
	return NEUTRAL;
     336:	80 e0       	ldi	r24, 0x00	; 0
     338:	08 95       	ret
{
	const uint8_t THRESHOLD = 64;
	
	if (pos.y < 127+THRESHOLD && pos.y > 127-THRESHOLD) {
		if (pos.x < 127-THRESHOLD) {
			return LEFT;
     33a:	81 e0       	ldi	r24, 0x01	; 1
     33c:	08 95       	ret
		} else if (pos.x > 127+THRESHOLD) {
			return RIGHT;
     33e:	82 e0       	ldi	r24, 0x02	; 2
     340:	08 95       	ret
			return DOWN;
		} else if (pos.y > 127+THRESHOLD) {
			return UP;
		}
	}
	return NEUTRAL;
     342:	80 e0       	ldi	r24, 0x00	; 0
     344:	08 95       	ret
			return RIGHT;
		}
		
	} else if (pos.x < 127+THRESHOLD && pos.x > 127-THRESHOLD) {
		if (pos.y < 127-THRESHOLD) {
			return DOWN;
     346:	84 e0       	ldi	r24, 0x04	; 4
     348:	08 95       	ret
		} else if (pos.y > 127+THRESHOLD) {
			return UP;
     34a:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
	return NEUTRAL;
}
     34c:	08 95       	ret

0000034e <SLIDERS_get_positions>:
	int16_t percentValue = round((float)value / 127 * 100);
	return percentValue;
}

position_t SLIDERS_get_positions(void)
{
     34e:	cf 93       	push	r28
	uint8_t l_value = adc_read(LSLIDER);
     350:	83 e0       	ldi	r24, 0x03	; 3
     352:	0e 94 15 01 	call	0x22a	; 0x22a <adc_read>
     356:	c8 2f       	mov	r28, r24
	uint8_t r_value = adc_read(RSLIDER);
     358:	84 e0       	ldi	r24, 0x04	; 4
     35a:	0e 94 15 01 	call	0x22a	; 0x22a <adc_read>
     35e:	98 2f       	mov	r25, r24
     360:	e0 e0       	ldi	r30, 0x00	; 0
     362:	f0 ef       	ldi	r31, 0xF0	; 240
     364:	31 97       	sbiw	r30, 0x01	; 1
     366:	f1 f7       	brne	.-4      	; 0x364 <SLIDERS_get_positions+0x16>
	
	position_t pos;
	pos.l = l_value;
	pos.r = r_value;
	return pos;
}
     368:	60 e0       	ldi	r22, 0x00	; 0
     36a:	70 e0       	ldi	r23, 0x00	; 0
     36c:	8c 2f       	mov	r24, r28
     36e:	cf 91       	pop	r28
     370:	08 95       	ret

00000372 <JOYSTICK_send_position>:
}

/* Sends a message containing position values 0-255 for joystick and sliders, and direction
	over the CAN bus.*/
void JOYSTICK_send_position(void)
{
     372:	ff 92       	push	r15
     374:	0f 93       	push	r16
     376:	1f 93       	push	r17
     378:	cf 93       	push	r28
     37a:	df 93       	push	r29
     37c:	cd b7       	in	r28, 0x3d	; 61
     37e:	de b7       	in	r29, 0x3e	; 62
     380:	2b 97       	sbiw	r28, 0x0b	; 11
     382:	0f b6       	in	r0, 0x3f	; 63
     384:	f8 94       	cli
     386:	de bf       	out	0x3e, r29	; 62
     388:	0f be       	out	0x3f, r0	; 63
     38a:	cd bf       	out	0x3d, r28	; 61
	position_t joypos = JOYSTICK_get_position();
     38c:	0e 94 75 01 	call	0x2ea	; 0x2ea <JOYSTICK_get_position>
     390:	06 2f       	mov	r16, r22
     392:	17 2f       	mov	r17, r23
	Direction joydir = JOYSTICK_get_direction(joypos);
     394:	0e 94 83 01 	call	0x306	; 0x306 <JOYSTICK_get_direction>
     398:	f8 2e       	mov	r15, r24
	position_t sliderpos = SLIDERS_get_positions();
     39a:	0e 94 a7 01 	call	0x34e	; 0x34e <SLIDERS_get_positions>
	
	can_message_t can_message;
	can_message.data[0] = 'j';
     39e:	2a e6       	ldi	r18, 0x6A	; 106
     3a0:	2c 83       	std	Y+4, r18	; 0x04
	can_message.data[1] = joydir;
     3a2:	fd 82       	std	Y+5, r15	; 0x05
	can_message.data[2] = joypos.x;
     3a4:	0e 83       	std	Y+6, r16	; 0x06
	can_message.data[3] = joypos.y;
     3a6:	1f 83       	std	Y+7, r17	; 0x07
	can_message.data[4] = sliderpos.l;
     3a8:	88 87       	std	Y+8, r24	; 0x08
	can_message.data[5] = sliderpos.r;
     3aa:	99 87       	std	Y+9, r25	; 0x09
	can_message.length = 6;
     3ac:	86 e0       	ldi	r24, 0x06	; 6
     3ae:	8b 83       	std	Y+3, r24	; 0x03
	can_message.id = 1;
     3b0:	81 e0       	ldi	r24, 0x01	; 1
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	9a 83       	std	Y+2, r25	; 0x02
     3b6:	89 83       	std	Y+1, r24	; 0x01
	
	//printf("msg_type: %i\n", can_message.data[0]);
     3b8:	1f 92       	push	r1
     3ba:	2f 93       	push	r18
     3bc:	86 e0       	ldi	r24, 0x06	; 6
     3be:	91 e0       	ldi	r25, 0x01	; 1
     3c0:	9f 93       	push	r25
     3c2:	8f 93       	push	r24
     3c4:	0e 94 3a 05 	call	0xa74	; 0xa74 <printf>
	CAN_message_send(&can_message);
     3c8:	ce 01       	movw	r24, r28
     3ca:	01 96       	adiw	r24, 0x01	; 1
     3cc:	0e 94 3d 01 	call	0x27a	; 0x27a <CAN_message_send>
     3d0:	0f 90       	pop	r0
     3d2:	0f 90       	pop	r0
     3d4:	0f 90       	pop	r0
     3d6:	0f 90       	pop	r0
     3d8:	2b 96       	adiw	r28, 0x0b	; 11
     3da:	0f b6       	in	r0, 0x3f	; 63
     3dc:	f8 94       	cli
     3de:	de bf       	out	0x3e, r29	; 62
     3e0:	0f be       	out	0x3f, r0	; 63
     3e2:	cd bf       	out	0x3d, r28	; 61
     3e4:	df 91       	pop	r29
     3e6:	cf 91       	pop	r28
     3e8:	1f 91       	pop	r17
     3ea:	0f 91       	pop	r16
     3ec:	ff 90       	pop	r15
     3ee:	08 95       	ret

000003f0 <MCP_reset>:
	MCP_set_mode(MODE_NORMAL); // Sets normal operation mode
}

void MCP_reset(void)
{
	PORTB &= ~(1 << PB4);
     3f0:	c4 98       	cbi	0x18, 4	; 24
	SPI_master_transmit(MCP_RESET);
     3f2:	80 ec       	ldi	r24, 0xC0	; 192
     3f4:	0e 94 b5 03 	call	0x76a	; 0x76a <SPI_master_transmit>
	PORTB |= (1 << PB4);
     3f8:	c4 9a       	sbi	0x18, 4	; 24
     3fa:	08 95       	ret

000003fc <MCP_read>:
}

/* Returns the content of a register */
uint8_t MCP_read(uint8_t addr)
{
     3fc:	cf 93       	push	r28
     3fe:	c8 2f       	mov	r28, r24
	PORTB &= ~(1 << PB4);
     400:	c4 98       	cbi	0x18, 4	; 24
	SPI_master_transmit(MCP_READ);
     402:	83 e0       	ldi	r24, 0x03	; 3
     404:	0e 94 b5 03 	call	0x76a	; 0x76a <SPI_master_transmit>
	SPI_master_transmit(addr);
     408:	8c 2f       	mov	r24, r28
     40a:	0e 94 b5 03 	call	0x76a	; 0x76a <SPI_master_transmit>
	SPI_master_transmit(0x00);
     40e:	80 e0       	ldi	r24, 0x00	; 0
     410:	0e 94 b5 03 	call	0x76a	; 0x76a <SPI_master_transmit>
	char data = SPDR;
     414:	8f b1       	in	r24, 0x0f	; 15
	PORTB |= (1 << PB4);
     416:	c4 9a       	sbi	0x18, 4	; 24
	return data;
}
     418:	cf 91       	pop	r28
     41a:	08 95       	ret

0000041c <MCP_write>:

void MCP_write(uint8_t addr, uint8_t data)
{
     41c:	cf 93       	push	r28
     41e:	df 93       	push	r29
     420:	d8 2f       	mov	r29, r24
     422:	c6 2f       	mov	r28, r22
	PORTB &= ~(1 << PB4);
     424:	c4 98       	cbi	0x18, 4	; 24
	SPI_master_transmit(MCP_WRITE);
     426:	82 e0       	ldi	r24, 0x02	; 2
     428:	0e 94 b5 03 	call	0x76a	; 0x76a <SPI_master_transmit>
	SPI_master_transmit(addr);
     42c:	8d 2f       	mov	r24, r29
     42e:	0e 94 b5 03 	call	0x76a	; 0x76a <SPI_master_transmit>
	SPI_master_transmit(data);
     432:	8c 2f       	mov	r24, r28
     434:	0e 94 b5 03 	call	0x76a	; 0x76a <SPI_master_transmit>
	PORTB |= (1 << PB4);
     438:	c4 9a       	sbi	0x18, 4	; 24
}
     43a:	df 91       	pop	r29
     43c:	cf 91       	pop	r28
     43e:	08 95       	ret

00000440 <MCP_request_to_send>:
}

/* Instructs controller to begin message transmission for the selected buffers */
void MCP_request_to_send(uint8_t buffer)
{
	PORTB &= ~(1 << PB4);
     440:	c4 98       	cbi	0x18, 4	; 24
	SPI_master_transmit(buffer);
     442:	0e 94 b5 03 	call	0x76a	; 0x76a <SPI_master_transmit>
	PORTB |= (1 << PB4);
     446:	c4 9a       	sbi	0x18, 4	; 24
     448:	08 95       	ret

0000044a <MCP_read_status>:
}

/* Returns some status bits for transmit and receive functions */
uint8_t MCP_read_status(void)
{
	PORTB &= ~(1 << PB4);
     44a:	c4 98       	cbi	0x18, 4	; 24
	SPI_master_transmit(MCP_READ_STATUS);
     44c:	80 ea       	ldi	r24, 0xA0	; 160
     44e:	0e 94 b5 03 	call	0x76a	; 0x76a <SPI_master_transmit>
	SPI_master_transmit(0x00); // Unneccessary because of "repeat data out"?
     452:	80 e0       	ldi	r24, 0x00	; 0
     454:	0e 94 b5 03 	call	0x76a	; 0x76a <SPI_master_transmit>
	char status = SPDR;
     458:	8f b1       	in	r24, 0x0f	; 15
	PORTB |= (1 << PB4);
     45a:	c4 9a       	sbi	0x18, 4	; 24
	return status;
}
     45c:	08 95       	ret

0000045e <MCP_modify_bit>:
	MCP_modify_bit(MCP_CANCTRL, mask, mode);
}

/* Changes the value of the register bits specified by the mask */
void MCP_modify_bit(uint8_t addr, uint8_t mask, uint8_t data)
{
     45e:	1f 93       	push	r17
     460:	cf 93       	push	r28
     462:	df 93       	push	r29
     464:	18 2f       	mov	r17, r24
     466:	d6 2f       	mov	r29, r22
     468:	c4 2f       	mov	r28, r20
	PORTB &= ~(1 << PB4);
     46a:	c4 98       	cbi	0x18, 4	; 24
	SPI_master_transmit(MCP_BITMOD);
     46c:	85 e0       	ldi	r24, 0x05	; 5
     46e:	0e 94 b5 03 	call	0x76a	; 0x76a <SPI_master_transmit>
	SPI_master_transmit(addr);
     472:	81 2f       	mov	r24, r17
     474:	0e 94 b5 03 	call	0x76a	; 0x76a <SPI_master_transmit>
	SPI_master_transmit(mask);
     478:	8d 2f       	mov	r24, r29
     47a:	0e 94 b5 03 	call	0x76a	; 0x76a <SPI_master_transmit>
	SPI_master_transmit(data);
     47e:	8c 2f       	mov	r24, r28
     480:	0e 94 b5 03 	call	0x76a	; 0x76a <SPI_master_transmit>
	PORTB |= (1 << PB4);
     484:	c4 9a       	sbi	0x18, 4	; 24
     486:	df 91       	pop	r29
     488:	cf 91       	pop	r28
     48a:	1f 91       	pop	r17
     48c:	08 95       	ret

0000048e <MCP_set_mode>:
			break;
		default:
			break;
	}
	
	MCP_modify_bit(MCP_CANCTRL, mask, mode);
     48e:	48 2f       	mov	r20, r24
     490:	60 ee       	ldi	r22, 0xE0	; 224
     492:	8f e0       	ldi	r24, 0x0F	; 15
     494:	0e 94 2f 02 	call	0x45e	; 0x45e <MCP_modify_bit>
     498:	08 95       	ret

0000049a <MCP_init>:
#include "MCP2515.h"
#include "mcp.h"

void MCP_init(void)
{
	SPI_master_init();
     49a:	0e 94 b0 03 	call	0x760	; 0x760 <SPI_master_init>
	MCP_reset();
     49e:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <MCP_reset>
	
	MCP_modify_bit(MCP_RXB0CTRL, 0b01100000, 0xFF); // Turns masks/filters off for RX0
     4a2:	4f ef       	ldi	r20, 0xFF	; 255
     4a4:	60 e6       	ldi	r22, 0x60	; 96
     4a6:	80 e6       	ldi	r24, 0x60	; 96
     4a8:	0e 94 2f 02 	call	0x45e	; 0x45e <MCP_modify_bit>
	MCP_modify_bit(MCP_RXB1CTRL, 0b01100000, 0xFF); // Turns masks/filters off for RX1
     4ac:	4f ef       	ldi	r20, 0xFF	; 255
     4ae:	60 e6       	ldi	r22, 0x60	; 96
     4b0:	80 e7       	ldi	r24, 0x70	; 112
     4b2:	0e 94 2f 02 	call	0x45e	; 0x45e <MCP_modify_bit>
	//MCP_set_mode(MODE_LOOPBACK); // Sets loopback operation mode for testing
	MCP_set_mode(MODE_NORMAL); // Sets normal operation mode
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	0e 94 47 02 	call	0x48e	; 0x48e <MCP_set_mode>
     4bc:	08 95       	ret

000004be <main>:


int main(void)
{
	/* Needs to be set when using external memory */
	MCUCR |= (1 << SRE);
     4be:	85 b7       	in	r24, 0x35	; 53
     4c0:	80 68       	ori	r24, 0x80	; 128
     4c2:	85 bf       	out	0x35, r24	; 53

	fdevopen(USART_transmit, USART_receive); // Sets printf to serial port
     4c4:	64 ec       	ldi	r22, 0xC4	; 196
     4c6:	73 e0       	ldi	r23, 0x03	; 3
     4c8:	80 ec       	ldi	r24, 0xC0	; 192
     4ca:	93 e0       	ldi	r25, 0x03	; 3
     4cc:	0e 94 ef 04 	call	0x9de	; 0x9de <fdevopen>
	USART_init(MYUBBR);
     4d0:	8f e1       	ldi	r24, 0x1F	; 31
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	0e 94 b9 03 	call	0x772	; 0x772 <USART_init>
	OLED_init();
     4d8:	0e 94 ba 02 	call	0x574	; 0x574 <OLED_init>
	JOYSTICK_init();
     4dc:	0e 94 70 01 	call	0x2e0	; 0x2e0 <JOYSTICK_init>
	CAN_init();
     4e0:	0e 94 3a 01 	call	0x274	; 0x274 <CAN_init>
	
	OLED_reset();
     4e4:	0e 94 ac 02 	call	0x558	; 0x558 <OLED_reset>
	OLED_pos(2,20);
     4e8:	64 e1       	ldi	r22, 0x14	; 20
     4ea:	82 e0       	ldi	r24, 0x02	; 2
     4ec:	0e 94 9f 02 	call	0x53e	; 0x53e <OLED_pos>
	
	menuNode *menu = OLED_generate_menu();
     4f0:	0e 94 2c 03 	call	0x658	; 0x658 <OLED_generate_menu>
	OLED_print_menu(menu);
     4f4:	0e 94 70 03 	call	0x6e0	; 0x6e0 <OLED_print_menu>
	Direction joydir = NEUTRAL;
	uint8_t buttonPressed = 0;
	
	/* MCP TEST */
	
	uint8_t status = MCP_read(MCP_CANCTRL);
     4f8:	8f e0       	ldi	r24, 0x0F	; 15
     4fa:	0e 94 fe 01 	call	0x3fc	; 0x3fc <MCP_read>
	//printf("CANCTRL: %02x\n", status);
	
	uint8_t RXB0CTRL = MCP_read(MCP_RXB0CTRL);
     4fe:	80 e6       	ldi	r24, 0x60	; 96
     500:	0e 94 fe 01 	call	0x3fc	; 0x3fc <MCP_read>
	//printf("RXB0CTRL: %02x\n", RXB0CTRL);
	
	while(1)
	{	
		JOYSTICK_send_position(); // Sends current position values over CAN
		
     504:	0e 94 b9 01 	call	0x372	; 0x372 <JOYSTICK_send_position>
     508:	fd cf       	rjmp	.-6      	; 0x504 <__stack+0x5>

0000050a <OLED_goto_line>:
}

void OLED_write_c(char chr)
{
	volatile char *oled = (char *) 0x1000;
	oled[0] = chr;
     50a:	e0 e0       	ldi	r30, 0x00	; 0
     50c:	f0 e1       	ldi	r31, 0x10	; 16
     50e:	92 e2       	ldi	r25, 0x22	; 34
     510:	90 83       	st	Z, r25
     512:	80 83       	st	Z, r24
     514:	87 e0       	ldi	r24, 0x07	; 7
     516:	80 83       	st	Z, r24
     518:	08 95       	ret

0000051a <OLED_clear_line>:
	OLED_write_c(0x07);
}

void OLED_clear_line(uint8_t line)
{
	OLED_goto_line(line);
     51a:	0e 94 85 02 	call	0x50a	; 0x50a <OLED_goto_line>
}

void OLED_write_c(char chr)
{
	volatile char *oled = (char *) 0x1000;
	oled[0] = chr;
     51e:	e0 e0       	ldi	r30, 0x00	; 0
     520:	f0 e1       	ldi	r31, 0x10	; 16
     522:	81 e2       	ldi	r24, 0x21	; 33
     524:	80 83       	st	Z, r24
     526:	10 82       	st	Z, r1
     528:	8f e7       	ldi	r24, 0x7F	; 127
     52a:	80 83       	st	Z, r24
     52c:	80 e8       	ldi	r24, 0x80	; 128
     52e:	90 e0       	ldi	r25, 0x00	; 0
}

void OLED_write_d(char chr)
{
	volatile char *oled = (char *) 0x1200;
	oled[0] = chr;
     530:	e0 e0       	ldi	r30, 0x00	; 0
     532:	f2 e1       	ldi	r31, 0x12	; 18
     534:	10 82       	st	Z, r1
     536:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_c(0x21);
	OLED_write_c(0x00);
	OLED_write_c(0x7F);

	/* Write zeros to line */
	for (int i = 0; i < 128; i++) {
     538:	00 97       	sbiw	r24, 0x00	; 0
     53a:	e1 f7       	brne	.-8      	; 0x534 <OLED_clear_line+0x1a>
		OLED_write_d(0x00);
	}
}
     53c:	08 95       	ret

0000053e <OLED_pos>:
}

void OLED_write_c(char chr)
{
	volatile char *oled = (char *) 0x1000;
	oled[0] = chr;
     53e:	e0 e0       	ldi	r30, 0x00	; 0
     540:	f0 e1       	ldi	r31, 0x10	; 16
     542:	92 e2       	ldi	r25, 0x22	; 34
     544:	90 83       	st	Z, r25
     546:	80 83       	st	Z, r24
     548:	87 e0       	ldi	r24, 0x07	; 7
     54a:	80 83       	st	Z, r24
     54c:	81 e2       	ldi	r24, 0x21	; 33
     54e:	80 83       	st	Z, r24
     550:	60 83       	st	Z, r22
     552:	8f e7       	ldi	r24, 0x7F	; 127
     554:	80 83       	st	Z, r24
     556:	08 95       	ret

00000558 <OLED_reset>:
	OLED_write_c(column);
	OLED_write_c(0x7F);
}

void OLED_reset(void)
{
     558:	cf 93       	push	r28
	for (uint8_t i = 0; i < 8; i++) {
     55a:	c0 e0       	ldi	r28, 0x00	; 0
		OLED_clear_line(i);
     55c:	8c 2f       	mov	r24, r28
     55e:	0e 94 8d 02 	call	0x51a	; 0x51a <OLED_clear_line>
	OLED_write_c(0x7F);
}

void OLED_reset(void)
{
	for (uint8_t i = 0; i < 8; i++) {
     562:	cf 5f       	subi	r28, 0xFF	; 255
     564:	c8 30       	cpi	r28, 0x08	; 8
     566:	d1 f7       	brne	.-12     	; 0x55c <OLED_reset+0x4>
		OLED_clear_line(i);
	}
	OLED_pos(0,0);
     568:	60 e0       	ldi	r22, 0x00	; 0
     56a:	80 e0       	ldi	r24, 0x00	; 0
     56c:	0e 94 9f 02 	call	0x53e	; 0x53e <OLED_pos>

	// Redraw from SRAM?
}
     570:	cf 91       	pop	r28
     572:	08 95       	ret

00000574 <OLED_init>:
}

void OLED_write_c(char chr)
{
	volatile char *oled = (char *) 0x1000;
	oled[0] = chr;
     574:	e0 e0       	ldi	r30, 0x00	; 0
     576:	f0 e1       	ldi	r31, 0x10	; 16
     578:	8e ea       	ldi	r24, 0xAE	; 174
     57a:	80 83       	st	Z, r24
     57c:	81 ea       	ldi	r24, 0xA1	; 161
     57e:	80 83       	st	Z, r24
     580:	8a ed       	ldi	r24, 0xDA	; 218
     582:	80 83       	st	Z, r24
     584:	82 e1       	ldi	r24, 0x12	; 18
     586:	80 83       	st	Z, r24
     588:	88 ec       	ldi	r24, 0xC8	; 200
     58a:	80 83       	st	Z, r24
     58c:	88 ea       	ldi	r24, 0xA8	; 168
     58e:	80 83       	st	Z, r24
     590:	8f e3       	ldi	r24, 0x3F	; 63
     592:	80 83       	st	Z, r24
     594:	85 ed       	ldi	r24, 0xD5	; 213
     596:	80 83       	st	Z, r24
     598:	80 e8       	ldi	r24, 0x80	; 128
     59a:	80 83       	st	Z, r24
     59c:	81 e8       	ldi	r24, 0x81	; 129
     59e:	80 83       	st	Z, r24
     5a0:	80 e5       	ldi	r24, 0x50	; 80
     5a2:	80 83       	st	Z, r24
     5a4:	89 ed       	ldi	r24, 0xD9	; 217
     5a6:	80 83       	st	Z, r24
     5a8:	81 e2       	ldi	r24, 0x21	; 33
     5aa:	80 83       	st	Z, r24
     5ac:	80 e2       	ldi	r24, 0x20	; 32
     5ae:	80 83       	st	Z, r24
     5b0:	10 82       	st	Z, r1
     5b2:	8b ed       	ldi	r24, 0xDB	; 219
     5b4:	80 83       	st	Z, r24
     5b6:	80 e3       	ldi	r24, 0x30	; 48
     5b8:	80 83       	st	Z, r24
     5ba:	8d ea       	ldi	r24, 0xAD	; 173
     5bc:	80 83       	st	Z, r24
     5be:	10 82       	st	Z, r1
     5c0:	84 ea       	ldi	r24, 0xA4	; 164
     5c2:	80 83       	st	Z, r24
     5c4:	86 ea       	ldi	r24, 0xA6	; 166
     5c6:	80 83       	st	Z, r24
     5c8:	8f ea       	ldi	r24, 0xAF	; 175
     5ca:	80 83       	st	Z, r24
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	92 e0       	ldi	r25, 0x02	; 2
}

void OLED_write_d(char chr)
{
	volatile char *oled = (char *) 0x1200;
	oled[0] = chr;
     5d0:	e0 e0       	ldi	r30, 0x00	; 0
     5d2:	f2 e1       	ldi	r31, 0x12	; 18
     5d4:	2f ef       	ldi	r18, 0xFF	; 255
     5d6:	20 83       	st	Z, r18
     5d8:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_c(0x00);
	OLED_write_c(0xa4); //out follows RAM content
	OLED_write_c(0xa6); //set normal display
	OLED_write_c(0xaf); // display on
	
	for (int i = 0; i < 512; i++)
     5da:	00 97       	sbiw	r24, 0x00	; 0
     5dc:	e1 f7       	brne	.-8      	; 0x5d6 <OLED_init+0x62>
	{
		OLED_write_d(0xFF);
	}
	
	OLED_reset();
     5de:	0e 94 ac 02 	call	0x558	; 0x558 <OLED_reset>
     5e2:	08 95       	ret

000005e4 <OLED_print_string>:

	// Redraw from SRAM?
}

void OLED_print_string(char* str)
{
     5e4:	cf 93       	push	r28
     5e6:	df 93       	push	r29
	uint8_t c;
	uint8_t font_width = 4; // Use sizeof array here
	uint8_t i = 0;
	while (str[i] != '\0') {
     5e8:	fc 01       	movw	r30, r24
     5ea:	20 81       	ld	r18, Z
     5ec:	22 23       	and	r18, r18
     5ee:	11 f1       	breq	.+68     	; 0x634 <OLED_print_string+0x50>
     5f0:	dc 01       	movw	r26, r24

void OLED_print_string(char* str)
{
	uint8_t c;
	uint8_t font_width = 4; // Use sizeof array here
	uint8_t i = 0;
     5f2:	40 e0       	ldi	r20, 0x00	; 0

	// Redraw from SRAM?
}

void OLED_print_string(char* str)
{
     5f4:	60 e0       	ldi	r22, 0x00	; 0
     5f6:	50 e0       	ldi	r21, 0x00	; 0
}

void OLED_write_d(char chr)
{
	volatile char *oled = (char *) 0x1200;
	oled[0] = chr;
     5f8:	c0 e0       	ldi	r28, 0x00	; 0
     5fa:	d2 e1       	ldi	r29, 0x12	; 18
     5fc:	18 c0       	rjmp	.+48     	; 0x62e <OLED_print_string+0x4a>
	uint8_t c;
	uint8_t font_width = 4; // Use sizeof array here
	uint8_t i = 0;
	while (str[i] != '\0') {
		for (uint8_t j = 0; j < font_width; j++) {
			c = pgm_read_byte_near(font[str[i]-32] + j);
     5fe:	ec 91       	ld	r30, X
     600:	f0 e0       	ldi	r31, 0x00	; 0
     602:	ee 0f       	add	r30, r30
     604:	ff 1f       	adc	r31, r31
     606:	ee 0f       	add	r30, r30
     608:	ff 1f       	adc	r31, r31
     60a:	e0 51       	subi	r30, 0x10	; 16
     60c:	f0 40       	sbci	r31, 0x00	; 0
     60e:	e2 0f       	add	r30, r18
     610:	f3 1f       	adc	r31, r19
     612:	e4 91       	lpm	r30, Z
}

void OLED_write_d(char chr)
{
	volatile char *oled = (char *) 0x1200;
	oled[0] = chr;
     614:	e8 83       	st	Y, r30
     616:	2f 5f       	subi	r18, 0xFF	; 255
     618:	3f 4f       	sbci	r19, 0xFF	; 255
{
	uint8_t c;
	uint8_t font_width = 4; // Use sizeof array here
	uint8_t i = 0;
	while (str[i] != '\0') {
		for (uint8_t j = 0; j < font_width; j++) {
     61a:	24 30       	cpi	r18, 0x04	; 4
     61c:	31 05       	cpc	r19, r1
     61e:	79 f7       	brne	.-34     	; 0x5fe <OLED_print_string+0x1a>
			c = pgm_read_byte_near(font[str[i]-32] + j);
			OLED_write_d(c);
		}
		i++;
     620:	4f 5f       	subi	r20, 0xFF	; 255
void OLED_print_string(char* str)
{
	uint8_t c;
	uint8_t font_width = 4; // Use sizeof array here
	uint8_t i = 0;
	while (str[i] != '\0') {
     622:	dc 01       	movw	r26, r24
     624:	a4 0f       	add	r26, r20
     626:	b1 1d       	adc	r27, r1
     628:	2c 91       	ld	r18, X
     62a:	22 23       	and	r18, r18
     62c:	19 f0       	breq	.+6      	; 0x634 <OLED_print_string+0x50>

	// Redraw from SRAM?
}

void OLED_print_string(char* str)
{
     62e:	26 2f       	mov	r18, r22
     630:	35 2f       	mov	r19, r21
     632:	e5 cf       	rjmp	.-54     	; 0x5fe <OLED_print_string+0x1a>
			c = pgm_read_byte_near(font[str[i]-32] + j);
			OLED_write_d(c);
		}
		i++;
	}
}
     634:	df 91       	pop	r29
     636:	cf 91       	pop	r28
     638:	08 95       	ret

0000063a <OLED_create_node>:
	OLED_print_arrow(newRow, newCol);
}


menuNode *OLED_create_node(char* name, menuNode* parent)
{
     63a:	cf 93       	push	r28
     63c:	df 93       	push	r29
     63e:	ec 01       	movw	r28, r24
	menuNode* ret = (menuNode*) malloc(sizeof(menuNode));
     640:	84 e1       	ldi	r24, 0x14	; 20
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	0e 94 c8 03 	call	0x790	; 0x790 <malloc>
	ret->name = name;
     648:	fc 01       	movw	r30, r24
     64a:	d1 83       	std	Z+1, r29	; 0x01
     64c:	c0 83       	st	Z, r28
	ret->parent = NULL;
     64e:	13 82       	std	Z+3, r1	; 0x03
     650:	12 82       	std	Z+2, r1	; 0x02
	return ret;
}
     652:	df 91       	pop	r29
     654:	cf 91       	pop	r28
     656:	08 95       	ret

00000658 <OLED_generate_menu>:

// Implement function for freeing memory

menuNode *OLED_generate_menu(void)
{	
     658:	af 92       	push	r10
     65a:	bf 92       	push	r11
     65c:	cf 92       	push	r12
     65e:	df 92       	push	r13
     660:	ef 92       	push	r14
     662:	ff 92       	push	r15
     664:	0f 93       	push	r16
     666:	1f 93       	push	r17
     668:	cf 93       	push	r28
     66a:	df 93       	push	r29
	menuNode *mainmenu = OLED_create_node("MAIN MENU", NULL);
     66c:	60 e0       	ldi	r22, 0x00	; 0
     66e:	70 e0       	ldi	r23, 0x00	; 0
     670:	84 e1       	ldi	r24, 0x14	; 20
     672:	91 e0       	ldi	r25, 0x01	; 1
     674:	0e 94 1d 03 	call	0x63a	; 0x63a <OLED_create_node>
     678:	ec 01       	movw	r28, r24
	menuNode *highscores = OLED_create_node("Highscores", mainmenu);
     67a:	bc 01       	movw	r22, r24
     67c:	8e e1       	ldi	r24, 0x1E	; 30
     67e:	91 e0       	ldi	r25, 0x01	; 1
     680:	0e 94 1d 03 	call	0x63a	; 0x63a <OLED_create_node>
     684:	6c 01       	movw	r12, r24
	menuNode *playgame = OLED_create_node("Start new game", mainmenu);
     686:	be 01       	movw	r22, r28
     688:	89 e2       	ldi	r24, 0x29	; 41
     68a:	91 e0       	ldi	r25, 0x01	; 1
     68c:	0e 94 1d 03 	call	0x63a	; 0x63a <OLED_create_node>
     690:	5c 01       	movw	r10, r24
	menuNode *debugging = OLED_create_node("Debugging", mainmenu);
     692:	be 01       	movw	r22, r28
     694:	88 e3       	ldi	r24, 0x38	; 56
     696:	91 e0       	ldi	r25, 0x01	; 1
     698:	0e 94 1d 03 	call	0x63a	; 0x63a <OLED_create_node>
     69c:	8c 01       	movw	r16, r24
	menuNode *calibrate = OLED_create_node("Calibrate", mainmenu);
     69e:	be 01       	movw	r22, r28
     6a0:	82 e4       	ldi	r24, 0x42	; 66
     6a2:	91 e0       	ldi	r25, 0x01	; 1
     6a4:	0e 94 1d 03 	call	0x63a	; 0x63a <OLED_create_node>
     6a8:	7c 01       	movw	r14, r24
	menuNode *difficulty = OLED_create_node("Difficulty", mainmenu);
     6aa:	be 01       	movw	r22, r28
     6ac:	8c e4       	ldi	r24, 0x4C	; 76
     6ae:	91 e0       	ldi	r25, 0x01	; 1
     6b0:	0e 94 1d 03 	call	0x63a	; 0x63a <OLED_create_node>
	calibrate->parent = mainmenu;
	difficulty->parent = mainmenu;
	debugging->parent = mainmenu;
	*/
	
	mainmenu->children[1] = playgame;
     6b4:	bf 82       	std	Y+7, r11	; 0x07
     6b6:	ae 82       	std	Y+6, r10	; 0x06
	mainmenu->children[2] = highscores;
     6b8:	d9 86       	std	Y+9, r13	; 0x09
     6ba:	c8 86       	std	Y+8, r12	; 0x08
	mainmenu->children[3] = difficulty;
     6bc:	9b 87       	std	Y+11, r25	; 0x0b
     6be:	8a 87       	std	Y+10, r24	; 0x0a
	mainmenu->children[4] = calibrate;
     6c0:	fd 86       	std	Y+13, r15	; 0x0d
     6c2:	ec 86       	std	Y+12, r14	; 0x0c
	mainmenu->children[5] = debugging;
     6c4:	1f 87       	std	Y+15, r17	; 0x0f
     6c6:	0e 87       	std	Y+14, r16	; 0x0e
	
	return mainmenu;
}
     6c8:	ce 01       	movw	r24, r28
     6ca:	df 91       	pop	r29
     6cc:	cf 91       	pop	r28
     6ce:	1f 91       	pop	r17
     6d0:	0f 91       	pop	r16
     6d2:	ff 90       	pop	r15
     6d4:	ef 90       	pop	r14
     6d6:	df 90       	pop	r13
     6d8:	cf 90       	pop	r12
     6da:	bf 90       	pop	r11
     6dc:	af 90       	pop	r10
     6de:	08 95       	ret

000006e0 <OLED_print_menu>:

void OLED_print_menu(menuNode *node)
{
     6e0:	cf 93       	push	r28
     6e2:	df 93       	push	r29
     6e4:	ec 01       	movw	r28, r24
	OLED_pos(0,50);
     6e6:	62 e3       	ldi	r22, 0x32	; 50
     6e8:	80 e0       	ldi	r24, 0x00	; 0
     6ea:	0e 94 9f 02 	call	0x53e	; 0x53e <OLED_pos>
	OLED_print_string(node->name);
     6ee:	88 81       	ld	r24, Y
     6f0:	99 81       	ldd	r25, Y+1	; 0x01
     6f2:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <OLED_print_string>
	//printf("%s\n", node->name);
	OLED_pos(1,50);
     6f6:	62 e3       	ldi	r22, 0x32	; 50
     6f8:	81 e0       	ldi	r24, 0x01	; 1
     6fa:	0e 94 9f 02 	call	0x53e	; 0x53e <OLED_pos>
	OLED_print_string(node->children[1]->name);
     6fe:	ee 81       	ldd	r30, Y+6	; 0x06
     700:	ff 81       	ldd	r31, Y+7	; 0x07
     702:	80 81       	ld	r24, Z
     704:	91 81       	ldd	r25, Z+1	; 0x01
     706:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <OLED_print_string>
	OLED_pos(2,50);
     70a:	62 e3       	ldi	r22, 0x32	; 50
     70c:	82 e0       	ldi	r24, 0x02	; 2
     70e:	0e 94 9f 02 	call	0x53e	; 0x53e <OLED_pos>
	OLED_print_string(node->children[2]->name);
     712:	e8 85       	ldd	r30, Y+8	; 0x08
     714:	f9 85       	ldd	r31, Y+9	; 0x09
     716:	80 81       	ld	r24, Z
     718:	91 81       	ldd	r25, Z+1	; 0x01
     71a:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <OLED_print_string>
	OLED_pos(3,50);
     71e:	62 e3       	ldi	r22, 0x32	; 50
     720:	83 e0       	ldi	r24, 0x03	; 3
     722:	0e 94 9f 02 	call	0x53e	; 0x53e <OLED_pos>
	OLED_print_string(node->children[3]->name);
     726:	ea 85       	ldd	r30, Y+10	; 0x0a
     728:	fb 85       	ldd	r31, Y+11	; 0x0b
     72a:	80 81       	ld	r24, Z
     72c:	91 81       	ldd	r25, Z+1	; 0x01
     72e:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <OLED_print_string>
	OLED_pos(4,50);
     732:	62 e3       	ldi	r22, 0x32	; 50
     734:	84 e0       	ldi	r24, 0x04	; 4
     736:	0e 94 9f 02 	call	0x53e	; 0x53e <OLED_pos>
	OLED_print_string(node->children[4]->name);
     73a:	ec 85       	ldd	r30, Y+12	; 0x0c
     73c:	fd 85       	ldd	r31, Y+13	; 0x0d
     73e:	80 81       	ld	r24, Z
     740:	91 81       	ldd	r25, Z+1	; 0x01
     742:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <OLED_print_string>
	OLED_pos(5,50);
     746:	62 e3       	ldi	r22, 0x32	; 50
     748:	85 e0       	ldi	r24, 0x05	; 5
     74a:	0e 94 9f 02 	call	0x53e	; 0x53e <OLED_pos>
	OLED_print_string(node->children[5]->name);
     74e:	ee 85       	ldd	r30, Y+14	; 0x0e
     750:	ff 85       	ldd	r31, Y+15	; 0x0f
     752:	80 81       	ld	r24, Z
     754:	91 81       	ldd	r25, Z+1	; 0x01
     756:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <OLED_print_string>
     75a:	df 91       	pop	r29
     75c:	cf 91       	pop	r28
     75e:	08 95       	ret

00000760 <SPI_master_init>:
#include <avr/delay.h>

void SPI_master_init(void)
{
	/* Set ~SS, MOSI and SCK output, all others input */
	DDRB = (1 << PB4)|(1 << PB5)|(1 << PB7);
     760:	80 eb       	ldi	r24, 0xB0	; 176
     762:	87 bb       	out	0x17, r24	; 23
	
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1 << SPE)|(1 << MSTR)|(1 << SPR0);
     764:	81 e5       	ldi	r24, 0x51	; 81
     766:	8d b9       	out	0x0d, r24	; 13
     768:	08 95       	ret

0000076a <SPI_master_transmit>:
}

void SPI_master_transmit(uint8_t cData)
{
	/* Start transmission */
	SPDR = cData;
     76a:	8f b9       	out	0x0f, r24	; 15
	
	/* Wait for transmission to complete */
	while (!(SPSR & (1 << SPIF))) {
     76c:	77 9b       	sbis	0x0e, 7	; 14
     76e:	fe cf       	rjmp	.-4      	; 0x76c <SPI_master_transmit+0x2>
		;
	}
}
     770:	08 95       	ret

00000772 <USART_init>:
#include <avr/io.h>

void USART_init(unsigned int ubrr)
{
	/* Set baud rate*/
	UBRR0H = (unsigned char)(ubrr >> 8 );
     772:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
     774:	89 b9       	out	0x09, r24	; 9
	/*Enable receiver and transmitter*/
	UCSR0B = (1 << RXEN0)|(1 << TXEN0);
     776:	88 e1       	ldi	r24, 0x18	; 24
     778:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1 << URSEL0)|(1 << USBS0)|(3 << UCSZ10);
     77a:	8e e8       	ldi	r24, 0x8E	; 142
     77c:	80 bd       	out	0x20, r24	; 32
     77e:	08 95       	ret

00000780 <USART_transmit>:
}

void USART_transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while (!( UCSR0A & (1 << UDRE0)))
     780:	5d 9b       	sbis	0x0b, 5	; 11
     782:	fe cf       	rjmp	.-4      	; 0x780 <USART_transmit>
		;
	/* Put data into buffer, sends the data */
	UDR0 = data;
     784:	8c b9       	out	0x0c, r24	; 12
     786:	08 95       	ret

00000788 <USART_receive>:
}

unsigned char USART_receive(void)
{
	/* Wait for data to be received */
	while ( !(UCSR0A & ( 1 << RXC0)) )
     788:	5f 9b       	sbis	0x0b, 7	; 11
     78a:	fe cf       	rjmp	.-4      	; 0x788 <USART_receive>
		;
	/* Get and return received data from buffer */
	return UDR0;
     78c:	8c b1       	in	r24, 0x0c	; 12
}
     78e:	08 95       	ret

00000790 <malloc>:
     790:	cf 93       	push	r28
     792:	df 93       	push	r29
     794:	82 30       	cpi	r24, 0x02	; 2
     796:	91 05       	cpc	r25, r1
     798:	10 f4       	brcc	.+4      	; 0x79e <malloc+0xe>
     79a:	82 e0       	ldi	r24, 0x02	; 2
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	e0 91 5a 01 	lds	r30, 0x015A
     7a2:	f0 91 5b 01 	lds	r31, 0x015B
     7a6:	20 e0       	ldi	r18, 0x00	; 0
     7a8:	30 e0       	ldi	r19, 0x00	; 0
     7aa:	a0 e0       	ldi	r26, 0x00	; 0
     7ac:	b0 e0       	ldi	r27, 0x00	; 0
     7ae:	30 97       	sbiw	r30, 0x00	; 0
     7b0:	39 f1       	breq	.+78     	; 0x800 <malloc+0x70>
     7b2:	40 81       	ld	r20, Z
     7b4:	51 81       	ldd	r21, Z+1	; 0x01
     7b6:	48 17       	cp	r20, r24
     7b8:	59 07       	cpc	r21, r25
     7ba:	b8 f0       	brcs	.+46     	; 0x7ea <malloc+0x5a>
     7bc:	48 17       	cp	r20, r24
     7be:	59 07       	cpc	r21, r25
     7c0:	71 f4       	brne	.+28     	; 0x7de <malloc+0x4e>
     7c2:	82 81       	ldd	r24, Z+2	; 0x02
     7c4:	93 81       	ldd	r25, Z+3	; 0x03
     7c6:	10 97       	sbiw	r26, 0x00	; 0
     7c8:	29 f0       	breq	.+10     	; 0x7d4 <malloc+0x44>
     7ca:	13 96       	adiw	r26, 0x03	; 3
     7cc:	9c 93       	st	X, r25
     7ce:	8e 93       	st	-X, r24
     7d0:	12 97       	sbiw	r26, 0x02	; 2
     7d2:	2c c0       	rjmp	.+88     	; 0x82c <malloc+0x9c>
     7d4:	90 93 5b 01 	sts	0x015B, r25
     7d8:	80 93 5a 01 	sts	0x015A, r24
     7dc:	27 c0       	rjmp	.+78     	; 0x82c <malloc+0x9c>
     7de:	21 15       	cp	r18, r1
     7e0:	31 05       	cpc	r19, r1
     7e2:	31 f0       	breq	.+12     	; 0x7f0 <malloc+0x60>
     7e4:	42 17       	cp	r20, r18
     7e6:	53 07       	cpc	r21, r19
     7e8:	18 f0       	brcs	.+6      	; 0x7f0 <malloc+0x60>
     7ea:	a9 01       	movw	r20, r18
     7ec:	db 01       	movw	r26, r22
     7ee:	01 c0       	rjmp	.+2      	; 0x7f2 <malloc+0x62>
     7f0:	ef 01       	movw	r28, r30
     7f2:	9a 01       	movw	r18, r20
     7f4:	bd 01       	movw	r22, r26
     7f6:	df 01       	movw	r26, r30
     7f8:	02 80       	ldd	r0, Z+2	; 0x02
     7fa:	f3 81       	ldd	r31, Z+3	; 0x03
     7fc:	e0 2d       	mov	r30, r0
     7fe:	d7 cf       	rjmp	.-82     	; 0x7ae <malloc+0x1e>
     800:	21 15       	cp	r18, r1
     802:	31 05       	cpc	r19, r1
     804:	f9 f0       	breq	.+62     	; 0x844 <malloc+0xb4>
     806:	28 1b       	sub	r18, r24
     808:	39 0b       	sbc	r19, r25
     80a:	24 30       	cpi	r18, 0x04	; 4
     80c:	31 05       	cpc	r19, r1
     80e:	80 f4       	brcc	.+32     	; 0x830 <malloc+0xa0>
     810:	8a 81       	ldd	r24, Y+2	; 0x02
     812:	9b 81       	ldd	r25, Y+3	; 0x03
     814:	61 15       	cp	r22, r1
     816:	71 05       	cpc	r23, r1
     818:	21 f0       	breq	.+8      	; 0x822 <malloc+0x92>
     81a:	fb 01       	movw	r30, r22
     81c:	93 83       	std	Z+3, r25	; 0x03
     81e:	82 83       	std	Z+2, r24	; 0x02
     820:	04 c0       	rjmp	.+8      	; 0x82a <malloc+0x9a>
     822:	90 93 5b 01 	sts	0x015B, r25
     826:	80 93 5a 01 	sts	0x015A, r24
     82a:	fe 01       	movw	r30, r28
     82c:	32 96       	adiw	r30, 0x02	; 2
     82e:	44 c0       	rjmp	.+136    	; 0x8b8 <malloc+0x128>
     830:	fe 01       	movw	r30, r28
     832:	e2 0f       	add	r30, r18
     834:	f3 1f       	adc	r31, r19
     836:	81 93       	st	Z+, r24
     838:	91 93       	st	Z+, r25
     83a:	22 50       	subi	r18, 0x02	; 2
     83c:	31 09       	sbc	r19, r1
     83e:	39 83       	std	Y+1, r19	; 0x01
     840:	28 83       	st	Y, r18
     842:	3a c0       	rjmp	.+116    	; 0x8b8 <malloc+0x128>
     844:	20 91 58 01 	lds	r18, 0x0158
     848:	30 91 59 01 	lds	r19, 0x0159
     84c:	23 2b       	or	r18, r19
     84e:	41 f4       	brne	.+16     	; 0x860 <malloc+0xd0>
     850:	20 91 02 01 	lds	r18, 0x0102
     854:	30 91 03 01 	lds	r19, 0x0103
     858:	30 93 59 01 	sts	0x0159, r19
     85c:	20 93 58 01 	sts	0x0158, r18
     860:	20 91 00 01 	lds	r18, 0x0100
     864:	30 91 01 01 	lds	r19, 0x0101
     868:	21 15       	cp	r18, r1
     86a:	31 05       	cpc	r19, r1
     86c:	41 f4       	brne	.+16     	; 0x87e <malloc+0xee>
     86e:	2d b7       	in	r18, 0x3d	; 61
     870:	3e b7       	in	r19, 0x3e	; 62
     872:	40 91 04 01 	lds	r20, 0x0104
     876:	50 91 05 01 	lds	r21, 0x0105
     87a:	24 1b       	sub	r18, r20
     87c:	35 0b       	sbc	r19, r21
     87e:	e0 91 58 01 	lds	r30, 0x0158
     882:	f0 91 59 01 	lds	r31, 0x0159
     886:	e2 17       	cp	r30, r18
     888:	f3 07       	cpc	r31, r19
     88a:	a0 f4       	brcc	.+40     	; 0x8b4 <malloc+0x124>
     88c:	2e 1b       	sub	r18, r30
     88e:	3f 0b       	sbc	r19, r31
     890:	28 17       	cp	r18, r24
     892:	39 07       	cpc	r19, r25
     894:	78 f0       	brcs	.+30     	; 0x8b4 <malloc+0x124>
     896:	ac 01       	movw	r20, r24
     898:	4e 5f       	subi	r20, 0xFE	; 254
     89a:	5f 4f       	sbci	r21, 0xFF	; 255
     89c:	24 17       	cp	r18, r20
     89e:	35 07       	cpc	r19, r21
     8a0:	48 f0       	brcs	.+18     	; 0x8b4 <malloc+0x124>
     8a2:	4e 0f       	add	r20, r30
     8a4:	5f 1f       	adc	r21, r31
     8a6:	50 93 59 01 	sts	0x0159, r21
     8aa:	40 93 58 01 	sts	0x0158, r20
     8ae:	81 93       	st	Z+, r24
     8b0:	91 93       	st	Z+, r25
     8b2:	02 c0       	rjmp	.+4      	; 0x8b8 <malloc+0x128>
     8b4:	e0 e0       	ldi	r30, 0x00	; 0
     8b6:	f0 e0       	ldi	r31, 0x00	; 0
     8b8:	cf 01       	movw	r24, r30
     8ba:	df 91       	pop	r29
     8bc:	cf 91       	pop	r28
     8be:	08 95       	ret

000008c0 <free>:
     8c0:	cf 93       	push	r28
     8c2:	df 93       	push	r29
     8c4:	00 97       	sbiw	r24, 0x00	; 0
     8c6:	09 f4       	brne	.+2      	; 0x8ca <free+0xa>
     8c8:	87 c0       	rjmp	.+270    	; 0x9d8 <free+0x118>
     8ca:	fc 01       	movw	r30, r24
     8cc:	32 97       	sbiw	r30, 0x02	; 2
     8ce:	13 82       	std	Z+3, r1	; 0x03
     8d0:	12 82       	std	Z+2, r1	; 0x02
     8d2:	c0 91 5a 01 	lds	r28, 0x015A
     8d6:	d0 91 5b 01 	lds	r29, 0x015B
     8da:	20 97       	sbiw	r28, 0x00	; 0
     8dc:	81 f4       	brne	.+32     	; 0x8fe <free+0x3e>
     8de:	20 81       	ld	r18, Z
     8e0:	31 81       	ldd	r19, Z+1	; 0x01
     8e2:	28 0f       	add	r18, r24
     8e4:	39 1f       	adc	r19, r25
     8e6:	80 91 58 01 	lds	r24, 0x0158
     8ea:	90 91 59 01 	lds	r25, 0x0159
     8ee:	82 17       	cp	r24, r18
     8f0:	93 07       	cpc	r25, r19
     8f2:	79 f5       	brne	.+94     	; 0x952 <free+0x92>
     8f4:	f0 93 59 01 	sts	0x0159, r31
     8f8:	e0 93 58 01 	sts	0x0158, r30
     8fc:	6d c0       	rjmp	.+218    	; 0x9d8 <free+0x118>
     8fe:	de 01       	movw	r26, r28
     900:	20 e0       	ldi	r18, 0x00	; 0
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	ae 17       	cp	r26, r30
     906:	bf 07       	cpc	r27, r31
     908:	50 f4       	brcc	.+20     	; 0x91e <free+0x5e>
     90a:	12 96       	adiw	r26, 0x02	; 2
     90c:	4d 91       	ld	r20, X+
     90e:	5c 91       	ld	r21, X
     910:	13 97       	sbiw	r26, 0x03	; 3
     912:	9d 01       	movw	r18, r26
     914:	41 15       	cp	r20, r1
     916:	51 05       	cpc	r21, r1
     918:	09 f1       	breq	.+66     	; 0x95c <free+0x9c>
     91a:	da 01       	movw	r26, r20
     91c:	f3 cf       	rjmp	.-26     	; 0x904 <free+0x44>
     91e:	b3 83       	std	Z+3, r27	; 0x03
     920:	a2 83       	std	Z+2, r26	; 0x02
     922:	40 81       	ld	r20, Z
     924:	51 81       	ldd	r21, Z+1	; 0x01
     926:	84 0f       	add	r24, r20
     928:	95 1f       	adc	r25, r21
     92a:	8a 17       	cp	r24, r26
     92c:	9b 07       	cpc	r25, r27
     92e:	71 f4       	brne	.+28     	; 0x94c <free+0x8c>
     930:	8d 91       	ld	r24, X+
     932:	9c 91       	ld	r25, X
     934:	11 97       	sbiw	r26, 0x01	; 1
     936:	84 0f       	add	r24, r20
     938:	95 1f       	adc	r25, r21
     93a:	02 96       	adiw	r24, 0x02	; 2
     93c:	91 83       	std	Z+1, r25	; 0x01
     93e:	80 83       	st	Z, r24
     940:	12 96       	adiw	r26, 0x02	; 2
     942:	8d 91       	ld	r24, X+
     944:	9c 91       	ld	r25, X
     946:	13 97       	sbiw	r26, 0x03	; 3
     948:	93 83       	std	Z+3, r25	; 0x03
     94a:	82 83       	std	Z+2, r24	; 0x02
     94c:	21 15       	cp	r18, r1
     94e:	31 05       	cpc	r19, r1
     950:	29 f4       	brne	.+10     	; 0x95c <free+0x9c>
     952:	f0 93 5b 01 	sts	0x015B, r31
     956:	e0 93 5a 01 	sts	0x015A, r30
     95a:	3e c0       	rjmp	.+124    	; 0x9d8 <free+0x118>
     95c:	d9 01       	movw	r26, r18
     95e:	13 96       	adiw	r26, 0x03	; 3
     960:	fc 93       	st	X, r31
     962:	ee 93       	st	-X, r30
     964:	12 97       	sbiw	r26, 0x02	; 2
     966:	4d 91       	ld	r20, X+
     968:	5d 91       	ld	r21, X+
     96a:	a4 0f       	add	r26, r20
     96c:	b5 1f       	adc	r27, r21
     96e:	ea 17       	cp	r30, r26
     970:	fb 07       	cpc	r31, r27
     972:	79 f4       	brne	.+30     	; 0x992 <free+0xd2>
     974:	80 81       	ld	r24, Z
     976:	91 81       	ldd	r25, Z+1	; 0x01
     978:	84 0f       	add	r24, r20
     97a:	95 1f       	adc	r25, r21
     97c:	02 96       	adiw	r24, 0x02	; 2
     97e:	d9 01       	movw	r26, r18
     980:	11 96       	adiw	r26, 0x01	; 1
     982:	9c 93       	st	X, r25
     984:	8e 93       	st	-X, r24
     986:	82 81       	ldd	r24, Z+2	; 0x02
     988:	93 81       	ldd	r25, Z+3	; 0x03
     98a:	13 96       	adiw	r26, 0x03	; 3
     98c:	9c 93       	st	X, r25
     98e:	8e 93       	st	-X, r24
     990:	12 97       	sbiw	r26, 0x02	; 2
     992:	e0 e0       	ldi	r30, 0x00	; 0
     994:	f0 e0       	ldi	r31, 0x00	; 0
     996:	8a 81       	ldd	r24, Y+2	; 0x02
     998:	9b 81       	ldd	r25, Y+3	; 0x03
     99a:	00 97       	sbiw	r24, 0x00	; 0
     99c:	19 f0       	breq	.+6      	; 0x9a4 <free+0xe4>
     99e:	fe 01       	movw	r30, r28
     9a0:	ec 01       	movw	r28, r24
     9a2:	f9 cf       	rjmp	.-14     	; 0x996 <free+0xd6>
     9a4:	ce 01       	movw	r24, r28
     9a6:	02 96       	adiw	r24, 0x02	; 2
     9a8:	28 81       	ld	r18, Y
     9aa:	39 81       	ldd	r19, Y+1	; 0x01
     9ac:	82 0f       	add	r24, r18
     9ae:	93 1f       	adc	r25, r19
     9b0:	20 91 58 01 	lds	r18, 0x0158
     9b4:	30 91 59 01 	lds	r19, 0x0159
     9b8:	28 17       	cp	r18, r24
     9ba:	39 07       	cpc	r19, r25
     9bc:	69 f4       	brne	.+26     	; 0x9d8 <free+0x118>
     9be:	30 97       	sbiw	r30, 0x00	; 0
     9c0:	29 f4       	brne	.+10     	; 0x9cc <free+0x10c>
     9c2:	10 92 5b 01 	sts	0x015B, r1
     9c6:	10 92 5a 01 	sts	0x015A, r1
     9ca:	02 c0       	rjmp	.+4      	; 0x9d0 <free+0x110>
     9cc:	13 82       	std	Z+3, r1	; 0x03
     9ce:	12 82       	std	Z+2, r1	; 0x02
     9d0:	d0 93 59 01 	sts	0x0159, r29
     9d4:	c0 93 58 01 	sts	0x0158, r28
     9d8:	df 91       	pop	r29
     9da:	cf 91       	pop	r28
     9dc:	08 95       	ret

000009de <fdevopen>:
     9de:	0f 93       	push	r16
     9e0:	1f 93       	push	r17
     9e2:	cf 93       	push	r28
     9e4:	df 93       	push	r29
     9e6:	ec 01       	movw	r28, r24
     9e8:	8b 01       	movw	r16, r22
     9ea:	00 97       	sbiw	r24, 0x00	; 0
     9ec:	31 f4       	brne	.+12     	; 0x9fa <fdevopen+0x1c>
     9ee:	61 15       	cp	r22, r1
     9f0:	71 05       	cpc	r23, r1
     9f2:	19 f4       	brne	.+6      	; 0x9fa <fdevopen+0x1c>
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	38 c0       	rjmp	.+112    	; 0xa6a <fdevopen+0x8c>
     9fa:	6e e0       	ldi	r22, 0x0E	; 14
     9fc:	70 e0       	ldi	r23, 0x00	; 0
     9fe:	81 e0       	ldi	r24, 0x01	; 1
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	0e 94 20 07 	call	0xe40	; 0xe40 <calloc>
     a06:	fc 01       	movw	r30, r24
     a08:	00 97       	sbiw	r24, 0x00	; 0
     a0a:	a1 f3       	breq	.-24     	; 0x9f4 <fdevopen+0x16>
     a0c:	80 e8       	ldi	r24, 0x80	; 128
     a0e:	83 83       	std	Z+3, r24	; 0x03
     a10:	01 15       	cp	r16, r1
     a12:	11 05       	cpc	r17, r1
     a14:	71 f0       	breq	.+28     	; 0xa32 <fdevopen+0x54>
     a16:	13 87       	std	Z+11, r17	; 0x0b
     a18:	02 87       	std	Z+10, r16	; 0x0a
     a1a:	81 e8       	ldi	r24, 0x81	; 129
     a1c:	83 83       	std	Z+3, r24	; 0x03
     a1e:	80 91 5c 01 	lds	r24, 0x015C
     a22:	90 91 5d 01 	lds	r25, 0x015D
     a26:	89 2b       	or	r24, r25
     a28:	21 f4       	brne	.+8      	; 0xa32 <fdevopen+0x54>
     a2a:	f0 93 5d 01 	sts	0x015D, r31
     a2e:	e0 93 5c 01 	sts	0x015C, r30
     a32:	20 97       	sbiw	r28, 0x00	; 0
     a34:	c9 f0       	breq	.+50     	; 0xa68 <fdevopen+0x8a>
     a36:	d1 87       	std	Z+9, r29	; 0x09
     a38:	c0 87       	std	Z+8, r28	; 0x08
     a3a:	83 81       	ldd	r24, Z+3	; 0x03
     a3c:	82 60       	ori	r24, 0x02	; 2
     a3e:	83 83       	std	Z+3, r24	; 0x03
     a40:	80 91 5e 01 	lds	r24, 0x015E
     a44:	90 91 5f 01 	lds	r25, 0x015F
     a48:	89 2b       	or	r24, r25
     a4a:	71 f4       	brne	.+28     	; 0xa68 <fdevopen+0x8a>
     a4c:	f0 93 5f 01 	sts	0x015F, r31
     a50:	e0 93 5e 01 	sts	0x015E, r30
     a54:	80 91 60 01 	lds	r24, 0x0160
     a58:	90 91 61 01 	lds	r25, 0x0161
     a5c:	89 2b       	or	r24, r25
     a5e:	21 f4       	brne	.+8      	; 0xa68 <fdevopen+0x8a>
     a60:	f0 93 61 01 	sts	0x0161, r31
     a64:	e0 93 60 01 	sts	0x0160, r30
     a68:	cf 01       	movw	r24, r30
     a6a:	df 91       	pop	r29
     a6c:	cf 91       	pop	r28
     a6e:	1f 91       	pop	r17
     a70:	0f 91       	pop	r16
     a72:	08 95       	ret

00000a74 <printf>:
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	e0 e4       	ldi	r30, 0x40	; 64
     a7a:	f5 e0       	ldi	r31, 0x05	; 5
     a7c:	0c 94 f9 07 	jmp	0xff2	; 0xff2 <__prologue_saves__+0x20>
     a80:	fe 01       	movw	r30, r28
     a82:	35 96       	adiw	r30, 0x05	; 5
     a84:	61 91       	ld	r22, Z+
     a86:	71 91       	ld	r23, Z+
     a88:	af 01       	movw	r20, r30
     a8a:	80 91 5e 01 	lds	r24, 0x015E
     a8e:	90 91 5f 01 	lds	r25, 0x015F
     a92:	0e 94 4e 05 	call	0xa9c	; 0xa9c <vfprintf>
     a96:	e2 e0       	ldi	r30, 0x02	; 2
     a98:	0c 94 15 08 	jmp	0x102a	; 0x102a <__epilogue_restores__+0x20>

00000a9c <vfprintf>:
     a9c:	ac e0       	ldi	r26, 0x0C	; 12
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	e4 e5       	ldi	r30, 0x54	; 84
     aa2:	f5 e0       	ldi	r31, 0x05	; 5
     aa4:	0c 94 e9 07 	jmp	0xfd2	; 0xfd2 <__prologue_saves__>
     aa8:	7c 01       	movw	r14, r24
     aaa:	6b 01       	movw	r12, r22
     aac:	8a 01       	movw	r16, r20
     aae:	fc 01       	movw	r30, r24
     ab0:	17 82       	std	Z+7, r1	; 0x07
     ab2:	16 82       	std	Z+6, r1	; 0x06
     ab4:	83 81       	ldd	r24, Z+3	; 0x03
     ab6:	81 ff       	sbrs	r24, 1
     ab8:	bd c1       	rjmp	.+890    	; 0xe34 <vfprintf+0x398>
     aba:	ce 01       	movw	r24, r28
     abc:	01 96       	adiw	r24, 0x01	; 1
     abe:	4c 01       	movw	r8, r24
     ac0:	f7 01       	movw	r30, r14
     ac2:	93 81       	ldd	r25, Z+3	; 0x03
     ac4:	f6 01       	movw	r30, r12
     ac6:	93 fd       	sbrc	r25, 3
     ac8:	85 91       	lpm	r24, Z+
     aca:	93 ff       	sbrs	r25, 3
     acc:	81 91       	ld	r24, Z+
     ace:	6f 01       	movw	r12, r30
     ad0:	88 23       	and	r24, r24
     ad2:	09 f4       	brne	.+2      	; 0xad6 <vfprintf+0x3a>
     ad4:	ab c1       	rjmp	.+854    	; 0xe2c <vfprintf+0x390>
     ad6:	85 32       	cpi	r24, 0x25	; 37
     ad8:	39 f4       	brne	.+14     	; 0xae8 <vfprintf+0x4c>
     ada:	93 fd       	sbrc	r25, 3
     adc:	85 91       	lpm	r24, Z+
     ade:	93 ff       	sbrs	r25, 3
     ae0:	81 91       	ld	r24, Z+
     ae2:	6f 01       	movw	r12, r30
     ae4:	85 32       	cpi	r24, 0x25	; 37
     ae6:	29 f4       	brne	.+10     	; 0xaf2 <vfprintf+0x56>
     ae8:	b7 01       	movw	r22, r14
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	0e 94 59 07 	call	0xeb2	; 0xeb2 <fputc>
     af0:	e7 cf       	rjmp	.-50     	; 0xac0 <vfprintf+0x24>
     af2:	51 2c       	mov	r5, r1
     af4:	31 2c       	mov	r3, r1
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	20 32       	cpi	r18, 0x20	; 32
     afa:	a0 f4       	brcc	.+40     	; 0xb24 <vfprintf+0x88>
     afc:	8b 32       	cpi	r24, 0x2B	; 43
     afe:	69 f0       	breq	.+26     	; 0xb1a <vfprintf+0x7e>
     b00:	30 f4       	brcc	.+12     	; 0xb0e <vfprintf+0x72>
     b02:	80 32       	cpi	r24, 0x20	; 32
     b04:	59 f0       	breq	.+22     	; 0xb1c <vfprintf+0x80>
     b06:	83 32       	cpi	r24, 0x23	; 35
     b08:	69 f4       	brne	.+26     	; 0xb24 <vfprintf+0x88>
     b0a:	20 61       	ori	r18, 0x10	; 16
     b0c:	2c c0       	rjmp	.+88     	; 0xb66 <vfprintf+0xca>
     b0e:	8d 32       	cpi	r24, 0x2D	; 45
     b10:	39 f0       	breq	.+14     	; 0xb20 <vfprintf+0x84>
     b12:	80 33       	cpi	r24, 0x30	; 48
     b14:	39 f4       	brne	.+14     	; 0xb24 <vfprintf+0x88>
     b16:	21 60       	ori	r18, 0x01	; 1
     b18:	26 c0       	rjmp	.+76     	; 0xb66 <vfprintf+0xca>
     b1a:	22 60       	ori	r18, 0x02	; 2
     b1c:	24 60       	ori	r18, 0x04	; 4
     b1e:	23 c0       	rjmp	.+70     	; 0xb66 <vfprintf+0xca>
     b20:	28 60       	ori	r18, 0x08	; 8
     b22:	21 c0       	rjmp	.+66     	; 0xb66 <vfprintf+0xca>
     b24:	27 fd       	sbrc	r18, 7
     b26:	27 c0       	rjmp	.+78     	; 0xb76 <vfprintf+0xda>
     b28:	30 ed       	ldi	r19, 0xD0	; 208
     b2a:	38 0f       	add	r19, r24
     b2c:	3a 30       	cpi	r19, 0x0A	; 10
     b2e:	78 f4       	brcc	.+30     	; 0xb4e <vfprintf+0xb2>
     b30:	26 ff       	sbrs	r18, 6
     b32:	06 c0       	rjmp	.+12     	; 0xb40 <vfprintf+0xa4>
     b34:	fa e0       	ldi	r31, 0x0A	; 10
     b36:	5f 9e       	mul	r5, r31
     b38:	30 0d       	add	r19, r0
     b3a:	11 24       	eor	r1, r1
     b3c:	53 2e       	mov	r5, r19
     b3e:	13 c0       	rjmp	.+38     	; 0xb66 <vfprintf+0xca>
     b40:	8a e0       	ldi	r24, 0x0A	; 10
     b42:	38 9e       	mul	r3, r24
     b44:	30 0d       	add	r19, r0
     b46:	11 24       	eor	r1, r1
     b48:	33 2e       	mov	r3, r19
     b4a:	20 62       	ori	r18, 0x20	; 32
     b4c:	0c c0       	rjmp	.+24     	; 0xb66 <vfprintf+0xca>
     b4e:	8e 32       	cpi	r24, 0x2E	; 46
     b50:	21 f4       	brne	.+8      	; 0xb5a <vfprintf+0xbe>
     b52:	26 fd       	sbrc	r18, 6
     b54:	6b c1       	rjmp	.+726    	; 0xe2c <vfprintf+0x390>
     b56:	20 64       	ori	r18, 0x40	; 64
     b58:	06 c0       	rjmp	.+12     	; 0xb66 <vfprintf+0xca>
     b5a:	8c 36       	cpi	r24, 0x6C	; 108
     b5c:	11 f4       	brne	.+4      	; 0xb62 <vfprintf+0xc6>
     b5e:	20 68       	ori	r18, 0x80	; 128
     b60:	02 c0       	rjmp	.+4      	; 0xb66 <vfprintf+0xca>
     b62:	88 36       	cpi	r24, 0x68	; 104
     b64:	41 f4       	brne	.+16     	; 0xb76 <vfprintf+0xda>
     b66:	f6 01       	movw	r30, r12
     b68:	93 fd       	sbrc	r25, 3
     b6a:	85 91       	lpm	r24, Z+
     b6c:	93 ff       	sbrs	r25, 3
     b6e:	81 91       	ld	r24, Z+
     b70:	6f 01       	movw	r12, r30
     b72:	81 11       	cpse	r24, r1
     b74:	c1 cf       	rjmp	.-126    	; 0xaf8 <vfprintf+0x5c>
     b76:	98 2f       	mov	r25, r24
     b78:	9f 7d       	andi	r25, 0xDF	; 223
     b7a:	95 54       	subi	r25, 0x45	; 69
     b7c:	93 30       	cpi	r25, 0x03	; 3
     b7e:	28 f4       	brcc	.+10     	; 0xb8a <vfprintf+0xee>
     b80:	0c 5f       	subi	r16, 0xFC	; 252
     b82:	1f 4f       	sbci	r17, 0xFF	; 255
     b84:	ff e3       	ldi	r31, 0x3F	; 63
     b86:	f9 83       	std	Y+1, r31	; 0x01
     b88:	0d c0       	rjmp	.+26     	; 0xba4 <vfprintf+0x108>
     b8a:	83 36       	cpi	r24, 0x63	; 99
     b8c:	31 f0       	breq	.+12     	; 0xb9a <vfprintf+0xfe>
     b8e:	83 37       	cpi	r24, 0x73	; 115
     b90:	71 f0       	breq	.+28     	; 0xbae <vfprintf+0x112>
     b92:	83 35       	cpi	r24, 0x53	; 83
     b94:	09 f0       	breq	.+2      	; 0xb98 <vfprintf+0xfc>
     b96:	5b c0       	rjmp	.+182    	; 0xc4e <vfprintf+0x1b2>
     b98:	22 c0       	rjmp	.+68     	; 0xbde <vfprintf+0x142>
     b9a:	f8 01       	movw	r30, r16
     b9c:	80 81       	ld	r24, Z
     b9e:	89 83       	std	Y+1, r24	; 0x01
     ba0:	0e 5f       	subi	r16, 0xFE	; 254
     ba2:	1f 4f       	sbci	r17, 0xFF	; 255
     ba4:	44 24       	eor	r4, r4
     ba6:	43 94       	inc	r4
     ba8:	51 2c       	mov	r5, r1
     baa:	54 01       	movw	r10, r8
     bac:	15 c0       	rjmp	.+42     	; 0xbd8 <vfprintf+0x13c>
     bae:	38 01       	movw	r6, r16
     bb0:	f2 e0       	ldi	r31, 0x02	; 2
     bb2:	6f 0e       	add	r6, r31
     bb4:	71 1c       	adc	r7, r1
     bb6:	f8 01       	movw	r30, r16
     bb8:	a0 80       	ld	r10, Z
     bba:	b1 80       	ldd	r11, Z+1	; 0x01
     bbc:	26 ff       	sbrs	r18, 6
     bbe:	03 c0       	rjmp	.+6      	; 0xbc6 <vfprintf+0x12a>
     bc0:	65 2d       	mov	r22, r5
     bc2:	70 e0       	ldi	r23, 0x00	; 0
     bc4:	02 c0       	rjmp	.+4      	; 0xbca <vfprintf+0x12e>
     bc6:	6f ef       	ldi	r22, 0xFF	; 255
     bc8:	7f ef       	ldi	r23, 0xFF	; 255
     bca:	c5 01       	movw	r24, r10
     bcc:	2c 87       	std	Y+12, r18	; 0x0c
     bce:	0e 94 4e 07 	call	0xe9c	; 0xe9c <strnlen>
     bd2:	2c 01       	movw	r4, r24
     bd4:	83 01       	movw	r16, r6
     bd6:	2c 85       	ldd	r18, Y+12	; 0x0c
     bd8:	2f 77       	andi	r18, 0x7F	; 127
     bda:	22 2e       	mov	r2, r18
     bdc:	17 c0       	rjmp	.+46     	; 0xc0c <vfprintf+0x170>
     bde:	38 01       	movw	r6, r16
     be0:	f2 e0       	ldi	r31, 0x02	; 2
     be2:	6f 0e       	add	r6, r31
     be4:	71 1c       	adc	r7, r1
     be6:	f8 01       	movw	r30, r16
     be8:	a0 80       	ld	r10, Z
     bea:	b1 80       	ldd	r11, Z+1	; 0x01
     bec:	26 ff       	sbrs	r18, 6
     bee:	03 c0       	rjmp	.+6      	; 0xbf6 <vfprintf+0x15a>
     bf0:	65 2d       	mov	r22, r5
     bf2:	70 e0       	ldi	r23, 0x00	; 0
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <vfprintf+0x15e>
     bf6:	6f ef       	ldi	r22, 0xFF	; 255
     bf8:	7f ef       	ldi	r23, 0xFF	; 255
     bfa:	c5 01       	movw	r24, r10
     bfc:	2c 87       	std	Y+12, r18	; 0x0c
     bfe:	0e 94 3c 07 	call	0xe78	; 0xe78 <strnlen_P>
     c02:	2c 01       	movw	r4, r24
     c04:	2c 85       	ldd	r18, Y+12	; 0x0c
     c06:	20 68       	ori	r18, 0x80	; 128
     c08:	22 2e       	mov	r2, r18
     c0a:	83 01       	movw	r16, r6
     c0c:	23 fc       	sbrc	r2, 3
     c0e:	1b c0       	rjmp	.+54     	; 0xc46 <vfprintf+0x1aa>
     c10:	83 2d       	mov	r24, r3
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	48 16       	cp	r4, r24
     c16:	59 06       	cpc	r5, r25
     c18:	b0 f4       	brcc	.+44     	; 0xc46 <vfprintf+0x1aa>
     c1a:	b7 01       	movw	r22, r14
     c1c:	80 e2       	ldi	r24, 0x20	; 32
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	0e 94 59 07 	call	0xeb2	; 0xeb2 <fputc>
     c24:	3a 94       	dec	r3
     c26:	f4 cf       	rjmp	.-24     	; 0xc10 <vfprintf+0x174>
     c28:	f5 01       	movw	r30, r10
     c2a:	27 fc       	sbrc	r2, 7
     c2c:	85 91       	lpm	r24, Z+
     c2e:	27 fe       	sbrs	r2, 7
     c30:	81 91       	ld	r24, Z+
     c32:	5f 01       	movw	r10, r30
     c34:	b7 01       	movw	r22, r14
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	0e 94 59 07 	call	0xeb2	; 0xeb2 <fputc>
     c3c:	31 10       	cpse	r3, r1
     c3e:	3a 94       	dec	r3
     c40:	f1 e0       	ldi	r31, 0x01	; 1
     c42:	4f 1a       	sub	r4, r31
     c44:	51 08       	sbc	r5, r1
     c46:	41 14       	cp	r4, r1
     c48:	51 04       	cpc	r5, r1
     c4a:	71 f7       	brne	.-36     	; 0xc28 <vfprintf+0x18c>
     c4c:	e5 c0       	rjmp	.+458    	; 0xe18 <vfprintf+0x37c>
     c4e:	84 36       	cpi	r24, 0x64	; 100
     c50:	11 f0       	breq	.+4      	; 0xc56 <vfprintf+0x1ba>
     c52:	89 36       	cpi	r24, 0x69	; 105
     c54:	39 f5       	brne	.+78     	; 0xca4 <vfprintf+0x208>
     c56:	f8 01       	movw	r30, r16
     c58:	27 ff       	sbrs	r18, 7
     c5a:	07 c0       	rjmp	.+14     	; 0xc6a <vfprintf+0x1ce>
     c5c:	60 81       	ld	r22, Z
     c5e:	71 81       	ldd	r23, Z+1	; 0x01
     c60:	82 81       	ldd	r24, Z+2	; 0x02
     c62:	93 81       	ldd	r25, Z+3	; 0x03
     c64:	0c 5f       	subi	r16, 0xFC	; 252
     c66:	1f 4f       	sbci	r17, 0xFF	; 255
     c68:	08 c0       	rjmp	.+16     	; 0xc7a <vfprintf+0x1de>
     c6a:	60 81       	ld	r22, Z
     c6c:	71 81       	ldd	r23, Z+1	; 0x01
     c6e:	88 27       	eor	r24, r24
     c70:	77 fd       	sbrc	r23, 7
     c72:	80 95       	com	r24
     c74:	98 2f       	mov	r25, r24
     c76:	0e 5f       	subi	r16, 0xFE	; 254
     c78:	1f 4f       	sbci	r17, 0xFF	; 255
     c7a:	2f 76       	andi	r18, 0x6F	; 111
     c7c:	b2 2e       	mov	r11, r18
     c7e:	97 ff       	sbrs	r25, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <vfprintf+0x1f8>
     c82:	90 95       	com	r25
     c84:	80 95       	com	r24
     c86:	70 95       	com	r23
     c88:	61 95       	neg	r22
     c8a:	7f 4f       	sbci	r23, 0xFF	; 255
     c8c:	8f 4f       	sbci	r24, 0xFF	; 255
     c8e:	9f 4f       	sbci	r25, 0xFF	; 255
     c90:	20 68       	ori	r18, 0x80	; 128
     c92:	b2 2e       	mov	r11, r18
     c94:	2a e0       	ldi	r18, 0x0A	; 10
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	a4 01       	movw	r20, r8
     c9a:	0e 94 8b 07 	call	0xf16	; 0xf16 <__ultoa_invert>
     c9e:	a8 2e       	mov	r10, r24
     ca0:	a8 18       	sub	r10, r8
     ca2:	44 c0       	rjmp	.+136    	; 0xd2c <vfprintf+0x290>
     ca4:	85 37       	cpi	r24, 0x75	; 117
     ca6:	29 f4       	brne	.+10     	; 0xcb2 <vfprintf+0x216>
     ca8:	2f 7e       	andi	r18, 0xEF	; 239
     caa:	b2 2e       	mov	r11, r18
     cac:	2a e0       	ldi	r18, 0x0A	; 10
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	25 c0       	rjmp	.+74     	; 0xcfc <vfprintf+0x260>
     cb2:	f2 2f       	mov	r31, r18
     cb4:	f9 7f       	andi	r31, 0xF9	; 249
     cb6:	bf 2e       	mov	r11, r31
     cb8:	8f 36       	cpi	r24, 0x6F	; 111
     cba:	c1 f0       	breq	.+48     	; 0xcec <vfprintf+0x250>
     cbc:	18 f4       	brcc	.+6      	; 0xcc4 <vfprintf+0x228>
     cbe:	88 35       	cpi	r24, 0x58	; 88
     cc0:	79 f0       	breq	.+30     	; 0xce0 <vfprintf+0x244>
     cc2:	b4 c0       	rjmp	.+360    	; 0xe2c <vfprintf+0x390>
     cc4:	80 37       	cpi	r24, 0x70	; 112
     cc6:	19 f0       	breq	.+6      	; 0xcce <vfprintf+0x232>
     cc8:	88 37       	cpi	r24, 0x78	; 120
     cca:	21 f0       	breq	.+8      	; 0xcd4 <vfprintf+0x238>
     ccc:	af c0       	rjmp	.+350    	; 0xe2c <vfprintf+0x390>
     cce:	2f 2f       	mov	r18, r31
     cd0:	20 61       	ori	r18, 0x10	; 16
     cd2:	b2 2e       	mov	r11, r18
     cd4:	b4 fe       	sbrs	r11, 4
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <vfprintf+0x256>
     cd8:	8b 2d       	mov	r24, r11
     cda:	84 60       	ori	r24, 0x04	; 4
     cdc:	b8 2e       	mov	r11, r24
     cde:	09 c0       	rjmp	.+18     	; 0xcf2 <vfprintf+0x256>
     ce0:	24 ff       	sbrs	r18, 4
     ce2:	0a c0       	rjmp	.+20     	; 0xcf8 <vfprintf+0x25c>
     ce4:	9f 2f       	mov	r25, r31
     ce6:	96 60       	ori	r25, 0x06	; 6
     ce8:	b9 2e       	mov	r11, r25
     cea:	06 c0       	rjmp	.+12     	; 0xcf8 <vfprintf+0x25c>
     cec:	28 e0       	ldi	r18, 0x08	; 8
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	05 c0       	rjmp	.+10     	; 0xcfc <vfprintf+0x260>
     cf2:	20 e1       	ldi	r18, 0x10	; 16
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	02 c0       	rjmp	.+4      	; 0xcfc <vfprintf+0x260>
     cf8:	20 e1       	ldi	r18, 0x10	; 16
     cfa:	32 e0       	ldi	r19, 0x02	; 2
     cfc:	f8 01       	movw	r30, r16
     cfe:	b7 fe       	sbrs	r11, 7
     d00:	07 c0       	rjmp	.+14     	; 0xd10 <vfprintf+0x274>
     d02:	60 81       	ld	r22, Z
     d04:	71 81       	ldd	r23, Z+1	; 0x01
     d06:	82 81       	ldd	r24, Z+2	; 0x02
     d08:	93 81       	ldd	r25, Z+3	; 0x03
     d0a:	0c 5f       	subi	r16, 0xFC	; 252
     d0c:	1f 4f       	sbci	r17, 0xFF	; 255
     d0e:	06 c0       	rjmp	.+12     	; 0xd1c <vfprintf+0x280>
     d10:	60 81       	ld	r22, Z
     d12:	71 81       	ldd	r23, Z+1	; 0x01
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	0e 5f       	subi	r16, 0xFE	; 254
     d1a:	1f 4f       	sbci	r17, 0xFF	; 255
     d1c:	a4 01       	movw	r20, r8
     d1e:	0e 94 8b 07 	call	0xf16	; 0xf16 <__ultoa_invert>
     d22:	a8 2e       	mov	r10, r24
     d24:	a8 18       	sub	r10, r8
     d26:	fb 2d       	mov	r31, r11
     d28:	ff 77       	andi	r31, 0x7F	; 127
     d2a:	bf 2e       	mov	r11, r31
     d2c:	b6 fe       	sbrs	r11, 6
     d2e:	0b c0       	rjmp	.+22     	; 0xd46 <vfprintf+0x2aa>
     d30:	2b 2d       	mov	r18, r11
     d32:	2e 7f       	andi	r18, 0xFE	; 254
     d34:	a5 14       	cp	r10, r5
     d36:	50 f4       	brcc	.+20     	; 0xd4c <vfprintf+0x2b0>
     d38:	b4 fe       	sbrs	r11, 4
     d3a:	0a c0       	rjmp	.+20     	; 0xd50 <vfprintf+0x2b4>
     d3c:	b2 fc       	sbrc	r11, 2
     d3e:	08 c0       	rjmp	.+16     	; 0xd50 <vfprintf+0x2b4>
     d40:	2b 2d       	mov	r18, r11
     d42:	2e 7e       	andi	r18, 0xEE	; 238
     d44:	05 c0       	rjmp	.+10     	; 0xd50 <vfprintf+0x2b4>
     d46:	7a 2c       	mov	r7, r10
     d48:	2b 2d       	mov	r18, r11
     d4a:	03 c0       	rjmp	.+6      	; 0xd52 <vfprintf+0x2b6>
     d4c:	7a 2c       	mov	r7, r10
     d4e:	01 c0       	rjmp	.+2      	; 0xd52 <vfprintf+0x2b6>
     d50:	75 2c       	mov	r7, r5
     d52:	24 ff       	sbrs	r18, 4
     d54:	0d c0       	rjmp	.+26     	; 0xd70 <vfprintf+0x2d4>
     d56:	fe 01       	movw	r30, r28
     d58:	ea 0d       	add	r30, r10
     d5a:	f1 1d       	adc	r31, r1
     d5c:	80 81       	ld	r24, Z
     d5e:	80 33       	cpi	r24, 0x30	; 48
     d60:	11 f4       	brne	.+4      	; 0xd66 <vfprintf+0x2ca>
     d62:	29 7e       	andi	r18, 0xE9	; 233
     d64:	09 c0       	rjmp	.+18     	; 0xd78 <vfprintf+0x2dc>
     d66:	22 ff       	sbrs	r18, 2
     d68:	06 c0       	rjmp	.+12     	; 0xd76 <vfprintf+0x2da>
     d6a:	73 94       	inc	r7
     d6c:	73 94       	inc	r7
     d6e:	04 c0       	rjmp	.+8      	; 0xd78 <vfprintf+0x2dc>
     d70:	82 2f       	mov	r24, r18
     d72:	86 78       	andi	r24, 0x86	; 134
     d74:	09 f0       	breq	.+2      	; 0xd78 <vfprintf+0x2dc>
     d76:	73 94       	inc	r7
     d78:	23 fd       	sbrc	r18, 3
     d7a:	13 c0       	rjmp	.+38     	; 0xda2 <vfprintf+0x306>
     d7c:	20 ff       	sbrs	r18, 0
     d7e:	06 c0       	rjmp	.+12     	; 0xd8c <vfprintf+0x2f0>
     d80:	5a 2c       	mov	r5, r10
     d82:	73 14       	cp	r7, r3
     d84:	18 f4       	brcc	.+6      	; 0xd8c <vfprintf+0x2f0>
     d86:	53 0c       	add	r5, r3
     d88:	57 18       	sub	r5, r7
     d8a:	73 2c       	mov	r7, r3
     d8c:	73 14       	cp	r7, r3
     d8e:	68 f4       	brcc	.+26     	; 0xdaa <vfprintf+0x30e>
     d90:	b7 01       	movw	r22, r14
     d92:	80 e2       	ldi	r24, 0x20	; 32
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	2c 87       	std	Y+12, r18	; 0x0c
     d98:	0e 94 59 07 	call	0xeb2	; 0xeb2 <fputc>
     d9c:	73 94       	inc	r7
     d9e:	2c 85       	ldd	r18, Y+12	; 0x0c
     da0:	f5 cf       	rjmp	.-22     	; 0xd8c <vfprintf+0x2f0>
     da2:	73 14       	cp	r7, r3
     da4:	10 f4       	brcc	.+4      	; 0xdaa <vfprintf+0x30e>
     da6:	37 18       	sub	r3, r7
     da8:	01 c0       	rjmp	.+2      	; 0xdac <vfprintf+0x310>
     daa:	31 2c       	mov	r3, r1
     dac:	24 ff       	sbrs	r18, 4
     dae:	12 c0       	rjmp	.+36     	; 0xdd4 <vfprintf+0x338>
     db0:	b7 01       	movw	r22, r14
     db2:	80 e3       	ldi	r24, 0x30	; 48
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	2c 87       	std	Y+12, r18	; 0x0c
     db8:	0e 94 59 07 	call	0xeb2	; 0xeb2 <fputc>
     dbc:	2c 85       	ldd	r18, Y+12	; 0x0c
     dbe:	22 ff       	sbrs	r18, 2
     dc0:	17 c0       	rjmp	.+46     	; 0xdf0 <vfprintf+0x354>
     dc2:	21 ff       	sbrs	r18, 1
     dc4:	03 c0       	rjmp	.+6      	; 0xdcc <vfprintf+0x330>
     dc6:	88 e5       	ldi	r24, 0x58	; 88
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <vfprintf+0x334>
     dcc:	88 e7       	ldi	r24, 0x78	; 120
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	b7 01       	movw	r22, r14
     dd2:	0c c0       	rjmp	.+24     	; 0xdec <vfprintf+0x350>
     dd4:	82 2f       	mov	r24, r18
     dd6:	86 78       	andi	r24, 0x86	; 134
     dd8:	59 f0       	breq	.+22     	; 0xdf0 <vfprintf+0x354>
     dda:	21 fd       	sbrc	r18, 1
     ddc:	02 c0       	rjmp	.+4      	; 0xde2 <vfprintf+0x346>
     dde:	80 e2       	ldi	r24, 0x20	; 32
     de0:	01 c0       	rjmp	.+2      	; 0xde4 <vfprintf+0x348>
     de2:	8b e2       	ldi	r24, 0x2B	; 43
     de4:	27 fd       	sbrc	r18, 7
     de6:	8d e2       	ldi	r24, 0x2D	; 45
     de8:	b7 01       	movw	r22, r14
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	0e 94 59 07 	call	0xeb2	; 0xeb2 <fputc>
     df0:	a5 14       	cp	r10, r5
     df2:	38 f4       	brcc	.+14     	; 0xe02 <vfprintf+0x366>
     df4:	b7 01       	movw	r22, r14
     df6:	80 e3       	ldi	r24, 0x30	; 48
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	0e 94 59 07 	call	0xeb2	; 0xeb2 <fputc>
     dfe:	5a 94       	dec	r5
     e00:	f7 cf       	rjmp	.-18     	; 0xdf0 <vfprintf+0x354>
     e02:	aa 94       	dec	r10
     e04:	f4 01       	movw	r30, r8
     e06:	ea 0d       	add	r30, r10
     e08:	f1 1d       	adc	r31, r1
     e0a:	80 81       	ld	r24, Z
     e0c:	b7 01       	movw	r22, r14
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	0e 94 59 07 	call	0xeb2	; 0xeb2 <fputc>
     e14:	a1 10       	cpse	r10, r1
     e16:	f5 cf       	rjmp	.-22     	; 0xe02 <vfprintf+0x366>
     e18:	33 20       	and	r3, r3
     e1a:	09 f4       	brne	.+2      	; 0xe1e <vfprintf+0x382>
     e1c:	51 ce       	rjmp	.-862    	; 0xac0 <vfprintf+0x24>
     e1e:	b7 01       	movw	r22, r14
     e20:	80 e2       	ldi	r24, 0x20	; 32
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	0e 94 59 07 	call	0xeb2	; 0xeb2 <fputc>
     e28:	3a 94       	dec	r3
     e2a:	f6 cf       	rjmp	.-20     	; 0xe18 <vfprintf+0x37c>
     e2c:	f7 01       	movw	r30, r14
     e2e:	86 81       	ldd	r24, Z+6	; 0x06
     e30:	97 81       	ldd	r25, Z+7	; 0x07
     e32:	02 c0       	rjmp	.+4      	; 0xe38 <vfprintf+0x39c>
     e34:	8f ef       	ldi	r24, 0xFF	; 255
     e36:	9f ef       	ldi	r25, 0xFF	; 255
     e38:	2c 96       	adiw	r28, 0x0c	; 12
     e3a:	e2 e1       	ldi	r30, 0x12	; 18
     e3c:	0c 94 05 08 	jmp	0x100a	; 0x100a <__epilogue_restores__>

00000e40 <calloc>:
     e40:	0f 93       	push	r16
     e42:	1f 93       	push	r17
     e44:	cf 93       	push	r28
     e46:	df 93       	push	r29
     e48:	86 9f       	mul	r24, r22
     e4a:	80 01       	movw	r16, r0
     e4c:	87 9f       	mul	r24, r23
     e4e:	10 0d       	add	r17, r0
     e50:	96 9f       	mul	r25, r22
     e52:	10 0d       	add	r17, r0
     e54:	11 24       	eor	r1, r1
     e56:	c8 01       	movw	r24, r16
     e58:	0e 94 c8 03 	call	0x790	; 0x790 <malloc>
     e5c:	ec 01       	movw	r28, r24
     e5e:	00 97       	sbiw	r24, 0x00	; 0
     e60:	29 f0       	breq	.+10     	; 0xe6c <calloc+0x2c>
     e62:	a8 01       	movw	r20, r16
     e64:	60 e0       	ldi	r22, 0x00	; 0
     e66:	70 e0       	ldi	r23, 0x00	; 0
     e68:	0e 94 47 07 	call	0xe8e	; 0xe8e <memset>
     e6c:	ce 01       	movw	r24, r28
     e6e:	df 91       	pop	r29
     e70:	cf 91       	pop	r28
     e72:	1f 91       	pop	r17
     e74:	0f 91       	pop	r16
     e76:	08 95       	ret

00000e78 <strnlen_P>:
     e78:	fc 01       	movw	r30, r24
     e7a:	05 90       	lpm	r0, Z+
     e7c:	61 50       	subi	r22, 0x01	; 1
     e7e:	70 40       	sbci	r23, 0x00	; 0
     e80:	01 10       	cpse	r0, r1
     e82:	d8 f7       	brcc	.-10     	; 0xe7a <strnlen_P+0x2>
     e84:	80 95       	com	r24
     e86:	90 95       	com	r25
     e88:	8e 0f       	add	r24, r30
     e8a:	9f 1f       	adc	r25, r31
     e8c:	08 95       	ret

00000e8e <memset>:
     e8e:	dc 01       	movw	r26, r24
     e90:	01 c0       	rjmp	.+2      	; 0xe94 <memset+0x6>
     e92:	6d 93       	st	X+, r22
     e94:	41 50       	subi	r20, 0x01	; 1
     e96:	50 40       	sbci	r21, 0x00	; 0
     e98:	e0 f7       	brcc	.-8      	; 0xe92 <memset+0x4>
     e9a:	08 95       	ret

00000e9c <strnlen>:
     e9c:	fc 01       	movw	r30, r24
     e9e:	61 50       	subi	r22, 0x01	; 1
     ea0:	70 40       	sbci	r23, 0x00	; 0
     ea2:	01 90       	ld	r0, Z+
     ea4:	01 10       	cpse	r0, r1
     ea6:	d8 f7       	brcc	.-10     	; 0xe9e <strnlen+0x2>
     ea8:	80 95       	com	r24
     eaa:	90 95       	com	r25
     eac:	8e 0f       	add	r24, r30
     eae:	9f 1f       	adc	r25, r31
     eb0:	08 95       	ret

00000eb2 <fputc>:
     eb2:	0f 93       	push	r16
     eb4:	1f 93       	push	r17
     eb6:	cf 93       	push	r28
     eb8:	df 93       	push	r29
     eba:	18 2f       	mov	r17, r24
     ebc:	09 2f       	mov	r16, r25
     ebe:	eb 01       	movw	r28, r22
     ec0:	8b 81       	ldd	r24, Y+3	; 0x03
     ec2:	81 fd       	sbrc	r24, 1
     ec4:	03 c0       	rjmp	.+6      	; 0xecc <fputc+0x1a>
     ec6:	8f ef       	ldi	r24, 0xFF	; 255
     ec8:	9f ef       	ldi	r25, 0xFF	; 255
     eca:	20 c0       	rjmp	.+64     	; 0xf0c <fputc+0x5a>
     ecc:	82 ff       	sbrs	r24, 2
     ece:	10 c0       	rjmp	.+32     	; 0xef0 <fputc+0x3e>
     ed0:	4e 81       	ldd	r20, Y+6	; 0x06
     ed2:	5f 81       	ldd	r21, Y+7	; 0x07
     ed4:	2c 81       	ldd	r18, Y+4	; 0x04
     ed6:	3d 81       	ldd	r19, Y+5	; 0x05
     ed8:	42 17       	cp	r20, r18
     eda:	53 07       	cpc	r21, r19
     edc:	7c f4       	brge	.+30     	; 0xefc <fputc+0x4a>
     ede:	e8 81       	ld	r30, Y
     ee0:	f9 81       	ldd	r31, Y+1	; 0x01
     ee2:	9f 01       	movw	r18, r30
     ee4:	2f 5f       	subi	r18, 0xFF	; 255
     ee6:	3f 4f       	sbci	r19, 0xFF	; 255
     ee8:	39 83       	std	Y+1, r19	; 0x01
     eea:	28 83       	st	Y, r18
     eec:	10 83       	st	Z, r17
     eee:	06 c0       	rjmp	.+12     	; 0xefc <fputc+0x4a>
     ef0:	e8 85       	ldd	r30, Y+8	; 0x08
     ef2:	f9 85       	ldd	r31, Y+9	; 0x09
     ef4:	81 2f       	mov	r24, r17
     ef6:	09 95       	icall
     ef8:	89 2b       	or	r24, r25
     efa:	29 f7       	brne	.-54     	; 0xec6 <fputc+0x14>
     efc:	2e 81       	ldd	r18, Y+6	; 0x06
     efe:	3f 81       	ldd	r19, Y+7	; 0x07
     f00:	2f 5f       	subi	r18, 0xFF	; 255
     f02:	3f 4f       	sbci	r19, 0xFF	; 255
     f04:	3f 83       	std	Y+7, r19	; 0x07
     f06:	2e 83       	std	Y+6, r18	; 0x06
     f08:	81 2f       	mov	r24, r17
     f0a:	90 2f       	mov	r25, r16
     f0c:	df 91       	pop	r29
     f0e:	cf 91       	pop	r28
     f10:	1f 91       	pop	r17
     f12:	0f 91       	pop	r16
     f14:	08 95       	ret

00000f16 <__ultoa_invert>:
     f16:	fa 01       	movw	r30, r20
     f18:	aa 27       	eor	r26, r26
     f1a:	28 30       	cpi	r18, 0x08	; 8
     f1c:	51 f1       	breq	.+84     	; 0xf72 <__ultoa_invert+0x5c>
     f1e:	20 31       	cpi	r18, 0x10	; 16
     f20:	81 f1       	breq	.+96     	; 0xf82 <__ultoa_invert+0x6c>
     f22:	e8 94       	clt
     f24:	6f 93       	push	r22
     f26:	6e 7f       	andi	r22, 0xFE	; 254
     f28:	6e 5f       	subi	r22, 0xFE	; 254
     f2a:	7f 4f       	sbci	r23, 0xFF	; 255
     f2c:	8f 4f       	sbci	r24, 0xFF	; 255
     f2e:	9f 4f       	sbci	r25, 0xFF	; 255
     f30:	af 4f       	sbci	r26, 0xFF	; 255
     f32:	b1 e0       	ldi	r27, 0x01	; 1
     f34:	3e d0       	rcall	.+124    	; 0xfb2 <__ultoa_invert+0x9c>
     f36:	b4 e0       	ldi	r27, 0x04	; 4
     f38:	3c d0       	rcall	.+120    	; 0xfb2 <__ultoa_invert+0x9c>
     f3a:	67 0f       	add	r22, r23
     f3c:	78 1f       	adc	r23, r24
     f3e:	89 1f       	adc	r24, r25
     f40:	9a 1f       	adc	r25, r26
     f42:	a1 1d       	adc	r26, r1
     f44:	68 0f       	add	r22, r24
     f46:	79 1f       	adc	r23, r25
     f48:	8a 1f       	adc	r24, r26
     f4a:	91 1d       	adc	r25, r1
     f4c:	a1 1d       	adc	r26, r1
     f4e:	6a 0f       	add	r22, r26
     f50:	71 1d       	adc	r23, r1
     f52:	81 1d       	adc	r24, r1
     f54:	91 1d       	adc	r25, r1
     f56:	a1 1d       	adc	r26, r1
     f58:	20 d0       	rcall	.+64     	; 0xf9a <__ultoa_invert+0x84>
     f5a:	09 f4       	brne	.+2      	; 0xf5e <__ultoa_invert+0x48>
     f5c:	68 94       	set
     f5e:	3f 91       	pop	r19
     f60:	2a e0       	ldi	r18, 0x0A	; 10
     f62:	26 9f       	mul	r18, r22
     f64:	11 24       	eor	r1, r1
     f66:	30 19       	sub	r19, r0
     f68:	30 5d       	subi	r19, 0xD0	; 208
     f6a:	31 93       	st	Z+, r19
     f6c:	de f6       	brtc	.-74     	; 0xf24 <__ultoa_invert+0xe>
     f6e:	cf 01       	movw	r24, r30
     f70:	08 95       	ret
     f72:	46 2f       	mov	r20, r22
     f74:	47 70       	andi	r20, 0x07	; 7
     f76:	40 5d       	subi	r20, 0xD0	; 208
     f78:	41 93       	st	Z+, r20
     f7a:	b3 e0       	ldi	r27, 0x03	; 3
     f7c:	0f d0       	rcall	.+30     	; 0xf9c <__ultoa_invert+0x86>
     f7e:	c9 f7       	brne	.-14     	; 0xf72 <__ultoa_invert+0x5c>
     f80:	f6 cf       	rjmp	.-20     	; 0xf6e <__ultoa_invert+0x58>
     f82:	46 2f       	mov	r20, r22
     f84:	4f 70       	andi	r20, 0x0F	; 15
     f86:	40 5d       	subi	r20, 0xD0	; 208
     f88:	4a 33       	cpi	r20, 0x3A	; 58
     f8a:	18 f0       	brcs	.+6      	; 0xf92 <__ultoa_invert+0x7c>
     f8c:	49 5d       	subi	r20, 0xD9	; 217
     f8e:	31 fd       	sbrc	r19, 1
     f90:	40 52       	subi	r20, 0x20	; 32
     f92:	41 93       	st	Z+, r20
     f94:	02 d0       	rcall	.+4      	; 0xf9a <__ultoa_invert+0x84>
     f96:	a9 f7       	brne	.-22     	; 0xf82 <__ultoa_invert+0x6c>
     f98:	ea cf       	rjmp	.-44     	; 0xf6e <__ultoa_invert+0x58>
     f9a:	b4 e0       	ldi	r27, 0x04	; 4
     f9c:	a6 95       	lsr	r26
     f9e:	97 95       	ror	r25
     fa0:	87 95       	ror	r24
     fa2:	77 95       	ror	r23
     fa4:	67 95       	ror	r22
     fa6:	ba 95       	dec	r27
     fa8:	c9 f7       	brne	.-14     	; 0xf9c <__ultoa_invert+0x86>
     faa:	00 97       	sbiw	r24, 0x00	; 0
     fac:	61 05       	cpc	r22, r1
     fae:	71 05       	cpc	r23, r1
     fb0:	08 95       	ret
     fb2:	9b 01       	movw	r18, r22
     fb4:	ac 01       	movw	r20, r24
     fb6:	0a 2e       	mov	r0, r26
     fb8:	06 94       	lsr	r0
     fba:	57 95       	ror	r21
     fbc:	47 95       	ror	r20
     fbe:	37 95       	ror	r19
     fc0:	27 95       	ror	r18
     fc2:	ba 95       	dec	r27
     fc4:	c9 f7       	brne	.-14     	; 0xfb8 <__ultoa_invert+0xa2>
     fc6:	62 0f       	add	r22, r18
     fc8:	73 1f       	adc	r23, r19
     fca:	84 1f       	adc	r24, r20
     fcc:	95 1f       	adc	r25, r21
     fce:	a0 1d       	adc	r26, r0
     fd0:	08 95       	ret

00000fd2 <__prologue_saves__>:
     fd2:	2f 92       	push	r2
     fd4:	3f 92       	push	r3
     fd6:	4f 92       	push	r4
     fd8:	5f 92       	push	r5
     fda:	6f 92       	push	r6
     fdc:	7f 92       	push	r7
     fde:	8f 92       	push	r8
     fe0:	9f 92       	push	r9
     fe2:	af 92       	push	r10
     fe4:	bf 92       	push	r11
     fe6:	cf 92       	push	r12
     fe8:	df 92       	push	r13
     fea:	ef 92       	push	r14
     fec:	ff 92       	push	r15
     fee:	0f 93       	push	r16
     ff0:	1f 93       	push	r17
     ff2:	cf 93       	push	r28
     ff4:	df 93       	push	r29
     ff6:	cd b7       	in	r28, 0x3d	; 61
     ff8:	de b7       	in	r29, 0x3e	; 62
     ffa:	ca 1b       	sub	r28, r26
     ffc:	db 0b       	sbc	r29, r27
     ffe:	0f b6       	in	r0, 0x3f	; 63
    1000:	f8 94       	cli
    1002:	de bf       	out	0x3e, r29	; 62
    1004:	0f be       	out	0x3f, r0	; 63
    1006:	cd bf       	out	0x3d, r28	; 61
    1008:	09 94       	ijmp

0000100a <__epilogue_restores__>:
    100a:	2a 88       	ldd	r2, Y+18	; 0x12
    100c:	39 88       	ldd	r3, Y+17	; 0x11
    100e:	48 88       	ldd	r4, Y+16	; 0x10
    1010:	5f 84       	ldd	r5, Y+15	; 0x0f
    1012:	6e 84       	ldd	r6, Y+14	; 0x0e
    1014:	7d 84       	ldd	r7, Y+13	; 0x0d
    1016:	8c 84       	ldd	r8, Y+12	; 0x0c
    1018:	9b 84       	ldd	r9, Y+11	; 0x0b
    101a:	aa 84       	ldd	r10, Y+10	; 0x0a
    101c:	b9 84       	ldd	r11, Y+9	; 0x09
    101e:	c8 84       	ldd	r12, Y+8	; 0x08
    1020:	df 80       	ldd	r13, Y+7	; 0x07
    1022:	ee 80       	ldd	r14, Y+6	; 0x06
    1024:	fd 80       	ldd	r15, Y+5	; 0x05
    1026:	0c 81       	ldd	r16, Y+4	; 0x04
    1028:	1b 81       	ldd	r17, Y+3	; 0x03
    102a:	aa 81       	ldd	r26, Y+2	; 0x02
    102c:	b9 81       	ldd	r27, Y+1	; 0x01
    102e:	ce 0f       	add	r28, r30
    1030:	d1 1d       	adc	r29, r1
    1032:	0f b6       	in	r0, 0x3f	; 63
    1034:	f8 94       	cli
    1036:	de bf       	out	0x3e, r29	; 62
    1038:	0f be       	out	0x3f, r0	; 63
    103a:	cd bf       	out	0x3d, r28	; 61
    103c:	ed 01       	movw	r28, r26
    103e:	08 95       	ret

00001040 <_exit>:
    1040:	f8 94       	cli

00001042 <__stop_program>:
    1042:	ff cf       	rjmp	.-2      	; 0x1042 <__stop_program>
