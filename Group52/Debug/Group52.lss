
Group52.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ec  00800100  00000420  000004b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000420  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  008001ec  008001ec  000005a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005a0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  000005d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000003f1  00000000  00000000  00000640  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000293  00000000  00000000  00000a31  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000028e  00000000  00000000  00000cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000011c  00000000  00000000  00000f54  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000233  00000000  00000000  00001070  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001e8  00000000  00000000  000012a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  0000148b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e0 e2       	ldi	r30, 0x20	; 32
  84:	f4 e0       	ldi	r31, 0x04	; 4
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	ac 3e       	cpi	r26, 0xEC	; 236
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	ac ee       	ldi	r26, 0xEC	; 236
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a6 3f       	cpi	r26, 0xF6	; 246
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 57 00 	call	0xae	; 0xae <main>
  a6:	0c 94 0e 02 	jmp	0x41c	; 0x41c <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <main>:
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		uint8_t retreived_value = ext_ram[i];
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
  ae:	65 e7       	ldi	r22, 0x75	; 117
  b0:	70 e0       	ldi	r23, 0x00	; 0
  b2:	81 e7       	ldi	r24, 0x71	; 113
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	0e 94 79 00 	call	0xf2	; 0xf2 <fdevopen>
			retrieval_errors++;
  ba:	8f e1       	ldi	r24, 0x1F	; 31
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	0e 94 6a 00 	call	0xd4	; 0xd4 <usart_Init>
  c2:	85 b7       	in	r24, 0x35	; 53
  c4:	80 68       	ori	r24, 0x80	; 128
  c6:	85 bf       	out	0x35, r24	; 53
  c8:	e0 e0       	ldi	r30, 0x00	; 0
  ca:	f5 e1       	ldi	r31, 0x15	; 21
  cc:	86 e0       	ldi	r24, 0x06	; 6
		}
	}
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) {
  ce:	91 e0       	ldi	r25, 0x01	; 1
  d0:	80 83       	st	Z, r24
  d2:	fe cf       	rjmp	.-4      	; 0xd0 <main+0x22>

000000d4 <usart_Init>:
#include <avr/io.h>

void usart_Init(unsigned int ubrr)
{
	/* Set baud rate*/
	UBRR0H = (unsigned char)(ubrr >> 8 );
  d4:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
  d6:	89 b9       	out	0x09, r24	; 9
	/*Enable receiver and transmitter*/
	UCSR0B = (1 << RXEN0)|(1 << TXEN0);
  d8:	88 e1       	ldi	r24, 0x18	; 24
  da:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1 << URSEL0)|(1 << USBS0)|(3 << UCSZ10);
  dc:	8e e8       	ldi	r24, 0x8E	; 142
  de:	80 bd       	out	0x20, r24	; 32
  e0:	08 95       	ret

000000e2 <usart_Transmit>:
}

void usart_Transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while (!( UCSR0A & (1 << UDRE0)))
  e2:	5d 9b       	sbis	0x0b, 5	; 11
  e4:	fe cf       	rjmp	.-4      	; 0xe2 <usart_Transmit>
		;
	/* Put data into buffer, sends the data */
	UDR0 = data;
  e6:	8c b9       	out	0x0c, r24	; 12
  e8:	08 95       	ret

000000ea <usart_Receive>:
}

unsigned char usart_Receive(void)
{
	/* Wait for data to be received */
	while ( !(UCSR0A & ( 1 << RXC0)) )
  ea:	5f 9b       	sbis	0x0b, 7	; 11
  ec:	fe cf       	rjmp	.-4      	; 0xea <usart_Receive>
		;
	/* Get and return received data from buffer */
	return UDR0;
  ee:	8c b1       	in	r24, 0x0c	; 12
}
  f0:	08 95       	ret

000000f2 <fdevopen>:
		if (retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	printf("SRAM test completed with\n%4d errorsin write phase and\n%4d errors in retrieval phase\n\n", write_errors, retrieval_errors);
  f2:	0f 93       	push	r16
  f4:	1f 93       	push	r17
  f6:	cf 93       	push	r28
}
  f8:	df 93       	push	r29
  fa:	ec 01       	movw	r28, r24
  fc:	8b 01       	movw	r16, r22
  fe:	00 97       	sbiw	r24, 0x00	; 0
 100:	31 f4       	brne	.+12     	; 0x10e <fdevopen+0x1c>
 102:	61 15       	cp	r22, r1
 104:	71 05       	cpc	r23, r1
 106:	19 f4       	brne	.+6      	; 0x10e <fdevopen+0x1c>
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	38 c0       	rjmp	.+112    	; 0x17e <fdevopen+0x8c>
 10e:	6e e0       	ldi	r22, 0x0E	; 14
 110:	70 e0       	ldi	r23, 0x00	; 0
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0e 94 c4 00 	call	0x188	; 0x188 <calloc>
 11a:	fc 01       	movw	r30, r24
 11c:	00 97       	sbiw	r24, 0x00	; 0
 11e:	a1 f3       	breq	.-24     	; 0x108 <fdevopen+0x16>
 120:	80 e8       	ldi	r24, 0x80	; 128
 122:	83 83       	std	Z+3, r24	; 0x03
 124:	01 15       	cp	r16, r1
 126:	11 05       	cpc	r17, r1
 128:	71 f0       	breq	.+28     	; 0x146 <fdevopen+0x54>
 12a:	13 87       	std	Z+11, r17	; 0x0b
 12c:	02 87       	std	Z+10, r16	; 0x0a
 12e:	81 e8       	ldi	r24, 0x81	; 129
 130:	83 83       	std	Z+3, r24	; 0x03
 132:	80 91 ec 01 	lds	r24, 0x01EC
 136:	90 91 ed 01 	lds	r25, 0x01ED
 13a:	89 2b       	or	r24, r25
 13c:	21 f4       	brne	.+8      	; 0x146 <fdevopen+0x54>
 13e:	f0 93 ed 01 	sts	0x01ED, r31
 142:	e0 93 ec 01 	sts	0x01EC, r30
 146:	20 97       	sbiw	r28, 0x00	; 0
 148:	c9 f0       	breq	.+50     	; 0x17c <fdevopen+0x8a>
 14a:	d1 87       	std	Z+9, r29	; 0x09
 14c:	c0 87       	std	Z+8, r28	; 0x08
 14e:	83 81       	ldd	r24, Z+3	; 0x03
 150:	82 60       	ori	r24, 0x02	; 2
 152:	83 83       	std	Z+3, r24	; 0x03
 154:	80 91 ee 01 	lds	r24, 0x01EE
 158:	90 91 ef 01 	lds	r25, 0x01EF
 15c:	89 2b       	or	r24, r25
 15e:	71 f4       	brne	.+28     	; 0x17c <fdevopen+0x8a>
 160:	f0 93 ef 01 	sts	0x01EF, r31
 164:	e0 93 ee 01 	sts	0x01EE, r30
 168:	80 91 f0 01 	lds	r24, 0x01F0
 16c:	90 91 f1 01 	lds	r25, 0x01F1
 170:	89 2b       	or	r24, r25
 172:	21 f4       	brne	.+8      	; 0x17c <fdevopen+0x8a>
 174:	f0 93 f1 01 	sts	0x01F1, r31
 178:	e0 93 f0 01 	sts	0x01F0, r30
 17c:	cf 01       	movw	r24, r30
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	1f 91       	pop	r17
 184:	0f 91       	pop	r16
 186:	08 95       	ret

00000188 <calloc>:
 188:	0f 93       	push	r16
 18a:	1f 93       	push	r17
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	86 9f       	mul	r24, r22
 192:	80 01       	movw	r16, r0
 194:	87 9f       	mul	r24, r23
 196:	10 0d       	add	r17, r0
 198:	96 9f       	mul	r25, r22
 19a:	10 0d       	add	r17, r0
 19c:	11 24       	eor	r1, r1
 19e:	c8 01       	movw	r24, r16
 1a0:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <malloc>
 1a4:	ec 01       	movw	r28, r24
 1a6:	00 97       	sbiw	r24, 0x00	; 0
 1a8:	29 f0       	breq	.+10     	; 0x1b4 <calloc+0x2c>
 1aa:	a8 01       	movw	r20, r16
 1ac:	60 e0       	ldi	r22, 0x00	; 0
 1ae:	70 e0       	ldi	r23, 0x00	; 0
 1b0:	0e 94 07 02 	call	0x40e	; 0x40e <memset>
 1b4:	ce 01       	movw	r24, r28
 1b6:	df 91       	pop	r29
 1b8:	cf 91       	pop	r28
 1ba:	1f 91       	pop	r17
 1bc:	0f 91       	pop	r16
 1be:	08 95       	ret

000001c0 <malloc>:
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
 1c4:	82 30       	cpi	r24, 0x02	; 2
 1c6:	91 05       	cpc	r25, r1
 1c8:	10 f4       	brcc	.+4      	; 0x1ce <malloc+0xe>
 1ca:	82 e0       	ldi	r24, 0x02	; 2
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	e0 91 f4 01 	lds	r30, 0x01F4
 1d2:	f0 91 f5 01 	lds	r31, 0x01F5
 1d6:	20 e0       	ldi	r18, 0x00	; 0
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	a0 e0       	ldi	r26, 0x00	; 0
 1dc:	b0 e0       	ldi	r27, 0x00	; 0
 1de:	30 97       	sbiw	r30, 0x00	; 0
 1e0:	39 f1       	breq	.+78     	; 0x230 <malloc+0x70>
 1e2:	40 81       	ld	r20, Z
 1e4:	51 81       	ldd	r21, Z+1	; 0x01
 1e6:	48 17       	cp	r20, r24
 1e8:	59 07       	cpc	r21, r25
 1ea:	b8 f0       	brcs	.+46     	; 0x21a <malloc+0x5a>
 1ec:	48 17       	cp	r20, r24
 1ee:	59 07       	cpc	r21, r25
 1f0:	71 f4       	brne	.+28     	; 0x20e <malloc+0x4e>
 1f2:	82 81       	ldd	r24, Z+2	; 0x02
 1f4:	93 81       	ldd	r25, Z+3	; 0x03
 1f6:	10 97       	sbiw	r26, 0x00	; 0
 1f8:	29 f0       	breq	.+10     	; 0x204 <malloc+0x44>
 1fa:	13 96       	adiw	r26, 0x03	; 3
 1fc:	9c 93       	st	X, r25
 1fe:	8e 93       	st	-X, r24
 200:	12 97       	sbiw	r26, 0x02	; 2
 202:	2c c0       	rjmp	.+88     	; 0x25c <malloc+0x9c>
 204:	90 93 f5 01 	sts	0x01F5, r25
 208:	80 93 f4 01 	sts	0x01F4, r24
 20c:	27 c0       	rjmp	.+78     	; 0x25c <malloc+0x9c>
 20e:	21 15       	cp	r18, r1
 210:	31 05       	cpc	r19, r1
 212:	31 f0       	breq	.+12     	; 0x220 <malloc+0x60>
 214:	42 17       	cp	r20, r18
 216:	53 07       	cpc	r21, r19
 218:	18 f0       	brcs	.+6      	; 0x220 <malloc+0x60>
 21a:	a9 01       	movw	r20, r18
 21c:	db 01       	movw	r26, r22
 21e:	01 c0       	rjmp	.+2      	; 0x222 <malloc+0x62>
 220:	ef 01       	movw	r28, r30
 222:	9a 01       	movw	r18, r20
 224:	bd 01       	movw	r22, r26
 226:	df 01       	movw	r26, r30
 228:	02 80       	ldd	r0, Z+2	; 0x02
 22a:	f3 81       	ldd	r31, Z+3	; 0x03
 22c:	e0 2d       	mov	r30, r0
 22e:	d7 cf       	rjmp	.-82     	; 0x1de <malloc+0x1e>
 230:	21 15       	cp	r18, r1
 232:	31 05       	cpc	r19, r1
 234:	f9 f0       	breq	.+62     	; 0x274 <malloc+0xb4>
 236:	28 1b       	sub	r18, r24
 238:	39 0b       	sbc	r19, r25
 23a:	24 30       	cpi	r18, 0x04	; 4
 23c:	31 05       	cpc	r19, r1
 23e:	80 f4       	brcc	.+32     	; 0x260 <malloc+0xa0>
 240:	8a 81       	ldd	r24, Y+2	; 0x02
 242:	9b 81       	ldd	r25, Y+3	; 0x03
 244:	61 15       	cp	r22, r1
 246:	71 05       	cpc	r23, r1
 248:	21 f0       	breq	.+8      	; 0x252 <malloc+0x92>
 24a:	fb 01       	movw	r30, r22
 24c:	93 83       	std	Z+3, r25	; 0x03
 24e:	82 83       	std	Z+2, r24	; 0x02
 250:	04 c0       	rjmp	.+8      	; 0x25a <malloc+0x9a>
 252:	90 93 f5 01 	sts	0x01F5, r25
 256:	80 93 f4 01 	sts	0x01F4, r24
 25a:	fe 01       	movw	r30, r28
 25c:	32 96       	adiw	r30, 0x02	; 2
 25e:	44 c0       	rjmp	.+136    	; 0x2e8 <malloc+0x128>
 260:	fe 01       	movw	r30, r28
 262:	e2 0f       	add	r30, r18
 264:	f3 1f       	adc	r31, r19
 266:	81 93       	st	Z+, r24
 268:	91 93       	st	Z+, r25
 26a:	22 50       	subi	r18, 0x02	; 2
 26c:	31 09       	sbc	r19, r1
 26e:	39 83       	std	Y+1, r19	; 0x01
 270:	28 83       	st	Y, r18
 272:	3a c0       	rjmp	.+116    	; 0x2e8 <malloc+0x128>
 274:	20 91 f2 01 	lds	r18, 0x01F2
 278:	30 91 f3 01 	lds	r19, 0x01F3
 27c:	23 2b       	or	r18, r19
 27e:	41 f4       	brne	.+16     	; 0x290 <malloc+0xd0>
 280:	20 91 02 01 	lds	r18, 0x0102
 284:	30 91 03 01 	lds	r19, 0x0103
 288:	30 93 f3 01 	sts	0x01F3, r19
 28c:	20 93 f2 01 	sts	0x01F2, r18
 290:	20 91 00 01 	lds	r18, 0x0100
 294:	30 91 01 01 	lds	r19, 0x0101
 298:	21 15       	cp	r18, r1
 29a:	31 05       	cpc	r19, r1
 29c:	41 f4       	brne	.+16     	; 0x2ae <malloc+0xee>
 29e:	2d b7       	in	r18, 0x3d	; 61
 2a0:	3e b7       	in	r19, 0x3e	; 62
 2a2:	40 91 04 01 	lds	r20, 0x0104
 2a6:	50 91 05 01 	lds	r21, 0x0105
 2aa:	24 1b       	sub	r18, r20
 2ac:	35 0b       	sbc	r19, r21
 2ae:	e0 91 f2 01 	lds	r30, 0x01F2
 2b2:	f0 91 f3 01 	lds	r31, 0x01F3
 2b6:	e2 17       	cp	r30, r18
 2b8:	f3 07       	cpc	r31, r19
 2ba:	a0 f4       	brcc	.+40     	; 0x2e4 <malloc+0x124>
 2bc:	2e 1b       	sub	r18, r30
 2be:	3f 0b       	sbc	r19, r31
 2c0:	28 17       	cp	r18, r24
 2c2:	39 07       	cpc	r19, r25
 2c4:	78 f0       	brcs	.+30     	; 0x2e4 <malloc+0x124>
 2c6:	ac 01       	movw	r20, r24
 2c8:	4e 5f       	subi	r20, 0xFE	; 254
 2ca:	5f 4f       	sbci	r21, 0xFF	; 255
 2cc:	24 17       	cp	r18, r20
 2ce:	35 07       	cpc	r19, r21
 2d0:	48 f0       	brcs	.+18     	; 0x2e4 <malloc+0x124>
 2d2:	4e 0f       	add	r20, r30
 2d4:	5f 1f       	adc	r21, r31
 2d6:	50 93 f3 01 	sts	0x01F3, r21
 2da:	40 93 f2 01 	sts	0x01F2, r20
 2de:	81 93       	st	Z+, r24
 2e0:	91 93       	st	Z+, r25
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <malloc+0x128>
 2e4:	e0 e0       	ldi	r30, 0x00	; 0
 2e6:	f0 e0       	ldi	r31, 0x00	; 0
 2e8:	cf 01       	movw	r24, r30
 2ea:	df 91       	pop	r29
 2ec:	cf 91       	pop	r28
 2ee:	08 95       	ret

000002f0 <free>:
 2f0:	cf 93       	push	r28
 2f2:	df 93       	push	r29
 2f4:	00 97       	sbiw	r24, 0x00	; 0
 2f6:	09 f4       	brne	.+2      	; 0x2fa <free+0xa>
 2f8:	87 c0       	rjmp	.+270    	; 0x408 <free+0x118>
 2fa:	fc 01       	movw	r30, r24
 2fc:	32 97       	sbiw	r30, 0x02	; 2
 2fe:	13 82       	std	Z+3, r1	; 0x03
 300:	12 82       	std	Z+2, r1	; 0x02
 302:	c0 91 f4 01 	lds	r28, 0x01F4
 306:	d0 91 f5 01 	lds	r29, 0x01F5
 30a:	20 97       	sbiw	r28, 0x00	; 0
 30c:	81 f4       	brne	.+32     	; 0x32e <free+0x3e>
 30e:	20 81       	ld	r18, Z
 310:	31 81       	ldd	r19, Z+1	; 0x01
 312:	28 0f       	add	r18, r24
 314:	39 1f       	adc	r19, r25
 316:	80 91 f2 01 	lds	r24, 0x01F2
 31a:	90 91 f3 01 	lds	r25, 0x01F3
 31e:	82 17       	cp	r24, r18
 320:	93 07       	cpc	r25, r19
 322:	79 f5       	brne	.+94     	; 0x382 <free+0x92>
 324:	f0 93 f3 01 	sts	0x01F3, r31
 328:	e0 93 f2 01 	sts	0x01F2, r30
 32c:	6d c0       	rjmp	.+218    	; 0x408 <free+0x118>
 32e:	de 01       	movw	r26, r28
 330:	20 e0       	ldi	r18, 0x00	; 0
 332:	30 e0       	ldi	r19, 0x00	; 0
 334:	ae 17       	cp	r26, r30
 336:	bf 07       	cpc	r27, r31
 338:	50 f4       	brcc	.+20     	; 0x34e <free+0x5e>
 33a:	12 96       	adiw	r26, 0x02	; 2
 33c:	4d 91       	ld	r20, X+
 33e:	5c 91       	ld	r21, X
 340:	13 97       	sbiw	r26, 0x03	; 3
 342:	9d 01       	movw	r18, r26
 344:	41 15       	cp	r20, r1
 346:	51 05       	cpc	r21, r1
 348:	09 f1       	breq	.+66     	; 0x38c <free+0x9c>
 34a:	da 01       	movw	r26, r20
 34c:	f3 cf       	rjmp	.-26     	; 0x334 <free+0x44>
 34e:	b3 83       	std	Z+3, r27	; 0x03
 350:	a2 83       	std	Z+2, r26	; 0x02
 352:	40 81       	ld	r20, Z
 354:	51 81       	ldd	r21, Z+1	; 0x01
 356:	84 0f       	add	r24, r20
 358:	95 1f       	adc	r25, r21
 35a:	8a 17       	cp	r24, r26
 35c:	9b 07       	cpc	r25, r27
 35e:	71 f4       	brne	.+28     	; 0x37c <free+0x8c>
 360:	8d 91       	ld	r24, X+
 362:	9c 91       	ld	r25, X
 364:	11 97       	sbiw	r26, 0x01	; 1
 366:	84 0f       	add	r24, r20
 368:	95 1f       	adc	r25, r21
 36a:	02 96       	adiw	r24, 0x02	; 2
 36c:	91 83       	std	Z+1, r25	; 0x01
 36e:	80 83       	st	Z, r24
 370:	12 96       	adiw	r26, 0x02	; 2
 372:	8d 91       	ld	r24, X+
 374:	9c 91       	ld	r25, X
 376:	13 97       	sbiw	r26, 0x03	; 3
 378:	93 83       	std	Z+3, r25	; 0x03
 37a:	82 83       	std	Z+2, r24	; 0x02
 37c:	21 15       	cp	r18, r1
 37e:	31 05       	cpc	r19, r1
 380:	29 f4       	brne	.+10     	; 0x38c <free+0x9c>
 382:	f0 93 f5 01 	sts	0x01F5, r31
 386:	e0 93 f4 01 	sts	0x01F4, r30
 38a:	3e c0       	rjmp	.+124    	; 0x408 <free+0x118>
 38c:	d9 01       	movw	r26, r18
 38e:	13 96       	adiw	r26, 0x03	; 3
 390:	fc 93       	st	X, r31
 392:	ee 93       	st	-X, r30
 394:	12 97       	sbiw	r26, 0x02	; 2
 396:	4d 91       	ld	r20, X+
 398:	5d 91       	ld	r21, X+
 39a:	a4 0f       	add	r26, r20
 39c:	b5 1f       	adc	r27, r21
 39e:	ea 17       	cp	r30, r26
 3a0:	fb 07       	cpc	r31, r27
 3a2:	79 f4       	brne	.+30     	; 0x3c2 <free+0xd2>
 3a4:	80 81       	ld	r24, Z
 3a6:	91 81       	ldd	r25, Z+1	; 0x01
 3a8:	84 0f       	add	r24, r20
 3aa:	95 1f       	adc	r25, r21
 3ac:	02 96       	adiw	r24, 0x02	; 2
 3ae:	d9 01       	movw	r26, r18
 3b0:	11 96       	adiw	r26, 0x01	; 1
 3b2:	9c 93       	st	X, r25
 3b4:	8e 93       	st	-X, r24
 3b6:	82 81       	ldd	r24, Z+2	; 0x02
 3b8:	93 81       	ldd	r25, Z+3	; 0x03
 3ba:	13 96       	adiw	r26, 0x03	; 3
 3bc:	9c 93       	st	X, r25
 3be:	8e 93       	st	-X, r24
 3c0:	12 97       	sbiw	r26, 0x02	; 2
 3c2:	e0 e0       	ldi	r30, 0x00	; 0
 3c4:	f0 e0       	ldi	r31, 0x00	; 0
 3c6:	8a 81       	ldd	r24, Y+2	; 0x02
 3c8:	9b 81       	ldd	r25, Y+3	; 0x03
 3ca:	00 97       	sbiw	r24, 0x00	; 0
 3cc:	19 f0       	breq	.+6      	; 0x3d4 <free+0xe4>
 3ce:	fe 01       	movw	r30, r28
 3d0:	ec 01       	movw	r28, r24
 3d2:	f9 cf       	rjmp	.-14     	; 0x3c6 <free+0xd6>
 3d4:	ce 01       	movw	r24, r28
 3d6:	02 96       	adiw	r24, 0x02	; 2
 3d8:	28 81       	ld	r18, Y
 3da:	39 81       	ldd	r19, Y+1	; 0x01
 3dc:	82 0f       	add	r24, r18
 3de:	93 1f       	adc	r25, r19
 3e0:	20 91 f2 01 	lds	r18, 0x01F2
 3e4:	30 91 f3 01 	lds	r19, 0x01F3
 3e8:	28 17       	cp	r18, r24
 3ea:	39 07       	cpc	r19, r25
 3ec:	69 f4       	brne	.+26     	; 0x408 <free+0x118>
 3ee:	30 97       	sbiw	r30, 0x00	; 0
 3f0:	29 f4       	brne	.+10     	; 0x3fc <free+0x10c>
 3f2:	10 92 f5 01 	sts	0x01F5, r1
 3f6:	10 92 f4 01 	sts	0x01F4, r1
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <free+0x110>
 3fc:	13 82       	std	Z+3, r1	; 0x03
 3fe:	12 82       	std	Z+2, r1	; 0x02
 400:	d0 93 f3 01 	sts	0x01F3, r29
 404:	c0 93 f2 01 	sts	0x01F2, r28
 408:	df 91       	pop	r29
 40a:	cf 91       	pop	r28
 40c:	08 95       	ret

0000040e <memset>:
 40e:	dc 01       	movw	r26, r24
 410:	01 c0       	rjmp	.+2      	; 0x414 <memset+0x6>
 412:	6d 93       	st	X+, r22
 414:	41 50       	subi	r20, 0x01	; 1
 416:	50 40       	sbci	r21, 0x00	; 0
 418:	e0 f7       	brcc	.-8      	; 0x412 <memset+0x4>
 41a:	08 95       	ret

0000041c <_exit>:
 41c:	f8 94       	cli

0000041e <__stop_program>:
 41e:	ff cf       	rjmp	.-2      	; 0x41e <__stop_program>
