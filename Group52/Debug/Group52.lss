
Group52.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  0000087a  0000090e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000087a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080014a  0080014a  00000958  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000958  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000f8  00000000  00000000  00000988  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000138a  00000000  00000000  00000a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e5  00000000  00000000  00001e0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000535  00000000  00000000  000023ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000280  00000000  00000000  00002924  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003de  00000000  00000000  00002ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000075c  00000000  00000000  00002f82  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000110  00000000  00000000  000036de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__ctors_end>
   4:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
   8:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
   c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  10:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  14:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  18:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  1c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  20:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  24:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  28:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  2c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  30:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  34:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  38:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  3c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  40:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  44:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  48:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  4c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  50:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  54:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  58:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  5c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  60:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  64:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  68:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  6c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>

00000070 <__trampolines_end>:
  70:	00 00       	nop
  72:	00 00       	nop
  74:	00 5c       	subi	r16, 0xC0	; 192
  76:	00 00       	nop
  78:	0c 00       	.word	0x000c	; ????
  7a:	0c 00       	.word	0x000c	; ????
  7c:	7c 28       	or	r7, r12
  7e:	7c 28       	or	r7, r12
  80:	58 dc       	rcall	.-1872   	; 0xfffff932 <__eeprom_end+0xff7ef932>
  82:	68 00       	.word	0x0068	; ????
  84:	24 10       	cpse	r2, r4
  86:	48 00       	.word	0x0048	; ????
  88:	28 54       	subi	r18, 0x48	; 72
  8a:	28 40       	sbci	r18, 0x08	; 8
  8c:	00 0c       	add	r0, r0
  8e:	00 00       	nop
  90:	00 78       	andi	r16, 0x80	; 128
  92:	84 00       	.word	0x0084	; ????
  94:	84 78       	andi	r24, 0x84	; 132
  96:	00 00       	nop
  98:	54 38       	cpi	r21, 0x84	; 132
  9a:	54 00       	.word	0x0054	; ????
  9c:	10 7c       	andi	r17, 0xC0	; 192
  9e:	10 00       	.word	0x0010	; ????
  a0:	80 40       	sbci	r24, 0x00	; 0
  a2:	00 00       	nop
  a4:	10 10       	cpse	r1, r0
  a6:	10 00       	.word	0x0010	; ????
  a8:	00 40       	sbci	r16, 0x00	; 0
  aa:	00 00       	nop
  ac:	60 10       	cpse	r6, r0
  ae:	0c 00       	.word	0x000c	; ????
  b0:	38 54       	subi	r19, 0x48	; 72
  b2:	38 00       	.word	0x0038	; ????
  b4:	48 7c       	andi	r20, 0xC8	; 200
  b6:	40 00       	.word	0x0040	; ????
  b8:	48 64       	ori	r20, 0x48	; 72
  ba:	58 00       	.word	0x0058	; ????
  bc:	44 54       	subi	r20, 0x44	; 68
  be:	2c 00       	.word	0x002c	; ????
  c0:	1c 10       	cpse	r1, r12
  c2:	7c 00       	.word	0x007c	; ????
  c4:	5c 54       	subi	r21, 0x4C	; 76
  c6:	24 00       	.word	0x0024	; ????
  c8:	38 54       	subi	r19, 0x48	; 72
  ca:	24 00       	.word	0x0024	; ????
  cc:	64 14       	cp	r6, r4
  ce:	0c 00       	.word	0x000c	; ????
  d0:	68 54       	subi	r22, 0x48	; 72
  d2:	2c 00       	.word	0x002c	; ????
  d4:	48 54       	subi	r20, 0x48	; 72
  d6:	38 00       	.word	0x0038	; ????
  d8:	00 48       	sbci	r16, 0x80	; 128
  da:	00 00       	nop
  dc:	80 48       	sbci	r24, 0x80	; 128
  de:	00 00       	nop
  e0:	10 28       	or	r1, r0
  e2:	44 00       	.word	0x0044	; ????
  e4:	28 28       	or	r2, r8
  e6:	28 00       	.word	0x0028	; ????
  e8:	44 28       	or	r4, r4
  ea:	10 00       	.word	0x0010	; ????
  ec:	04 54       	subi	r16, 0x44	; 68
  ee:	08 00       	.word	0x0008	; ????
  f0:	38 44       	sbci	r19, 0x48	; 72
  f2:	5c 00       	.word	0x005c	; ????
  f4:	78 14       	cp	r7, r8
  f6:	78 00       	.word	0x0078	; ????
  f8:	7c 54       	subi	r23, 0x4C	; 76
  fa:	28 00       	.word	0x0028	; ????
  fc:	38 44       	sbci	r19, 0x48	; 72
  fe:	28 00       	.word	0x0028	; ????
 100:	7c 44       	sbci	r23, 0x4C	; 76
 102:	38 00       	.word	0x0038	; ????
 104:	7c 54       	subi	r23, 0x4C	; 76
 106:	44 00       	.word	0x0044	; ????
 108:	7c 14       	cp	r7, r12
 10a:	04 00       	.word	0x0004	; ????
 10c:	38 44       	sbci	r19, 0x48	; 72
 10e:	74 00       	.word	0x0074	; ????
 110:	7c 10       	cpse	r7, r12
 112:	7c 00       	.word	0x007c	; ????
 114:	44 7c       	andi	r20, 0xC4	; 196
 116:	44 00       	.word	0x0044	; ????
 118:	20 40       	sbci	r18, 0x00	; 0
 11a:	3c 00       	.word	0x003c	; ????
 11c:	7c 10       	cpse	r7, r12
 11e:	6c 00       	.word	0x006c	; ????
 120:	7c 40       	sbci	r23, 0x0C	; 12
 122:	40 00       	.word	0x0040	; ????
 124:	7c 18       	sub	r7, r12
 126:	7c 00       	.word	0x007c	; ????
 128:	78 10       	cpse	r7, r8
 12a:	3c 00       	.word	0x003c	; ????
 12c:	38 44       	sbci	r19, 0x48	; 72
 12e:	38 00       	.word	0x0038	; ????
 130:	7c 14       	cp	r7, r12
 132:	08 00       	.word	0x0008	; ????
 134:	38 44       	sbci	r19, 0x48	; 72
 136:	b8 00       	.word	0x00b8	; ????
 138:	7c 14       	cp	r7, r12
 13a:	68 00       	.word	0x0068	; ????
 13c:	48 54       	subi	r20, 0x48	; 72
 13e:	24 00       	.word	0x0024	; ????
 140:	04 7c       	andi	r16, 0xC4	; 196
 142:	04 00       	.word	0x0004	; ????
 144:	7c 40       	sbci	r23, 0x0C	; 12
 146:	7c 00       	.word	0x007c	; ????
 148:	3c 60       	ori	r19, 0x0C	; 12
 14a:	3c 00       	.word	0x003c	; ????
 14c:	7c 30       	cpi	r23, 0x0C	; 12
 14e:	7c 00       	.word	0x007c	; ????
 150:	6c 10       	cpse	r6, r12
 152:	6c 00       	.word	0x006c	; ????
 154:	0c 70       	andi	r16, 0x0C	; 12
 156:	0c 00       	.word	0x000c	; ????
 158:	64 54       	subi	r22, 0x44	; 68
 15a:	4c 00       	.word	0x004c	; ????
 15c:	00 7c       	andi	r16, 0xC0	; 192
 15e:	44 00       	.word	0x0044	; ????
 160:	0c 10       	cpse	r0, r12
 162:	60 00       	.word	0x0060	; ????
 164:	44 7c       	andi	r20, 0xC4	; 196
 166:	00 00       	nop
 168:	08 04       	cpc	r0, r8
 16a:	08 00       	.word	0x0008	; ????
 16c:	80 80       	ld	r8, Z
 16e:	80 00       	.word	0x0080	; ????
 170:	00 04       	cpc	r0, r0
 172:	08 00       	.word	0x0008	; ????
 174:	30 48       	sbci	r19, 0x80	; 128
 176:	78 00       	.word	0x0078	; ????
 178:	7c 48       	sbci	r23, 0x8C	; 140
 17a:	30 00       	.word	0x0030	; ????
 17c:	30 48       	sbci	r19, 0x80	; 128
 17e:	48 00       	.word	0x0048	; ????
 180:	30 48       	sbci	r19, 0x80	; 128
 182:	7c 00       	.word	0x007c	; ????
 184:	30 68       	ori	r19, 0x80	; 128
 186:	50 00       	.word	0x0050	; ????
 188:	10 78       	andi	r17, 0x80	; 128
 18a:	14 00       	.word	0x0014	; ????
 18c:	90 a8       	ldd	r9, Z+48	; 0x30
 18e:	78 00       	.word	0x0078	; ????
 190:	7c 08       	sbc	r7, r12
 192:	70 00       	.word	0x0070	; ????
 194:	50 74       	andi	r21, 0x40	; 64
 196:	40 00       	.word	0x0040	; ????
 198:	80 80       	ld	r8, Z
 19a:	74 00       	.word	0x0074	; ????
 19c:	7c 10       	cpse	r7, r12
 19e:	68 00       	.word	0x0068	; ????
 1a0:	44 7c       	andi	r20, 0xC4	; 196
 1a2:	40 00       	.word	0x0040	; ????
 1a4:	78 10       	cpse	r7, r8
 1a6:	78 00       	.word	0x0078	; ????
 1a8:	78 08       	sbc	r7, r8
 1aa:	70 00       	.word	0x0070	; ????
 1ac:	30 48       	sbci	r19, 0x80	; 128
 1ae:	30 00       	.word	0x0030	; ????
 1b0:	f8 28       	or	r15, r8
 1b2:	10 00       	.word	0x0010	; ????
 1b4:	30 48       	sbci	r19, 0x80	; 128
 1b6:	f8 00       	.word	0x00f8	; ????
 1b8:	78 10       	cpse	r7, r8
 1ba:	08 00       	.word	0x0008	; ????
 1bc:	50 58       	subi	r21, 0x80	; 128
 1be:	28 00       	.word	0x0028	; ????
 1c0:	08 3c       	cpi	r16, 0xC8	; 200
 1c2:	48 00       	.word	0x0048	; ????
 1c4:	38 40       	sbci	r19, 0x08	; 8
 1c6:	78 00       	.word	0x0078	; ????
 1c8:	38 40       	sbci	r19, 0x08	; 8
 1ca:	38 00       	.word	0x0038	; ????
 1cc:	78 20       	and	r7, r8
 1ce:	78 00       	.word	0x0078	; ????
 1d0:	48 30       	cpi	r20, 0x08	; 8
 1d2:	48 00       	.word	0x0048	; ????
 1d4:	98 a0       	ldd	r9, Y+32	; 0x20
 1d6:	78 00       	.word	0x0078	; ????
 1d8:	48 68       	ori	r20, 0x88	; 136
 1da:	58 00       	.word	0x0058	; ????
 1dc:	10 78       	andi	r17, 0x80	; 128
 1de:	84 00       	.word	0x0084	; ????
 1e0:	00 7c       	andi	r16, 0xC0	; 192
 1e2:	00 00       	nop
 1e4:	84 78       	andi	r24, 0x84	; 132
 1e6:	10 00       	.word	0x0010	; ????
 1e8:	08 04       	cpc	r0, r8
 1ea:	08 04       	cpc	r0, r8

000001ec <__ctors_end>:
 1ec:	11 24       	eor	r1, r1
 1ee:	1f be       	out	0x3f, r1	; 63
 1f0:	cf ef       	ldi	r28, 0xFF	; 255
 1f2:	d4 e0       	ldi	r29, 0x04	; 4
 1f4:	de bf       	out	0x3e, r29	; 62
 1f6:	cd bf       	out	0x3d, r28	; 61

000001f8 <__do_copy_data>:
 1f8:	11 e0       	ldi	r17, 0x01	; 1
 1fa:	a0 e0       	ldi	r26, 0x00	; 0
 1fc:	b1 e0       	ldi	r27, 0x01	; 1
 1fe:	ea e7       	ldi	r30, 0x7A	; 122
 200:	f8 e0       	ldi	r31, 0x08	; 8
 202:	02 c0       	rjmp	.+4      	; 0x208 <__do_copy_data+0x10>
 204:	05 90       	lpm	r0, Z+
 206:	0d 92       	st	X+, r0
 208:	aa 34       	cpi	r26, 0x4A	; 74
 20a:	b1 07       	cpc	r27, r17
 20c:	d9 f7       	brne	.-10     	; 0x204 <__do_copy_data+0xc>

0000020e <__do_clear_bss>:
 20e:	21 e0       	ldi	r18, 0x01	; 1
 210:	aa e4       	ldi	r26, 0x4A	; 74
 212:	b1 e0       	ldi	r27, 0x01	; 1
 214:	01 c0       	rjmp	.+2      	; 0x218 <.do_clear_bss_start>

00000216 <.do_clear_bss_loop>:
 216:	1d 92       	st	X+, r1

00000218 <.do_clear_bss_start>:
 218:	a4 35       	cpi	r26, 0x54	; 84
 21a:	b2 07       	cpc	r27, r18
 21c:	e1 f7       	brne	.-8      	; 0x216 <.do_clear_bss_loop>
 21e:	0e 94 15 01 	call	0x22a	; 0x22a <main>
 222:	0c 94 3b 04 	jmp	0x876	; 0x876 <_exit>

00000226 <__bad_interrupt>:
 226:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000022a <main>:


int main(void)
{

	fdevopen(USART_transmit, USART_receive);
 22a:	65 e7       	ldi	r22, 0x75	; 117
 22c:	72 e0       	ldi	r23, 0x02	; 2
 22e:	81 e7       	ldi	r24, 0x71	; 113
 230:	92 e0       	ldi	r25, 0x02	; 2
 232:	0e 94 a0 03 	call	0x740	; 0x740 <fdevopen>
	USART_init(MYUBBR);
 236:	8f e1       	ldi	r24, 0x1F	; 31
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <USART_init>

	/* Needs to be set when using external memory */
	MCUCR |= (1 << SRE);
 23e:	85 b7       	in	r24, 0x35	; 53
 240:	80 68       	ori	r24, 0x80	; 128
 242:	85 bf       	out	0x35, r24	; 53
	
	OLED_init();
 244:	0e 94 2f 01 	call	0x25e	; 0x25e <OLED_init>
	OLED_reset();
 248:	0e 94 8c 01 	call	0x318	; 0x318 <OLED_reset>
	
	OLED_pos(2,20);
 24c:	64 e1       	ldi	r22, 0x14	; 20
 24e:	82 e0       	ldi	r24, 0x02	; 2
 250:	0e 94 7f 01 	call	0x2fe	; 0x2fe <OLED_pos>
	//char str[] = "Test";
	//OLED_print_string(str);
	
	menuNode *game_menu = OLED_generate_menu();
 254:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <OLED_generate_menu>
	OLED_print_menu(game_menu);
 258:	0e 94 20 02 	call	0x440	; 0x440 <OLED_print_menu>
 25c:	ff cf       	rjmp	.-2      	; 0x25c <main+0x32>

0000025e <OLED_init>:


void OLED_write_c(char chr)
{
	volatile char *oled = (char *) 0x1000;
	oled[0] = chr;
 25e:	e0 e0       	ldi	r30, 0x00	; 0
 260:	f0 e1       	ldi	r31, 0x10	; 16
 262:	8e ea       	ldi	r24, 0xAE	; 174
 264:	80 83       	st	Z, r24
 266:	81 ea       	ldi	r24, 0xA1	; 161
 268:	80 83       	st	Z, r24
 26a:	8a ed       	ldi	r24, 0xDA	; 218
 26c:	80 83       	st	Z, r24
 26e:	82 e1       	ldi	r24, 0x12	; 18
 270:	80 83       	st	Z, r24
 272:	88 ec       	ldi	r24, 0xC8	; 200
 274:	80 83       	st	Z, r24
 276:	88 ea       	ldi	r24, 0xA8	; 168
 278:	80 83       	st	Z, r24
 27a:	8f e3       	ldi	r24, 0x3F	; 63
 27c:	80 83       	st	Z, r24
 27e:	85 ed       	ldi	r24, 0xD5	; 213
 280:	80 83       	st	Z, r24
 282:	80 e8       	ldi	r24, 0x80	; 128
 284:	80 83       	st	Z, r24
 286:	81 e8       	ldi	r24, 0x81	; 129
 288:	80 83       	st	Z, r24
 28a:	80 e5       	ldi	r24, 0x50	; 80
 28c:	80 83       	st	Z, r24
 28e:	89 ed       	ldi	r24, 0xD9	; 217
 290:	80 83       	st	Z, r24
 292:	81 e2       	ldi	r24, 0x21	; 33
 294:	80 83       	st	Z, r24
 296:	80 e2       	ldi	r24, 0x20	; 32
 298:	80 83       	st	Z, r24
 29a:	10 82       	st	Z, r1
 29c:	8b ed       	ldi	r24, 0xDB	; 219
 29e:	80 83       	st	Z, r24
 2a0:	80 e3       	ldi	r24, 0x30	; 48
 2a2:	80 83       	st	Z, r24
 2a4:	8d ea       	ldi	r24, 0xAD	; 173
 2a6:	80 83       	st	Z, r24
 2a8:	10 82       	st	Z, r1
 2aa:	84 ea       	ldi	r24, 0xA4	; 164
 2ac:	80 83       	st	Z, r24
 2ae:	86 ea       	ldi	r24, 0xA6	; 166
 2b0:	80 83       	st	Z, r24
 2b2:	8f ea       	ldi	r24, 0xAF	; 175
 2b4:	80 83       	st	Z, r24
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	92 e0       	ldi	r25, 0x02	; 2
}

void OLED_write_d(char chr)
{
	volatile char *oled = (char *) 0x1200;
	oled[0] = chr;
 2ba:	e0 e0       	ldi	r30, 0x00	; 0
 2bc:	f2 e1       	ldi	r31, 0x12	; 18
 2be:	2f ef       	ldi	r18, 0xFF	; 255
 2c0:	20 83       	st	Z, r18
 2c2:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_c(0x00);
	OLED_write_c(0xa4); //out follows RAM content
	OLED_write_c(0xa6); //set normal display
	OLED_write_c(0xaf); // display on
	
	for (int i = 0; i < 512; i++)
 2c4:	00 97       	sbiw	r24, 0x00	; 0
 2c6:	e1 f7       	brne	.-8      	; 0x2c0 <OLED_init+0x62>
	{
		OLED_write_d(0xFF);
	}
}
 2c8:	08 95       	ret

000002ca <OLED_goto_line>:


void OLED_write_c(char chr)
{
	volatile char *oled = (char *) 0x1000;
	oled[0] = chr;
 2ca:	e0 e0       	ldi	r30, 0x00	; 0
 2cc:	f0 e1       	ldi	r31, 0x10	; 16
 2ce:	92 e2       	ldi	r25, 0x22	; 34
 2d0:	90 83       	st	Z, r25
 2d2:	80 83       	st	Z, r24
 2d4:	87 e0       	ldi	r24, 0x07	; 7
 2d6:	80 83       	st	Z, r24
 2d8:	08 95       	ret

000002da <OLED_clear_line>:
	OLED_write_c(0x07);
}

void OLED_clear_line(uint8_t line)
{
	OLED_goto_line(line);
 2da:	0e 94 65 01 	call	0x2ca	; 0x2ca <OLED_goto_line>


void OLED_write_c(char chr)
{
	volatile char *oled = (char *) 0x1000;
	oled[0] = chr;
 2de:	e0 e0       	ldi	r30, 0x00	; 0
 2e0:	f0 e1       	ldi	r31, 0x10	; 16
 2e2:	81 e2       	ldi	r24, 0x21	; 33
 2e4:	80 83       	st	Z, r24
 2e6:	10 82       	st	Z, r1
 2e8:	8f e7       	ldi	r24, 0x7F	; 127
 2ea:	80 83       	st	Z, r24
 2ec:	80 e8       	ldi	r24, 0x80	; 128
 2ee:	90 e0       	ldi	r25, 0x00	; 0
}

void OLED_write_d(char chr)
{
	volatile char *oled = (char *) 0x1200;
	oled[0] = chr;
 2f0:	e0 e0       	ldi	r30, 0x00	; 0
 2f2:	f2 e1       	ldi	r31, 0x12	; 18
 2f4:	10 82       	st	Z, r1
 2f6:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_c(0x21);
	OLED_write_c(0x00);
	OLED_write_c(0x7F);

	/* Write zeros to line */
	for (int i = 0; i < 128; i++) {
 2f8:	00 97       	sbiw	r24, 0x00	; 0
 2fa:	e1 f7       	brne	.-8      	; 0x2f4 <OLED_clear_line+0x1a>
		OLED_write_d(0x00);
	}
}
 2fc:	08 95       	ret

000002fe <OLED_pos>:


void OLED_write_c(char chr)
{
	volatile char *oled = (char *) 0x1000;
	oled[0] = chr;
 2fe:	e0 e0       	ldi	r30, 0x00	; 0
 300:	f0 e1       	ldi	r31, 0x10	; 16
 302:	92 e2       	ldi	r25, 0x22	; 34
 304:	90 83       	st	Z, r25
 306:	80 83       	st	Z, r24
 308:	87 e0       	ldi	r24, 0x07	; 7
 30a:	80 83       	st	Z, r24
 30c:	81 e2       	ldi	r24, 0x21	; 33
 30e:	80 83       	st	Z, r24
 310:	60 83       	st	Z, r22
 312:	8f e7       	ldi	r24, 0x7F	; 127
 314:	80 83       	st	Z, r24
 316:	08 95       	ret

00000318 <OLED_reset>:
	OLED_write_c(column);
	OLED_write_c(0x7F);
}

void OLED_reset(void)
{
 318:	cf 93       	push	r28
	for (uint8_t i = 0; i < 8; i++) {
 31a:	c0 e0       	ldi	r28, 0x00	; 0
		OLED_clear_line(i);
 31c:	8c 2f       	mov	r24, r28
 31e:	0e 94 6d 01 	call	0x2da	; 0x2da <OLED_clear_line>
	OLED_write_c(0x7F);
}

void OLED_reset(void)
{
	for (uint8_t i = 0; i < 8; i++) {
 322:	cf 5f       	subi	r28, 0xFF	; 255
 324:	c8 30       	cpi	r28, 0x08	; 8
 326:	d1 f7       	brne	.-12     	; 0x31c <OLED_reset+0x4>
		OLED_clear_line(i);
	}
	OLED_pos(0,0);
 328:	60 e0       	ldi	r22, 0x00	; 0
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	0e 94 7f 01 	call	0x2fe	; 0x2fe <OLED_pos>

	// Redraw from SRAM?
}
 330:	cf 91       	pop	r28
 332:	08 95       	ret

00000334 <OLED_print_string>:

void OLED_print_string(char* str)
{
 334:	cf 93       	push	r28
 336:	df 93       	push	r29
	uint8_t c;
	uint8_t font_width = 4; // Use sizeof array here
	uint8_t i = 0;
	while (str[i] != '\0') {
 338:	fc 01       	movw	r30, r24
 33a:	20 81       	ld	r18, Z
 33c:	22 23       	and	r18, r18
 33e:	11 f1       	breq	.+68     	; 0x384 <OLED_print_string+0x50>
 340:	dc 01       	movw	r26, r24

void OLED_print_string(char* str)
{
	uint8_t c;
	uint8_t font_width = 4; // Use sizeof array here
	uint8_t i = 0;
 342:	40 e0       	ldi	r20, 0x00	; 0

	// Redraw from SRAM?
}

void OLED_print_string(char* str)
{
 344:	60 e0       	ldi	r22, 0x00	; 0
 346:	50 e0       	ldi	r21, 0x00	; 0
}

void OLED_write_d(char chr)
{
	volatile char *oled = (char *) 0x1200;
	oled[0] = chr;
 348:	c0 e0       	ldi	r28, 0x00	; 0
 34a:	d2 e1       	ldi	r29, 0x12	; 18
 34c:	18 c0       	rjmp	.+48     	; 0x37e <OLED_print_string+0x4a>
	uint8_t c;
	uint8_t font_width = 4; // Use sizeof array here
	uint8_t i = 0;
	while (str[i] != '\0') {
		for (uint8_t j = 0; j < font_width; j++) {
			c = pgm_read_byte_near(font[str[i]-32] + j);
 34e:	ec 91       	ld	r30, X
 350:	f0 e0       	ldi	r31, 0x00	; 0
 352:	ee 0f       	add	r30, r30
 354:	ff 1f       	adc	r31, r31
 356:	ee 0f       	add	r30, r30
 358:	ff 1f       	adc	r31, r31
 35a:	e0 51       	subi	r30, 0x10	; 16
 35c:	f0 40       	sbci	r31, 0x00	; 0
 35e:	e2 0f       	add	r30, r18
 360:	f3 1f       	adc	r31, r19
 362:	e4 91       	lpm	r30, Z
}

void OLED_write_d(char chr)
{
	volatile char *oled = (char *) 0x1200;
	oled[0] = chr;
 364:	e8 83       	st	Y, r30
 366:	2f 5f       	subi	r18, 0xFF	; 255
 368:	3f 4f       	sbci	r19, 0xFF	; 255
{
	uint8_t c;
	uint8_t font_width = 4; // Use sizeof array here
	uint8_t i = 0;
	while (str[i] != '\0') {
		for (uint8_t j = 0; j < font_width; j++) {
 36a:	24 30       	cpi	r18, 0x04	; 4
 36c:	31 05       	cpc	r19, r1
 36e:	79 f7       	brne	.-34     	; 0x34e <OLED_print_string+0x1a>
			c = pgm_read_byte_near(font[str[i]-32] + j);
			OLED_write_d(c);
		}
		i++;
 370:	4f 5f       	subi	r20, 0xFF	; 255
void OLED_print_string(char* str)
{
	uint8_t c;
	uint8_t font_width = 4; // Use sizeof array here
	uint8_t i = 0;
	while (str[i] != '\0') {
 372:	dc 01       	movw	r26, r24
 374:	a4 0f       	add	r26, r20
 376:	b1 1d       	adc	r27, r1
 378:	2c 91       	ld	r18, X
 37a:	22 23       	and	r18, r18
 37c:	19 f0       	breq	.+6      	; 0x384 <OLED_print_string+0x50>

	// Redraw from SRAM?
}

void OLED_print_string(char* str)
{
 37e:	26 2f       	mov	r18, r22
 380:	35 2f       	mov	r19, r21
 382:	e5 cf       	rjmp	.-54     	; 0x34e <OLED_print_string+0x1a>
			c = pgm_read_byte_near(font[str[i]-32] + j);
			OLED_write_d(c);
		}
		i++;
	}
}
 384:	df 91       	pop	r29
 386:	cf 91       	pop	r28
 388:	08 95       	ret

0000038a <OLED_create_node>:
	OLED_write_d(0b00011000);
}


menuNode *OLED_create_node(char* name)
{
 38a:	cf 93       	push	r28
 38c:	df 93       	push	r29
 38e:	ec 01       	movw	r28, r24
	menuNode* ret = (menuNode*) malloc(sizeof(menuNode));
 390:	84 e1       	ldi	r24, 0x14	; 20
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	0e 94 79 02 	call	0x4f2	; 0x4f2 <malloc>
	ret->name = name;
 398:	fc 01       	movw	r30, r24
 39a:	d1 83       	std	Z+1, r29	; 0x01
 39c:	c0 83       	st	Z, r28
	ret->parent = NULL;
 39e:	13 82       	std	Z+3, r1	; 0x03
 3a0:	12 82       	std	Z+2, r1	; 0x02
	return ret;
}
 3a2:	df 91       	pop	r29
 3a4:	cf 91       	pop	r28
 3a6:	08 95       	ret

000003a8 <OLED_generate_menu>:

// Implement function for freeing memory

menuNode *OLED_generate_menu(void)
{	
 3a8:	af 92       	push	r10
 3aa:	bf 92       	push	r11
 3ac:	cf 92       	push	r12
 3ae:	df 92       	push	r13
 3b0:	ef 92       	push	r14
 3b2:	ff 92       	push	r15
 3b4:	0f 93       	push	r16
 3b6:	1f 93       	push	r17
 3b8:	cf 93       	push	r28
 3ba:	df 93       	push	r29
	//menuNode *highscoresPtr, *play_gamePtr, *calibratePtr, *difficultyPtr, *debuggingPtr;
	
	menuNode *mainmenu = OLED_create_node("Main menu");
 3bc:	86 e0       	ldi	r24, 0x06	; 6
 3be:	91 e0       	ldi	r25, 0x01	; 1
 3c0:	0e 94 c5 01 	call	0x38a	; 0x38a <OLED_create_node>
 3c4:	ec 01       	movw	r28, r24
	menuNode *highscores = OLED_create_node("Highscores");
 3c6:	80 e1       	ldi	r24, 0x10	; 16
 3c8:	91 e0       	ldi	r25, 0x01	; 1
 3ca:	0e 94 c5 01 	call	0x38a	; 0x38a <OLED_create_node>
 3ce:	6c 01       	movw	r12, r24
	menuNode *playgame = OLED_create_node("Start new game");
 3d0:	8b e1       	ldi	r24, 0x1B	; 27
 3d2:	91 e0       	ldi	r25, 0x01	; 1
 3d4:	0e 94 c5 01 	call	0x38a	; 0x38a <OLED_create_node>
 3d8:	5c 01       	movw	r10, r24
	menuNode *debugging = OLED_create_node("Debugging");
 3da:	8a e2       	ldi	r24, 0x2A	; 42
 3dc:	91 e0       	ldi	r25, 0x01	; 1
 3de:	0e 94 c5 01 	call	0x38a	; 0x38a <OLED_create_node>
 3e2:	8c 01       	movw	r16, r24
	menuNode *calibrate = OLED_create_node("Calibrate");
 3e4:	84 e3       	ldi	r24, 0x34	; 52
 3e6:	91 e0       	ldi	r25, 0x01	; 1
 3e8:	0e 94 c5 01 	call	0x38a	; 0x38a <OLED_create_node>
 3ec:	7c 01       	movw	r14, r24
	menuNode *difficulty = OLED_create_node("Difficulty");
 3ee:	8e e3       	ldi	r24, 0x3E	; 62
 3f0:	91 e0       	ldi	r25, 0x01	; 1
 3f2:	0e 94 c5 01 	call	0x38a	; 0x38a <OLED_create_node>

	highscores->parent = mainmenu;
 3f6:	f6 01       	movw	r30, r12
 3f8:	d3 83       	std	Z+3, r29	; 0x03
 3fa:	c2 83       	std	Z+2, r28	; 0x02
	playgame->parent = mainmenu;
 3fc:	f5 01       	movw	r30, r10
 3fe:	d3 83       	std	Z+3, r29	; 0x03
 400:	c2 83       	std	Z+2, r28	; 0x02
	calibrate->parent = mainmenu;
 402:	f7 01       	movw	r30, r14
 404:	d3 83       	std	Z+3, r29	; 0x03
 406:	c2 83       	std	Z+2, r28	; 0x02
	difficulty->parent = mainmenu;
 408:	fc 01       	movw	r30, r24
 40a:	d3 83       	std	Z+3, r29	; 0x03
 40c:	c2 83       	std	Z+2, r28	; 0x02
	debugging->parent = mainmenu;
 40e:	f8 01       	movw	r30, r16
 410:	d3 83       	std	Z+3, r29	; 0x03
 412:	c2 83       	std	Z+2, r28	; 0x02
	calibratePtr = &calibrate;
	difficultyPtr = &difficulty;
	debuggingPtr = &debugging;
	*/
	
	mainmenu->children[1] = playgame;
 414:	bf 82       	std	Y+7, r11	; 0x07
 416:	ae 82       	std	Y+6, r10	; 0x06
	mainmenu->children[2] = highscores;
 418:	d9 86       	std	Y+9, r13	; 0x09
 41a:	c8 86       	std	Y+8, r12	; 0x08
	mainmenu->children[3] = difficulty;
 41c:	9b 87       	std	Y+11, r25	; 0x0b
 41e:	8a 87       	std	Y+10, r24	; 0x0a
	mainmenu->children[4] = calibrate;
 420:	fd 86       	std	Y+13, r15	; 0x0d
 422:	ec 86       	std	Y+12, r14	; 0x0c
	mainmenu->children[5] = debugging;
 424:	1f 87       	std	Y+15, r17	; 0x0f
 426:	0e 87       	std	Y+14, r16	; 0x0e
	
	//printf("%s\n", foo.name);
	
	return mainmenu;
}
 428:	ce 01       	movw	r24, r28
 42a:	df 91       	pop	r29
 42c:	cf 91       	pop	r28
 42e:	1f 91       	pop	r17
 430:	0f 91       	pop	r16
 432:	ff 90       	pop	r15
 434:	ef 90       	pop	r14
 436:	df 90       	pop	r13
 438:	cf 90       	pop	r12
 43a:	bf 90       	pop	r11
 43c:	af 90       	pop	r10
 43e:	08 95       	ret

00000440 <OLED_print_menu>:

void OLED_print_menu(menuNode *node)
{
 440:	cf 93       	push	r28
 442:	df 93       	push	r29
 444:	ec 01       	movw	r28, r24
	OLED_pos(0,50);
 446:	62 e3       	ldi	r22, 0x32	; 50
 448:	80 e0       	ldi	r24, 0x00	; 0
 44a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <OLED_pos>
	OLED_print_string(node->name);
 44e:	88 81       	ld	r24, Y
 450:	99 81       	ldd	r25, Y+1	; 0x01
 452:	0e 94 9a 01 	call	0x334	; 0x334 <OLED_print_string>
	printf("%s\n", node->name);
 456:	88 81       	ld	r24, Y
 458:	99 81       	ldd	r25, Y+1	; 0x01
 45a:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <puts>
	OLED_pos(1,50);
 45e:	62 e3       	ldi	r22, 0x32	; 50
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	0e 94 7f 01 	call	0x2fe	; 0x2fe <OLED_pos>
	OLED_print_string(node->children[1]->name);
 466:	ee 81       	ldd	r30, Y+6	; 0x06
 468:	ff 81       	ldd	r31, Y+7	; 0x07
 46a:	80 81       	ld	r24, Z
 46c:	91 81       	ldd	r25, Z+1	; 0x01
 46e:	0e 94 9a 01 	call	0x334	; 0x334 <OLED_print_string>
	printf("%s\n", node->children[1]->name);
 472:	ee 81       	ldd	r30, Y+6	; 0x06
 474:	ff 81       	ldd	r31, Y+7	; 0x07
 476:	80 81       	ld	r24, Z
 478:	91 81       	ldd	r25, Z+1	; 0x01
 47a:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <puts>
	OLED_pos(2,50);
 47e:	62 e3       	ldi	r22, 0x32	; 50
 480:	82 e0       	ldi	r24, 0x02	; 2
 482:	0e 94 7f 01 	call	0x2fe	; 0x2fe <OLED_pos>
	OLED_print_string(node->children[2]->name);
 486:	e8 85       	ldd	r30, Y+8	; 0x08
 488:	f9 85       	ldd	r31, Y+9	; 0x09
 48a:	80 81       	ld	r24, Z
 48c:	91 81       	ldd	r25, Z+1	; 0x01
 48e:	0e 94 9a 01 	call	0x334	; 0x334 <OLED_print_string>
	OLED_pos(3,50);
 492:	62 e3       	ldi	r22, 0x32	; 50
 494:	83 e0       	ldi	r24, 0x03	; 3
 496:	0e 94 7f 01 	call	0x2fe	; 0x2fe <OLED_pos>
	OLED_print_string(node->children[3]->name);
 49a:	ea 85       	ldd	r30, Y+10	; 0x0a
 49c:	fb 85       	ldd	r31, Y+11	; 0x0b
 49e:	80 81       	ld	r24, Z
 4a0:	91 81       	ldd	r25, Z+1	; 0x01
 4a2:	0e 94 9a 01 	call	0x334	; 0x334 <OLED_print_string>
	OLED_pos(4,50);
 4a6:	62 e3       	ldi	r22, 0x32	; 50
 4a8:	84 e0       	ldi	r24, 0x04	; 4
 4aa:	0e 94 7f 01 	call	0x2fe	; 0x2fe <OLED_pos>
	OLED_print_string(node->children[4]->name);
 4ae:	ec 85       	ldd	r30, Y+12	; 0x0c
 4b0:	fd 85       	ldd	r31, Y+13	; 0x0d
 4b2:	80 81       	ld	r24, Z
 4b4:	91 81       	ldd	r25, Z+1	; 0x01
 4b6:	0e 94 9a 01 	call	0x334	; 0x334 <OLED_print_string>
	OLED_pos(5,50);
 4ba:	62 e3       	ldi	r22, 0x32	; 50
 4bc:	85 e0       	ldi	r24, 0x05	; 5
 4be:	0e 94 7f 01 	call	0x2fe	; 0x2fe <OLED_pos>
	OLED_print_string(node->children[5]->name);
 4c2:	ee 85       	ldd	r30, Y+14	; 0x0e
 4c4:	ff 85       	ldd	r31, Y+15	; 0x0f
 4c6:	80 81       	ld	r24, Z
 4c8:	91 81       	ldd	r25, Z+1	; 0x01
 4ca:	0e 94 9a 01 	call	0x334	; 0x334 <OLED_print_string>
 4ce:	df 91       	pop	r29
 4d0:	cf 91       	pop	r28
 4d2:	08 95       	ret

000004d4 <USART_init>:
#include <avr/io.h>

void USART_init(unsigned int ubrr)
{
	/* Set baud rate*/
	UBRR0H = (unsigned char)(ubrr >> 8 );
 4d4:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
 4d6:	89 b9       	out	0x09, r24	; 9
	/*Enable receiver and transmitter*/
	UCSR0B = (1 << RXEN0)|(1 << TXEN0);
 4d8:	88 e1       	ldi	r24, 0x18	; 24
 4da:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1 << URSEL0)|(1 << USBS0)|(3 << UCSZ10);
 4dc:	8e e8       	ldi	r24, 0x8E	; 142
 4de:	80 bd       	out	0x20, r24	; 32
 4e0:	08 95       	ret

000004e2 <USART_transmit>:
}

void USART_transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while (!( UCSR0A & (1 << UDRE0)))
 4e2:	5d 9b       	sbis	0x0b, 5	; 11
 4e4:	fe cf       	rjmp	.-4      	; 0x4e2 <USART_transmit>
		;
	/* Put data into buffer, sends the data */
	UDR0 = data;
 4e6:	8c b9       	out	0x0c, r24	; 12
 4e8:	08 95       	ret

000004ea <USART_receive>:
}

unsigned char USART_receive(void)
{
	/* Wait for data to be received */
	while ( !(UCSR0A & ( 1 << RXC0)) )
 4ea:	5f 9b       	sbis	0x0b, 7	; 11
 4ec:	fe cf       	rjmp	.-4      	; 0x4ea <USART_receive>
		;
	/* Get and return received data from buffer */
	return UDR0;
 4ee:	8c b1       	in	r24, 0x0c	; 12
}
 4f0:	08 95       	ret

000004f2 <malloc>:
 4f2:	cf 93       	push	r28
 4f4:	df 93       	push	r29
 4f6:	82 30       	cpi	r24, 0x02	; 2
 4f8:	91 05       	cpc	r25, r1
 4fa:	10 f4       	brcc	.+4      	; 0x500 <__stack+0x1>
 4fc:	82 e0       	ldi	r24, 0x02	; 2
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	e0 91 4c 01 	lds	r30, 0x014C
 504:	f0 91 4d 01 	lds	r31, 0x014D
 508:	20 e0       	ldi	r18, 0x00	; 0
 50a:	30 e0       	ldi	r19, 0x00	; 0
 50c:	a0 e0       	ldi	r26, 0x00	; 0
 50e:	b0 e0       	ldi	r27, 0x00	; 0
 510:	30 97       	sbiw	r30, 0x00	; 0
 512:	39 f1       	breq	.+78     	; 0x562 <__stack+0x63>
 514:	40 81       	ld	r20, Z
 516:	51 81       	ldd	r21, Z+1	; 0x01
 518:	48 17       	cp	r20, r24
 51a:	59 07       	cpc	r21, r25
 51c:	b8 f0       	brcs	.+46     	; 0x54c <__stack+0x4d>
 51e:	48 17       	cp	r20, r24
 520:	59 07       	cpc	r21, r25
 522:	71 f4       	brne	.+28     	; 0x540 <__stack+0x41>
 524:	82 81       	ldd	r24, Z+2	; 0x02
 526:	93 81       	ldd	r25, Z+3	; 0x03
 528:	10 97       	sbiw	r26, 0x00	; 0
 52a:	29 f0       	breq	.+10     	; 0x536 <__stack+0x37>
 52c:	13 96       	adiw	r26, 0x03	; 3
 52e:	9c 93       	st	X, r25
 530:	8e 93       	st	-X, r24
 532:	12 97       	sbiw	r26, 0x02	; 2
 534:	2c c0       	rjmp	.+88     	; 0x58e <__stack+0x8f>
 536:	90 93 4d 01 	sts	0x014D, r25
 53a:	80 93 4c 01 	sts	0x014C, r24
 53e:	27 c0       	rjmp	.+78     	; 0x58e <__stack+0x8f>
 540:	21 15       	cp	r18, r1
 542:	31 05       	cpc	r19, r1
 544:	31 f0       	breq	.+12     	; 0x552 <__stack+0x53>
 546:	42 17       	cp	r20, r18
 548:	53 07       	cpc	r21, r19
 54a:	18 f0       	brcs	.+6      	; 0x552 <__stack+0x53>
 54c:	a9 01       	movw	r20, r18
 54e:	db 01       	movw	r26, r22
 550:	01 c0       	rjmp	.+2      	; 0x554 <__stack+0x55>
 552:	ef 01       	movw	r28, r30
 554:	9a 01       	movw	r18, r20
 556:	bd 01       	movw	r22, r26
 558:	df 01       	movw	r26, r30
 55a:	02 80       	ldd	r0, Z+2	; 0x02
 55c:	f3 81       	ldd	r31, Z+3	; 0x03
 55e:	e0 2d       	mov	r30, r0
 560:	d7 cf       	rjmp	.-82     	; 0x510 <__stack+0x11>
 562:	21 15       	cp	r18, r1
 564:	31 05       	cpc	r19, r1
 566:	f9 f0       	breq	.+62     	; 0x5a6 <__stack+0xa7>
 568:	28 1b       	sub	r18, r24
 56a:	39 0b       	sbc	r19, r25
 56c:	24 30       	cpi	r18, 0x04	; 4
 56e:	31 05       	cpc	r19, r1
 570:	80 f4       	brcc	.+32     	; 0x592 <__stack+0x93>
 572:	8a 81       	ldd	r24, Y+2	; 0x02
 574:	9b 81       	ldd	r25, Y+3	; 0x03
 576:	61 15       	cp	r22, r1
 578:	71 05       	cpc	r23, r1
 57a:	21 f0       	breq	.+8      	; 0x584 <__stack+0x85>
 57c:	fb 01       	movw	r30, r22
 57e:	93 83       	std	Z+3, r25	; 0x03
 580:	82 83       	std	Z+2, r24	; 0x02
 582:	04 c0       	rjmp	.+8      	; 0x58c <__stack+0x8d>
 584:	90 93 4d 01 	sts	0x014D, r25
 588:	80 93 4c 01 	sts	0x014C, r24
 58c:	fe 01       	movw	r30, r28
 58e:	32 96       	adiw	r30, 0x02	; 2
 590:	44 c0       	rjmp	.+136    	; 0x61a <__stack+0x11b>
 592:	fe 01       	movw	r30, r28
 594:	e2 0f       	add	r30, r18
 596:	f3 1f       	adc	r31, r19
 598:	81 93       	st	Z+, r24
 59a:	91 93       	st	Z+, r25
 59c:	22 50       	subi	r18, 0x02	; 2
 59e:	31 09       	sbc	r19, r1
 5a0:	39 83       	std	Y+1, r19	; 0x01
 5a2:	28 83       	st	Y, r18
 5a4:	3a c0       	rjmp	.+116    	; 0x61a <__stack+0x11b>
 5a6:	20 91 4a 01 	lds	r18, 0x014A
 5aa:	30 91 4b 01 	lds	r19, 0x014B
 5ae:	23 2b       	or	r18, r19
 5b0:	41 f4       	brne	.+16     	; 0x5c2 <__stack+0xc3>
 5b2:	20 91 02 01 	lds	r18, 0x0102
 5b6:	30 91 03 01 	lds	r19, 0x0103
 5ba:	30 93 4b 01 	sts	0x014B, r19
 5be:	20 93 4a 01 	sts	0x014A, r18
 5c2:	20 91 00 01 	lds	r18, 0x0100
 5c6:	30 91 01 01 	lds	r19, 0x0101
 5ca:	21 15       	cp	r18, r1
 5cc:	31 05       	cpc	r19, r1
 5ce:	41 f4       	brne	.+16     	; 0x5e0 <__stack+0xe1>
 5d0:	2d b7       	in	r18, 0x3d	; 61
 5d2:	3e b7       	in	r19, 0x3e	; 62
 5d4:	40 91 04 01 	lds	r20, 0x0104
 5d8:	50 91 05 01 	lds	r21, 0x0105
 5dc:	24 1b       	sub	r18, r20
 5de:	35 0b       	sbc	r19, r21
 5e0:	e0 91 4a 01 	lds	r30, 0x014A
 5e4:	f0 91 4b 01 	lds	r31, 0x014B
 5e8:	e2 17       	cp	r30, r18
 5ea:	f3 07       	cpc	r31, r19
 5ec:	a0 f4       	brcc	.+40     	; 0x616 <__stack+0x117>
 5ee:	2e 1b       	sub	r18, r30
 5f0:	3f 0b       	sbc	r19, r31
 5f2:	28 17       	cp	r18, r24
 5f4:	39 07       	cpc	r19, r25
 5f6:	78 f0       	brcs	.+30     	; 0x616 <__stack+0x117>
 5f8:	ac 01       	movw	r20, r24
 5fa:	4e 5f       	subi	r20, 0xFE	; 254
 5fc:	5f 4f       	sbci	r21, 0xFF	; 255
 5fe:	24 17       	cp	r18, r20
 600:	35 07       	cpc	r19, r21
 602:	48 f0       	brcs	.+18     	; 0x616 <__stack+0x117>
 604:	4e 0f       	add	r20, r30
 606:	5f 1f       	adc	r21, r31
 608:	50 93 4b 01 	sts	0x014B, r21
 60c:	40 93 4a 01 	sts	0x014A, r20
 610:	81 93       	st	Z+, r24
 612:	91 93       	st	Z+, r25
 614:	02 c0       	rjmp	.+4      	; 0x61a <__stack+0x11b>
 616:	e0 e0       	ldi	r30, 0x00	; 0
 618:	f0 e0       	ldi	r31, 0x00	; 0
 61a:	cf 01       	movw	r24, r30
 61c:	df 91       	pop	r29
 61e:	cf 91       	pop	r28
 620:	08 95       	ret

00000622 <free>:
 622:	cf 93       	push	r28
 624:	df 93       	push	r29
 626:	00 97       	sbiw	r24, 0x00	; 0
 628:	09 f4       	brne	.+2      	; 0x62c <free+0xa>
 62a:	87 c0       	rjmp	.+270    	; 0x73a <free+0x118>
 62c:	fc 01       	movw	r30, r24
 62e:	32 97       	sbiw	r30, 0x02	; 2
 630:	13 82       	std	Z+3, r1	; 0x03
 632:	12 82       	std	Z+2, r1	; 0x02
 634:	c0 91 4c 01 	lds	r28, 0x014C
 638:	d0 91 4d 01 	lds	r29, 0x014D
 63c:	20 97       	sbiw	r28, 0x00	; 0
 63e:	81 f4       	brne	.+32     	; 0x660 <free+0x3e>
 640:	20 81       	ld	r18, Z
 642:	31 81       	ldd	r19, Z+1	; 0x01
 644:	28 0f       	add	r18, r24
 646:	39 1f       	adc	r19, r25
 648:	80 91 4a 01 	lds	r24, 0x014A
 64c:	90 91 4b 01 	lds	r25, 0x014B
 650:	82 17       	cp	r24, r18
 652:	93 07       	cpc	r25, r19
 654:	79 f5       	brne	.+94     	; 0x6b4 <free+0x92>
 656:	f0 93 4b 01 	sts	0x014B, r31
 65a:	e0 93 4a 01 	sts	0x014A, r30
 65e:	6d c0       	rjmp	.+218    	; 0x73a <free+0x118>
 660:	de 01       	movw	r26, r28
 662:	20 e0       	ldi	r18, 0x00	; 0
 664:	30 e0       	ldi	r19, 0x00	; 0
 666:	ae 17       	cp	r26, r30
 668:	bf 07       	cpc	r27, r31
 66a:	50 f4       	brcc	.+20     	; 0x680 <free+0x5e>
 66c:	12 96       	adiw	r26, 0x02	; 2
 66e:	4d 91       	ld	r20, X+
 670:	5c 91       	ld	r21, X
 672:	13 97       	sbiw	r26, 0x03	; 3
 674:	9d 01       	movw	r18, r26
 676:	41 15       	cp	r20, r1
 678:	51 05       	cpc	r21, r1
 67a:	09 f1       	breq	.+66     	; 0x6be <free+0x9c>
 67c:	da 01       	movw	r26, r20
 67e:	f3 cf       	rjmp	.-26     	; 0x666 <free+0x44>
 680:	b3 83       	std	Z+3, r27	; 0x03
 682:	a2 83       	std	Z+2, r26	; 0x02
 684:	40 81       	ld	r20, Z
 686:	51 81       	ldd	r21, Z+1	; 0x01
 688:	84 0f       	add	r24, r20
 68a:	95 1f       	adc	r25, r21
 68c:	8a 17       	cp	r24, r26
 68e:	9b 07       	cpc	r25, r27
 690:	71 f4       	brne	.+28     	; 0x6ae <free+0x8c>
 692:	8d 91       	ld	r24, X+
 694:	9c 91       	ld	r25, X
 696:	11 97       	sbiw	r26, 0x01	; 1
 698:	84 0f       	add	r24, r20
 69a:	95 1f       	adc	r25, r21
 69c:	02 96       	adiw	r24, 0x02	; 2
 69e:	91 83       	std	Z+1, r25	; 0x01
 6a0:	80 83       	st	Z, r24
 6a2:	12 96       	adiw	r26, 0x02	; 2
 6a4:	8d 91       	ld	r24, X+
 6a6:	9c 91       	ld	r25, X
 6a8:	13 97       	sbiw	r26, 0x03	; 3
 6aa:	93 83       	std	Z+3, r25	; 0x03
 6ac:	82 83       	std	Z+2, r24	; 0x02
 6ae:	21 15       	cp	r18, r1
 6b0:	31 05       	cpc	r19, r1
 6b2:	29 f4       	brne	.+10     	; 0x6be <free+0x9c>
 6b4:	f0 93 4d 01 	sts	0x014D, r31
 6b8:	e0 93 4c 01 	sts	0x014C, r30
 6bc:	3e c0       	rjmp	.+124    	; 0x73a <free+0x118>
 6be:	d9 01       	movw	r26, r18
 6c0:	13 96       	adiw	r26, 0x03	; 3
 6c2:	fc 93       	st	X, r31
 6c4:	ee 93       	st	-X, r30
 6c6:	12 97       	sbiw	r26, 0x02	; 2
 6c8:	4d 91       	ld	r20, X+
 6ca:	5d 91       	ld	r21, X+
 6cc:	a4 0f       	add	r26, r20
 6ce:	b5 1f       	adc	r27, r21
 6d0:	ea 17       	cp	r30, r26
 6d2:	fb 07       	cpc	r31, r27
 6d4:	79 f4       	brne	.+30     	; 0x6f4 <free+0xd2>
 6d6:	80 81       	ld	r24, Z
 6d8:	91 81       	ldd	r25, Z+1	; 0x01
 6da:	84 0f       	add	r24, r20
 6dc:	95 1f       	adc	r25, r21
 6de:	02 96       	adiw	r24, 0x02	; 2
 6e0:	d9 01       	movw	r26, r18
 6e2:	11 96       	adiw	r26, 0x01	; 1
 6e4:	9c 93       	st	X, r25
 6e6:	8e 93       	st	-X, r24
 6e8:	82 81       	ldd	r24, Z+2	; 0x02
 6ea:	93 81       	ldd	r25, Z+3	; 0x03
 6ec:	13 96       	adiw	r26, 0x03	; 3
 6ee:	9c 93       	st	X, r25
 6f0:	8e 93       	st	-X, r24
 6f2:	12 97       	sbiw	r26, 0x02	; 2
 6f4:	e0 e0       	ldi	r30, 0x00	; 0
 6f6:	f0 e0       	ldi	r31, 0x00	; 0
 6f8:	8a 81       	ldd	r24, Y+2	; 0x02
 6fa:	9b 81       	ldd	r25, Y+3	; 0x03
 6fc:	00 97       	sbiw	r24, 0x00	; 0
 6fe:	19 f0       	breq	.+6      	; 0x706 <free+0xe4>
 700:	fe 01       	movw	r30, r28
 702:	ec 01       	movw	r28, r24
 704:	f9 cf       	rjmp	.-14     	; 0x6f8 <free+0xd6>
 706:	ce 01       	movw	r24, r28
 708:	02 96       	adiw	r24, 0x02	; 2
 70a:	28 81       	ld	r18, Y
 70c:	39 81       	ldd	r19, Y+1	; 0x01
 70e:	82 0f       	add	r24, r18
 710:	93 1f       	adc	r25, r19
 712:	20 91 4a 01 	lds	r18, 0x014A
 716:	30 91 4b 01 	lds	r19, 0x014B
 71a:	28 17       	cp	r18, r24
 71c:	39 07       	cpc	r19, r25
 71e:	69 f4       	brne	.+26     	; 0x73a <free+0x118>
 720:	30 97       	sbiw	r30, 0x00	; 0
 722:	29 f4       	brne	.+10     	; 0x72e <free+0x10c>
 724:	10 92 4d 01 	sts	0x014D, r1
 728:	10 92 4c 01 	sts	0x014C, r1
 72c:	02 c0       	rjmp	.+4      	; 0x732 <free+0x110>
 72e:	13 82       	std	Z+3, r1	; 0x03
 730:	12 82       	std	Z+2, r1	; 0x02
 732:	d0 93 4b 01 	sts	0x014B, r29
 736:	c0 93 4a 01 	sts	0x014A, r28
 73a:	df 91       	pop	r29
 73c:	cf 91       	pop	r28
 73e:	08 95       	ret

00000740 <fdevopen>:
 740:	0f 93       	push	r16
 742:	1f 93       	push	r17
 744:	cf 93       	push	r28
 746:	df 93       	push	r29
 748:	ec 01       	movw	r28, r24
 74a:	8b 01       	movw	r16, r22
 74c:	00 97       	sbiw	r24, 0x00	; 0
 74e:	31 f4       	brne	.+12     	; 0x75c <fdevopen+0x1c>
 750:	61 15       	cp	r22, r1
 752:	71 05       	cpc	r23, r1
 754:	19 f4       	brne	.+6      	; 0x75c <fdevopen+0x1c>
 756:	80 e0       	ldi	r24, 0x00	; 0
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	38 c0       	rjmp	.+112    	; 0x7cc <fdevopen+0x8c>
 75c:	6e e0       	ldi	r22, 0x0E	; 14
 75e:	70 e0       	ldi	r23, 0x00	; 0
 760:	81 e0       	ldi	r24, 0x01	; 1
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	0e 94 18 04 	call	0x830	; 0x830 <calloc>
 768:	fc 01       	movw	r30, r24
 76a:	00 97       	sbiw	r24, 0x00	; 0
 76c:	a1 f3       	breq	.-24     	; 0x756 <fdevopen+0x16>
 76e:	80 e8       	ldi	r24, 0x80	; 128
 770:	83 83       	std	Z+3, r24	; 0x03
 772:	01 15       	cp	r16, r1
 774:	11 05       	cpc	r17, r1
 776:	71 f0       	breq	.+28     	; 0x794 <fdevopen+0x54>
 778:	13 87       	std	Z+11, r17	; 0x0b
 77a:	02 87       	std	Z+10, r16	; 0x0a
 77c:	81 e8       	ldi	r24, 0x81	; 129
 77e:	83 83       	std	Z+3, r24	; 0x03
 780:	80 91 4e 01 	lds	r24, 0x014E
 784:	90 91 4f 01 	lds	r25, 0x014F
 788:	89 2b       	or	r24, r25
 78a:	21 f4       	brne	.+8      	; 0x794 <fdevopen+0x54>
 78c:	f0 93 4f 01 	sts	0x014F, r31
 790:	e0 93 4e 01 	sts	0x014E, r30
 794:	20 97       	sbiw	r28, 0x00	; 0
 796:	c9 f0       	breq	.+50     	; 0x7ca <fdevopen+0x8a>
 798:	d1 87       	std	Z+9, r29	; 0x09
 79a:	c0 87       	std	Z+8, r28	; 0x08
 79c:	83 81       	ldd	r24, Z+3	; 0x03
 79e:	82 60       	ori	r24, 0x02	; 2
 7a0:	83 83       	std	Z+3, r24	; 0x03
 7a2:	80 91 50 01 	lds	r24, 0x0150
 7a6:	90 91 51 01 	lds	r25, 0x0151
 7aa:	89 2b       	or	r24, r25
 7ac:	71 f4       	brne	.+28     	; 0x7ca <fdevopen+0x8a>
 7ae:	f0 93 51 01 	sts	0x0151, r31
 7b2:	e0 93 50 01 	sts	0x0150, r30
 7b6:	80 91 52 01 	lds	r24, 0x0152
 7ba:	90 91 53 01 	lds	r25, 0x0153
 7be:	89 2b       	or	r24, r25
 7c0:	21 f4       	brne	.+8      	; 0x7ca <fdevopen+0x8a>
 7c2:	f0 93 53 01 	sts	0x0153, r31
 7c6:	e0 93 52 01 	sts	0x0152, r30
 7ca:	cf 01       	movw	r24, r30
 7cc:	df 91       	pop	r29
 7ce:	cf 91       	pop	r28
 7d0:	1f 91       	pop	r17
 7d2:	0f 91       	pop	r16
 7d4:	08 95       	ret

000007d6 <puts>:
 7d6:	0f 93       	push	r16
 7d8:	1f 93       	push	r17
 7da:	cf 93       	push	r28
 7dc:	df 93       	push	r29
 7de:	e0 91 50 01 	lds	r30, 0x0150
 7e2:	f0 91 51 01 	lds	r31, 0x0151
 7e6:	23 81       	ldd	r18, Z+3	; 0x03
 7e8:	21 ff       	sbrs	r18, 1
 7ea:	1b c0       	rjmp	.+54     	; 0x822 <puts+0x4c>
 7ec:	ec 01       	movw	r28, r24
 7ee:	00 e0       	ldi	r16, 0x00	; 0
 7f0:	10 e0       	ldi	r17, 0x00	; 0
 7f2:	89 91       	ld	r24, Y+
 7f4:	60 91 50 01 	lds	r22, 0x0150
 7f8:	70 91 51 01 	lds	r23, 0x0151
 7fc:	db 01       	movw	r26, r22
 7fe:	18 96       	adiw	r26, 0x08	; 8
 800:	ed 91       	ld	r30, X+
 802:	fc 91       	ld	r31, X
 804:	19 97       	sbiw	r26, 0x09	; 9
 806:	88 23       	and	r24, r24
 808:	31 f0       	breq	.+12     	; 0x816 <puts+0x40>
 80a:	09 95       	icall
 80c:	89 2b       	or	r24, r25
 80e:	89 f3       	breq	.-30     	; 0x7f2 <puts+0x1c>
 810:	0f ef       	ldi	r16, 0xFF	; 255
 812:	1f ef       	ldi	r17, 0xFF	; 255
 814:	ee cf       	rjmp	.-36     	; 0x7f2 <puts+0x1c>
 816:	8a e0       	ldi	r24, 0x0A	; 10
 818:	09 95       	icall
 81a:	89 2b       	or	r24, r25
 81c:	11 f4       	brne	.+4      	; 0x822 <puts+0x4c>
 81e:	c8 01       	movw	r24, r16
 820:	02 c0       	rjmp	.+4      	; 0x826 <puts+0x50>
 822:	8f ef       	ldi	r24, 0xFF	; 255
 824:	9f ef       	ldi	r25, 0xFF	; 255
 826:	df 91       	pop	r29
 828:	cf 91       	pop	r28
 82a:	1f 91       	pop	r17
 82c:	0f 91       	pop	r16
 82e:	08 95       	ret

00000830 <calloc>:
 830:	0f 93       	push	r16
 832:	1f 93       	push	r17
 834:	cf 93       	push	r28
 836:	df 93       	push	r29
 838:	86 9f       	mul	r24, r22
 83a:	80 01       	movw	r16, r0
 83c:	87 9f       	mul	r24, r23
 83e:	10 0d       	add	r17, r0
 840:	96 9f       	mul	r25, r22
 842:	10 0d       	add	r17, r0
 844:	11 24       	eor	r1, r1
 846:	c8 01       	movw	r24, r16
 848:	0e 94 79 02 	call	0x4f2	; 0x4f2 <malloc>
 84c:	ec 01       	movw	r28, r24
 84e:	00 97       	sbiw	r24, 0x00	; 0
 850:	29 f0       	breq	.+10     	; 0x85c <calloc+0x2c>
 852:	a8 01       	movw	r20, r16
 854:	60 e0       	ldi	r22, 0x00	; 0
 856:	70 e0       	ldi	r23, 0x00	; 0
 858:	0e 94 34 04 	call	0x868	; 0x868 <memset>
 85c:	ce 01       	movw	r24, r28
 85e:	df 91       	pop	r29
 860:	cf 91       	pop	r28
 862:	1f 91       	pop	r17
 864:	0f 91       	pop	r16
 866:	08 95       	ret

00000868 <memset>:
 868:	dc 01       	movw	r26, r24
 86a:	01 c0       	rjmp	.+2      	; 0x86e <memset+0x6>
 86c:	6d 93       	st	X+, r22
 86e:	41 50       	subi	r20, 0x01	; 1
 870:	50 40       	sbci	r21, 0x00	; 0
 872:	e0 f7       	brcc	.-8      	; 0x86c <memset+0x4>
 874:	08 95       	ret

00000876 <_exit>:
 876:	f8 94       	cli

00000878 <__stop_program>:
 878:	ff cf       	rjmp	.-2      	; 0x878 <__stop_program>
