
Group52.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  00001074  00001108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001074  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080014a  0080014a  00001152  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001152  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000240  00000000  00000000  00001182  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002689  00000000  00000000  000013c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000cb4  00000000  00000000  00003a4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c1e  00000000  00000000  000046ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000500  00000000  00000000  00005320  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000070e  00000000  00000000  00005820  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001232  00000000  00000000  00005f2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001d8  00000000  00000000  00007160  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__ctors_end>
       4:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
       8:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
       c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      10:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      14:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      18:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      1c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      20:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      24:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      28:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      2c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      30:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      34:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      38:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      3c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      40:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      44:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      48:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      4c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      50:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      54:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      58:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      5c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      60:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      64:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      68:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      6c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	00 00       	nop
      72:	00 00       	nop
      74:	00 5c       	subi	r16, 0xC0	; 192
      76:	00 00       	nop
      78:	0c 00       	.word	0x000c	; ????
      7a:	0c 00       	.word	0x000c	; ????
      7c:	7c 28       	or	r7, r12
      7e:	7c 28       	or	r7, r12
      80:	58 dc       	rcall	.-1872   	; 0xfffff932 <__eeprom_end+0xff7ef932>
      82:	68 00       	.word	0x0068	; ????
      84:	24 10       	cpse	r2, r4
      86:	48 00       	.word	0x0048	; ????
      88:	28 54       	subi	r18, 0x48	; 72
      8a:	28 40       	sbci	r18, 0x08	; 8
      8c:	00 0c       	add	r0, r0
      8e:	00 00       	nop
      90:	00 78       	andi	r16, 0x80	; 128
      92:	84 00       	.word	0x0084	; ????
      94:	84 78       	andi	r24, 0x84	; 132
      96:	00 00       	nop
      98:	54 38       	cpi	r21, 0x84	; 132
      9a:	54 00       	.word	0x0054	; ????
      9c:	10 7c       	andi	r17, 0xC0	; 192
      9e:	10 00       	.word	0x0010	; ????
      a0:	80 40       	sbci	r24, 0x00	; 0
      a2:	00 00       	nop
      a4:	10 10       	cpse	r1, r0
      a6:	10 00       	.word	0x0010	; ????
      a8:	00 40       	sbci	r16, 0x00	; 0
      aa:	00 00       	nop
      ac:	60 10       	cpse	r6, r0
      ae:	0c 00       	.word	0x000c	; ????
      b0:	38 54       	subi	r19, 0x48	; 72
      b2:	38 00       	.word	0x0038	; ????
      b4:	48 7c       	andi	r20, 0xC8	; 200
      b6:	40 00       	.word	0x0040	; ????
      b8:	48 64       	ori	r20, 0x48	; 72
      ba:	58 00       	.word	0x0058	; ????
      bc:	44 54       	subi	r20, 0x44	; 68
      be:	2c 00       	.word	0x002c	; ????
      c0:	1c 10       	cpse	r1, r12
      c2:	7c 00       	.word	0x007c	; ????
      c4:	5c 54       	subi	r21, 0x4C	; 76
      c6:	24 00       	.word	0x0024	; ????
      c8:	38 54       	subi	r19, 0x48	; 72
      ca:	24 00       	.word	0x0024	; ????
      cc:	64 14       	cp	r6, r4
      ce:	0c 00       	.word	0x000c	; ????
      d0:	68 54       	subi	r22, 0x48	; 72
      d2:	2c 00       	.word	0x002c	; ????
      d4:	48 54       	subi	r20, 0x48	; 72
      d6:	38 00       	.word	0x0038	; ????
      d8:	00 48       	sbci	r16, 0x80	; 128
      da:	00 00       	nop
      dc:	80 48       	sbci	r24, 0x80	; 128
      de:	00 00       	nop
      e0:	10 28       	or	r1, r0
      e2:	44 00       	.word	0x0044	; ????
      e4:	28 28       	or	r2, r8
      e6:	28 00       	.word	0x0028	; ????
      e8:	44 28       	or	r4, r4
      ea:	10 00       	.word	0x0010	; ????
      ec:	04 54       	subi	r16, 0x44	; 68
      ee:	08 00       	.word	0x0008	; ????
      f0:	38 44       	sbci	r19, 0x48	; 72
      f2:	5c 00       	.word	0x005c	; ????
      f4:	78 14       	cp	r7, r8
      f6:	78 00       	.word	0x0078	; ????
      f8:	7c 54       	subi	r23, 0x4C	; 76
      fa:	28 00       	.word	0x0028	; ????
      fc:	38 44       	sbci	r19, 0x48	; 72
      fe:	28 00       	.word	0x0028	; ????
     100:	7c 44       	sbci	r23, 0x4C	; 76
     102:	38 00       	.word	0x0038	; ????
     104:	7c 54       	subi	r23, 0x4C	; 76
     106:	44 00       	.word	0x0044	; ????
     108:	7c 14       	cp	r7, r12
     10a:	04 00       	.word	0x0004	; ????
     10c:	38 44       	sbci	r19, 0x48	; 72
     10e:	74 00       	.word	0x0074	; ????
     110:	7c 10       	cpse	r7, r12
     112:	7c 00       	.word	0x007c	; ????
     114:	44 7c       	andi	r20, 0xC4	; 196
     116:	44 00       	.word	0x0044	; ????
     118:	20 40       	sbci	r18, 0x00	; 0
     11a:	3c 00       	.word	0x003c	; ????
     11c:	7c 10       	cpse	r7, r12
     11e:	6c 00       	.word	0x006c	; ????
     120:	7c 40       	sbci	r23, 0x0C	; 12
     122:	40 00       	.word	0x0040	; ????
     124:	7c 18       	sub	r7, r12
     126:	7c 00       	.word	0x007c	; ????
     128:	78 10       	cpse	r7, r8
     12a:	3c 00       	.word	0x003c	; ????
     12c:	38 44       	sbci	r19, 0x48	; 72
     12e:	38 00       	.word	0x0038	; ????
     130:	7c 14       	cp	r7, r12
     132:	08 00       	.word	0x0008	; ????
     134:	38 44       	sbci	r19, 0x48	; 72
     136:	b8 00       	.word	0x00b8	; ????
     138:	7c 14       	cp	r7, r12
     13a:	68 00       	.word	0x0068	; ????
     13c:	48 54       	subi	r20, 0x48	; 72
     13e:	24 00       	.word	0x0024	; ????
     140:	04 7c       	andi	r16, 0xC4	; 196
     142:	04 00       	.word	0x0004	; ????
     144:	7c 40       	sbci	r23, 0x0C	; 12
     146:	7c 00       	.word	0x007c	; ????
     148:	3c 60       	ori	r19, 0x0C	; 12
     14a:	3c 00       	.word	0x003c	; ????
     14c:	7c 30       	cpi	r23, 0x0C	; 12
     14e:	7c 00       	.word	0x007c	; ????
     150:	6c 10       	cpse	r6, r12
     152:	6c 00       	.word	0x006c	; ????
     154:	0c 70       	andi	r16, 0x0C	; 12
     156:	0c 00       	.word	0x000c	; ????
     158:	64 54       	subi	r22, 0x44	; 68
     15a:	4c 00       	.word	0x004c	; ????
     15c:	00 7c       	andi	r16, 0xC0	; 192
     15e:	44 00       	.word	0x0044	; ????
     160:	0c 10       	cpse	r0, r12
     162:	60 00       	.word	0x0060	; ????
     164:	44 7c       	andi	r20, 0xC4	; 196
     166:	00 00       	nop
     168:	08 04       	cpc	r0, r8
     16a:	08 00       	.word	0x0008	; ????
     16c:	80 80       	ld	r8, Z
     16e:	80 00       	.word	0x0080	; ????
     170:	00 04       	cpc	r0, r0
     172:	08 00       	.word	0x0008	; ????
     174:	30 48       	sbci	r19, 0x80	; 128
     176:	78 00       	.word	0x0078	; ????
     178:	7c 48       	sbci	r23, 0x8C	; 140
     17a:	30 00       	.word	0x0030	; ????
     17c:	30 48       	sbci	r19, 0x80	; 128
     17e:	48 00       	.word	0x0048	; ????
     180:	30 48       	sbci	r19, 0x80	; 128
     182:	7c 00       	.word	0x007c	; ????
     184:	30 68       	ori	r19, 0x80	; 128
     186:	50 00       	.word	0x0050	; ????
     188:	10 78       	andi	r17, 0x80	; 128
     18a:	14 00       	.word	0x0014	; ????
     18c:	90 a8       	ldd	r9, Z+48	; 0x30
     18e:	78 00       	.word	0x0078	; ????
     190:	7c 08       	sbc	r7, r12
     192:	70 00       	.word	0x0070	; ????
     194:	50 74       	andi	r21, 0x40	; 64
     196:	40 00       	.word	0x0040	; ????
     198:	80 80       	ld	r8, Z
     19a:	74 00       	.word	0x0074	; ????
     19c:	7c 10       	cpse	r7, r12
     19e:	68 00       	.word	0x0068	; ????
     1a0:	44 7c       	andi	r20, 0xC4	; 196
     1a2:	40 00       	.word	0x0040	; ????
     1a4:	78 10       	cpse	r7, r8
     1a6:	78 00       	.word	0x0078	; ????
     1a8:	78 08       	sbc	r7, r8
     1aa:	70 00       	.word	0x0070	; ????
     1ac:	30 48       	sbci	r19, 0x80	; 128
     1ae:	30 00       	.word	0x0030	; ????
     1b0:	f8 28       	or	r15, r8
     1b2:	10 00       	.word	0x0010	; ????
     1b4:	30 48       	sbci	r19, 0x80	; 128
     1b6:	f8 00       	.word	0x00f8	; ????
     1b8:	78 10       	cpse	r7, r8
     1ba:	08 00       	.word	0x0008	; ????
     1bc:	50 58       	subi	r21, 0x80	; 128
     1be:	28 00       	.word	0x0028	; ????
     1c0:	08 3c       	cpi	r16, 0xC8	; 200
     1c2:	48 00       	.word	0x0048	; ????
     1c4:	38 40       	sbci	r19, 0x08	; 8
     1c6:	78 00       	.word	0x0078	; ????
     1c8:	38 40       	sbci	r19, 0x08	; 8
     1ca:	38 00       	.word	0x0038	; ????
     1cc:	78 20       	and	r7, r8
     1ce:	78 00       	.word	0x0078	; ????
     1d0:	48 30       	cpi	r20, 0x08	; 8
     1d2:	48 00       	.word	0x0048	; ????
     1d4:	98 a0       	ldd	r9, Y+32	; 0x20
     1d6:	78 00       	.word	0x0078	; ????
     1d8:	48 68       	ori	r20, 0x88	; 136
     1da:	58 00       	.word	0x0058	; ????
     1dc:	10 78       	andi	r17, 0x80	; 128
     1de:	84 00       	.word	0x0084	; ????
     1e0:	00 7c       	andi	r16, 0xC0	; 192
     1e2:	00 00       	nop
     1e4:	84 78       	andi	r24, 0x84	; 132
     1e6:	10 00       	.word	0x0010	; ????
     1e8:	08 04       	cpc	r0, r8
     1ea:	08 04       	cpc	r0, r8

000001ec <__ctors_end>:
     1ec:	11 24       	eor	r1, r1
     1ee:	1f be       	out	0x3f, r1	; 63
     1f0:	cf ef       	ldi	r28, 0xFF	; 255
     1f2:	d4 e0       	ldi	r29, 0x04	; 4
     1f4:	de bf       	out	0x3e, r29	; 62
     1f6:	cd bf       	out	0x3d, r28	; 61

000001f8 <__do_copy_data>:
     1f8:	11 e0       	ldi	r17, 0x01	; 1
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b1 e0       	ldi	r27, 0x01	; 1
     1fe:	e4 e7       	ldi	r30, 0x74	; 116
     200:	f0 e1       	ldi	r31, 0x10	; 16
     202:	02 c0       	rjmp	.+4      	; 0x208 <__do_copy_data+0x10>
     204:	05 90       	lpm	r0, Z+
     206:	0d 92       	st	X+, r0
     208:	aa 34       	cpi	r26, 0x4A	; 74
     20a:	b1 07       	cpc	r27, r17
     20c:	d9 f7       	brne	.-10     	; 0x204 <__do_copy_data+0xc>

0000020e <__do_clear_bss>:
     20e:	21 e0       	ldi	r18, 0x01	; 1
     210:	aa e4       	ldi	r26, 0x4A	; 74
     212:	b1 e0       	ldi	r27, 0x01	; 1
     214:	01 c0       	rjmp	.+2      	; 0x218 <.do_clear_bss_start>

00000216 <.do_clear_bss_loop>:
     216:	1d 92       	st	X+, r1

00000218 <.do_clear_bss_start>:
     218:	a4 35       	cpi	r26, 0x54	; 84
     21a:	b2 07       	cpc	r27, r18
     21c:	e1 f7       	brne	.-8      	; 0x216 <.do_clear_bss_loop>
     21e:	0e 94 76 02 	call	0x4ec	; 0x4ec <main>
     222:	0c 94 38 08 	jmp	0x1070	; 0x1070 <_exit>

00000226 <__bad_interrupt>:
     226:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000022a <adc_read>:
#include <util/delay.h>
#include "adc.h"

uint8_t adc_read(DeviceType device){
	volatile char *adc = (char *) 0x1400;
	switch (device) {
     22a:	82 30       	cpi	r24, 0x02	; 2
     22c:	69 f0       	breq	.+26     	; 0x248 <adc_read+0x1e>
     22e:	18 f4       	brcc	.+6      	; 0x236 <adc_read+0xc>
     230:	81 30       	cpi	r24, 0x01	; 1
     232:	31 f0       	breq	.+12     	; 0x240 <adc_read+0x16>
     234:	14 c0       	rjmp	.+40     	; 0x25e <adc_read+0x34>
     236:	83 30       	cpi	r24, 0x03	; 3
     238:	59 f0       	breq	.+22     	; 0x250 <adc_read+0x26>
     23a:	84 30       	cpi	r24, 0x04	; 4
     23c:	69 f0       	breq	.+26     	; 0x258 <adc_read+0x2e>
     23e:	0f c0       	rjmp	.+30     	; 0x25e <adc_read+0x34>
		case JOYAXIS1:
		/* Select CH1 */
		adc[0] = 0b00000100;
     240:	84 e0       	ldi	r24, 0x04	; 4
     242:	80 93 00 14 	sts	0x1400, r24
		break;
     246:	0b c0       	rjmp	.+22     	; 0x25e <adc_read+0x34>
		
		case JOYAXIS2:
		/* Select CH2 */
		adc[0] = 0b00000101;
     248:	85 e0       	ldi	r24, 0x05	; 5
     24a:	80 93 00 14 	sts	0x1400, r24
		break;
     24e:	07 c0       	rjmp	.+14     	; 0x25e <adc_read+0x34>
		
		case LSLIDER:
		/* Select CH3 */
		adc[0] = 0b00000110;
     250:	86 e0       	ldi	r24, 0x06	; 6
     252:	80 93 00 14 	sts	0x1400, r24
		break;
     256:	03 c0       	rjmp	.+6      	; 0x25e <adc_read+0x34>
		
		case RSLIDER:
		/* Select CH1 */
		adc[0] = 0b00000111;
     258:	87 e0       	ldi	r24, 0x07	; 7
     25a:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     25e:	2c ec       	ldi	r18, 0xCC	; 204
     260:	8c e0       	ldi	r24, 0x0C	; 12
     262:	91 e0       	ldi	r25, 0x01	; 1
     264:	21 50       	subi	r18, 0x01	; 1
     266:	80 40       	sbci	r24, 0x00	; 0
     268:	90 40       	sbci	r25, 0x00	; 0
     26a:	e1 f7       	brne	.-8      	; 0x264 <adc_read+0x3a>
     26c:	00 c0       	rjmp	.+0      	; 0x26e <adc_read+0x44>
		break;
		default:
		break;
	}
	_delay_ms(70);
	return adc[0];
     26e:	80 91 00 14 	lds	r24, 0x1400
     272:	08 95       	ret

00000274 <CAN_init>:
#include "MCP2515.h"
#include "can.h"

void CAN_init(void)
{
	MCP_init();
     274:	0e 94 1f 03 	call	0x63e	; 0x63e <MCP_init>
     278:	08 95       	ret

0000027a <CAN_message_send>:
}

/* High level function for sending a message on the CAN bus */
void CAN_message_send(can_message_t* msg)
{
     27a:	1f 93       	push	r17
     27c:	cf 93       	push	r28
     27e:	df 93       	push	r29
     280:	ec 01       	movw	r28, r24
	
	/* Only transmit buffer TXB0 is used */
	
	/* Loop until TXREQ is cleared */
	uint8_t status = MCP_read_status();
     282:	0e 94 f7 02 	call	0x5ee	; 0x5ee <MCP_read_status>
	uint8_t TXREQ = (status & (1 << 2));
	while (TXREQ) {
     286:	82 ff       	sbrs	r24, 2
     288:	04 c0       	rjmp	.+8      	; 0x292 <CAN_message_send+0x18>
		status = MCP_read_status();
     28a:	0e 94 f7 02 	call	0x5ee	; 0x5ee <MCP_read_status>
	/* Only transmit buffer TXB0 is used */
	
	/* Loop until TXREQ is cleared */
	uint8_t status = MCP_read_status();
	uint8_t TXREQ = (status & (1 << 2));
	while (TXREQ) {
     28e:	82 fd       	sbrc	r24, 2
     290:	fc cf       	rjmp	.-8      	; 0x28a <CAN_message_send+0x10>
		status = MCP_read_status();
		TXREQ = (status & (1 << 2));
	}
	
	/* Set message ID, standard mode*/
	MCP_write(MCP_TXB0CTRL + 1, 0); // High level identifier
     292:	60 e0       	ldi	r22, 0x00	; 0
     294:	81 e3       	ldi	r24, 0x31	; 49
     296:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <MCP_write>
	MCP_write(MCP_TXB0CTRL + 2, (msg->id << 5)); // Low level identifier
     29a:	68 81       	ld	r22, Y
     29c:	62 95       	swap	r22
     29e:	66 0f       	add	r22, r22
     2a0:	60 7e       	andi	r22, 0xE0	; 224
     2a2:	82 e3       	ldi	r24, 0x32	; 50
     2a4:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <MCP_write>
	
	/* Set data length */
	MCP_write(MCP_TXB0CTRL + 5, msg->length & 0x0F);
     2a8:	6a 81       	ldd	r22, Y+2	; 0x02
     2aa:	6f 70       	andi	r22, 0x0F	; 15
     2ac:	85 e3       	ldi	r24, 0x35	; 53
     2ae:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <MCP_write>
	
	/* Load message data */
	for (uint8_t i = 0; i < msg->length; i++) {
     2b2:	8a 81       	ldd	r24, Y+2	; 0x02
     2b4:	88 23       	and	r24, r24
     2b6:	69 f0       	breq	.+26     	; 0x2d2 <CAN_message_send+0x58>
     2b8:	10 e0       	ldi	r17, 0x00	; 0
		MCP_write(MCP_TXB0CTRL + 6 + i, msg->data[i]);
     2ba:	fe 01       	movw	r30, r28
     2bc:	e1 0f       	add	r30, r17
     2be:	f1 1d       	adc	r31, r1
     2c0:	63 81       	ldd	r22, Z+3	; 0x03
     2c2:	86 e3       	ldi	r24, 0x36	; 54
     2c4:	81 0f       	add	r24, r17
     2c6:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <MCP_write>
	
	/* Set data length */
	MCP_write(MCP_TXB0CTRL + 5, msg->length & 0x0F);
	
	/* Load message data */
	for (uint8_t i = 0; i < msg->length; i++) {
     2ca:	1f 5f       	subi	r17, 0xFF	; 255
     2cc:	8a 81       	ldd	r24, Y+2	; 0x02
     2ce:	18 17       	cp	r17, r24
     2d0:	a0 f3       	brcs	.-24     	; 0x2ba <CAN_message_send+0x40>
		MCP_write(MCP_TXB0CTRL + 6 + i, msg->data[i]);
	}
	
	/* Request to send contents of TXB0 */
	MCP_request_to_send(MCP_RTS_TX0);
     2d2:	81 e8       	ldi	r24, 0x81	; 129
     2d4:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <MCP_request_to_send>
}
     2d8:	df 91       	pop	r29
     2da:	cf 91       	pop	r28
     2dc:	1f 91       	pop	r17
     2de:	08 95       	ret

000002e0 <JOYSTICK_init>:
#include "can.h"

void JOYSTICK_init(void)
{
	/* Set PB2 as input for button*/
	DDRB &= ~(1 << PB2);
     2e0:	ba 98       	cbi	0x17, 2	; 23
	PORTB &= (1 << PB2);
     2e2:	88 b3       	in	r24, 0x18	; 24
     2e4:	84 70       	andi	r24, 0x04	; 4
     2e6:	88 bb       	out	0x18, r24	; 24
     2e8:	08 95       	ret

000002ea <toPositionPercent>:
	return NEUTRAL;
}

int16_t toPositionPercent(int16_t value)
{
	value -= 127;
     2ea:	8f 57       	subi	r24, 0x7F	; 127
     2ec:	91 09       	sbc	r25, r1
	int16_t percentValue = round((float)value / 127 * 100);
     2ee:	bc 01       	movw	r22, r24
     2f0:	88 27       	eor	r24, r24
     2f2:	77 fd       	sbrc	r23, 7
     2f4:	80 95       	com	r24
     2f6:	98 2f       	mov	r25, r24
     2f8:	0e 94 32 05 	call	0xa64	; 0xa64 <__floatsisf>
     2fc:	20 e0       	ldi	r18, 0x00	; 0
     2fe:	30 e0       	ldi	r19, 0x00	; 0
     300:	4e ef       	ldi	r20, 0xFE	; 254
     302:	52 e4       	ldi	r21, 0x42	; 66
     304:	0e 94 97 04 	call	0x92e	; 0x92e <__divsf3>
     308:	20 e0       	ldi	r18, 0x00	; 0
     30a:	30 e0       	ldi	r19, 0x00	; 0
     30c:	48 ec       	ldi	r20, 0xC8	; 200
     30e:	52 e4       	ldi	r21, 0x42	; 66
     310:	0e 94 be 05 	call	0xb7c	; 0xb7c <__mulsf3>
     314:	0e 94 21 06 	call	0xc42	; 0xc42 <round>
     318:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__fixsfsi>
	return percentValue;
}
     31c:	cb 01       	movw	r24, r22
     31e:	08 95       	ret

00000320 <JOYSTICK_get_position>:
{
	
}

PositionsType JOYSTICK_get_position(void)
{
     320:	ff 92       	push	r15
     322:	0f 93       	push	r16
     324:	1f 93       	push	r17
     326:	cf 93       	push	r28
     328:	df 93       	push	r29
     32a:	cd b7       	in	r28, 0x3d	; 61
     32c:	de b7       	in	r29, 0x3e	; 62
     32e:	28 97       	sbiw	r28, 0x08	; 8
     330:	0f b6       	in	r0, 0x3f	; 63
     332:	f8 94       	cli
     334:	de bf       	out	0x3e, r29	; 62
     336:	0f be       	out	0x3f, r0	; 63
     338:	cd bf       	out	0x3d, r28	; 61
	int16_t yValue = (int16_t) adc_read(JOYAXIS1);
     33a:	81 e0       	ldi	r24, 0x01	; 1
     33c:	0e 94 15 01 	call	0x22a	; 0x22a <adc_read>
     340:	f8 2e       	mov	r15, r24
	int16_t xValue = (int16_t) adc_read(JOYAXIS2);
     342:	82 e0       	ldi	r24, 0x02	; 2
     344:	0e 94 15 01 	call	0x22a	; 0x22a <adc_read>
	
	int16_t xPosition = toPositionPercent(xValue);
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	0e 94 75 01 	call	0x2ea	; 0x2ea <toPositionPercent>
     34e:	18 2f       	mov	r17, r24
     350:	09 2f       	mov	r16, r25
	int16_t yPosition = toPositionPercent(yValue);
     352:	8f 2d       	mov	r24, r15
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	0e 94 75 01 	call	0x2ea	; 0x2ea <toPositionPercent>
	
	PositionsType pos;
	pos.x = xPosition;
	pos.y = yPosition;
	
	return pos;
     35a:	19 83       	std	Y+1, r17	; 0x01
     35c:	0a 83       	std	Y+2, r16	; 0x02
     35e:	8b 83       	std	Y+3, r24	; 0x03
     360:	9c 83       	std	Y+4, r25	; 0x04
     362:	21 2f       	mov	r18, r17
     364:	30 2f       	mov	r19, r16
     366:	48 2f       	mov	r20, r24
     368:	59 2f       	mov	r21, r25
     36a:	6d 81       	ldd	r22, Y+5	; 0x05
     36c:	7e 81       	ldd	r23, Y+6	; 0x06
}
     36e:	8f 81       	ldd	r24, Y+7	; 0x07
     370:	98 85       	ldd	r25, Y+8	; 0x08
     372:	28 96       	adiw	r28, 0x08	; 8
     374:	0f b6       	in	r0, 0x3f	; 63
     376:	f8 94       	cli
     378:	de bf       	out	0x3e, r29	; 62
     37a:	0f be       	out	0x3f, r0	; 63
     37c:	cd bf       	out	0x3d, r28	; 61
     37e:	df 91       	pop	r29
     380:	cf 91       	pop	r28
     382:	1f 91       	pop	r17
     384:	0f 91       	pop	r16
     386:	ff 90       	pop	r15
     388:	08 95       	ret

0000038a <JOYSTICK_get_direction>:


DirectionType JOYSTICK_get_direction(void)
{
     38a:	cf 93       	push	r28
     38c:	df 93       	push	r29
     38e:	cd b7       	in	r28, 0x3d	; 61
     390:	de b7       	in	r29, 0x3e	; 62
     392:	28 97       	sbiw	r28, 0x08	; 8
     394:	0f b6       	in	r0, 0x3f	; 63
     396:	f8 94       	cli
     398:	de bf       	out	0x3e, r29	; 62
     39a:	0f be       	out	0x3f, r0	; 63
     39c:	cd bf       	out	0x3d, r28	; 61
	PositionsType pos = JOYSTICK_get_position();
     39e:	0e 94 90 01 	call	0x320	; 0x320 <JOYSTICK_get_position>
     3a2:	29 83       	std	Y+1, r18	; 0x01
     3a4:	3a 83       	std	Y+2, r19	; 0x02
     3a6:	4b 83       	std	Y+3, r20	; 0x03
     3a8:	5c 83       	std	Y+4, r21	; 0x04
     3aa:	29 81       	ldd	r18, Y+1	; 0x01
     3ac:	3a 81       	ldd	r19, Y+2	; 0x02
     3ae:	8b 81       	ldd	r24, Y+3	; 0x03
     3b0:	9c 81       	ldd	r25, Y+4	; 0x04
	int8_t THRESHOLD = 25;
	
	if (pos.y < THRESHOLD && pos.y > -THRESHOLD) {
     3b2:	ac 01       	movw	r20, r24
     3b4:	48 5e       	subi	r20, 0xE8	; 232
     3b6:	5f 4f       	sbci	r21, 0xFF	; 255
     3b8:	41 33       	cpi	r20, 0x31	; 49
     3ba:	51 05       	cpc	r21, r1
     3bc:	48 f4       	brcc	.+18     	; 0x3d0 <JOYSTICK_get_direction+0x46>
		
		if (pos.x < -THRESHOLD) {
     3be:	27 3e       	cpi	r18, 0xE7	; 231
     3c0:	8f ef       	ldi	r24, 0xFF	; 255
     3c2:	38 07       	cpc	r19, r24
     3c4:	94 f0       	brlt	.+36     	; 0x3ea <JOYSTICK_get_direction+0x60>
			return LEFT;
		} else if (pos.x > THRESHOLD) {
     3c6:	2a 31       	cpi	r18, 0x1A	; 26
     3c8:	31 05       	cpc	r19, r1
     3ca:	8c f4       	brge	.+34     	; 0x3ee <JOYSTICK_get_direction+0x64>
			return UP;
		}
		
	}
	
	return NEUTRAL;
     3cc:	80 e0       	ldi	r24, 0x00	; 0
     3ce:	16 c0       	rjmp	.+44     	; 0x3fc <JOYSTICK_get_direction+0x72>
			return LEFT;
		} else if (pos.x > THRESHOLD) {
			return RIGHT;
		}
		
	} else if (pos.x < THRESHOLD && pos.x > -THRESHOLD) {
     3d0:	28 5e       	subi	r18, 0xE8	; 232
     3d2:	3f 4f       	sbci	r19, 0xFF	; 255
     3d4:	21 33       	cpi	r18, 0x31	; 49
     3d6:	31 05       	cpc	r19, r1
     3d8:	60 f4       	brcc	.+24     	; 0x3f2 <JOYSTICK_get_direction+0x68>
		
		if (pos.y < -THRESHOLD) {
     3da:	87 3e       	cpi	r24, 0xE7	; 231
     3dc:	2f ef       	ldi	r18, 0xFF	; 255
     3de:	92 07       	cpc	r25, r18
     3e0:	54 f0       	brlt	.+20     	; 0x3f6 <JOYSTICK_get_direction+0x6c>
			return DOWN;
		} else if (pos.y > THRESHOLD) {
     3e2:	4a 97       	sbiw	r24, 0x1a	; 26
     3e4:	54 f4       	brge	.+20     	; 0x3fa <JOYSTICK_get_direction+0x70>
			return UP;
		}
		
	}
	
	return NEUTRAL;
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	09 c0       	rjmp	.+18     	; 0x3fc <JOYSTICK_get_direction+0x72>
	int8_t THRESHOLD = 25;
	
	if (pos.y < THRESHOLD && pos.y > -THRESHOLD) {
		
		if (pos.x < -THRESHOLD) {
			return LEFT;
     3ea:	81 e0       	ldi	r24, 0x01	; 1
     3ec:	07 c0       	rjmp	.+14     	; 0x3fc <JOYSTICK_get_direction+0x72>
		} else if (pos.x > THRESHOLD) {
			return RIGHT;
     3ee:	82 e0       	ldi	r24, 0x02	; 2
     3f0:	05 c0       	rjmp	.+10     	; 0x3fc <JOYSTICK_get_direction+0x72>
			return UP;
		}
		
	}
	
	return NEUTRAL;
     3f2:	80 e0       	ldi	r24, 0x00	; 0
     3f4:	03 c0       	rjmp	.+6      	; 0x3fc <JOYSTICK_get_direction+0x72>
		}
		
	} else if (pos.x < THRESHOLD && pos.x > -THRESHOLD) {
		
		if (pos.y < -THRESHOLD) {
			return DOWN;
     3f6:	84 e0       	ldi	r24, 0x04	; 4
     3f8:	01 c0       	rjmp	.+2      	; 0x3fc <JOYSTICK_get_direction+0x72>
		} else if (pos.y > THRESHOLD) {
			return UP;
     3fa:	83 e0       	ldi	r24, 0x03	; 3
		}
		
	}
	
	return NEUTRAL;
}
     3fc:	28 96       	adiw	r28, 0x08	; 8
     3fe:	0f b6       	in	r0, 0x3f	; 63
     400:	f8 94       	cli
     402:	de bf       	out	0x3e, r29	; 62
     404:	0f be       	out	0x3f, r0	; 63
     406:	cd bf       	out	0x3d, r28	; 61
     408:	df 91       	pop	r29
     40a:	cf 91       	pop	r28
     40c:	08 95       	ret

0000040e <SLIDERS_get_positions>:
	int16_t percentValue = round((float)value / 127 * 100);
	return percentValue;
}

PositionsType SLIDERS_get_positions(void)
{
     40e:	ff 92       	push	r15
     410:	0f 93       	push	r16
     412:	1f 93       	push	r17
     414:	cf 93       	push	r28
     416:	df 93       	push	r29
     418:	cd b7       	in	r28, 0x3d	; 61
     41a:	de b7       	in	r29, 0x3e	; 62
     41c:	28 97       	sbiw	r28, 0x08	; 8
     41e:	0f b6       	in	r0, 0x3f	; 63
     420:	f8 94       	cli
     422:	de bf       	out	0x3e, r29	; 62
     424:	0f be       	out	0x3f, r0	; 63
     426:	cd bf       	out	0x3d, r28	; 61
	int16_t lValue = adc_read(LSLIDER);
     428:	83 e0       	ldi	r24, 0x03	; 3
     42a:	0e 94 15 01 	call	0x22a	; 0x22a <adc_read>
     42e:	18 2f       	mov	r17, r24
	int16_t rValue = adc_read(RSLIDER);
     430:	84 e0       	ldi	r24, 0x04	; 4
     432:	0e 94 15 01 	call	0x22a	; 0x22a <adc_read>
     436:	f8 2e       	mov	r15, r24
     438:	80 e0       	ldi	r24, 0x00	; 0
     43a:	90 ef       	ldi	r25, 0xF0	; 240
     43c:	01 97       	sbiw	r24, 0x01	; 1
     43e:	f1 f7       	brne	.-4      	; 0x43c <SLIDERS_get_positions+0x2e>
	_delay_ms(50);
	
	//printf("%i\n", lValue);
	//printf("%i\n", rValue);
	
	int16_t lPosition = toPositionPercent(lValue);
     440:	81 2f       	mov	r24, r17
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	0e 94 75 01 	call	0x2ea	; 0x2ea <toPositionPercent>
     448:	18 2f       	mov	r17, r24
     44a:	09 2f       	mov	r16, r25
	int16_t rPosition = toPositionPercent(rValue);
     44c:	8f 2d       	mov	r24, r15
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	0e 94 75 01 	call	0x2ea	; 0x2ea <toPositionPercent>
	
	PositionsType pos;
	pos.l = lPosition;
	pos.r = rPosition;
	
	return pos;
     454:	1d 83       	std	Y+5, r17	; 0x05
     456:	0e 83       	std	Y+6, r16	; 0x06
     458:	8f 83       	std	Y+7, r24	; 0x07
     45a:	98 87       	std	Y+8, r25	; 0x08
     45c:	29 81       	ldd	r18, Y+1	; 0x01
     45e:	3a 81       	ldd	r19, Y+2	; 0x02
     460:	4b 81       	ldd	r20, Y+3	; 0x03
     462:	5c 81       	ldd	r21, Y+4	; 0x04
     464:	61 2f       	mov	r22, r17
     466:	70 2f       	mov	r23, r16
}
     468:	28 96       	adiw	r28, 0x08	; 8
     46a:	0f b6       	in	r0, 0x3f	; 63
     46c:	f8 94       	cli
     46e:	de bf       	out	0x3e, r29	; 62
     470:	0f be       	out	0x3f, r0	; 63
     472:	cd bf       	out	0x3d, r28	; 61
     474:	df 91       	pop	r29
     476:	cf 91       	pop	r28
     478:	1f 91       	pop	r17
     47a:	0f 91       	pop	r16
     47c:	ff 90       	pop	r15
     47e:	08 95       	ret

00000480 <JOYSTICK_read_button>:

uint8_t JOYSTICK_read_button(void)
{
	return (PINB & (1 << PB2)) == 0;
     480:	86 b3       	in	r24, 0x16	; 22
     482:	82 fb       	bst	r24, 2
     484:	88 27       	eor	r24, r24
     486:	80 f9       	bld	r24, 0
}
     488:	91 e0       	ldi	r25, 0x01	; 1
     48a:	89 27       	eor	r24, r25
     48c:	08 95       	ret

0000048e <JOYSTICK_send_position>:

/* Sends a message containing position values in percentage for joystick and sliders, and direction
	over the CAN bus.*/
void JOYSTICK_send_position(void)
{
     48e:	1f 93       	push	r17
     490:	cf 93       	push	r28
     492:	df 93       	push	r29
     494:	cd b7       	in	r28, 0x3d	; 61
     496:	de b7       	in	r29, 0x3e	; 62
     498:	6b 97       	sbiw	r28, 0x1b	; 27
     49a:	0f b6       	in	r0, 0x3f	; 63
     49c:	f8 94       	cli
     49e:	de bf       	out	0x3e, r29	; 62
     4a0:	0f be       	out	0x3f, r0	; 63
     4a2:	cd bf       	out	0x3d, r28	; 61
	DirectionType joydir = JOYSTICK_get_direction();
     4a4:	0e 94 c5 01 	call	0x38a	; 0x38a <JOYSTICK_get_direction>
     4a8:	18 2f       	mov	r17, r24
	PositionsType joypos = JOYSTICK_get_position();
     4aa:	0e 94 90 01 	call	0x320	; 0x320 <JOYSTICK_get_position>
     4ae:	29 83       	std	Y+1, r18	; 0x01
     4b0:	4b 83       	std	Y+3, r20	; 0x03
	PositionsType sliderpos = SLIDERS_get_positions();
     4b2:	0e 94 07 02 	call	0x40e	; 0x40e <SLIDERS_get_positions>
	
	can_message_t can_message;
	can_message.data[0] = joydir;
     4b6:	1c 8b       	std	Y+20, r17	; 0x14
	can_message.data[1] = joypos.y;
     4b8:	9b 81       	ldd	r25, Y+3	; 0x03
     4ba:	9d 8b       	std	Y+21, r25	; 0x15
	can_message.data[2] = joypos.x;
     4bc:	99 81       	ldd	r25, Y+1	; 0x01
     4be:	9e 8b       	std	Y+22, r25	; 0x16
	can_message.data[3] = sliderpos.l;
     4c0:	6f 8b       	std	Y+23, r22	; 0x17
	can_message.data[4] = sliderpos.r;
     4c2:	88 8f       	std	Y+24, r24	; 0x18
	can_message.length = 5;
     4c4:	85 e0       	ldi	r24, 0x05	; 5
     4c6:	8b 8b       	std	Y+19, r24	; 0x13
	can_message.id = 1;
     4c8:	81 e0       	ldi	r24, 0x01	; 1
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	9a 8b       	std	Y+18, r25	; 0x12
     4ce:	89 8b       	std	Y+17, r24	; 0x11
	
	CAN_message_send(&can_message);
     4d0:	ce 01       	movw	r24, r28
     4d2:	41 96       	adiw	r24, 0x11	; 17
     4d4:	0e 94 3d 01 	call	0x27a	; 0x27a <CAN_message_send>
     4d8:	6b 96       	adiw	r28, 0x1b	; 27
     4da:	0f b6       	in	r0, 0x3f	; 63
     4dc:	f8 94       	cli
     4de:	de bf       	out	0x3e, r29	; 62
     4e0:	0f be       	out	0x3f, r0	; 63
     4e2:	cd bf       	out	0x3d, r28	; 61
     4e4:	df 91       	pop	r29
     4e6:	cf 91       	pop	r28
     4e8:	1f 91       	pop	r17
     4ea:	08 95       	ret

000004ec <main>:


int main(void)
{
	/* Needs to be set when using external memory */
	MCUCR |= (1 << SRE);
     4ec:	85 b7       	in	r24, 0x35	; 53
     4ee:	80 68       	ori	r24, 0x80	; 128
     4f0:	85 bf       	out	0x35, r24	; 53

	fdevopen(USART_transmit, USART_receive);
     4f2:	63 e9       	ldi	r22, 0x93	; 147
     4f4:	74 e0       	ldi	r23, 0x04	; 4
     4f6:	8f e8       	ldi	r24, 0x8F	; 143
     4f8:	94 e0       	ldi	r25, 0x04	; 4
     4fa:	0e 94 91 07 	call	0xf22	; 0xf22 <fdevopen>
	USART_init(MYUBBR);
     4fe:	8f e1       	ldi	r24, 0x1F	; 31
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	0e 94 88 04 	call	0x910	; 0x910 <USART_init>
	OLED_init();
     506:	0e 94 66 03 	call	0x6cc	; 0x6cc <OLED_init>
	JOYSTICK_init();
     50a:	0e 94 70 01 	call	0x2e0	; 0x2e0 <JOYSTICK_init>
	CAN_init();
     50e:	0e 94 3a 01 	call	0x274	; 0x274 <CAN_init>
	
	OLED_reset();
     512:	0e 94 58 03 	call	0x6b0	; 0x6b0 <OLED_reset>
	OLED_pos(2,20);
     516:	64 e1       	ldi	r22, 0x14	; 20
     518:	82 e0       	ldi	r24, 0x02	; 2
     51a:	0e 94 4b 03 	call	0x696	; 0x696 <OLED_pos>
	
	menuNode *menu = OLED_generate_menu();
     51e:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <OLED_generate_menu>
	OLED_print_menu(menu);
     522:	0e 94 3f 04 	call	0x87e	; 0x87e <OLED_print_menu>
	DirectionType joydir = NEUTRAL;
	uint8_t buttonPressed = 0;
	
	/* MCP TEST */
	
	uint8_t status = MCP_read(MCP_CANCTRL);
     526:	8f e0       	ldi	r24, 0x0F	; 15
     528:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <MCP_read>
	//printf("CANCTRL: %02x\n", status);
	
	uint8_t RXB0CTRL = MCP_read(MCP_RXB0CTRL);
     52c:	80 e6       	ldi	r24, 0x60	; 96
     52e:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <MCP_read>
	//printf("RXB0CTRL: %02x\n", RXB0CTRL);
	
	printf("\n");
     532:	8a e0       	ldi	r24, 0x0A	; 10
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <putchar>
	OLED_pos(2,20);
	
	menuNode *menu = OLED_generate_menu();
	OLED_print_menu(menu);
	
	uint8_t currentRow = 1;
     53a:	c1 e0       	ldi	r28, 0x01	; 1
				currentRow -= 1;
			}
			
		} else if (joydir == DOWN) {
			if (currentRow == 7) {
				currentRow = 1;
     53c:	01 e0       	ldi	r16, 0x01	; 1
		joydir = JOYSTICK_get_direction();
		
		lastRow = currentRow;
		if (joydir == UP) {
			if (currentRow == 1) {
				currentRow = 7;
     53e:	17 e0       	ldi	r17, 0x07	; 7
	can_message.id = 2;
	
	while(1)
	{	
		//CAN_message_send(&can_message);
		JOYSTICK_send_position();
     540:	0e 94 47 02 	call	0x48e	; 0x48e <JOYSTICK_send_position>
     544:	2f ef       	ldi	r18, 0xFF	; 255
     546:	8f e7       	ldi	r24, 0x7F	; 127
     548:	97 e0       	ldi	r25, 0x07	; 7
     54a:	21 50       	subi	r18, 0x01	; 1
     54c:	80 40       	sbci	r24, 0x00	; 0
     54e:	90 40       	sbci	r25, 0x00	; 0
     550:	e1 f7       	brne	.-8      	; 0x54a <__stack+0x4b>
     552:	00 c0       	rjmp	.+0      	; 0x554 <__stack+0x55>
     554:	00 00       	nop
		
		/* CAN test end */
		_delay_ms(500);
		
		/* Create seperate function for this */
		joydir = JOYSTICK_get_direction();
     556:	0e 94 c5 01 	call	0x38a	; 0x38a <JOYSTICK_get_direction>
		
		lastRow = currentRow;
		if (joydir == UP) {
     55a:	83 30       	cpi	r24, 0x03	; 3
     55c:	29 f4       	brne	.+10     	; 0x568 <__stack+0x69>
			if (currentRow == 1) {
     55e:	c1 30       	cpi	r28, 0x01	; 1
     560:	51 f0       	breq	.+20     	; 0x576 <__stack+0x77>
				currentRow = 7;
			} else {
				currentRow -= 1;
     562:	df ef       	ldi	r29, 0xFF	; 255
     564:	dc 0f       	add	r29, r28
     566:	0c c0       	rjmp	.+24     	; 0x580 <__stack+0x81>
			}
			
		} else if (joydir == DOWN) {
     568:	84 30       	cpi	r24, 0x04	; 4
     56a:	39 f4       	brne	.+14     	; 0x57a <__stack+0x7b>
			if (currentRow == 7) {
     56c:	c7 30       	cpi	r28, 0x07	; 7
     56e:	39 f0       	breq	.+14     	; 0x57e <__stack+0x7f>
				currentRow = 1;
			} else {
				currentRow += 1;
     570:	d1 e0       	ldi	r29, 0x01	; 1
     572:	dc 0f       	add	r29, r28
     574:	05 c0       	rjmp	.+10     	; 0x580 <__stack+0x81>
		joydir = JOYSTICK_get_direction();
		
		lastRow = currentRow;
		if (joydir == UP) {
			if (currentRow == 1) {
				currentRow = 7;
     576:	d1 2f       	mov	r29, r17
     578:	03 c0       	rjmp	.+6      	; 0x580 <__stack+0x81>
     57a:	dc 2f       	mov	r29, r28
     57c:	01 c0       	rjmp	.+2      	; 0x580 <__stack+0x81>
				currentRow -= 1;
			}
			
		} else if (joydir == DOWN) {
			if (currentRow == 7) {
				currentRow = 1;
     57e:	d0 2f       	mov	r29, r16
			} else {
				currentRow += 1;
			}
		}
		
		OLED_move_arrow(currentRow, 20, lastRow, 20);
     580:	24 e1       	ldi	r18, 0x14	; 20
     582:	4c 2f       	mov	r20, r28
     584:	64 e1       	ldi	r22, 0x14	; 20
     586:	8d 2f       	mov	r24, r29
     588:	0e 94 d6 03 	call	0x7ac	; 0x7ac <OLED_move_arrow>
		buttonPressed = JOYSTICK_read_button();
     58c:	0e 94 40 02 	call	0x480	; 0x480 <JOYSTICK_read_button>
     590:	cd 2f       	mov	r28, r29
     592:	d6 cf       	rjmp	.-84     	; 0x540 <__stack+0x41>

00000594 <MCP_reset>:
	MCP_set_mode(MODE_NORMAL); // Sets normal operation mode
}

void MCP_reset(void)
{
	PORTB &= ~(1 << PB4);
     594:	c4 98       	cbi	0x18, 4	; 24
	SPI_master_transmit(MCP_RESET);
     596:	80 ec       	ldi	r24, 0xC0	; 192
     598:	0e 94 84 04 	call	0x908	; 0x908 <SPI_master_transmit>
	PORTB |= (1 << PB4);
     59c:	c4 9a       	sbi	0x18, 4	; 24
     59e:	08 95       	ret

000005a0 <MCP_read>:
}

/* Returns the content of a register */
uint8_t MCP_read(uint8_t addr)
{
     5a0:	cf 93       	push	r28
     5a2:	c8 2f       	mov	r28, r24
	PORTB &= ~(1 << PB4);
     5a4:	c4 98       	cbi	0x18, 4	; 24
	SPI_master_transmit(MCP_READ);
     5a6:	83 e0       	ldi	r24, 0x03	; 3
     5a8:	0e 94 84 04 	call	0x908	; 0x908 <SPI_master_transmit>
	SPI_master_transmit(addr);
     5ac:	8c 2f       	mov	r24, r28
     5ae:	0e 94 84 04 	call	0x908	; 0x908 <SPI_master_transmit>
	SPI_master_transmit(0x00);
     5b2:	80 e0       	ldi	r24, 0x00	; 0
     5b4:	0e 94 84 04 	call	0x908	; 0x908 <SPI_master_transmit>
	char data = SPDR;
     5b8:	8f b1       	in	r24, 0x0f	; 15
	PORTB |= (1 << PB4);
     5ba:	c4 9a       	sbi	0x18, 4	; 24
	return data;
}
     5bc:	cf 91       	pop	r28
     5be:	08 95       	ret

000005c0 <MCP_write>:

void MCP_write(uint8_t addr, uint8_t data)
{
     5c0:	cf 93       	push	r28
     5c2:	df 93       	push	r29
     5c4:	d8 2f       	mov	r29, r24
     5c6:	c6 2f       	mov	r28, r22
	PORTB &= ~(1 << PB4);
     5c8:	c4 98       	cbi	0x18, 4	; 24
	SPI_master_transmit(MCP_WRITE);
     5ca:	82 e0       	ldi	r24, 0x02	; 2
     5cc:	0e 94 84 04 	call	0x908	; 0x908 <SPI_master_transmit>
	SPI_master_transmit(addr);
     5d0:	8d 2f       	mov	r24, r29
     5d2:	0e 94 84 04 	call	0x908	; 0x908 <SPI_master_transmit>
	SPI_master_transmit(data);
     5d6:	8c 2f       	mov	r24, r28
     5d8:	0e 94 84 04 	call	0x908	; 0x908 <SPI_master_transmit>
	PORTB |= (1 << PB4);
     5dc:	c4 9a       	sbi	0x18, 4	; 24
}
     5de:	df 91       	pop	r29
     5e0:	cf 91       	pop	r28
     5e2:	08 95       	ret

000005e4 <MCP_request_to_send>:
}

/* Instructs controller to begin message transmission for the selected buffers */
void MCP_request_to_send(uint8_t buffer)
{
	PORTB &= ~(1 << PB4);
     5e4:	c4 98       	cbi	0x18, 4	; 24
	SPI_master_transmit(buffer);
     5e6:	0e 94 84 04 	call	0x908	; 0x908 <SPI_master_transmit>
	PORTB |= (1 << PB4);
     5ea:	c4 9a       	sbi	0x18, 4	; 24
     5ec:	08 95       	ret

000005ee <MCP_read_status>:
}

/* Returns some status bits for transmit and receive functions */
uint8_t MCP_read_status(void)
{
	PORTB &= ~(1 << PB4);
     5ee:	c4 98       	cbi	0x18, 4	; 24
	SPI_master_transmit(MCP_READ_STATUS);
     5f0:	80 ea       	ldi	r24, 0xA0	; 160
     5f2:	0e 94 84 04 	call	0x908	; 0x908 <SPI_master_transmit>
	SPI_master_transmit(0x00); // Unneccessary because of "repeat data out"?
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	0e 94 84 04 	call	0x908	; 0x908 <SPI_master_transmit>
	char status = SPDR;
     5fc:	8f b1       	in	r24, 0x0f	; 15
	PORTB |= (1 << PB4);
     5fe:	c4 9a       	sbi	0x18, 4	; 24
	return status;
}
     600:	08 95       	ret

00000602 <MCP_modify_bit>:
	MCP_modify_bit(MCP_CANCTRL, mask, mode);
}

/* Changes the value of the register bits specified by the mask */
void MCP_modify_bit(uint8_t addr, uint8_t mask, uint8_t data)
{
     602:	1f 93       	push	r17
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
     608:	18 2f       	mov	r17, r24
     60a:	d6 2f       	mov	r29, r22
     60c:	c4 2f       	mov	r28, r20
	PORTB &= ~(1 << PB4);
     60e:	c4 98       	cbi	0x18, 4	; 24
	SPI_master_transmit(MCP_BITMOD);
     610:	85 e0       	ldi	r24, 0x05	; 5
     612:	0e 94 84 04 	call	0x908	; 0x908 <SPI_master_transmit>
	SPI_master_transmit(addr);
     616:	81 2f       	mov	r24, r17
     618:	0e 94 84 04 	call	0x908	; 0x908 <SPI_master_transmit>
	SPI_master_transmit(mask);
     61c:	8d 2f       	mov	r24, r29
     61e:	0e 94 84 04 	call	0x908	; 0x908 <SPI_master_transmit>
	SPI_master_transmit(data);
     622:	8c 2f       	mov	r24, r28
     624:	0e 94 84 04 	call	0x908	; 0x908 <SPI_master_transmit>
	PORTB |= (1 << PB4);
     628:	c4 9a       	sbi	0x18, 4	; 24
     62a:	df 91       	pop	r29
     62c:	cf 91       	pop	r28
     62e:	1f 91       	pop	r17
     630:	08 95       	ret

00000632 <MCP_set_mode>:
			break;
		default:
			break;
	}
	
	MCP_modify_bit(MCP_CANCTRL, mask, mode);
     632:	48 2f       	mov	r20, r24
     634:	60 ee       	ldi	r22, 0xE0	; 224
     636:	8f e0       	ldi	r24, 0x0F	; 15
     638:	0e 94 01 03 	call	0x602	; 0x602 <MCP_modify_bit>
     63c:	08 95       	ret

0000063e <MCP_init>:
#include "MCP2515.h"
#include "mcp.h"

void MCP_init(void)
{
	SPI_master_init();
     63e:	0e 94 7f 04 	call	0x8fe	; 0x8fe <SPI_master_init>
	MCP_reset();
     642:	0e 94 ca 02 	call	0x594	; 0x594 <MCP_reset>
	
	MCP_modify_bit(MCP_RXB0CTRL, 0b01100000, 0xFF); // Turns masks/filters off for RX0
     646:	4f ef       	ldi	r20, 0xFF	; 255
     648:	60 e6       	ldi	r22, 0x60	; 96
     64a:	80 e6       	ldi	r24, 0x60	; 96
     64c:	0e 94 01 03 	call	0x602	; 0x602 <MCP_modify_bit>
	MCP_modify_bit(MCP_RXB1CTRL, 0b01100000, 0xFF); // Turns masks/filters off for RX1
     650:	4f ef       	ldi	r20, 0xFF	; 255
     652:	60 e6       	ldi	r22, 0x60	; 96
     654:	80 e7       	ldi	r24, 0x70	; 112
     656:	0e 94 01 03 	call	0x602	; 0x602 <MCP_modify_bit>
	//MCP_set_mode(MODE_LOOPBACK); // Sets loopback operation mode for testing
	MCP_set_mode(MODE_NORMAL); // Sets normal operation mode
     65a:	80 e0       	ldi	r24, 0x00	; 0
     65c:	0e 94 19 03 	call	0x632	; 0x632 <MCP_set_mode>
     660:	08 95       	ret

00000662 <OLED_goto_line>:
}

void OLED_write_c(char chr)
{
	volatile char *oled = (char *) 0x1000;
	oled[0] = chr;
     662:	e0 e0       	ldi	r30, 0x00	; 0
     664:	f0 e1       	ldi	r31, 0x10	; 16
     666:	92 e2       	ldi	r25, 0x22	; 34
     668:	90 83       	st	Z, r25
     66a:	80 83       	st	Z, r24
     66c:	87 e0       	ldi	r24, 0x07	; 7
     66e:	80 83       	st	Z, r24
     670:	08 95       	ret

00000672 <OLED_clear_line>:
	OLED_write_c(0x07);
}

void OLED_clear_line(uint8_t line)
{
	OLED_goto_line(line);
     672:	0e 94 31 03 	call	0x662	; 0x662 <OLED_goto_line>
}

void OLED_write_c(char chr)
{
	volatile char *oled = (char *) 0x1000;
	oled[0] = chr;
     676:	e0 e0       	ldi	r30, 0x00	; 0
     678:	f0 e1       	ldi	r31, 0x10	; 16
     67a:	81 e2       	ldi	r24, 0x21	; 33
     67c:	80 83       	st	Z, r24
     67e:	10 82       	st	Z, r1
     680:	8f e7       	ldi	r24, 0x7F	; 127
     682:	80 83       	st	Z, r24
     684:	80 e8       	ldi	r24, 0x80	; 128
     686:	90 e0       	ldi	r25, 0x00	; 0
}

void OLED_write_d(char chr)
{
	volatile char *oled = (char *) 0x1200;
	oled[0] = chr;
     688:	e0 e0       	ldi	r30, 0x00	; 0
     68a:	f2 e1       	ldi	r31, 0x12	; 18
     68c:	10 82       	st	Z, r1
     68e:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_c(0x21);
	OLED_write_c(0x00);
	OLED_write_c(0x7F);

	/* Write zeros to line */
	for (int i = 0; i < 128; i++) {
     690:	00 97       	sbiw	r24, 0x00	; 0
     692:	e1 f7       	brne	.-8      	; 0x68c <OLED_clear_line+0x1a>
		OLED_write_d(0x00);
	}
}
     694:	08 95       	ret

00000696 <OLED_pos>:
}

void OLED_write_c(char chr)
{
	volatile char *oled = (char *) 0x1000;
	oled[0] = chr;
     696:	e0 e0       	ldi	r30, 0x00	; 0
     698:	f0 e1       	ldi	r31, 0x10	; 16
     69a:	92 e2       	ldi	r25, 0x22	; 34
     69c:	90 83       	st	Z, r25
     69e:	80 83       	st	Z, r24
     6a0:	87 e0       	ldi	r24, 0x07	; 7
     6a2:	80 83       	st	Z, r24
     6a4:	81 e2       	ldi	r24, 0x21	; 33
     6a6:	80 83       	st	Z, r24
     6a8:	60 83       	st	Z, r22
     6aa:	8f e7       	ldi	r24, 0x7F	; 127
     6ac:	80 83       	st	Z, r24
     6ae:	08 95       	ret

000006b0 <OLED_reset>:
	OLED_write_c(column);
	OLED_write_c(0x7F);
}

void OLED_reset(void)
{
     6b0:	cf 93       	push	r28
	for (uint8_t i = 0; i < 8; i++) {
     6b2:	c0 e0       	ldi	r28, 0x00	; 0
		OLED_clear_line(i);
     6b4:	8c 2f       	mov	r24, r28
     6b6:	0e 94 39 03 	call	0x672	; 0x672 <OLED_clear_line>
	OLED_write_c(0x7F);
}

void OLED_reset(void)
{
	for (uint8_t i = 0; i < 8; i++) {
     6ba:	cf 5f       	subi	r28, 0xFF	; 255
     6bc:	c8 30       	cpi	r28, 0x08	; 8
     6be:	d1 f7       	brne	.-12     	; 0x6b4 <OLED_reset+0x4>
		OLED_clear_line(i);
	}
	OLED_pos(0,0);
     6c0:	60 e0       	ldi	r22, 0x00	; 0
     6c2:	80 e0       	ldi	r24, 0x00	; 0
     6c4:	0e 94 4b 03 	call	0x696	; 0x696 <OLED_pos>

	// Redraw from SRAM?
}
     6c8:	cf 91       	pop	r28
     6ca:	08 95       	ret

000006cc <OLED_init>:
}

void OLED_write_c(char chr)
{
	volatile char *oled = (char *) 0x1000;
	oled[0] = chr;
     6cc:	e0 e0       	ldi	r30, 0x00	; 0
     6ce:	f0 e1       	ldi	r31, 0x10	; 16
     6d0:	8e ea       	ldi	r24, 0xAE	; 174
     6d2:	80 83       	st	Z, r24
     6d4:	81 ea       	ldi	r24, 0xA1	; 161
     6d6:	80 83       	st	Z, r24
     6d8:	8a ed       	ldi	r24, 0xDA	; 218
     6da:	80 83       	st	Z, r24
     6dc:	82 e1       	ldi	r24, 0x12	; 18
     6de:	80 83       	st	Z, r24
     6e0:	88 ec       	ldi	r24, 0xC8	; 200
     6e2:	80 83       	st	Z, r24
     6e4:	88 ea       	ldi	r24, 0xA8	; 168
     6e6:	80 83       	st	Z, r24
     6e8:	8f e3       	ldi	r24, 0x3F	; 63
     6ea:	80 83       	st	Z, r24
     6ec:	85 ed       	ldi	r24, 0xD5	; 213
     6ee:	80 83       	st	Z, r24
     6f0:	80 e8       	ldi	r24, 0x80	; 128
     6f2:	80 83       	st	Z, r24
     6f4:	81 e8       	ldi	r24, 0x81	; 129
     6f6:	80 83       	st	Z, r24
     6f8:	80 e5       	ldi	r24, 0x50	; 80
     6fa:	80 83       	st	Z, r24
     6fc:	89 ed       	ldi	r24, 0xD9	; 217
     6fe:	80 83       	st	Z, r24
     700:	81 e2       	ldi	r24, 0x21	; 33
     702:	80 83       	st	Z, r24
     704:	80 e2       	ldi	r24, 0x20	; 32
     706:	80 83       	st	Z, r24
     708:	10 82       	st	Z, r1
     70a:	8b ed       	ldi	r24, 0xDB	; 219
     70c:	80 83       	st	Z, r24
     70e:	80 e3       	ldi	r24, 0x30	; 48
     710:	80 83       	st	Z, r24
     712:	8d ea       	ldi	r24, 0xAD	; 173
     714:	80 83       	st	Z, r24
     716:	10 82       	st	Z, r1
     718:	84 ea       	ldi	r24, 0xA4	; 164
     71a:	80 83       	st	Z, r24
     71c:	86 ea       	ldi	r24, 0xA6	; 166
     71e:	80 83       	st	Z, r24
     720:	8f ea       	ldi	r24, 0xAF	; 175
     722:	80 83       	st	Z, r24
     724:	80 e0       	ldi	r24, 0x00	; 0
     726:	92 e0       	ldi	r25, 0x02	; 2
}

void OLED_write_d(char chr)
{
	volatile char *oled = (char *) 0x1200;
	oled[0] = chr;
     728:	e0 e0       	ldi	r30, 0x00	; 0
     72a:	f2 e1       	ldi	r31, 0x12	; 18
     72c:	2f ef       	ldi	r18, 0xFF	; 255
     72e:	20 83       	st	Z, r18
     730:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_c(0x00);
	OLED_write_c(0xa4); //out follows RAM content
	OLED_write_c(0xa6); //set normal display
	OLED_write_c(0xaf); // display on
	
	for (int i = 0; i < 512; i++)
     732:	00 97       	sbiw	r24, 0x00	; 0
     734:	e1 f7       	brne	.-8      	; 0x72e <OLED_init+0x62>
	{
		OLED_write_d(0xFF);
	}
	
	OLED_reset();
     736:	0e 94 58 03 	call	0x6b0	; 0x6b0 <OLED_reset>
     73a:	08 95       	ret

0000073c <OLED_print_string>:

	// Redraw from SRAM?
}

void OLED_print_string(char* str)
{
     73c:	cf 93       	push	r28
     73e:	df 93       	push	r29
	uint8_t c;
	uint8_t font_width = 4; // Use sizeof array here
	uint8_t i = 0;
	while (str[i] != '\0') {
     740:	fc 01       	movw	r30, r24
     742:	20 81       	ld	r18, Z
     744:	22 23       	and	r18, r18
     746:	11 f1       	breq	.+68     	; 0x78c <OLED_print_string+0x50>
     748:	dc 01       	movw	r26, r24

void OLED_print_string(char* str)
{
	uint8_t c;
	uint8_t font_width = 4; // Use sizeof array here
	uint8_t i = 0;
     74a:	40 e0       	ldi	r20, 0x00	; 0

	// Redraw from SRAM?
}

void OLED_print_string(char* str)
{
     74c:	60 e0       	ldi	r22, 0x00	; 0
     74e:	50 e0       	ldi	r21, 0x00	; 0
}

void OLED_write_d(char chr)
{
	volatile char *oled = (char *) 0x1200;
	oled[0] = chr;
     750:	c0 e0       	ldi	r28, 0x00	; 0
     752:	d2 e1       	ldi	r29, 0x12	; 18
     754:	18 c0       	rjmp	.+48     	; 0x786 <OLED_print_string+0x4a>
	uint8_t c;
	uint8_t font_width = 4; // Use sizeof array here
	uint8_t i = 0;
	while (str[i] != '\0') {
		for (uint8_t j = 0; j < font_width; j++) {
			c = pgm_read_byte_near(font[str[i]-32] + j);
     756:	ec 91       	ld	r30, X
     758:	f0 e0       	ldi	r31, 0x00	; 0
     75a:	ee 0f       	add	r30, r30
     75c:	ff 1f       	adc	r31, r31
     75e:	ee 0f       	add	r30, r30
     760:	ff 1f       	adc	r31, r31
     762:	e0 51       	subi	r30, 0x10	; 16
     764:	f0 40       	sbci	r31, 0x00	; 0
     766:	e2 0f       	add	r30, r18
     768:	f3 1f       	adc	r31, r19
     76a:	e4 91       	lpm	r30, Z
}

void OLED_write_d(char chr)
{
	volatile char *oled = (char *) 0x1200;
	oled[0] = chr;
     76c:	e8 83       	st	Y, r30
     76e:	2f 5f       	subi	r18, 0xFF	; 255
     770:	3f 4f       	sbci	r19, 0xFF	; 255
{
	uint8_t c;
	uint8_t font_width = 4; // Use sizeof array here
	uint8_t i = 0;
	while (str[i] != '\0') {
		for (uint8_t j = 0; j < font_width; j++) {
     772:	24 30       	cpi	r18, 0x04	; 4
     774:	31 05       	cpc	r19, r1
     776:	79 f7       	brne	.-34     	; 0x756 <OLED_print_string+0x1a>
			c = pgm_read_byte_near(font[str[i]-32] + j);
			OLED_write_d(c);
		}
		i++;
     778:	4f 5f       	subi	r20, 0xFF	; 255
void OLED_print_string(char* str)
{
	uint8_t c;
	uint8_t font_width = 4; // Use sizeof array here
	uint8_t i = 0;
	while (str[i] != '\0') {
     77a:	dc 01       	movw	r26, r24
     77c:	a4 0f       	add	r26, r20
     77e:	b1 1d       	adc	r27, r1
     780:	2c 91       	ld	r18, X
     782:	22 23       	and	r18, r18
     784:	19 f0       	breq	.+6      	; 0x78c <OLED_print_string+0x50>

	// Redraw from SRAM?
}

void OLED_print_string(char* str)
{
     786:	26 2f       	mov	r18, r22
     788:	35 2f       	mov	r19, r21
     78a:	e5 cf       	rjmp	.-54     	; 0x756 <OLED_print_string+0x1a>
			c = pgm_read_byte_near(font[str[i]-32] + j);
			OLED_write_d(c);
		}
		i++;
	}
}
     78c:	df 91       	pop	r29
     78e:	cf 91       	pop	r28
     790:	08 95       	ret

00000792 <OLED_print_arrow>:

void OLED_print_arrow(uint8_t row, uint8_t col)
{
	OLED_pos(row, col);
     792:	0e 94 4b 03 	call	0x696	; 0x696 <OLED_pos>
}

void OLED_write_d(char chr)
{
	volatile char *oled = (char *) 0x1200;
	oled[0] = chr;
     796:	e0 e0       	ldi	r30, 0x00	; 0
     798:	f2 e1       	ldi	r31, 0x12	; 18
     79a:	88 e1       	ldi	r24, 0x18	; 24
     79c:	80 83       	st	Z, r24
     79e:	80 83       	st	Z, r24
     7a0:	9e e7       	ldi	r25, 0x7E	; 126
     7a2:	90 83       	st	Z, r25
     7a4:	9c e3       	ldi	r25, 0x3C	; 60
     7a6:	90 83       	st	Z, r25
     7a8:	80 83       	st	Z, r24
     7aa:	08 95       	ret

000007ac <OLED_move_arrow>:
	OLED_write_d(0b00111100);
	OLED_write_d(0b00011000);
}

void OLED_move_arrow(uint8_t newRow, uint8_t newCol, uint8_t currentRow, uint8_t currentCol)
{
     7ac:	cf 93       	push	r28
     7ae:	df 93       	push	r29
     7b0:	c8 2f       	mov	r28, r24
     7b2:	d6 2f       	mov	r29, r22
     7b4:	84 2f       	mov	r24, r20
	OLED_pos(currentRow, currentCol);
     7b6:	62 2f       	mov	r22, r18
     7b8:	0e 94 4b 03 	call	0x696	; 0x696 <OLED_pos>
}

void OLED_write_d(char chr)
{
	volatile char *oled = (char *) 0x1200;
	oled[0] = chr;
     7bc:	e0 e0       	ldi	r30, 0x00	; 0
     7be:	f2 e1       	ldi	r31, 0x12	; 18
     7c0:	10 82       	st	Z, r1
     7c2:	10 82       	st	Z, r1
     7c4:	10 82       	st	Z, r1
     7c6:	10 82       	st	Z, r1
     7c8:	10 82       	st	Z, r1
	OLED_write_d(0b00000000);
	OLED_write_d(0b00000000);
	OLED_write_d(0b00000000);
	OLED_write_d(0b00000000);
	
	OLED_print_arrow(newRow, newCol);
     7ca:	6d 2f       	mov	r22, r29
     7cc:	8c 2f       	mov	r24, r28
     7ce:	0e 94 c9 03 	call	0x792	; 0x792 <OLED_print_arrow>
}
     7d2:	df 91       	pop	r29
     7d4:	cf 91       	pop	r28
     7d6:	08 95       	ret

000007d8 <OLED_create_node>:


menuNode *OLED_create_node(char* name, menuNode* parent)
{
     7d8:	cf 93       	push	r28
     7da:	df 93       	push	r29
     7dc:	ec 01       	movw	r28, r24
	menuNode* ret = (menuNode*) malloc(sizeof(menuNode));
     7de:	84 e1       	ldi	r24, 0x14	; 20
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <malloc>
	ret->name = name;
     7e6:	fc 01       	movw	r30, r24
     7e8:	d1 83       	std	Z+1, r29	; 0x01
     7ea:	c0 83       	st	Z, r28
	ret->parent = NULL;
     7ec:	13 82       	std	Z+3, r1	; 0x03
     7ee:	12 82       	std	Z+2, r1	; 0x02
	return ret;
}
     7f0:	df 91       	pop	r29
     7f2:	cf 91       	pop	r28
     7f4:	08 95       	ret

000007f6 <OLED_generate_menu>:

// Implement function for freeing memory

menuNode *OLED_generate_menu(void)
{	
     7f6:	af 92       	push	r10
     7f8:	bf 92       	push	r11
     7fa:	cf 92       	push	r12
     7fc:	df 92       	push	r13
     7fe:	ef 92       	push	r14
     800:	ff 92       	push	r15
     802:	0f 93       	push	r16
     804:	1f 93       	push	r17
     806:	cf 93       	push	r28
     808:	df 93       	push	r29
	menuNode *mainmenu = OLED_create_node("MAIN MENU", NULL);
     80a:	60 e0       	ldi	r22, 0x00	; 0
     80c:	70 e0       	ldi	r23, 0x00	; 0
     80e:	86 e0       	ldi	r24, 0x06	; 6
     810:	91 e0       	ldi	r25, 0x01	; 1
     812:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <OLED_create_node>
     816:	ec 01       	movw	r28, r24
	menuNode *highscores = OLED_create_node("Highscores", mainmenu);
     818:	bc 01       	movw	r22, r24
     81a:	80 e1       	ldi	r24, 0x10	; 16
     81c:	91 e0       	ldi	r25, 0x01	; 1
     81e:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <OLED_create_node>
     822:	6c 01       	movw	r12, r24
	menuNode *playgame = OLED_create_node("Start new game", mainmenu);
     824:	be 01       	movw	r22, r28
     826:	8b e1       	ldi	r24, 0x1B	; 27
     828:	91 e0       	ldi	r25, 0x01	; 1
     82a:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <OLED_create_node>
     82e:	5c 01       	movw	r10, r24
	menuNode *debugging = OLED_create_node("Debugging", mainmenu);
     830:	be 01       	movw	r22, r28
     832:	8a e2       	ldi	r24, 0x2A	; 42
     834:	91 e0       	ldi	r25, 0x01	; 1
     836:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <OLED_create_node>
     83a:	8c 01       	movw	r16, r24
	menuNode *calibrate = OLED_create_node("Calibrate", mainmenu);
     83c:	be 01       	movw	r22, r28
     83e:	84 e3       	ldi	r24, 0x34	; 52
     840:	91 e0       	ldi	r25, 0x01	; 1
     842:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <OLED_create_node>
     846:	7c 01       	movw	r14, r24
	menuNode *difficulty = OLED_create_node("Difficulty", mainmenu);
     848:	be 01       	movw	r22, r28
     84a:	8e e3       	ldi	r24, 0x3E	; 62
     84c:	91 e0       	ldi	r25, 0x01	; 1
     84e:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <OLED_create_node>
	calibrate->parent = mainmenu;
	difficulty->parent = mainmenu;
	debugging->parent = mainmenu;
	*/
	
	mainmenu->children[1] = playgame;
     852:	bf 82       	std	Y+7, r11	; 0x07
     854:	ae 82       	std	Y+6, r10	; 0x06
	mainmenu->children[2] = highscores;
     856:	d9 86       	std	Y+9, r13	; 0x09
     858:	c8 86       	std	Y+8, r12	; 0x08
	mainmenu->children[3] = difficulty;
     85a:	9b 87       	std	Y+11, r25	; 0x0b
     85c:	8a 87       	std	Y+10, r24	; 0x0a
	mainmenu->children[4] = calibrate;
     85e:	fd 86       	std	Y+13, r15	; 0x0d
     860:	ec 86       	std	Y+12, r14	; 0x0c
	mainmenu->children[5] = debugging;
     862:	1f 87       	std	Y+15, r17	; 0x0f
     864:	0e 87       	std	Y+14, r16	; 0x0e
	
	return mainmenu;
}
     866:	ce 01       	movw	r24, r28
     868:	df 91       	pop	r29
     86a:	cf 91       	pop	r28
     86c:	1f 91       	pop	r17
     86e:	0f 91       	pop	r16
     870:	ff 90       	pop	r15
     872:	ef 90       	pop	r14
     874:	df 90       	pop	r13
     876:	cf 90       	pop	r12
     878:	bf 90       	pop	r11
     87a:	af 90       	pop	r10
     87c:	08 95       	ret

0000087e <OLED_print_menu>:

void OLED_print_menu(menuNode *node)
{
     87e:	cf 93       	push	r28
     880:	df 93       	push	r29
     882:	ec 01       	movw	r28, r24
	OLED_pos(0,50);
     884:	62 e3       	ldi	r22, 0x32	; 50
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	0e 94 4b 03 	call	0x696	; 0x696 <OLED_pos>
	OLED_print_string(node->name);
     88c:	88 81       	ld	r24, Y
     88e:	99 81       	ldd	r25, Y+1	; 0x01
     890:	0e 94 9e 03 	call	0x73c	; 0x73c <OLED_print_string>
	//printf("%s\n", node->name);
	OLED_pos(1,50);
     894:	62 e3       	ldi	r22, 0x32	; 50
     896:	81 e0       	ldi	r24, 0x01	; 1
     898:	0e 94 4b 03 	call	0x696	; 0x696 <OLED_pos>
	OLED_print_string(node->children[1]->name);
     89c:	ee 81       	ldd	r30, Y+6	; 0x06
     89e:	ff 81       	ldd	r31, Y+7	; 0x07
     8a0:	80 81       	ld	r24, Z
     8a2:	91 81       	ldd	r25, Z+1	; 0x01
     8a4:	0e 94 9e 03 	call	0x73c	; 0x73c <OLED_print_string>
	OLED_pos(2,50);
     8a8:	62 e3       	ldi	r22, 0x32	; 50
     8aa:	82 e0       	ldi	r24, 0x02	; 2
     8ac:	0e 94 4b 03 	call	0x696	; 0x696 <OLED_pos>
	OLED_print_string(node->children[2]->name);
     8b0:	e8 85       	ldd	r30, Y+8	; 0x08
     8b2:	f9 85       	ldd	r31, Y+9	; 0x09
     8b4:	80 81       	ld	r24, Z
     8b6:	91 81       	ldd	r25, Z+1	; 0x01
     8b8:	0e 94 9e 03 	call	0x73c	; 0x73c <OLED_print_string>
	OLED_pos(3,50);
     8bc:	62 e3       	ldi	r22, 0x32	; 50
     8be:	83 e0       	ldi	r24, 0x03	; 3
     8c0:	0e 94 4b 03 	call	0x696	; 0x696 <OLED_pos>
	OLED_print_string(node->children[3]->name);
     8c4:	ea 85       	ldd	r30, Y+10	; 0x0a
     8c6:	fb 85       	ldd	r31, Y+11	; 0x0b
     8c8:	80 81       	ld	r24, Z
     8ca:	91 81       	ldd	r25, Z+1	; 0x01
     8cc:	0e 94 9e 03 	call	0x73c	; 0x73c <OLED_print_string>
	OLED_pos(4,50);
     8d0:	62 e3       	ldi	r22, 0x32	; 50
     8d2:	84 e0       	ldi	r24, 0x04	; 4
     8d4:	0e 94 4b 03 	call	0x696	; 0x696 <OLED_pos>
	OLED_print_string(node->children[4]->name);
     8d8:	ec 85       	ldd	r30, Y+12	; 0x0c
     8da:	fd 85       	ldd	r31, Y+13	; 0x0d
     8dc:	80 81       	ld	r24, Z
     8de:	91 81       	ldd	r25, Z+1	; 0x01
     8e0:	0e 94 9e 03 	call	0x73c	; 0x73c <OLED_print_string>
	OLED_pos(5,50);
     8e4:	62 e3       	ldi	r22, 0x32	; 50
     8e6:	85 e0       	ldi	r24, 0x05	; 5
     8e8:	0e 94 4b 03 	call	0x696	; 0x696 <OLED_pos>
	OLED_print_string(node->children[5]->name);
     8ec:	ee 85       	ldd	r30, Y+14	; 0x0e
     8ee:	ff 85       	ldd	r31, Y+15	; 0x0f
     8f0:	80 81       	ld	r24, Z
     8f2:	91 81       	ldd	r25, Z+1	; 0x01
     8f4:	0e 94 9e 03 	call	0x73c	; 0x73c <OLED_print_string>
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	08 95       	ret

000008fe <SPI_master_init>:
#include <avr/delay.h>

void SPI_master_init(void)
{
	/* Set ~SS, MOSI and SCK output, all others input */
	DDRB = (1 << PB4)|(1 << PB5)|(1 << PB7);
     8fe:	80 eb       	ldi	r24, 0xB0	; 176
     900:	87 bb       	out	0x17, r24	; 23
	
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1 << SPE)|(1 << MSTR)|(1 << SPR0);
     902:	81 e5       	ldi	r24, 0x51	; 81
     904:	8d b9       	out	0x0d, r24	; 13
     906:	08 95       	ret

00000908 <SPI_master_transmit>:
}

void SPI_master_transmit(uint8_t cData)
{
	/* Start transmission */
	SPDR = cData;
     908:	8f b9       	out	0x0f, r24	; 15
	
	/* Wait for transmission to complete */
	while (!(SPSR & (1 << SPIF))) {
     90a:	77 9b       	sbis	0x0e, 7	; 14
     90c:	fe cf       	rjmp	.-4      	; 0x90a <SPI_master_transmit+0x2>
		;
	}
}
     90e:	08 95       	ret

00000910 <USART_init>:
#include <avr/io.h>

void USART_init(unsigned int ubrr)
{
	/* Set baud rate*/
	UBRR0H = (unsigned char)(ubrr >> 8 );
     910:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
     912:	89 b9       	out	0x09, r24	; 9
	/*Enable receiver and transmitter*/
	UCSR0B = (1 << RXEN0)|(1 << TXEN0);
     914:	88 e1       	ldi	r24, 0x18	; 24
     916:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1 << URSEL0)|(1 << USBS0)|(3 << UCSZ10);
     918:	8e e8       	ldi	r24, 0x8E	; 142
     91a:	80 bd       	out	0x20, r24	; 32
     91c:	08 95       	ret

0000091e <USART_transmit>:
}

void USART_transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while (!( UCSR0A & (1 << UDRE0)))
     91e:	5d 9b       	sbis	0x0b, 5	; 11
     920:	fe cf       	rjmp	.-4      	; 0x91e <USART_transmit>
		;
	/* Put data into buffer, sends the data */
	UDR0 = data;
     922:	8c b9       	out	0x0c, r24	; 12
     924:	08 95       	ret

00000926 <USART_receive>:
}

unsigned char USART_receive(void)
{
	/* Wait for data to be received */
	while ( !(UCSR0A & ( 1 << RXC0)) )
     926:	5f 9b       	sbis	0x0b, 7	; 11
     928:	fe cf       	rjmp	.-4      	; 0x926 <USART_receive>
		;
	/* Get and return received data from buffer */
	return UDR0;
     92a:	8c b1       	in	r24, 0x0c	; 12
}
     92c:	08 95       	ret

0000092e <__divsf3>:
     92e:	0c d0       	rcall	.+24     	; 0x948 <__divsf3x>
     930:	eb c0       	rjmp	.+470    	; 0xb08 <__fp_round>
     932:	e3 d0       	rcall	.+454    	; 0xafa <__fp_pscB>
     934:	40 f0       	brcs	.+16     	; 0x946 <__divsf3+0x18>
     936:	da d0       	rcall	.+436    	; 0xaec <__fp_pscA>
     938:	30 f0       	brcs	.+12     	; 0x946 <__divsf3+0x18>
     93a:	21 f4       	brne	.+8      	; 0x944 <__divsf3+0x16>
     93c:	5f 3f       	cpi	r21, 0xFF	; 255
     93e:	19 f0       	breq	.+6      	; 0x946 <__divsf3+0x18>
     940:	cc c0       	rjmp	.+408    	; 0xada <__fp_inf>
     942:	51 11       	cpse	r21, r1
     944:	15 c1       	rjmp	.+554    	; 0xb70 <__fp_szero>
     946:	cf c0       	rjmp	.+414    	; 0xae6 <__fp_nan>

00000948 <__divsf3x>:
     948:	f0 d0       	rcall	.+480    	; 0xb2a <__fp_split3>
     94a:	98 f3       	brcs	.-26     	; 0x932 <__divsf3+0x4>

0000094c <__divsf3_pse>:
     94c:	99 23       	and	r25, r25
     94e:	c9 f3       	breq	.-14     	; 0x942 <__divsf3+0x14>
     950:	55 23       	and	r21, r21
     952:	b1 f3       	breq	.-20     	; 0x940 <__divsf3+0x12>
     954:	95 1b       	sub	r25, r21
     956:	55 0b       	sbc	r21, r21
     958:	bb 27       	eor	r27, r27
     95a:	aa 27       	eor	r26, r26
     95c:	62 17       	cp	r22, r18
     95e:	73 07       	cpc	r23, r19
     960:	84 07       	cpc	r24, r20
     962:	38 f0       	brcs	.+14     	; 0x972 <__divsf3_pse+0x26>
     964:	9f 5f       	subi	r25, 0xFF	; 255
     966:	5f 4f       	sbci	r21, 0xFF	; 255
     968:	22 0f       	add	r18, r18
     96a:	33 1f       	adc	r19, r19
     96c:	44 1f       	adc	r20, r20
     96e:	aa 1f       	adc	r26, r26
     970:	a9 f3       	breq	.-22     	; 0x95c <__divsf3_pse+0x10>
     972:	33 d0       	rcall	.+102    	; 0x9da <__divsf3_pse+0x8e>
     974:	0e 2e       	mov	r0, r30
     976:	3a f0       	brmi	.+14     	; 0x986 <__divsf3_pse+0x3a>
     978:	e0 e8       	ldi	r30, 0x80	; 128
     97a:	30 d0       	rcall	.+96     	; 0x9dc <__divsf3_pse+0x90>
     97c:	91 50       	subi	r25, 0x01	; 1
     97e:	50 40       	sbci	r21, 0x00	; 0
     980:	e6 95       	lsr	r30
     982:	00 1c       	adc	r0, r0
     984:	ca f7       	brpl	.-14     	; 0x978 <__divsf3_pse+0x2c>
     986:	29 d0       	rcall	.+82     	; 0x9da <__divsf3_pse+0x8e>
     988:	fe 2f       	mov	r31, r30
     98a:	27 d0       	rcall	.+78     	; 0x9da <__divsf3_pse+0x8e>
     98c:	66 0f       	add	r22, r22
     98e:	77 1f       	adc	r23, r23
     990:	88 1f       	adc	r24, r24
     992:	bb 1f       	adc	r27, r27
     994:	26 17       	cp	r18, r22
     996:	37 07       	cpc	r19, r23
     998:	48 07       	cpc	r20, r24
     99a:	ab 07       	cpc	r26, r27
     99c:	b0 e8       	ldi	r27, 0x80	; 128
     99e:	09 f0       	breq	.+2      	; 0x9a2 <__divsf3_pse+0x56>
     9a0:	bb 0b       	sbc	r27, r27
     9a2:	80 2d       	mov	r24, r0
     9a4:	bf 01       	movw	r22, r30
     9a6:	ff 27       	eor	r31, r31
     9a8:	93 58       	subi	r25, 0x83	; 131
     9aa:	5f 4f       	sbci	r21, 0xFF	; 255
     9ac:	2a f0       	brmi	.+10     	; 0x9b8 <__divsf3_pse+0x6c>
     9ae:	9e 3f       	cpi	r25, 0xFE	; 254
     9b0:	51 05       	cpc	r21, r1
     9b2:	68 f0       	brcs	.+26     	; 0x9ce <__divsf3_pse+0x82>
     9b4:	92 c0       	rjmp	.+292    	; 0xada <__fp_inf>
     9b6:	dc c0       	rjmp	.+440    	; 0xb70 <__fp_szero>
     9b8:	5f 3f       	cpi	r21, 0xFF	; 255
     9ba:	ec f3       	brlt	.-6      	; 0x9b6 <__divsf3_pse+0x6a>
     9bc:	98 3e       	cpi	r25, 0xE8	; 232
     9be:	dc f3       	brlt	.-10     	; 0x9b6 <__divsf3_pse+0x6a>
     9c0:	86 95       	lsr	r24
     9c2:	77 95       	ror	r23
     9c4:	67 95       	ror	r22
     9c6:	b7 95       	ror	r27
     9c8:	f7 95       	ror	r31
     9ca:	9f 5f       	subi	r25, 0xFF	; 255
     9cc:	c9 f7       	brne	.-14     	; 0x9c0 <__divsf3_pse+0x74>
     9ce:	88 0f       	add	r24, r24
     9d0:	91 1d       	adc	r25, r1
     9d2:	96 95       	lsr	r25
     9d4:	87 95       	ror	r24
     9d6:	97 f9       	bld	r25, 7
     9d8:	08 95       	ret
     9da:	e1 e0       	ldi	r30, 0x01	; 1
     9dc:	66 0f       	add	r22, r22
     9de:	77 1f       	adc	r23, r23
     9e0:	88 1f       	adc	r24, r24
     9e2:	bb 1f       	adc	r27, r27
     9e4:	62 17       	cp	r22, r18
     9e6:	73 07       	cpc	r23, r19
     9e8:	84 07       	cpc	r24, r20
     9ea:	ba 07       	cpc	r27, r26
     9ec:	20 f0       	brcs	.+8      	; 0x9f6 <__divsf3_pse+0xaa>
     9ee:	62 1b       	sub	r22, r18
     9f0:	73 0b       	sbc	r23, r19
     9f2:	84 0b       	sbc	r24, r20
     9f4:	ba 0b       	sbc	r27, r26
     9f6:	ee 1f       	adc	r30, r30
     9f8:	88 f7       	brcc	.-30     	; 0x9dc <__divsf3_pse+0x90>
     9fa:	e0 95       	com	r30
     9fc:	08 95       	ret

000009fe <__fixsfsi>:
     9fe:	04 d0       	rcall	.+8      	; 0xa08 <__fixunssfsi>
     a00:	68 94       	set
     a02:	b1 11       	cpse	r27, r1
     a04:	b5 c0       	rjmp	.+362    	; 0xb70 <__fp_szero>
     a06:	08 95       	ret

00000a08 <__fixunssfsi>:
     a08:	98 d0       	rcall	.+304    	; 0xb3a <__fp_splitA>
     a0a:	88 f0       	brcs	.+34     	; 0xa2e <__fixunssfsi+0x26>
     a0c:	9f 57       	subi	r25, 0x7F	; 127
     a0e:	90 f0       	brcs	.+36     	; 0xa34 <__fixunssfsi+0x2c>
     a10:	b9 2f       	mov	r27, r25
     a12:	99 27       	eor	r25, r25
     a14:	b7 51       	subi	r27, 0x17	; 23
     a16:	a0 f0       	brcs	.+40     	; 0xa40 <__fixunssfsi+0x38>
     a18:	d1 f0       	breq	.+52     	; 0xa4e <__fixunssfsi+0x46>
     a1a:	66 0f       	add	r22, r22
     a1c:	77 1f       	adc	r23, r23
     a1e:	88 1f       	adc	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	1a f0       	brmi	.+6      	; 0xa2a <__fixunssfsi+0x22>
     a24:	ba 95       	dec	r27
     a26:	c9 f7       	brne	.-14     	; 0xa1a <__fixunssfsi+0x12>
     a28:	12 c0       	rjmp	.+36     	; 0xa4e <__fixunssfsi+0x46>
     a2a:	b1 30       	cpi	r27, 0x01	; 1
     a2c:	81 f0       	breq	.+32     	; 0xa4e <__fixunssfsi+0x46>
     a2e:	9f d0       	rcall	.+318    	; 0xb6e <__fp_zero>
     a30:	b1 e0       	ldi	r27, 0x01	; 1
     a32:	08 95       	ret
     a34:	9c c0       	rjmp	.+312    	; 0xb6e <__fp_zero>
     a36:	67 2f       	mov	r22, r23
     a38:	78 2f       	mov	r23, r24
     a3a:	88 27       	eor	r24, r24
     a3c:	b8 5f       	subi	r27, 0xF8	; 248
     a3e:	39 f0       	breq	.+14     	; 0xa4e <__fixunssfsi+0x46>
     a40:	b9 3f       	cpi	r27, 0xF9	; 249
     a42:	cc f3       	brlt	.-14     	; 0xa36 <__fixunssfsi+0x2e>
     a44:	86 95       	lsr	r24
     a46:	77 95       	ror	r23
     a48:	67 95       	ror	r22
     a4a:	b3 95       	inc	r27
     a4c:	d9 f7       	brne	.-10     	; 0xa44 <__fixunssfsi+0x3c>
     a4e:	3e f4       	brtc	.+14     	; 0xa5e <__fixunssfsi+0x56>
     a50:	90 95       	com	r25
     a52:	80 95       	com	r24
     a54:	70 95       	com	r23
     a56:	61 95       	neg	r22
     a58:	7f 4f       	sbci	r23, 0xFF	; 255
     a5a:	8f 4f       	sbci	r24, 0xFF	; 255
     a5c:	9f 4f       	sbci	r25, 0xFF	; 255
     a5e:	08 95       	ret

00000a60 <__floatunsisf>:
     a60:	e8 94       	clt
     a62:	09 c0       	rjmp	.+18     	; 0xa76 <__floatsisf+0x12>

00000a64 <__floatsisf>:
     a64:	97 fb       	bst	r25, 7
     a66:	3e f4       	brtc	.+14     	; 0xa76 <__floatsisf+0x12>
     a68:	90 95       	com	r25
     a6a:	80 95       	com	r24
     a6c:	70 95       	com	r23
     a6e:	61 95       	neg	r22
     a70:	7f 4f       	sbci	r23, 0xFF	; 255
     a72:	8f 4f       	sbci	r24, 0xFF	; 255
     a74:	9f 4f       	sbci	r25, 0xFF	; 255
     a76:	99 23       	and	r25, r25
     a78:	a9 f0       	breq	.+42     	; 0xaa4 <__floatsisf+0x40>
     a7a:	f9 2f       	mov	r31, r25
     a7c:	96 e9       	ldi	r25, 0x96	; 150
     a7e:	bb 27       	eor	r27, r27
     a80:	93 95       	inc	r25
     a82:	f6 95       	lsr	r31
     a84:	87 95       	ror	r24
     a86:	77 95       	ror	r23
     a88:	67 95       	ror	r22
     a8a:	b7 95       	ror	r27
     a8c:	f1 11       	cpse	r31, r1
     a8e:	f8 cf       	rjmp	.-16     	; 0xa80 <__floatsisf+0x1c>
     a90:	fa f4       	brpl	.+62     	; 0xad0 <__floatsisf+0x6c>
     a92:	bb 0f       	add	r27, r27
     a94:	11 f4       	brne	.+4      	; 0xa9a <__floatsisf+0x36>
     a96:	60 ff       	sbrs	r22, 0
     a98:	1b c0       	rjmp	.+54     	; 0xad0 <__floatsisf+0x6c>
     a9a:	6f 5f       	subi	r22, 0xFF	; 255
     a9c:	7f 4f       	sbci	r23, 0xFF	; 255
     a9e:	8f 4f       	sbci	r24, 0xFF	; 255
     aa0:	9f 4f       	sbci	r25, 0xFF	; 255
     aa2:	16 c0       	rjmp	.+44     	; 0xad0 <__floatsisf+0x6c>
     aa4:	88 23       	and	r24, r24
     aa6:	11 f0       	breq	.+4      	; 0xaac <__floatsisf+0x48>
     aa8:	96 e9       	ldi	r25, 0x96	; 150
     aaa:	11 c0       	rjmp	.+34     	; 0xace <__floatsisf+0x6a>
     aac:	77 23       	and	r23, r23
     aae:	21 f0       	breq	.+8      	; 0xab8 <__floatsisf+0x54>
     ab0:	9e e8       	ldi	r25, 0x8E	; 142
     ab2:	87 2f       	mov	r24, r23
     ab4:	76 2f       	mov	r23, r22
     ab6:	05 c0       	rjmp	.+10     	; 0xac2 <__floatsisf+0x5e>
     ab8:	66 23       	and	r22, r22
     aba:	71 f0       	breq	.+28     	; 0xad8 <__floatsisf+0x74>
     abc:	96 e8       	ldi	r25, 0x86	; 134
     abe:	86 2f       	mov	r24, r22
     ac0:	70 e0       	ldi	r23, 0x00	; 0
     ac2:	60 e0       	ldi	r22, 0x00	; 0
     ac4:	2a f0       	brmi	.+10     	; 0xad0 <__floatsisf+0x6c>
     ac6:	9a 95       	dec	r25
     ac8:	66 0f       	add	r22, r22
     aca:	77 1f       	adc	r23, r23
     acc:	88 1f       	adc	r24, r24
     ace:	da f7       	brpl	.-10     	; 0xac6 <__floatsisf+0x62>
     ad0:	88 0f       	add	r24, r24
     ad2:	96 95       	lsr	r25
     ad4:	87 95       	ror	r24
     ad6:	97 f9       	bld	r25, 7
     ad8:	08 95       	ret

00000ada <__fp_inf>:
     ada:	97 f9       	bld	r25, 7
     adc:	9f 67       	ori	r25, 0x7F	; 127
     ade:	80 e8       	ldi	r24, 0x80	; 128
     ae0:	70 e0       	ldi	r23, 0x00	; 0
     ae2:	60 e0       	ldi	r22, 0x00	; 0
     ae4:	08 95       	ret

00000ae6 <__fp_nan>:
     ae6:	9f ef       	ldi	r25, 0xFF	; 255
     ae8:	80 ec       	ldi	r24, 0xC0	; 192
     aea:	08 95       	ret

00000aec <__fp_pscA>:
     aec:	00 24       	eor	r0, r0
     aee:	0a 94       	dec	r0
     af0:	16 16       	cp	r1, r22
     af2:	17 06       	cpc	r1, r23
     af4:	18 06       	cpc	r1, r24
     af6:	09 06       	cpc	r0, r25
     af8:	08 95       	ret

00000afa <__fp_pscB>:
     afa:	00 24       	eor	r0, r0
     afc:	0a 94       	dec	r0
     afe:	12 16       	cp	r1, r18
     b00:	13 06       	cpc	r1, r19
     b02:	14 06       	cpc	r1, r20
     b04:	05 06       	cpc	r0, r21
     b06:	08 95       	ret

00000b08 <__fp_round>:
     b08:	09 2e       	mov	r0, r25
     b0a:	03 94       	inc	r0
     b0c:	00 0c       	add	r0, r0
     b0e:	11 f4       	brne	.+4      	; 0xb14 <__fp_round+0xc>
     b10:	88 23       	and	r24, r24
     b12:	52 f0       	brmi	.+20     	; 0xb28 <__fp_round+0x20>
     b14:	bb 0f       	add	r27, r27
     b16:	40 f4       	brcc	.+16     	; 0xb28 <__fp_round+0x20>
     b18:	bf 2b       	or	r27, r31
     b1a:	11 f4       	brne	.+4      	; 0xb20 <__fp_round+0x18>
     b1c:	60 ff       	sbrs	r22, 0
     b1e:	04 c0       	rjmp	.+8      	; 0xb28 <__fp_round+0x20>
     b20:	6f 5f       	subi	r22, 0xFF	; 255
     b22:	7f 4f       	sbci	r23, 0xFF	; 255
     b24:	8f 4f       	sbci	r24, 0xFF	; 255
     b26:	9f 4f       	sbci	r25, 0xFF	; 255
     b28:	08 95       	ret

00000b2a <__fp_split3>:
     b2a:	57 fd       	sbrc	r21, 7
     b2c:	90 58       	subi	r25, 0x80	; 128
     b2e:	44 0f       	add	r20, r20
     b30:	55 1f       	adc	r21, r21
     b32:	59 f0       	breq	.+22     	; 0xb4a <__fp_splitA+0x10>
     b34:	5f 3f       	cpi	r21, 0xFF	; 255
     b36:	71 f0       	breq	.+28     	; 0xb54 <__fp_splitA+0x1a>
     b38:	47 95       	ror	r20

00000b3a <__fp_splitA>:
     b3a:	88 0f       	add	r24, r24
     b3c:	97 fb       	bst	r25, 7
     b3e:	99 1f       	adc	r25, r25
     b40:	61 f0       	breq	.+24     	; 0xb5a <__fp_splitA+0x20>
     b42:	9f 3f       	cpi	r25, 0xFF	; 255
     b44:	79 f0       	breq	.+30     	; 0xb64 <__fp_splitA+0x2a>
     b46:	87 95       	ror	r24
     b48:	08 95       	ret
     b4a:	12 16       	cp	r1, r18
     b4c:	13 06       	cpc	r1, r19
     b4e:	14 06       	cpc	r1, r20
     b50:	55 1f       	adc	r21, r21
     b52:	f2 cf       	rjmp	.-28     	; 0xb38 <__fp_split3+0xe>
     b54:	46 95       	lsr	r20
     b56:	f1 df       	rcall	.-30     	; 0xb3a <__fp_splitA>
     b58:	08 c0       	rjmp	.+16     	; 0xb6a <__fp_splitA+0x30>
     b5a:	16 16       	cp	r1, r22
     b5c:	17 06       	cpc	r1, r23
     b5e:	18 06       	cpc	r1, r24
     b60:	99 1f       	adc	r25, r25
     b62:	f1 cf       	rjmp	.-30     	; 0xb46 <__fp_splitA+0xc>
     b64:	86 95       	lsr	r24
     b66:	71 05       	cpc	r23, r1
     b68:	61 05       	cpc	r22, r1
     b6a:	08 94       	sec
     b6c:	08 95       	ret

00000b6e <__fp_zero>:
     b6e:	e8 94       	clt

00000b70 <__fp_szero>:
     b70:	bb 27       	eor	r27, r27
     b72:	66 27       	eor	r22, r22
     b74:	77 27       	eor	r23, r23
     b76:	cb 01       	movw	r24, r22
     b78:	97 f9       	bld	r25, 7
     b7a:	08 95       	ret

00000b7c <__mulsf3>:
     b7c:	0b d0       	rcall	.+22     	; 0xb94 <__mulsf3x>
     b7e:	c4 cf       	rjmp	.-120    	; 0xb08 <__fp_round>
     b80:	b5 df       	rcall	.-150    	; 0xaec <__fp_pscA>
     b82:	28 f0       	brcs	.+10     	; 0xb8e <__mulsf3+0x12>
     b84:	ba df       	rcall	.-140    	; 0xafa <__fp_pscB>
     b86:	18 f0       	brcs	.+6      	; 0xb8e <__mulsf3+0x12>
     b88:	95 23       	and	r25, r21
     b8a:	09 f0       	breq	.+2      	; 0xb8e <__mulsf3+0x12>
     b8c:	a6 cf       	rjmp	.-180    	; 0xada <__fp_inf>
     b8e:	ab cf       	rjmp	.-170    	; 0xae6 <__fp_nan>
     b90:	11 24       	eor	r1, r1
     b92:	ee cf       	rjmp	.-36     	; 0xb70 <__fp_szero>

00000b94 <__mulsf3x>:
     b94:	ca df       	rcall	.-108    	; 0xb2a <__fp_split3>
     b96:	a0 f3       	brcs	.-24     	; 0xb80 <__mulsf3+0x4>

00000b98 <__mulsf3_pse>:
     b98:	95 9f       	mul	r25, r21
     b9a:	d1 f3       	breq	.-12     	; 0xb90 <__mulsf3+0x14>
     b9c:	95 0f       	add	r25, r21
     b9e:	50 e0       	ldi	r21, 0x00	; 0
     ba0:	55 1f       	adc	r21, r21
     ba2:	62 9f       	mul	r22, r18
     ba4:	f0 01       	movw	r30, r0
     ba6:	72 9f       	mul	r23, r18
     ba8:	bb 27       	eor	r27, r27
     baa:	f0 0d       	add	r31, r0
     bac:	b1 1d       	adc	r27, r1
     bae:	63 9f       	mul	r22, r19
     bb0:	aa 27       	eor	r26, r26
     bb2:	f0 0d       	add	r31, r0
     bb4:	b1 1d       	adc	r27, r1
     bb6:	aa 1f       	adc	r26, r26
     bb8:	64 9f       	mul	r22, r20
     bba:	66 27       	eor	r22, r22
     bbc:	b0 0d       	add	r27, r0
     bbe:	a1 1d       	adc	r26, r1
     bc0:	66 1f       	adc	r22, r22
     bc2:	82 9f       	mul	r24, r18
     bc4:	22 27       	eor	r18, r18
     bc6:	b0 0d       	add	r27, r0
     bc8:	a1 1d       	adc	r26, r1
     bca:	62 1f       	adc	r22, r18
     bcc:	73 9f       	mul	r23, r19
     bce:	b0 0d       	add	r27, r0
     bd0:	a1 1d       	adc	r26, r1
     bd2:	62 1f       	adc	r22, r18
     bd4:	83 9f       	mul	r24, r19
     bd6:	a0 0d       	add	r26, r0
     bd8:	61 1d       	adc	r22, r1
     bda:	22 1f       	adc	r18, r18
     bdc:	74 9f       	mul	r23, r20
     bde:	33 27       	eor	r19, r19
     be0:	a0 0d       	add	r26, r0
     be2:	61 1d       	adc	r22, r1
     be4:	23 1f       	adc	r18, r19
     be6:	84 9f       	mul	r24, r20
     be8:	60 0d       	add	r22, r0
     bea:	21 1d       	adc	r18, r1
     bec:	82 2f       	mov	r24, r18
     bee:	76 2f       	mov	r23, r22
     bf0:	6a 2f       	mov	r22, r26
     bf2:	11 24       	eor	r1, r1
     bf4:	9f 57       	subi	r25, 0x7F	; 127
     bf6:	50 40       	sbci	r21, 0x00	; 0
     bf8:	8a f0       	brmi	.+34     	; 0xc1c <__mulsf3_pse+0x84>
     bfa:	e1 f0       	breq	.+56     	; 0xc34 <__mulsf3_pse+0x9c>
     bfc:	88 23       	and	r24, r24
     bfe:	4a f0       	brmi	.+18     	; 0xc12 <__mulsf3_pse+0x7a>
     c00:	ee 0f       	add	r30, r30
     c02:	ff 1f       	adc	r31, r31
     c04:	bb 1f       	adc	r27, r27
     c06:	66 1f       	adc	r22, r22
     c08:	77 1f       	adc	r23, r23
     c0a:	88 1f       	adc	r24, r24
     c0c:	91 50       	subi	r25, 0x01	; 1
     c0e:	50 40       	sbci	r21, 0x00	; 0
     c10:	a9 f7       	brne	.-22     	; 0xbfc <__mulsf3_pse+0x64>
     c12:	9e 3f       	cpi	r25, 0xFE	; 254
     c14:	51 05       	cpc	r21, r1
     c16:	70 f0       	brcs	.+28     	; 0xc34 <__mulsf3_pse+0x9c>
     c18:	60 cf       	rjmp	.-320    	; 0xada <__fp_inf>
     c1a:	aa cf       	rjmp	.-172    	; 0xb70 <__fp_szero>
     c1c:	5f 3f       	cpi	r21, 0xFF	; 255
     c1e:	ec f3       	brlt	.-6      	; 0xc1a <__mulsf3_pse+0x82>
     c20:	98 3e       	cpi	r25, 0xE8	; 232
     c22:	dc f3       	brlt	.-10     	; 0xc1a <__mulsf3_pse+0x82>
     c24:	86 95       	lsr	r24
     c26:	77 95       	ror	r23
     c28:	67 95       	ror	r22
     c2a:	b7 95       	ror	r27
     c2c:	f7 95       	ror	r31
     c2e:	e7 95       	ror	r30
     c30:	9f 5f       	subi	r25, 0xFF	; 255
     c32:	c1 f7       	brne	.-16     	; 0xc24 <__mulsf3_pse+0x8c>
     c34:	fe 2b       	or	r31, r30
     c36:	88 0f       	add	r24, r24
     c38:	91 1d       	adc	r25, r1
     c3a:	96 95       	lsr	r25
     c3c:	87 95       	ror	r24
     c3e:	97 f9       	bld	r25, 7
     c40:	08 95       	ret

00000c42 <round>:
     c42:	7b df       	rcall	.-266    	; 0xb3a <__fp_splitA>
     c44:	e0 f0       	brcs	.+56     	; 0xc7e <round+0x3c>
     c46:	9e 37       	cpi	r25, 0x7E	; 126
     c48:	d8 f0       	brcs	.+54     	; 0xc80 <round+0x3e>
     c4a:	96 39       	cpi	r25, 0x96	; 150
     c4c:	b8 f4       	brcc	.+46     	; 0xc7c <round+0x3a>
     c4e:	9e 38       	cpi	r25, 0x8E	; 142
     c50:	48 f4       	brcc	.+18     	; 0xc64 <round+0x22>
     c52:	67 2f       	mov	r22, r23
     c54:	78 2f       	mov	r23, r24
     c56:	88 27       	eor	r24, r24
     c58:	98 5f       	subi	r25, 0xF8	; 248
     c5a:	f9 cf       	rjmp	.-14     	; 0xc4e <round+0xc>
     c5c:	86 95       	lsr	r24
     c5e:	77 95       	ror	r23
     c60:	67 95       	ror	r22
     c62:	93 95       	inc	r25
     c64:	95 39       	cpi	r25, 0x95	; 149
     c66:	d0 f3       	brcs	.-12     	; 0xc5c <round+0x1a>
     c68:	b6 2f       	mov	r27, r22
     c6a:	b1 70       	andi	r27, 0x01	; 1
     c6c:	6b 0f       	add	r22, r27
     c6e:	71 1d       	adc	r23, r1
     c70:	81 1d       	adc	r24, r1
     c72:	20 f4       	brcc	.+8      	; 0xc7c <round+0x3a>
     c74:	87 95       	ror	r24
     c76:	77 95       	ror	r23
     c78:	67 95       	ror	r22
     c7a:	93 95       	inc	r25
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <__fp_mintl>
     c7e:	1c c0       	rjmp	.+56     	; 0xcb8 <__fp_mpack>
     c80:	77 cf       	rjmp	.-274    	; 0xb70 <__fp_szero>

00000c82 <__fp_mintl>:
     c82:	88 23       	and	r24, r24
     c84:	71 f4       	brne	.+28     	; 0xca2 <__fp_mintl+0x20>
     c86:	77 23       	and	r23, r23
     c88:	21 f0       	breq	.+8      	; 0xc92 <__fp_mintl+0x10>
     c8a:	98 50       	subi	r25, 0x08	; 8
     c8c:	87 2b       	or	r24, r23
     c8e:	76 2f       	mov	r23, r22
     c90:	07 c0       	rjmp	.+14     	; 0xca0 <__fp_mintl+0x1e>
     c92:	66 23       	and	r22, r22
     c94:	11 f4       	brne	.+4      	; 0xc9a <__fp_mintl+0x18>
     c96:	99 27       	eor	r25, r25
     c98:	0d c0       	rjmp	.+26     	; 0xcb4 <__fp_mintl+0x32>
     c9a:	90 51       	subi	r25, 0x10	; 16
     c9c:	86 2b       	or	r24, r22
     c9e:	70 e0       	ldi	r23, 0x00	; 0
     ca0:	60 e0       	ldi	r22, 0x00	; 0
     ca2:	2a f0       	brmi	.+10     	; 0xcae <__fp_mintl+0x2c>
     ca4:	9a 95       	dec	r25
     ca6:	66 0f       	add	r22, r22
     ca8:	77 1f       	adc	r23, r23
     caa:	88 1f       	adc	r24, r24
     cac:	da f7       	brpl	.-10     	; 0xca4 <__fp_mintl+0x22>
     cae:	88 0f       	add	r24, r24
     cb0:	96 95       	lsr	r25
     cb2:	87 95       	ror	r24
     cb4:	97 f9       	bld	r25, 7
     cb6:	08 95       	ret

00000cb8 <__fp_mpack>:
     cb8:	9f 3f       	cpi	r25, 0xFF	; 255
     cba:	31 f0       	breq	.+12     	; 0xcc8 <__fp_mpack_finite+0xc>

00000cbc <__fp_mpack_finite>:
     cbc:	91 50       	subi	r25, 0x01	; 1
     cbe:	20 f4       	brcc	.+8      	; 0xcc8 <__fp_mpack_finite+0xc>
     cc0:	87 95       	ror	r24
     cc2:	77 95       	ror	r23
     cc4:	67 95       	ror	r22
     cc6:	b7 95       	ror	r27
     cc8:	88 0f       	add	r24, r24
     cca:	91 1d       	adc	r25, r1
     ccc:	96 95       	lsr	r25
     cce:	87 95       	ror	r24
     cd0:	97 f9       	bld	r25, 7
     cd2:	08 95       	ret

00000cd4 <malloc>:
     cd4:	cf 93       	push	r28
     cd6:	df 93       	push	r29
     cd8:	82 30       	cpi	r24, 0x02	; 2
     cda:	91 05       	cpc	r25, r1
     cdc:	10 f4       	brcc	.+4      	; 0xce2 <malloc+0xe>
     cde:	82 e0       	ldi	r24, 0x02	; 2
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	e0 91 4c 01 	lds	r30, 0x014C
     ce6:	f0 91 4d 01 	lds	r31, 0x014D
     cea:	20 e0       	ldi	r18, 0x00	; 0
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	a0 e0       	ldi	r26, 0x00	; 0
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	30 97       	sbiw	r30, 0x00	; 0
     cf4:	39 f1       	breq	.+78     	; 0xd44 <malloc+0x70>
     cf6:	40 81       	ld	r20, Z
     cf8:	51 81       	ldd	r21, Z+1	; 0x01
     cfa:	48 17       	cp	r20, r24
     cfc:	59 07       	cpc	r21, r25
     cfe:	b8 f0       	brcs	.+46     	; 0xd2e <malloc+0x5a>
     d00:	48 17       	cp	r20, r24
     d02:	59 07       	cpc	r21, r25
     d04:	71 f4       	brne	.+28     	; 0xd22 <malloc+0x4e>
     d06:	82 81       	ldd	r24, Z+2	; 0x02
     d08:	93 81       	ldd	r25, Z+3	; 0x03
     d0a:	10 97       	sbiw	r26, 0x00	; 0
     d0c:	29 f0       	breq	.+10     	; 0xd18 <malloc+0x44>
     d0e:	13 96       	adiw	r26, 0x03	; 3
     d10:	9c 93       	st	X, r25
     d12:	8e 93       	st	-X, r24
     d14:	12 97       	sbiw	r26, 0x02	; 2
     d16:	2c c0       	rjmp	.+88     	; 0xd70 <malloc+0x9c>
     d18:	90 93 4d 01 	sts	0x014D, r25
     d1c:	80 93 4c 01 	sts	0x014C, r24
     d20:	27 c0       	rjmp	.+78     	; 0xd70 <malloc+0x9c>
     d22:	21 15       	cp	r18, r1
     d24:	31 05       	cpc	r19, r1
     d26:	31 f0       	breq	.+12     	; 0xd34 <malloc+0x60>
     d28:	42 17       	cp	r20, r18
     d2a:	53 07       	cpc	r21, r19
     d2c:	18 f0       	brcs	.+6      	; 0xd34 <malloc+0x60>
     d2e:	a9 01       	movw	r20, r18
     d30:	db 01       	movw	r26, r22
     d32:	01 c0       	rjmp	.+2      	; 0xd36 <malloc+0x62>
     d34:	ef 01       	movw	r28, r30
     d36:	9a 01       	movw	r18, r20
     d38:	bd 01       	movw	r22, r26
     d3a:	df 01       	movw	r26, r30
     d3c:	02 80       	ldd	r0, Z+2	; 0x02
     d3e:	f3 81       	ldd	r31, Z+3	; 0x03
     d40:	e0 2d       	mov	r30, r0
     d42:	d7 cf       	rjmp	.-82     	; 0xcf2 <malloc+0x1e>
     d44:	21 15       	cp	r18, r1
     d46:	31 05       	cpc	r19, r1
     d48:	f9 f0       	breq	.+62     	; 0xd88 <malloc+0xb4>
     d4a:	28 1b       	sub	r18, r24
     d4c:	39 0b       	sbc	r19, r25
     d4e:	24 30       	cpi	r18, 0x04	; 4
     d50:	31 05       	cpc	r19, r1
     d52:	80 f4       	brcc	.+32     	; 0xd74 <malloc+0xa0>
     d54:	8a 81       	ldd	r24, Y+2	; 0x02
     d56:	9b 81       	ldd	r25, Y+3	; 0x03
     d58:	61 15       	cp	r22, r1
     d5a:	71 05       	cpc	r23, r1
     d5c:	21 f0       	breq	.+8      	; 0xd66 <malloc+0x92>
     d5e:	fb 01       	movw	r30, r22
     d60:	93 83       	std	Z+3, r25	; 0x03
     d62:	82 83       	std	Z+2, r24	; 0x02
     d64:	04 c0       	rjmp	.+8      	; 0xd6e <malloc+0x9a>
     d66:	90 93 4d 01 	sts	0x014D, r25
     d6a:	80 93 4c 01 	sts	0x014C, r24
     d6e:	fe 01       	movw	r30, r28
     d70:	32 96       	adiw	r30, 0x02	; 2
     d72:	44 c0       	rjmp	.+136    	; 0xdfc <malloc+0x128>
     d74:	fe 01       	movw	r30, r28
     d76:	e2 0f       	add	r30, r18
     d78:	f3 1f       	adc	r31, r19
     d7a:	81 93       	st	Z+, r24
     d7c:	91 93       	st	Z+, r25
     d7e:	22 50       	subi	r18, 0x02	; 2
     d80:	31 09       	sbc	r19, r1
     d82:	39 83       	std	Y+1, r19	; 0x01
     d84:	28 83       	st	Y, r18
     d86:	3a c0       	rjmp	.+116    	; 0xdfc <malloc+0x128>
     d88:	20 91 4a 01 	lds	r18, 0x014A
     d8c:	30 91 4b 01 	lds	r19, 0x014B
     d90:	23 2b       	or	r18, r19
     d92:	41 f4       	brne	.+16     	; 0xda4 <malloc+0xd0>
     d94:	20 91 02 01 	lds	r18, 0x0102
     d98:	30 91 03 01 	lds	r19, 0x0103
     d9c:	30 93 4b 01 	sts	0x014B, r19
     da0:	20 93 4a 01 	sts	0x014A, r18
     da4:	20 91 00 01 	lds	r18, 0x0100
     da8:	30 91 01 01 	lds	r19, 0x0101
     dac:	21 15       	cp	r18, r1
     dae:	31 05       	cpc	r19, r1
     db0:	41 f4       	brne	.+16     	; 0xdc2 <malloc+0xee>
     db2:	2d b7       	in	r18, 0x3d	; 61
     db4:	3e b7       	in	r19, 0x3e	; 62
     db6:	40 91 04 01 	lds	r20, 0x0104
     dba:	50 91 05 01 	lds	r21, 0x0105
     dbe:	24 1b       	sub	r18, r20
     dc0:	35 0b       	sbc	r19, r21
     dc2:	e0 91 4a 01 	lds	r30, 0x014A
     dc6:	f0 91 4b 01 	lds	r31, 0x014B
     dca:	e2 17       	cp	r30, r18
     dcc:	f3 07       	cpc	r31, r19
     dce:	a0 f4       	brcc	.+40     	; 0xdf8 <malloc+0x124>
     dd0:	2e 1b       	sub	r18, r30
     dd2:	3f 0b       	sbc	r19, r31
     dd4:	28 17       	cp	r18, r24
     dd6:	39 07       	cpc	r19, r25
     dd8:	78 f0       	brcs	.+30     	; 0xdf8 <malloc+0x124>
     dda:	ac 01       	movw	r20, r24
     ddc:	4e 5f       	subi	r20, 0xFE	; 254
     dde:	5f 4f       	sbci	r21, 0xFF	; 255
     de0:	24 17       	cp	r18, r20
     de2:	35 07       	cpc	r19, r21
     de4:	48 f0       	brcs	.+18     	; 0xdf8 <malloc+0x124>
     de6:	4e 0f       	add	r20, r30
     de8:	5f 1f       	adc	r21, r31
     dea:	50 93 4b 01 	sts	0x014B, r21
     dee:	40 93 4a 01 	sts	0x014A, r20
     df2:	81 93       	st	Z+, r24
     df4:	91 93       	st	Z+, r25
     df6:	02 c0       	rjmp	.+4      	; 0xdfc <malloc+0x128>
     df8:	e0 e0       	ldi	r30, 0x00	; 0
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	cf 01       	movw	r24, r30
     dfe:	df 91       	pop	r29
     e00:	cf 91       	pop	r28
     e02:	08 95       	ret

00000e04 <free>:
     e04:	cf 93       	push	r28
     e06:	df 93       	push	r29
     e08:	00 97       	sbiw	r24, 0x00	; 0
     e0a:	09 f4       	brne	.+2      	; 0xe0e <free+0xa>
     e0c:	87 c0       	rjmp	.+270    	; 0xf1c <free+0x118>
     e0e:	fc 01       	movw	r30, r24
     e10:	32 97       	sbiw	r30, 0x02	; 2
     e12:	13 82       	std	Z+3, r1	; 0x03
     e14:	12 82       	std	Z+2, r1	; 0x02
     e16:	c0 91 4c 01 	lds	r28, 0x014C
     e1a:	d0 91 4d 01 	lds	r29, 0x014D
     e1e:	20 97       	sbiw	r28, 0x00	; 0
     e20:	81 f4       	brne	.+32     	; 0xe42 <free+0x3e>
     e22:	20 81       	ld	r18, Z
     e24:	31 81       	ldd	r19, Z+1	; 0x01
     e26:	28 0f       	add	r18, r24
     e28:	39 1f       	adc	r19, r25
     e2a:	80 91 4a 01 	lds	r24, 0x014A
     e2e:	90 91 4b 01 	lds	r25, 0x014B
     e32:	82 17       	cp	r24, r18
     e34:	93 07       	cpc	r25, r19
     e36:	79 f5       	brne	.+94     	; 0xe96 <free+0x92>
     e38:	f0 93 4b 01 	sts	0x014B, r31
     e3c:	e0 93 4a 01 	sts	0x014A, r30
     e40:	6d c0       	rjmp	.+218    	; 0xf1c <free+0x118>
     e42:	de 01       	movw	r26, r28
     e44:	20 e0       	ldi	r18, 0x00	; 0
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	ae 17       	cp	r26, r30
     e4a:	bf 07       	cpc	r27, r31
     e4c:	50 f4       	brcc	.+20     	; 0xe62 <free+0x5e>
     e4e:	12 96       	adiw	r26, 0x02	; 2
     e50:	4d 91       	ld	r20, X+
     e52:	5c 91       	ld	r21, X
     e54:	13 97       	sbiw	r26, 0x03	; 3
     e56:	9d 01       	movw	r18, r26
     e58:	41 15       	cp	r20, r1
     e5a:	51 05       	cpc	r21, r1
     e5c:	09 f1       	breq	.+66     	; 0xea0 <free+0x9c>
     e5e:	da 01       	movw	r26, r20
     e60:	f3 cf       	rjmp	.-26     	; 0xe48 <free+0x44>
     e62:	b3 83       	std	Z+3, r27	; 0x03
     e64:	a2 83       	std	Z+2, r26	; 0x02
     e66:	40 81       	ld	r20, Z
     e68:	51 81       	ldd	r21, Z+1	; 0x01
     e6a:	84 0f       	add	r24, r20
     e6c:	95 1f       	adc	r25, r21
     e6e:	8a 17       	cp	r24, r26
     e70:	9b 07       	cpc	r25, r27
     e72:	71 f4       	brne	.+28     	; 0xe90 <free+0x8c>
     e74:	8d 91       	ld	r24, X+
     e76:	9c 91       	ld	r25, X
     e78:	11 97       	sbiw	r26, 0x01	; 1
     e7a:	84 0f       	add	r24, r20
     e7c:	95 1f       	adc	r25, r21
     e7e:	02 96       	adiw	r24, 0x02	; 2
     e80:	91 83       	std	Z+1, r25	; 0x01
     e82:	80 83       	st	Z, r24
     e84:	12 96       	adiw	r26, 0x02	; 2
     e86:	8d 91       	ld	r24, X+
     e88:	9c 91       	ld	r25, X
     e8a:	13 97       	sbiw	r26, 0x03	; 3
     e8c:	93 83       	std	Z+3, r25	; 0x03
     e8e:	82 83       	std	Z+2, r24	; 0x02
     e90:	21 15       	cp	r18, r1
     e92:	31 05       	cpc	r19, r1
     e94:	29 f4       	brne	.+10     	; 0xea0 <free+0x9c>
     e96:	f0 93 4d 01 	sts	0x014D, r31
     e9a:	e0 93 4c 01 	sts	0x014C, r30
     e9e:	3e c0       	rjmp	.+124    	; 0xf1c <free+0x118>
     ea0:	d9 01       	movw	r26, r18
     ea2:	13 96       	adiw	r26, 0x03	; 3
     ea4:	fc 93       	st	X, r31
     ea6:	ee 93       	st	-X, r30
     ea8:	12 97       	sbiw	r26, 0x02	; 2
     eaa:	4d 91       	ld	r20, X+
     eac:	5d 91       	ld	r21, X+
     eae:	a4 0f       	add	r26, r20
     eb0:	b5 1f       	adc	r27, r21
     eb2:	ea 17       	cp	r30, r26
     eb4:	fb 07       	cpc	r31, r27
     eb6:	79 f4       	brne	.+30     	; 0xed6 <free+0xd2>
     eb8:	80 81       	ld	r24, Z
     eba:	91 81       	ldd	r25, Z+1	; 0x01
     ebc:	84 0f       	add	r24, r20
     ebe:	95 1f       	adc	r25, r21
     ec0:	02 96       	adiw	r24, 0x02	; 2
     ec2:	d9 01       	movw	r26, r18
     ec4:	11 96       	adiw	r26, 0x01	; 1
     ec6:	9c 93       	st	X, r25
     ec8:	8e 93       	st	-X, r24
     eca:	82 81       	ldd	r24, Z+2	; 0x02
     ecc:	93 81       	ldd	r25, Z+3	; 0x03
     ece:	13 96       	adiw	r26, 0x03	; 3
     ed0:	9c 93       	st	X, r25
     ed2:	8e 93       	st	-X, r24
     ed4:	12 97       	sbiw	r26, 0x02	; 2
     ed6:	e0 e0       	ldi	r30, 0x00	; 0
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	8a 81       	ldd	r24, Y+2	; 0x02
     edc:	9b 81       	ldd	r25, Y+3	; 0x03
     ede:	00 97       	sbiw	r24, 0x00	; 0
     ee0:	19 f0       	breq	.+6      	; 0xee8 <free+0xe4>
     ee2:	fe 01       	movw	r30, r28
     ee4:	ec 01       	movw	r28, r24
     ee6:	f9 cf       	rjmp	.-14     	; 0xeda <free+0xd6>
     ee8:	ce 01       	movw	r24, r28
     eea:	02 96       	adiw	r24, 0x02	; 2
     eec:	28 81       	ld	r18, Y
     eee:	39 81       	ldd	r19, Y+1	; 0x01
     ef0:	82 0f       	add	r24, r18
     ef2:	93 1f       	adc	r25, r19
     ef4:	20 91 4a 01 	lds	r18, 0x014A
     ef8:	30 91 4b 01 	lds	r19, 0x014B
     efc:	28 17       	cp	r18, r24
     efe:	39 07       	cpc	r19, r25
     f00:	69 f4       	brne	.+26     	; 0xf1c <free+0x118>
     f02:	30 97       	sbiw	r30, 0x00	; 0
     f04:	29 f4       	brne	.+10     	; 0xf10 <free+0x10c>
     f06:	10 92 4d 01 	sts	0x014D, r1
     f0a:	10 92 4c 01 	sts	0x014C, r1
     f0e:	02 c0       	rjmp	.+4      	; 0xf14 <free+0x110>
     f10:	13 82       	std	Z+3, r1	; 0x03
     f12:	12 82       	std	Z+2, r1	; 0x02
     f14:	d0 93 4b 01 	sts	0x014B, r29
     f18:	c0 93 4a 01 	sts	0x014A, r28
     f1c:	df 91       	pop	r29
     f1e:	cf 91       	pop	r28
     f20:	08 95       	ret

00000f22 <fdevopen>:
     f22:	0f 93       	push	r16
     f24:	1f 93       	push	r17
     f26:	cf 93       	push	r28
     f28:	df 93       	push	r29
     f2a:	ec 01       	movw	r28, r24
     f2c:	8b 01       	movw	r16, r22
     f2e:	00 97       	sbiw	r24, 0x00	; 0
     f30:	31 f4       	brne	.+12     	; 0xf3e <fdevopen+0x1c>
     f32:	61 15       	cp	r22, r1
     f34:	71 05       	cpc	r23, r1
     f36:	19 f4       	brne	.+6      	; 0xf3e <fdevopen+0x1c>
     f38:	80 e0       	ldi	r24, 0x00	; 0
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	38 c0       	rjmp	.+112    	; 0xfae <fdevopen+0x8c>
     f3e:	6e e0       	ldi	r22, 0x0E	; 14
     f40:	70 e0       	ldi	r23, 0x00	; 0
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <calloc>
     f4a:	fc 01       	movw	r30, r24
     f4c:	00 97       	sbiw	r24, 0x00	; 0
     f4e:	a1 f3       	breq	.-24     	; 0xf38 <fdevopen+0x16>
     f50:	80 e8       	ldi	r24, 0x80	; 128
     f52:	83 83       	std	Z+3, r24	; 0x03
     f54:	01 15       	cp	r16, r1
     f56:	11 05       	cpc	r17, r1
     f58:	71 f0       	breq	.+28     	; 0xf76 <fdevopen+0x54>
     f5a:	13 87       	std	Z+11, r17	; 0x0b
     f5c:	02 87       	std	Z+10, r16	; 0x0a
     f5e:	81 e8       	ldi	r24, 0x81	; 129
     f60:	83 83       	std	Z+3, r24	; 0x03
     f62:	80 91 4e 01 	lds	r24, 0x014E
     f66:	90 91 4f 01 	lds	r25, 0x014F
     f6a:	89 2b       	or	r24, r25
     f6c:	21 f4       	brne	.+8      	; 0xf76 <fdevopen+0x54>
     f6e:	f0 93 4f 01 	sts	0x014F, r31
     f72:	e0 93 4e 01 	sts	0x014E, r30
     f76:	20 97       	sbiw	r28, 0x00	; 0
     f78:	c9 f0       	breq	.+50     	; 0xfac <fdevopen+0x8a>
     f7a:	d1 87       	std	Z+9, r29	; 0x09
     f7c:	c0 87       	std	Z+8, r28	; 0x08
     f7e:	83 81       	ldd	r24, Z+3	; 0x03
     f80:	82 60       	ori	r24, 0x02	; 2
     f82:	83 83       	std	Z+3, r24	; 0x03
     f84:	80 91 50 01 	lds	r24, 0x0150
     f88:	90 91 51 01 	lds	r25, 0x0151
     f8c:	89 2b       	or	r24, r25
     f8e:	71 f4       	brne	.+28     	; 0xfac <fdevopen+0x8a>
     f90:	f0 93 51 01 	sts	0x0151, r31
     f94:	e0 93 50 01 	sts	0x0150, r30
     f98:	80 91 52 01 	lds	r24, 0x0152
     f9c:	90 91 53 01 	lds	r25, 0x0153
     fa0:	89 2b       	or	r24, r25
     fa2:	21 f4       	brne	.+8      	; 0xfac <fdevopen+0x8a>
     fa4:	f0 93 53 01 	sts	0x0153, r31
     fa8:	e0 93 52 01 	sts	0x0152, r30
     fac:	cf 01       	movw	r24, r30
     fae:	df 91       	pop	r29
     fb0:	cf 91       	pop	r28
     fb2:	1f 91       	pop	r17
     fb4:	0f 91       	pop	r16
     fb6:	08 95       	ret

00000fb8 <putchar>:
     fb8:	60 91 50 01 	lds	r22, 0x0150
     fbc:	70 91 51 01 	lds	r23, 0x0151
     fc0:	0e 94 06 08 	call	0x100c	; 0x100c <fputc>
     fc4:	08 95       	ret

00000fc6 <calloc>:
     fc6:	0f 93       	push	r16
     fc8:	1f 93       	push	r17
     fca:	cf 93       	push	r28
     fcc:	df 93       	push	r29
     fce:	86 9f       	mul	r24, r22
     fd0:	80 01       	movw	r16, r0
     fd2:	87 9f       	mul	r24, r23
     fd4:	10 0d       	add	r17, r0
     fd6:	96 9f       	mul	r25, r22
     fd8:	10 0d       	add	r17, r0
     fda:	11 24       	eor	r1, r1
     fdc:	c8 01       	movw	r24, r16
     fde:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <malloc>
     fe2:	ec 01       	movw	r28, r24
     fe4:	00 97       	sbiw	r24, 0x00	; 0
     fe6:	29 f0       	breq	.+10     	; 0xff2 <calloc+0x2c>
     fe8:	a8 01       	movw	r20, r16
     fea:	60 e0       	ldi	r22, 0x00	; 0
     fec:	70 e0       	ldi	r23, 0x00	; 0
     fee:	0e 94 ff 07 	call	0xffe	; 0xffe <memset>
     ff2:	ce 01       	movw	r24, r28
     ff4:	df 91       	pop	r29
     ff6:	cf 91       	pop	r28
     ff8:	1f 91       	pop	r17
     ffa:	0f 91       	pop	r16
     ffc:	08 95       	ret

00000ffe <memset>:
     ffe:	dc 01       	movw	r26, r24
    1000:	01 c0       	rjmp	.+2      	; 0x1004 <memset+0x6>
    1002:	6d 93       	st	X+, r22
    1004:	41 50       	subi	r20, 0x01	; 1
    1006:	50 40       	sbci	r21, 0x00	; 0
    1008:	e0 f7       	brcc	.-8      	; 0x1002 <memset+0x4>
    100a:	08 95       	ret

0000100c <fputc>:
    100c:	0f 93       	push	r16
    100e:	1f 93       	push	r17
    1010:	cf 93       	push	r28
    1012:	df 93       	push	r29
    1014:	18 2f       	mov	r17, r24
    1016:	09 2f       	mov	r16, r25
    1018:	eb 01       	movw	r28, r22
    101a:	8b 81       	ldd	r24, Y+3	; 0x03
    101c:	81 fd       	sbrc	r24, 1
    101e:	03 c0       	rjmp	.+6      	; 0x1026 <fputc+0x1a>
    1020:	8f ef       	ldi	r24, 0xFF	; 255
    1022:	9f ef       	ldi	r25, 0xFF	; 255
    1024:	20 c0       	rjmp	.+64     	; 0x1066 <fputc+0x5a>
    1026:	82 ff       	sbrs	r24, 2
    1028:	10 c0       	rjmp	.+32     	; 0x104a <fputc+0x3e>
    102a:	4e 81       	ldd	r20, Y+6	; 0x06
    102c:	5f 81       	ldd	r21, Y+7	; 0x07
    102e:	2c 81       	ldd	r18, Y+4	; 0x04
    1030:	3d 81       	ldd	r19, Y+5	; 0x05
    1032:	42 17       	cp	r20, r18
    1034:	53 07       	cpc	r21, r19
    1036:	7c f4       	brge	.+30     	; 0x1056 <fputc+0x4a>
    1038:	e8 81       	ld	r30, Y
    103a:	f9 81       	ldd	r31, Y+1	; 0x01
    103c:	9f 01       	movw	r18, r30
    103e:	2f 5f       	subi	r18, 0xFF	; 255
    1040:	3f 4f       	sbci	r19, 0xFF	; 255
    1042:	39 83       	std	Y+1, r19	; 0x01
    1044:	28 83       	st	Y, r18
    1046:	10 83       	st	Z, r17
    1048:	06 c0       	rjmp	.+12     	; 0x1056 <fputc+0x4a>
    104a:	e8 85       	ldd	r30, Y+8	; 0x08
    104c:	f9 85       	ldd	r31, Y+9	; 0x09
    104e:	81 2f       	mov	r24, r17
    1050:	09 95       	icall
    1052:	89 2b       	or	r24, r25
    1054:	29 f7       	brne	.-54     	; 0x1020 <fputc+0x14>
    1056:	2e 81       	ldd	r18, Y+6	; 0x06
    1058:	3f 81       	ldd	r19, Y+7	; 0x07
    105a:	2f 5f       	subi	r18, 0xFF	; 255
    105c:	3f 4f       	sbci	r19, 0xFF	; 255
    105e:	3f 83       	std	Y+7, r19	; 0x07
    1060:	2e 83       	std	Y+6, r18	; 0x06
    1062:	81 2f       	mov	r24, r17
    1064:	90 2f       	mov	r25, r16
    1066:	df 91       	pop	r29
    1068:	cf 91       	pop	r28
    106a:	1f 91       	pop	r17
    106c:	0f 91       	pop	r16
    106e:	08 95       	ret

00001070 <_exit>:
    1070:	f8 94       	cli

00001072 <__stop_program>:
    1072:	ff cf       	rjmp	.-2      	; 0x1072 <__stop_program>
