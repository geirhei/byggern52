
Group52.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000015a  00800100  0000155e  000015f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000155e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080025a  0080025a  0000174c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000174c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000240  00000000  00000000  000017a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000025f5  00000000  00000000  000019e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c91  00000000  00000000  00003fdd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c14  00000000  00000000  00004c6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000052c  00000000  00000000  00005884  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006ec  00000000  00000000  00005db0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001309  00000000  00000000  0000649c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000208  00000000  00000000  000077a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__ctors_end>
       4:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
       8:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
       c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      10:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      14:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      18:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      1c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      20:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      24:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      28:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      2c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      30:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      34:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      38:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      3c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      40:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      44:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      48:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      4c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      50:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      54:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      58:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      5c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      60:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      64:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      68:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      6c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	00 00       	nop
      72:	00 00       	nop
      74:	00 5c       	subi	r16, 0xC0	; 192
      76:	00 00       	nop
      78:	0c 00       	.word	0x000c	; ????
      7a:	0c 00       	.word	0x000c	; ????
      7c:	7c 28       	or	r7, r12
      7e:	7c 28       	or	r7, r12
      80:	58 dc       	rcall	.-1872   	; 0xfffff932 <__eeprom_end+0xff7ef932>
      82:	68 00       	.word	0x0068	; ????
      84:	24 10       	cpse	r2, r4
      86:	48 00       	.word	0x0048	; ????
      88:	28 54       	subi	r18, 0x48	; 72
      8a:	28 40       	sbci	r18, 0x08	; 8
      8c:	00 0c       	add	r0, r0
      8e:	00 00       	nop
      90:	00 78       	andi	r16, 0x80	; 128
      92:	84 00       	.word	0x0084	; ????
      94:	84 78       	andi	r24, 0x84	; 132
      96:	00 00       	nop
      98:	54 38       	cpi	r21, 0x84	; 132
      9a:	54 00       	.word	0x0054	; ????
      9c:	10 7c       	andi	r17, 0xC0	; 192
      9e:	10 00       	.word	0x0010	; ????
      a0:	80 40       	sbci	r24, 0x00	; 0
      a2:	00 00       	nop
      a4:	10 10       	cpse	r1, r0
      a6:	10 00       	.word	0x0010	; ????
      a8:	00 40       	sbci	r16, 0x00	; 0
      aa:	00 00       	nop
      ac:	60 10       	cpse	r6, r0
      ae:	0c 00       	.word	0x000c	; ????
      b0:	38 54       	subi	r19, 0x48	; 72
      b2:	38 00       	.word	0x0038	; ????
      b4:	48 7c       	andi	r20, 0xC8	; 200
      b6:	40 00       	.word	0x0040	; ????
      b8:	48 64       	ori	r20, 0x48	; 72
      ba:	58 00       	.word	0x0058	; ????
      bc:	44 54       	subi	r20, 0x44	; 68
      be:	2c 00       	.word	0x002c	; ????
      c0:	1c 10       	cpse	r1, r12
      c2:	7c 00       	.word	0x007c	; ????
      c4:	5c 54       	subi	r21, 0x4C	; 76
      c6:	24 00       	.word	0x0024	; ????
      c8:	38 54       	subi	r19, 0x48	; 72
      ca:	24 00       	.word	0x0024	; ????
      cc:	64 14       	cp	r6, r4
      ce:	0c 00       	.word	0x000c	; ????
      d0:	68 54       	subi	r22, 0x48	; 72
      d2:	2c 00       	.word	0x002c	; ????
      d4:	48 54       	subi	r20, 0x48	; 72
      d6:	38 00       	.word	0x0038	; ????
      d8:	00 48       	sbci	r16, 0x80	; 128
      da:	00 00       	nop
      dc:	80 48       	sbci	r24, 0x80	; 128
      de:	00 00       	nop
      e0:	10 28       	or	r1, r0
      e2:	44 00       	.word	0x0044	; ????
      e4:	28 28       	or	r2, r8
      e6:	28 00       	.word	0x0028	; ????
      e8:	44 28       	or	r4, r4
      ea:	10 00       	.word	0x0010	; ????
      ec:	04 54       	subi	r16, 0x44	; 68
      ee:	08 00       	.word	0x0008	; ????
      f0:	38 44       	sbci	r19, 0x48	; 72
      f2:	5c 00       	.word	0x005c	; ????
      f4:	78 14       	cp	r7, r8
      f6:	78 00       	.word	0x0078	; ????
      f8:	7c 54       	subi	r23, 0x4C	; 76
      fa:	28 00       	.word	0x0028	; ????
      fc:	38 44       	sbci	r19, 0x48	; 72
      fe:	28 00       	.word	0x0028	; ????
     100:	7c 44       	sbci	r23, 0x4C	; 76
     102:	38 00       	.word	0x0038	; ????
     104:	7c 54       	subi	r23, 0x4C	; 76
     106:	44 00       	.word	0x0044	; ????
     108:	7c 14       	cp	r7, r12
     10a:	04 00       	.word	0x0004	; ????
     10c:	38 44       	sbci	r19, 0x48	; 72
     10e:	74 00       	.word	0x0074	; ????
     110:	7c 10       	cpse	r7, r12
     112:	7c 00       	.word	0x007c	; ????
     114:	44 7c       	andi	r20, 0xC4	; 196
     116:	44 00       	.word	0x0044	; ????
     118:	20 40       	sbci	r18, 0x00	; 0
     11a:	3c 00       	.word	0x003c	; ????
     11c:	7c 10       	cpse	r7, r12
     11e:	6c 00       	.word	0x006c	; ????
     120:	7c 40       	sbci	r23, 0x0C	; 12
     122:	40 00       	.word	0x0040	; ????
     124:	7c 18       	sub	r7, r12
     126:	7c 00       	.word	0x007c	; ????
     128:	78 10       	cpse	r7, r8
     12a:	3c 00       	.word	0x003c	; ????
     12c:	38 44       	sbci	r19, 0x48	; 72
     12e:	38 00       	.word	0x0038	; ????
     130:	7c 14       	cp	r7, r12
     132:	08 00       	.word	0x0008	; ????
     134:	38 44       	sbci	r19, 0x48	; 72
     136:	b8 00       	.word	0x00b8	; ????
     138:	7c 14       	cp	r7, r12
     13a:	68 00       	.word	0x0068	; ????
     13c:	48 54       	subi	r20, 0x48	; 72
     13e:	24 00       	.word	0x0024	; ????
     140:	04 7c       	andi	r16, 0xC4	; 196
     142:	04 00       	.word	0x0004	; ????
     144:	7c 40       	sbci	r23, 0x0C	; 12
     146:	7c 00       	.word	0x007c	; ????
     148:	3c 60       	ori	r19, 0x0C	; 12
     14a:	3c 00       	.word	0x003c	; ????
     14c:	7c 30       	cpi	r23, 0x0C	; 12
     14e:	7c 00       	.word	0x007c	; ????
     150:	6c 10       	cpse	r6, r12
     152:	6c 00       	.word	0x006c	; ????
     154:	0c 70       	andi	r16, 0x0C	; 12
     156:	0c 00       	.word	0x000c	; ????
     158:	64 54       	subi	r22, 0x44	; 68
     15a:	4c 00       	.word	0x004c	; ????
     15c:	00 7c       	andi	r16, 0xC0	; 192
     15e:	44 00       	.word	0x0044	; ????
     160:	0c 10       	cpse	r0, r12
     162:	60 00       	.word	0x0060	; ????
     164:	44 7c       	andi	r20, 0xC4	; 196
     166:	00 00       	nop
     168:	08 04       	cpc	r0, r8
     16a:	08 00       	.word	0x0008	; ????
     16c:	80 80       	ld	r8, Z
     16e:	80 00       	.word	0x0080	; ????
     170:	00 04       	cpc	r0, r0
     172:	08 00       	.word	0x0008	; ????
     174:	30 48       	sbci	r19, 0x80	; 128
     176:	78 00       	.word	0x0078	; ????
     178:	7c 48       	sbci	r23, 0x8C	; 140
     17a:	30 00       	.word	0x0030	; ????
     17c:	30 48       	sbci	r19, 0x80	; 128
     17e:	48 00       	.word	0x0048	; ????
     180:	30 48       	sbci	r19, 0x80	; 128
     182:	7c 00       	.word	0x007c	; ????
     184:	30 68       	ori	r19, 0x80	; 128
     186:	50 00       	.word	0x0050	; ????
     188:	10 78       	andi	r17, 0x80	; 128
     18a:	14 00       	.word	0x0014	; ????
     18c:	90 a8       	ldd	r9, Z+48	; 0x30
     18e:	78 00       	.word	0x0078	; ????
     190:	7c 08       	sbc	r7, r12
     192:	70 00       	.word	0x0070	; ????
     194:	50 74       	andi	r21, 0x40	; 64
     196:	40 00       	.word	0x0040	; ????
     198:	80 80       	ld	r8, Z
     19a:	74 00       	.word	0x0074	; ????
     19c:	7c 10       	cpse	r7, r12
     19e:	68 00       	.word	0x0068	; ????
     1a0:	44 7c       	andi	r20, 0xC4	; 196
     1a2:	40 00       	.word	0x0040	; ????
     1a4:	78 10       	cpse	r7, r8
     1a6:	78 00       	.word	0x0078	; ????
     1a8:	78 08       	sbc	r7, r8
     1aa:	70 00       	.word	0x0070	; ????
     1ac:	30 48       	sbci	r19, 0x80	; 128
     1ae:	30 00       	.word	0x0030	; ????
     1b0:	f8 28       	or	r15, r8
     1b2:	10 00       	.word	0x0010	; ????
     1b4:	30 48       	sbci	r19, 0x80	; 128
     1b6:	f8 00       	.word	0x00f8	; ????
     1b8:	78 10       	cpse	r7, r8
     1ba:	08 00       	.word	0x0008	; ????
     1bc:	50 58       	subi	r21, 0x80	; 128
     1be:	28 00       	.word	0x0028	; ????
     1c0:	08 3c       	cpi	r16, 0xC8	; 200
     1c2:	48 00       	.word	0x0048	; ????
     1c4:	38 40       	sbci	r19, 0x08	; 8
     1c6:	78 00       	.word	0x0078	; ????
     1c8:	38 40       	sbci	r19, 0x08	; 8
     1ca:	38 00       	.word	0x0038	; ????
     1cc:	78 20       	and	r7, r8
     1ce:	78 00       	.word	0x0078	; ????
     1d0:	48 30       	cpi	r20, 0x08	; 8
     1d2:	48 00       	.word	0x0048	; ????
     1d4:	98 a0       	ldd	r9, Y+32	; 0x20
     1d6:	78 00       	.word	0x0078	; ????
     1d8:	48 68       	ori	r20, 0x88	; 136
     1da:	58 00       	.word	0x0058	; ????
     1dc:	10 78       	andi	r17, 0x80	; 128
     1de:	84 00       	.word	0x0084	; ????
     1e0:	00 7c       	andi	r16, 0xC0	; 192
     1e2:	00 00       	nop
     1e4:	84 78       	andi	r24, 0x84	; 132
     1e6:	10 00       	.word	0x0010	; ????
     1e8:	08 04       	cpc	r0, r8
     1ea:	08 04       	cpc	r0, r8

000001ec <__ctors_end>:
     1ec:	11 24       	eor	r1, r1
     1ee:	1f be       	out	0x3f, r1	; 63
     1f0:	cf ef       	ldi	r28, 0xFF	; 255
     1f2:	d4 e0       	ldi	r29, 0x04	; 4
     1f4:	de bf       	out	0x3e, r29	; 62
     1f6:	cd bf       	out	0x3d, r28	; 61

000001f8 <__do_copy_data>:
     1f8:	12 e0       	ldi	r17, 0x02	; 2
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b1 e0       	ldi	r27, 0x01	; 1
     1fe:	ee e5       	ldi	r30, 0x5E	; 94
     200:	f5 e1       	ldi	r31, 0x15	; 21
     202:	02 c0       	rjmp	.+4      	; 0x208 <__do_copy_data+0x10>
     204:	05 90       	lpm	r0, Z+
     206:	0d 92       	st	X+, r0
     208:	aa 35       	cpi	r26, 0x5A	; 90
     20a:	b1 07       	cpc	r27, r17
     20c:	d9 f7       	brne	.-10     	; 0x204 <__do_copy_data+0xc>

0000020e <__do_clear_bss>:
     20e:	22 e0       	ldi	r18, 0x02	; 2
     210:	aa e5       	ldi	r26, 0x5A	; 90
     212:	b2 e0       	ldi	r27, 0x02	; 2
     214:	01 c0       	rjmp	.+2      	; 0x218 <.do_clear_bss_start>

00000216 <.do_clear_bss_loop>:
     216:	1d 92       	st	X+, r1

00000218 <.do_clear_bss_start>:
     218:	a4 36       	cpi	r26, 0x64	; 100
     21a:	b2 07       	cpc	r27, r18
     21c:	e1 f7       	brne	.-8      	; 0x216 <.do_clear_bss_loop>
     21e:	0e 94 0d 02 	call	0x41a	; 0x41a <main>
     222:	0c 94 ad 0a 	jmp	0x155a	; 0x155a <_exit>

00000226 <__bad_interrupt>:
     226:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000022a <adc_read>:
#include <util/delay.h>
#include "adc.h"

uint8_t adc_read(DeviceType device){
	volatile char *adc = (char *) 0x1400;
	switch (device) {
     22a:	82 30       	cpi	r24, 0x02	; 2
     22c:	69 f0       	breq	.+26     	; 0x248 <adc_read+0x1e>
     22e:	18 f4       	brcc	.+6      	; 0x236 <adc_read+0xc>
     230:	81 30       	cpi	r24, 0x01	; 1
     232:	31 f0       	breq	.+12     	; 0x240 <adc_read+0x16>
     234:	14 c0       	rjmp	.+40     	; 0x25e <adc_read+0x34>
     236:	83 30       	cpi	r24, 0x03	; 3
     238:	59 f0       	breq	.+22     	; 0x250 <adc_read+0x26>
     23a:	84 30       	cpi	r24, 0x04	; 4
     23c:	69 f0       	breq	.+26     	; 0x258 <adc_read+0x2e>
     23e:	0f c0       	rjmp	.+30     	; 0x25e <adc_read+0x34>
		case JOYAXIS1:
		/* Select CH1 */
		adc[0] = 0b00000100;
     240:	84 e0       	ldi	r24, 0x04	; 4
     242:	80 93 00 14 	sts	0x1400, r24
		break;
     246:	0b c0       	rjmp	.+22     	; 0x25e <adc_read+0x34>
		
		case JOYAXIS2:
		/* Select CH2 */
		adc[0] = 0b00000101;
     248:	85 e0       	ldi	r24, 0x05	; 5
     24a:	80 93 00 14 	sts	0x1400, r24
		break;
     24e:	07 c0       	rjmp	.+14     	; 0x25e <adc_read+0x34>
		
		case LSLIDER:
		/* Select CH3 */
		adc[0] = 0b00000110;
     250:	86 e0       	ldi	r24, 0x06	; 6
     252:	80 93 00 14 	sts	0x1400, r24
		break;
     256:	03 c0       	rjmp	.+6      	; 0x25e <adc_read+0x34>
		
		case RSLIDER:
		/* Select CH1 */
		adc[0] = 0b00000111;
     258:	87 e0       	ldi	r24, 0x07	; 7
     25a:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     25e:	2c ec       	ldi	r18, 0xCC	; 204
     260:	8c e0       	ldi	r24, 0x0C	; 12
     262:	91 e0       	ldi	r25, 0x01	; 1
     264:	21 50       	subi	r18, 0x01	; 1
     266:	80 40       	sbci	r24, 0x00	; 0
     268:	90 40       	sbci	r25, 0x00	; 0
     26a:	e1 f7       	brne	.-8      	; 0x264 <adc_read+0x3a>
     26c:	00 c0       	rjmp	.+0      	; 0x26e <adc_read+0x44>
		break;
		default:
		break;
	}
	_delay_ms(70);
	return adc[0];
     26e:	80 91 00 14 	lds	r24, 0x1400
     272:	08 95       	ret

00000274 <CAN_init>:
#include "MCP2515.h"
#include "can.h"

void CAN_init(void)
{
	MCP_init();
     274:	0e 94 05 03 	call	0x60a	; 0x60a <MCP_init>
     278:	08 95       	ret

0000027a <CAN_message_send>:
}

/* High level function for sending a message on the CAN bus */
void CAN_message_send(can_message_t* msg)
{
     27a:	1f 93       	push	r17
     27c:	cf 93       	push	r28
     27e:	df 93       	push	r29
     280:	ec 01       	movw	r28, r24
	/* Only transmit buffer TXB0 is used */
	
	/* Loop until TXREQ is cleared */
	uint8_t status = MCP_read_status();
     282:	0e 94 db 02 	call	0x5b6	; 0x5b6 <MCP_read_status>
	uint8_t TXREQ = (status & (1 << 2));
	//printf("TXREQ: %02x\n", TXREQ);
	while (TXREQ) {
     286:	82 ff       	sbrs	r24, 2
     288:	04 c0       	rjmp	.+8      	; 0x292 <CAN_message_send+0x18>
		status = MCP_read_status();
     28a:	0e 94 db 02 	call	0x5b6	; 0x5b6 <MCP_read_status>
	
	/* Loop until TXREQ is cleared */
	uint8_t status = MCP_read_status();
	uint8_t TXREQ = (status & (1 << 2));
	//printf("TXREQ: %02x\n", TXREQ);
	while (TXREQ) {
     28e:	82 fd       	sbrc	r24, 2
     290:	fc cf       	rjmp	.-8      	; 0x28a <CAN_message_send+0x10>
		status = MCP_read_status();
		TXREQ = (status & (1 << 2));
	}
	
	/* Set message ID, standard mode*/
	MCP_write(MCP_TXB0CTRL + 2, 0); // High level identifier
     292:	60 e0       	ldi	r22, 0x00	; 0
     294:	82 e3       	ldi	r24, 0x32	; 50
     296:	0e 94 c0 02 	call	0x580	; 0x580 <MCP_write>
	MCP_write(MCP_TXB0CTRL + 3, (msg->id << 5)); // Low level identifier
     29a:	68 81       	ld	r22, Y
     29c:	62 95       	swap	r22
     29e:	66 0f       	add	r22, r22
     2a0:	60 7e       	andi	r22, 0xE0	; 224
     2a2:	83 e3       	ldi	r24, 0x33	; 51
     2a4:	0e 94 c0 02 	call	0x580	; 0x580 <MCP_write>
	//printf("msgid: %02x\n", value);
	
	/* Set data length */
	MCP_write(MCP_TXB0CTRL + 6, msg->length);
     2a8:	6a 81       	ldd	r22, Y+2	; 0x02
     2aa:	86 e3       	ldi	r24, 0x36	; 54
     2ac:	0e 94 c0 02 	call	0x580	; 0x580 <MCP_write>
	
	/* Load message data */
	for (uint8_t i = 0; i < msg->length; i++) {
     2b0:	8a 81       	ldd	r24, Y+2	; 0x02
     2b2:	88 23       	and	r24, r24
     2b4:	69 f0       	breq	.+26     	; 0x2d0 <CAN_message_send+0x56>
     2b6:	10 e0       	ldi	r17, 0x00	; 0
		MCP_write(MCP_TXB0CTRL + 7 + i, msg->data[i]);
     2b8:	fe 01       	movw	r30, r28
     2ba:	e1 0f       	add	r30, r17
     2bc:	f1 1d       	adc	r31, r1
     2be:	63 81       	ldd	r22, Z+3	; 0x03
     2c0:	87 e3       	ldi	r24, 0x37	; 55
     2c2:	81 0f       	add	r24, r17
     2c4:	0e 94 c0 02 	call	0x580	; 0x580 <MCP_write>
	
	/* Set data length */
	MCP_write(MCP_TXB0CTRL + 6, msg->length);
	
	/* Load message data */
	for (uint8_t i = 0; i < msg->length; i++) {
     2c8:	1f 5f       	subi	r17, 0xFF	; 255
     2ca:	8a 81       	ldd	r24, Y+2	; 0x02
     2cc:	18 17       	cp	r17, r24
     2ce:	a0 f3       	brcs	.-24     	; 0x2b8 <CAN_message_send+0x3e>
		MCP_write(MCP_TXB0CTRL + 7 + i, msg->data[i]);
	}
	
	/* Request to send contents of TXB0 */
	MCP_request_to_send(MCP_RTS_TX0);
     2d0:	81 e8       	ldi	r24, 0x81	; 129
     2d2:	0e 94 d5 02 	call	0x5aa	; 0x5aa <MCP_request_to_send>
     2d6:	df 91       	pop	r29
     2d8:	cf 91       	pop	r28
     2da:	1f 91       	pop	r17
     2dc:	08 95       	ret

000002de <JOYSTICK_init>:
#include "math.h"

void JOYSTICK_init(void)
{
	/* Set PB2 as input for button*/
	DDRB &= ~(1 << PB2);
     2de:	ba 98       	cbi	0x17, 2	; 23
	PORTB &= (1 << PB2);
     2e0:	88 b3       	in	r24, 0x18	; 24
     2e2:	84 70       	andi	r24, 0x04	; 4
     2e4:	88 bb       	out	0x18, r24	; 24
     2e6:	08 95       	ret

000002e8 <toPositionPercent>:
	return NEUTRAL;
}

int16_t toPositionPercent(int16_t value)
{
	value -= 127;
     2e8:	8f 57       	subi	r24, 0x7F	; 127
     2ea:	91 09       	sbc	r25, r1
	int16_t percentValue = round((float)value / 127 * 100);
     2ec:	bc 01       	movw	r22, r24
     2ee:	88 27       	eor	r24, r24
     2f0:	77 fd       	sbrc	r23, 7
     2f2:	80 95       	com	r24
     2f4:	98 2f       	mov	r25, r24
     2f6:	0e 94 16 05 	call	0xa2c	; 0xa2c <__floatsisf>
     2fa:	20 e0       	ldi	r18, 0x00	; 0
     2fc:	30 e0       	ldi	r19, 0x00	; 0
     2fe:	4e ef       	ldi	r20, 0xFE	; 254
     300:	52 e4       	ldi	r21, 0x42	; 66
     302:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <__divsf3>
     306:	20 e0       	ldi	r18, 0x00	; 0
     308:	30 e0       	ldi	r19, 0x00	; 0
     30a:	48 ec       	ldi	r20, 0xC8	; 200
     30c:	52 e4       	ldi	r21, 0x42	; 66
     30e:	0e 94 a2 05 	call	0xb44	; 0xb44 <__mulsf3>
     312:	0e 94 05 06 	call	0xc0a	; 0xc0a <round>
     316:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
	return percentValue;
}
     31a:	cb 01       	movw	r24, r22
     31c:	08 95       	ret

0000031e <JOYSTICK_get_position>:
{
	
}

struct positions JOYSTICK_get_position(void)
{
     31e:	ff 92       	push	r15
     320:	0f 93       	push	r16
     322:	1f 93       	push	r17
     324:	cf 93       	push	r28
     326:	df 93       	push	r29
     328:	cd b7       	in	r28, 0x3d	; 61
     32a:	de b7       	in	r29, 0x3e	; 62
     32c:	28 97       	sbiw	r28, 0x08	; 8
     32e:	0f b6       	in	r0, 0x3f	; 63
     330:	f8 94       	cli
     332:	de bf       	out	0x3e, r29	; 62
     334:	0f be       	out	0x3f, r0	; 63
     336:	cd bf       	out	0x3d, r28	; 61
	int16_t yValue = (int16_t) adc_read(JOYAXIS1);
     338:	81 e0       	ldi	r24, 0x01	; 1
     33a:	0e 94 15 01 	call	0x22a	; 0x22a <adc_read>
     33e:	f8 2e       	mov	r15, r24
	int16_t xValue = (int16_t) adc_read(JOYAXIS2);
     340:	82 e0       	ldi	r24, 0x02	; 2
     342:	0e 94 15 01 	call	0x22a	; 0x22a <adc_read>
	
	int16_t xPosition = toPositionPercent(xValue);
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	0e 94 74 01 	call	0x2e8	; 0x2e8 <toPositionPercent>
     34c:	18 2f       	mov	r17, r24
     34e:	09 2f       	mov	r16, r25
	int16_t yPosition = toPositionPercent(yValue);
     350:	8f 2d       	mov	r24, r15
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	0e 94 74 01 	call	0x2e8	; 0x2e8 <toPositionPercent>
	
	struct positions pos;
	pos.x = xPosition;
	pos.y = yPosition;
	
	return pos;
     358:	19 83       	std	Y+1, r17	; 0x01
     35a:	0a 83       	std	Y+2, r16	; 0x02
     35c:	8b 83       	std	Y+3, r24	; 0x03
     35e:	9c 83       	std	Y+4, r25	; 0x04
     360:	21 2f       	mov	r18, r17
     362:	30 2f       	mov	r19, r16
     364:	48 2f       	mov	r20, r24
     366:	59 2f       	mov	r21, r25
     368:	6d 81       	ldd	r22, Y+5	; 0x05
     36a:	7e 81       	ldd	r23, Y+6	; 0x06
}
     36c:	8f 81       	ldd	r24, Y+7	; 0x07
     36e:	98 85       	ldd	r25, Y+8	; 0x08
     370:	28 96       	adiw	r28, 0x08	; 8
     372:	0f b6       	in	r0, 0x3f	; 63
     374:	f8 94       	cli
     376:	de bf       	out	0x3e, r29	; 62
     378:	0f be       	out	0x3f, r0	; 63
     37a:	cd bf       	out	0x3d, r28	; 61
     37c:	df 91       	pop	r29
     37e:	cf 91       	pop	r28
     380:	1f 91       	pop	r17
     382:	0f 91       	pop	r16
     384:	ff 90       	pop	r15
     386:	08 95       	ret

00000388 <JOYSTICK_get_direction>:


DirectionType JOYSTICK_get_direction(void)
{
     388:	cf 93       	push	r28
     38a:	df 93       	push	r29
     38c:	cd b7       	in	r28, 0x3d	; 61
     38e:	de b7       	in	r29, 0x3e	; 62
     390:	28 97       	sbiw	r28, 0x08	; 8
     392:	0f b6       	in	r0, 0x3f	; 63
     394:	f8 94       	cli
     396:	de bf       	out	0x3e, r29	; 62
     398:	0f be       	out	0x3f, r0	; 63
     39a:	cd bf       	out	0x3d, r28	; 61
	struct positions pos = JOYSTICK_get_position();
     39c:	0e 94 8f 01 	call	0x31e	; 0x31e <JOYSTICK_get_position>
     3a0:	29 83       	std	Y+1, r18	; 0x01
     3a2:	3a 83       	std	Y+2, r19	; 0x02
     3a4:	4b 83       	std	Y+3, r20	; 0x03
     3a6:	5c 83       	std	Y+4, r21	; 0x04
     3a8:	29 81       	ldd	r18, Y+1	; 0x01
     3aa:	3a 81       	ldd	r19, Y+2	; 0x02
     3ac:	8b 81       	ldd	r24, Y+3	; 0x03
     3ae:	9c 81       	ldd	r25, Y+4	; 0x04
	int8_t THRESHOLD = 25;
	
	if (pos.y < THRESHOLD && pos.y > -THRESHOLD) {
     3b0:	ac 01       	movw	r20, r24
     3b2:	48 5e       	subi	r20, 0xE8	; 232
     3b4:	5f 4f       	sbci	r21, 0xFF	; 255
     3b6:	41 33       	cpi	r20, 0x31	; 49
     3b8:	51 05       	cpc	r21, r1
     3ba:	48 f4       	brcc	.+18     	; 0x3ce <JOYSTICK_get_direction+0x46>
		
		if (pos.x < -THRESHOLD) {
     3bc:	27 3e       	cpi	r18, 0xE7	; 231
     3be:	8f ef       	ldi	r24, 0xFF	; 255
     3c0:	38 07       	cpc	r19, r24
     3c2:	94 f0       	brlt	.+36     	; 0x3e8 <JOYSTICK_get_direction+0x60>
			return LEFT;
		} else if (pos.x > THRESHOLD) {
     3c4:	2a 31       	cpi	r18, 0x1A	; 26
     3c6:	31 05       	cpc	r19, r1
     3c8:	8c f4       	brge	.+34     	; 0x3ec <JOYSTICK_get_direction+0x64>
			return UP;
		}
		
	}
	
	return NEUTRAL;
     3ca:	80 e0       	ldi	r24, 0x00	; 0
     3cc:	16 c0       	rjmp	.+44     	; 0x3fa <JOYSTICK_get_direction+0x72>
			return LEFT;
		} else if (pos.x > THRESHOLD) {
			return RIGHT;
		}
		
	} else if (pos.x < THRESHOLD && pos.x > -THRESHOLD) {
     3ce:	28 5e       	subi	r18, 0xE8	; 232
     3d0:	3f 4f       	sbci	r19, 0xFF	; 255
     3d2:	21 33       	cpi	r18, 0x31	; 49
     3d4:	31 05       	cpc	r19, r1
     3d6:	60 f4       	brcc	.+24     	; 0x3f0 <JOYSTICK_get_direction+0x68>
		
		if (pos.y < -THRESHOLD) {
     3d8:	87 3e       	cpi	r24, 0xE7	; 231
     3da:	2f ef       	ldi	r18, 0xFF	; 255
     3dc:	92 07       	cpc	r25, r18
     3de:	54 f0       	brlt	.+20     	; 0x3f4 <JOYSTICK_get_direction+0x6c>
			return DOWN;
		} else if (pos.y > THRESHOLD) {
     3e0:	4a 97       	sbiw	r24, 0x1a	; 26
     3e2:	54 f4       	brge	.+20     	; 0x3f8 <JOYSTICK_get_direction+0x70>
			return UP;
		}
		
	}
	
	return NEUTRAL;
     3e4:	80 e0       	ldi	r24, 0x00	; 0
     3e6:	09 c0       	rjmp	.+18     	; 0x3fa <JOYSTICK_get_direction+0x72>
	int8_t THRESHOLD = 25;
	
	if (pos.y < THRESHOLD && pos.y > -THRESHOLD) {
		
		if (pos.x < -THRESHOLD) {
			return LEFT;
     3e8:	81 e0       	ldi	r24, 0x01	; 1
     3ea:	07 c0       	rjmp	.+14     	; 0x3fa <JOYSTICK_get_direction+0x72>
		} else if (pos.x > THRESHOLD) {
			return RIGHT;
     3ec:	82 e0       	ldi	r24, 0x02	; 2
     3ee:	05 c0       	rjmp	.+10     	; 0x3fa <JOYSTICK_get_direction+0x72>
			return UP;
		}
		
	}
	
	return NEUTRAL;
     3f0:	80 e0       	ldi	r24, 0x00	; 0
     3f2:	03 c0       	rjmp	.+6      	; 0x3fa <JOYSTICK_get_direction+0x72>
		}
		
	} else if (pos.x < THRESHOLD && pos.x > -THRESHOLD) {
		
		if (pos.y < -THRESHOLD) {
			return DOWN;
     3f4:	84 e0       	ldi	r24, 0x04	; 4
     3f6:	01 c0       	rjmp	.+2      	; 0x3fa <JOYSTICK_get_direction+0x72>
		} else if (pos.y > THRESHOLD) {
			return UP;
     3f8:	83 e0       	ldi	r24, 0x03	; 3
		}
		
	}
	
	return NEUTRAL;
}
     3fa:	28 96       	adiw	r28, 0x08	; 8
     3fc:	0f b6       	in	r0, 0x3f	; 63
     3fe:	f8 94       	cli
     400:	de bf       	out	0x3e, r29	; 62
     402:	0f be       	out	0x3f, r0	; 63
     404:	cd bf       	out	0x3d, r28	; 61
     406:	df 91       	pop	r29
     408:	cf 91       	pop	r28
     40a:	08 95       	ret

0000040c <JOYSTICK_read_button>:
	return pos;
}

uint8_t JOYSTICK_read_button(void)
{
	return (PINB & (1 << PB2)) == 0;
     40c:	86 b3       	in	r24, 0x16	; 22
     40e:	82 fb       	bst	r24, 2
     410:	88 27       	eor	r24, r24
     412:	80 f9       	bld	r24, 0
     414:	91 e0       	ldi	r25, 0x01	; 1
     416:	89 27       	eor	r24, r25
     418:	08 95       	ret

0000041a <main>:
void SRAM_test(void);
void SRAM_test2(void);


int main(void)
{
     41a:	cf 93       	push	r28
     41c:	df 93       	push	r29
     41e:	cd b7       	in	r28, 0x3d	; 61
     420:	de b7       	in	r29, 0x3e	; 62
     422:	2b 97       	sbiw	r28, 0x0b	; 11
     424:	0f b6       	in	r0, 0x3f	; 63
     426:	f8 94       	cli
     428:	de bf       	out	0x3e, r29	; 62
     42a:	0f be       	out	0x3f, r0	; 63
     42c:	cd bf       	out	0x3d, r28	; 61
	/* Needs to be set when using external memory */
	MCUCR |= (1 << SRE);
     42e:	85 b7       	in	r24, 0x35	; 53
     430:	80 68       	ori	r24, 0x80	; 128
     432:	85 bf       	out	0x35, r24	; 53

	fdevopen(USART_transmit, USART_receive);
     434:	67 e7       	ldi	r22, 0x77	; 119
     436:	74 e0       	ldi	r23, 0x04	; 4
     438:	83 e7       	ldi	r24, 0x73	; 115
     43a:	94 e0       	ldi	r25, 0x04	; 4
     43c:	0e 94 75 07 	call	0xeea	; 0xeea <fdevopen>
	USART_init(MYUBBR);
     440:	8f e1       	ldi	r24, 0x1F	; 31
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <USART_init>
	OLED_init();
     448:	0e 94 4a 03 	call	0x694	; 0x694 <OLED_init>
	JOYSTICK_init();
     44c:	0e 94 6f 01 	call	0x2de	; 0x2de <JOYSTICK_init>
	SPI_master_init();
     450:	0e 94 63 04 	call	0x8c6	; 0x8c6 <SPI_master_init>
	CAN_init();
     454:	0e 94 3a 01 	call	0x274	; 0x274 <CAN_init>
	
	OLED_reset();
     458:	0e 94 3c 03 	call	0x678	; 0x678 <OLED_reset>
	OLED_pos(2,20);
     45c:	64 e1       	ldi	r22, 0x14	; 20
     45e:	82 e0       	ldi	r24, 0x02	; 2
     460:	0e 94 2f 03 	call	0x65e	; 0x65e <OLED_pos>
	
	menuNode *menu = OLED_generate_menu();
     464:	0e 94 df 03 	call	0x7be	; 0x7be <OLED_generate_menu>
	OLED_print_menu(menu);
     468:	0e 94 23 04 	call	0x846	; 0x846 <OLED_print_menu>
	DirectionType joydir = NEUTRAL;
	uint8_t buttonPressed = 0;
	
	/* MCP TEST */
	
	char status = MCP_read(MCP_CANCTRL);
     46c:	8f e0       	ldi	r24, 0x0F	; 15
     46e:	0e 94 ad 02 	call	0x55a	; 0x55a <MCP_read>
	printf("CANCTRL: %02x\n", status);
     472:	1f 92       	push	r1
     474:	8f 93       	push	r24
     476:	86 e0       	ldi	r24, 0x06	; 6
     478:	91 e0       	ldi	r25, 0x01	; 1
     47a:	9f 93       	push	r25
     47c:	8f 93       	push	r24
     47e:	0e 94 c0 07 	call	0xf80	; 0xf80 <printf>
	
	can_message_t can_message;
	can_message.data[0] = 0;
     482:	1c 82       	std	Y+4, r1	; 0x04
	can_message.data[1] = 2;
     484:	82 e0       	ldi	r24, 0x02	; 2
     486:	8d 83       	std	Y+5, r24	; 0x05
	can_message.length = 2;
     488:	8b 83       	std	Y+3, r24	; 0x03
	can_message.id = 2;
     48a:	82 e0       	ldi	r24, 0x02	; 2
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	9a 83       	std	Y+2, r25	; 0x02
     490:	89 83       	std	Y+1, r24	; 0x01
	CAN_message_send(&can_message);
     492:	ce 01       	movw	r24, r28
     494:	01 96       	adiw	r24, 0x01	; 1
     496:	0e 94 3d 01 	call	0x27a	; 0x27a <CAN_message_send>
	
	uint8_t RXB0CTRL = MCP_read(MCP_RXB0CTRL);
     49a:	80 e6       	ldi	r24, 0x60	; 96
     49c:	0e 94 ad 02 	call	0x55a	; 0x55a <MCP_read>
	printf("RXB0CTRL: %02x\n", RXB0CTRL);
     4a0:	1f 92       	push	r1
     4a2:	8f 93       	push	r24
     4a4:	85 e1       	ldi	r24, 0x15	; 21
     4a6:	91 e0       	ldi	r25, 0x01	; 1
     4a8:	9f 93       	push	r25
     4aa:	8f 93       	push	r24
     4ac:	0e 94 c0 07 	call	0xf80	; 0xf80 <printf>
     4b0:	0f b6       	in	r0, 0x3f	; 63
     4b2:	f8 94       	cli
     4b4:	de bf       	out	0x3e, r29	; 62
     4b6:	0f be       	out	0x3f, r0	; 63
     4b8:	cd bf       	out	0x3d, r28	; 61
     4ba:	0f 2e       	mov	r0, r31
     4bc:	f6 e6       	ldi	r31, 0x66	; 102
     4be:	ff 2e       	mov	r15, r31
     4c0:	f0 2d       	mov	r31, r0
	
	uint8_t received;
	for (uint8_t i = 0; i < 8; i++) {
		received = MCP_read(MCP_RXB0CTRL + 6 + i);
		printf("Received: %02x\n", received);
     4c2:	05 e2       	ldi	r16, 0x25	; 37
     4c4:	11 e0       	ldi	r17, 0x01	; 1
	uint8_t RXB0CTRL = MCP_read(MCP_RXB0CTRL);
	printf("RXB0CTRL: %02x\n", RXB0CTRL);
	
	uint8_t received;
	for (uint8_t i = 0; i < 8; i++) {
		received = MCP_read(MCP_RXB0CTRL + 6 + i);
     4c6:	8f 2d       	mov	r24, r15
     4c8:	0e 94 ad 02 	call	0x55a	; 0x55a <MCP_read>
		printf("Received: %02x\n", received);
     4cc:	1f 92       	push	r1
     4ce:	8f 93       	push	r24
     4d0:	1f 93       	push	r17
     4d2:	0f 93       	push	r16
     4d4:	0e 94 c0 07 	call	0xf80	; 0xf80 <printf>
     4d8:	f3 94       	inc	r15
	
	uint8_t RXB0CTRL = MCP_read(MCP_RXB0CTRL);
	printf("RXB0CTRL: %02x\n", RXB0CTRL);
	
	uint8_t received;
	for (uint8_t i = 0; i < 8; i++) {
     4da:	0f 90       	pop	r0
     4dc:	0f 90       	pop	r0
     4de:	0f 90       	pop	r0
     4e0:	0f 90       	pop	r0
     4e2:	9e e6       	ldi	r25, 0x6E	; 110
     4e4:	f9 12       	cpse	r15, r25
     4e6:	ef cf       	rjmp	.-34     	; 0x4c6 <main+0xac>
		received = MCP_read(MCP_RXB0CTRL + 6 + i);
		printf("Received: %02x\n", received);
	}
	
	printf("\n");
     4e8:	8a e0       	ldi	r24, 0x0A	; 10
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <putchar>
	
	/* Clear CANINTF.RX0IF */
	uint8_t reg = MCP_read(MCP_EFLG);
     4f0:	8d e2       	ldi	r24, 0x2D	; 45
     4f2:	0e 94 ad 02 	call	0x55a	; 0x55a <MCP_read>
	reg &= ~(1 << 6);
     4f6:	68 2f       	mov	r22, r24
     4f8:	6f 7b       	andi	r22, 0xBF	; 191
	MCP_write(MCP_EFLG, reg);
     4fa:	8d e2       	ldi	r24, 0x2D	; 45
     4fc:	0e 94 c0 02 	call	0x580	; 0x580 <MCP_write>
	OLED_pos(2,20);
	
	menuNode *menu = OLED_generate_menu();
	OLED_print_menu(menu);
	
	uint8_t currentRow = 1;
     500:	11 e0       	ldi	r17, 0x01	; 1
				currentRow -= 1;
			}
			
		} else if (joydir == DOWN) {
			if (currentRow == 7) {
				currentRow = 1;
     502:	ee 24       	eor	r14, r14
     504:	e3 94       	inc	r14
	{	
		joydir = JOYSTICK_get_direction();
		lastRow = currentRow;
		if (joydir == UP) {
			if (currentRow == 1) {
				currentRow = 7;
     506:	0f 2e       	mov	r0, r31
     508:	f7 e0       	ldi	r31, 0x07	; 7
     50a:	ff 2e       	mov	r15, r31
     50c:	f0 2d       	mov	r31, r0
	
	/* MCP TEST END */
	
	while(1)
	{	
		joydir = JOYSTICK_get_direction();
     50e:	0e 94 c4 01 	call	0x388	; 0x388 <JOYSTICK_get_direction>
		lastRow = currentRow;
		if (joydir == UP) {
     512:	83 30       	cpi	r24, 0x03	; 3
     514:	29 f4       	brne	.+10     	; 0x520 <__stack+0x21>
			if (currentRow == 1) {
     516:	11 30       	cpi	r17, 0x01	; 1
     518:	51 f0       	breq	.+20     	; 0x52e <__stack+0x2f>
				currentRow = 7;
			} else {
				currentRow -= 1;
     51a:	0f ef       	ldi	r16, 0xFF	; 255
     51c:	01 0f       	add	r16, r17
     51e:	0c c0       	rjmp	.+24     	; 0x538 <__stack+0x39>
			}
			
		} else if (joydir == DOWN) {
     520:	84 30       	cpi	r24, 0x04	; 4
     522:	39 f4       	brne	.+14     	; 0x532 <__stack+0x33>
			if (currentRow == 7) {
     524:	17 30       	cpi	r17, 0x07	; 7
     526:	39 f0       	breq	.+14     	; 0x536 <__stack+0x37>
				currentRow = 1;
			} else {
				currentRow += 1;
     528:	01 e0       	ldi	r16, 0x01	; 1
     52a:	01 0f       	add	r16, r17
     52c:	05 c0       	rjmp	.+10     	; 0x538 <__stack+0x39>
	{	
		joydir = JOYSTICK_get_direction();
		lastRow = currentRow;
		if (joydir == UP) {
			if (currentRow == 1) {
				currentRow = 7;
     52e:	0f 2d       	mov	r16, r15
     530:	03 c0       	rjmp	.+6      	; 0x538 <__stack+0x39>
     532:	01 2f       	mov	r16, r17
     534:	01 c0       	rjmp	.+2      	; 0x538 <__stack+0x39>
				currentRow -= 1;
			}
			
		} else if (joydir == DOWN) {
			if (currentRow == 7) {
				currentRow = 1;
     536:	0e 2d       	mov	r16, r14
			} else {
				currentRow += 1;
			}
		}
		
		OLED_move_arrow(currentRow, 20, lastRow, 20);
     538:	24 e1       	ldi	r18, 0x14	; 20
     53a:	41 2f       	mov	r20, r17
     53c:	64 e1       	ldi	r22, 0x14	; 20
     53e:	80 2f       	mov	r24, r16
     540:	0e 94 ba 03 	call	0x774	; 0x774 <OLED_move_arrow>
		buttonPressed = JOYSTICK_read_button();
     544:	0e 94 06 02 	call	0x40c	; 0x40c <JOYSTICK_read_button>
     548:	10 2f       	mov	r17, r16
     54a:	e1 cf       	rjmp	.-62     	; 0x50e <__stack+0xf>

0000054c <MCP_reset>:
	MCP_modify_bit(MCP_RXB1CTRL, 0b01100000, 0xFF); // Turns masks/filters off for RX1
}

void MCP_reset(void)
{
	PORTB &= ~(1 << PB4);
     54c:	c4 98       	cbi	0x18, 4	; 24
	SPI_master_transmit(MCP_RESET);
     54e:	80 ec       	ldi	r24, 0xC0	; 192
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	0e 94 68 04 	call	0x8d0	; 0x8d0 <SPI_master_transmit>
	PORTB |= (1 << PB4);
     556:	c4 9a       	sbi	0x18, 4	; 24
     558:	08 95       	ret

0000055a <MCP_read>:
}

/* Returns the content of a register */
uint8_t MCP_read(uint8_t addr)
{
     55a:	cf 93       	push	r28
     55c:	c8 2f       	mov	r28, r24
	PORTB &= ~(1 << PB4);
     55e:	c4 98       	cbi	0x18, 4	; 24
	SPI_master_transmit(MCP_READ);
     560:	83 e0       	ldi	r24, 0x03	; 3
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	0e 94 68 04 	call	0x8d0	; 0x8d0 <SPI_master_transmit>
	SPI_master_transmit(addr);
     568:	8c 2f       	mov	r24, r28
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	0e 94 68 04 	call	0x8d0	; 0x8d0 <SPI_master_transmit>
	SPI_master_transmit(0x00);
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	0e 94 68 04 	call	0x8d0	; 0x8d0 <SPI_master_transmit>
	char data = SPDR;
     578:	8f b1       	in	r24, 0x0f	; 15
	PORTB |= (1 << PB4);
     57a:	c4 9a       	sbi	0x18, 4	; 24
	return data;
}
     57c:	cf 91       	pop	r28
     57e:	08 95       	ret

00000580 <MCP_write>:

void MCP_write(uint8_t addr, uint8_t data)
{
     580:	cf 93       	push	r28
     582:	df 93       	push	r29
     584:	d8 2f       	mov	r29, r24
     586:	c6 2f       	mov	r28, r22
	PORTB &= ~(1 << PB4);
     588:	c4 98       	cbi	0x18, 4	; 24
	SPI_master_transmit(MCP_WRITE);
     58a:	82 e0       	ldi	r24, 0x02	; 2
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	0e 94 68 04 	call	0x8d0	; 0x8d0 <SPI_master_transmit>
	SPI_master_transmit(addr);
     592:	8d 2f       	mov	r24, r29
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	0e 94 68 04 	call	0x8d0	; 0x8d0 <SPI_master_transmit>
	SPI_master_transmit(data);
     59a:	8c 2f       	mov	r24, r28
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	0e 94 68 04 	call	0x8d0	; 0x8d0 <SPI_master_transmit>
	PORTB |= (1 << PB4);
     5a2:	c4 9a       	sbi	0x18, 4	; 24
}
     5a4:	df 91       	pop	r29
     5a6:	cf 91       	pop	r28
     5a8:	08 95       	ret

000005aa <MCP_request_to_send>:
}

/* Instructs controller to begin message transmission for the selected buffers */
void MCP_request_to_send(uint8_t buffer)
{
	PORTB &= ~(1 << PB4);
     5aa:	c4 98       	cbi	0x18, 4	; 24
	SPI_master_transmit(buffer);
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	0e 94 68 04 	call	0x8d0	; 0x8d0 <SPI_master_transmit>
	PORTB |= (1 << PB4);
     5b2:	c4 9a       	sbi	0x18, 4	; 24
     5b4:	08 95       	ret

000005b6 <MCP_read_status>:
}

/* Returns some status bits for transmit and receive functions */
uint8_t MCP_read_status(void)
{
	PORTB &= ~(1 << PB4);
     5b6:	c4 98       	cbi	0x18, 4	; 24
	SPI_master_transmit(MCP_READ_STATUS);
     5b8:	80 ea       	ldi	r24, 0xA0	; 160
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	0e 94 68 04 	call	0x8d0	; 0x8d0 <SPI_master_transmit>
	//SPI_master_transmit(0x00); // Unneccessary because of "repeat data out"?
	char status = SPDR;
     5c0:	8f b1       	in	r24, 0x0f	; 15
	PORTB |= (1 << PB4);
     5c2:	c4 9a       	sbi	0x18, 4	; 24
	return status;
}
     5c4:	08 95       	ret

000005c6 <MCP_modify_bit>:
	MCP_modify_bit(MCP_CANCTRL, mask, mode);
}

/* Changes the value of the register bits specified by the mask */
void MCP_modify_bit(uint8_t addr, uint8_t mask, uint8_t data)
{
     5c6:	1f 93       	push	r17
     5c8:	cf 93       	push	r28
     5ca:	df 93       	push	r29
     5cc:	18 2f       	mov	r17, r24
     5ce:	d6 2f       	mov	r29, r22
     5d0:	c4 2f       	mov	r28, r20
	PORTB &= ~(1 << PB4);
     5d2:	c4 98       	cbi	0x18, 4	; 24
	SPI_master_transmit(MCP_BITMOD);
     5d4:	85 e0       	ldi	r24, 0x05	; 5
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	0e 94 68 04 	call	0x8d0	; 0x8d0 <SPI_master_transmit>
	SPI_master_transmit(addr);
     5dc:	81 2f       	mov	r24, r17
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	0e 94 68 04 	call	0x8d0	; 0x8d0 <SPI_master_transmit>
	SPI_master_transmit(mask);
     5e4:	8d 2f       	mov	r24, r29
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	0e 94 68 04 	call	0x8d0	; 0x8d0 <SPI_master_transmit>
	SPI_master_transmit(data);
     5ec:	8c 2f       	mov	r24, r28
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	0e 94 68 04 	call	0x8d0	; 0x8d0 <SPI_master_transmit>
	PORTB |= (1 << PB4);
     5f4:	c4 9a       	sbi	0x18, 4	; 24
     5f6:	df 91       	pop	r29
     5f8:	cf 91       	pop	r28
     5fa:	1f 91       	pop	r17
     5fc:	08 95       	ret

000005fe <MCP_set_mode>:
			break;
		default:
			break;
	}
	
	MCP_modify_bit(MCP_CANCTRL, mask, mode);
     5fe:	48 2f       	mov	r20, r24
     600:	60 ee       	ldi	r22, 0xE0	; 224
     602:	8f e0       	ldi	r24, 0x0F	; 15
     604:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <MCP_modify_bit>
     608:	08 95       	ret

0000060a <MCP_init>:
#include "MCP2515.h"
#include "mcp.h"

void MCP_init(void)
{
	MCP_reset();
     60a:	0e 94 a6 02 	call	0x54c	; 0x54c <MCP_reset>
	MCP_set_mode(MODE_LOOPBACK); // Sets loopback operation mode for testing
     60e:	80 e4       	ldi	r24, 0x40	; 64
     610:	0e 94 ff 02 	call	0x5fe	; 0x5fe <MCP_set_mode>
	MCP_modify_bit(MCP_RXB0CTRL, 0b01100000, 0xFF); // Turns masks/filters off for RX0
     614:	4f ef       	ldi	r20, 0xFF	; 255
     616:	60 e6       	ldi	r22, 0x60	; 96
     618:	80 e6       	ldi	r24, 0x60	; 96
     61a:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <MCP_modify_bit>
	MCP_modify_bit(MCP_RXB1CTRL, 0b01100000, 0xFF); // Turns masks/filters off for RX1
     61e:	4f ef       	ldi	r20, 0xFF	; 255
     620:	60 e6       	ldi	r22, 0x60	; 96
     622:	80 e7       	ldi	r24, 0x70	; 112
     624:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <MCP_modify_bit>
     628:	08 95       	ret

0000062a <OLED_goto_line>:
}

void OLED_write_c(char chr)
{
	volatile char *oled = (char *) 0x1000;
	oled[0] = chr;
     62a:	e0 e0       	ldi	r30, 0x00	; 0
     62c:	f0 e1       	ldi	r31, 0x10	; 16
     62e:	92 e2       	ldi	r25, 0x22	; 34
     630:	90 83       	st	Z, r25
     632:	80 83       	st	Z, r24
     634:	87 e0       	ldi	r24, 0x07	; 7
     636:	80 83       	st	Z, r24
     638:	08 95       	ret

0000063a <OLED_clear_line>:
	OLED_write_c(0x07);
}

void OLED_clear_line(uint8_t line)
{
	OLED_goto_line(line);
     63a:	0e 94 15 03 	call	0x62a	; 0x62a <OLED_goto_line>
}

void OLED_write_c(char chr)
{
	volatile char *oled = (char *) 0x1000;
	oled[0] = chr;
     63e:	e0 e0       	ldi	r30, 0x00	; 0
     640:	f0 e1       	ldi	r31, 0x10	; 16
     642:	81 e2       	ldi	r24, 0x21	; 33
     644:	80 83       	st	Z, r24
     646:	10 82       	st	Z, r1
     648:	8f e7       	ldi	r24, 0x7F	; 127
     64a:	80 83       	st	Z, r24
     64c:	80 e8       	ldi	r24, 0x80	; 128
     64e:	90 e0       	ldi	r25, 0x00	; 0
}

void OLED_write_d(char chr)
{
	volatile char *oled = (char *) 0x1200;
	oled[0] = chr;
     650:	e0 e0       	ldi	r30, 0x00	; 0
     652:	f2 e1       	ldi	r31, 0x12	; 18
     654:	10 82       	st	Z, r1
     656:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_c(0x21);
	OLED_write_c(0x00);
	OLED_write_c(0x7F);

	/* Write zeros to line */
	for (int i = 0; i < 128; i++) {
     658:	00 97       	sbiw	r24, 0x00	; 0
     65a:	e1 f7       	brne	.-8      	; 0x654 <OLED_clear_line+0x1a>
		OLED_write_d(0x00);
	}
}
     65c:	08 95       	ret

0000065e <OLED_pos>:
}

void OLED_write_c(char chr)
{
	volatile char *oled = (char *) 0x1000;
	oled[0] = chr;
     65e:	e0 e0       	ldi	r30, 0x00	; 0
     660:	f0 e1       	ldi	r31, 0x10	; 16
     662:	92 e2       	ldi	r25, 0x22	; 34
     664:	90 83       	st	Z, r25
     666:	80 83       	st	Z, r24
     668:	87 e0       	ldi	r24, 0x07	; 7
     66a:	80 83       	st	Z, r24
     66c:	81 e2       	ldi	r24, 0x21	; 33
     66e:	80 83       	st	Z, r24
     670:	60 83       	st	Z, r22
     672:	8f e7       	ldi	r24, 0x7F	; 127
     674:	80 83       	st	Z, r24
     676:	08 95       	ret

00000678 <OLED_reset>:
	OLED_write_c(column);
	OLED_write_c(0x7F);
}

void OLED_reset(void)
{
     678:	cf 93       	push	r28
	for (uint8_t i = 0; i < 8; i++) {
     67a:	c0 e0       	ldi	r28, 0x00	; 0
		OLED_clear_line(i);
     67c:	8c 2f       	mov	r24, r28
     67e:	0e 94 1d 03 	call	0x63a	; 0x63a <OLED_clear_line>
	OLED_write_c(0x7F);
}

void OLED_reset(void)
{
	for (uint8_t i = 0; i < 8; i++) {
     682:	cf 5f       	subi	r28, 0xFF	; 255
     684:	c8 30       	cpi	r28, 0x08	; 8
     686:	d1 f7       	brne	.-12     	; 0x67c <OLED_reset+0x4>
		OLED_clear_line(i);
	}
	OLED_pos(0,0);
     688:	60 e0       	ldi	r22, 0x00	; 0
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	0e 94 2f 03 	call	0x65e	; 0x65e <OLED_pos>

	// Redraw from SRAM?
}
     690:	cf 91       	pop	r28
     692:	08 95       	ret

00000694 <OLED_init>:
}

void OLED_write_c(char chr)
{
	volatile char *oled = (char *) 0x1000;
	oled[0] = chr;
     694:	e0 e0       	ldi	r30, 0x00	; 0
     696:	f0 e1       	ldi	r31, 0x10	; 16
     698:	8e ea       	ldi	r24, 0xAE	; 174
     69a:	80 83       	st	Z, r24
     69c:	81 ea       	ldi	r24, 0xA1	; 161
     69e:	80 83       	st	Z, r24
     6a0:	8a ed       	ldi	r24, 0xDA	; 218
     6a2:	80 83       	st	Z, r24
     6a4:	82 e1       	ldi	r24, 0x12	; 18
     6a6:	80 83       	st	Z, r24
     6a8:	88 ec       	ldi	r24, 0xC8	; 200
     6aa:	80 83       	st	Z, r24
     6ac:	88 ea       	ldi	r24, 0xA8	; 168
     6ae:	80 83       	st	Z, r24
     6b0:	8f e3       	ldi	r24, 0x3F	; 63
     6b2:	80 83       	st	Z, r24
     6b4:	85 ed       	ldi	r24, 0xD5	; 213
     6b6:	80 83       	st	Z, r24
     6b8:	80 e8       	ldi	r24, 0x80	; 128
     6ba:	80 83       	st	Z, r24
     6bc:	81 e8       	ldi	r24, 0x81	; 129
     6be:	80 83       	st	Z, r24
     6c0:	80 e5       	ldi	r24, 0x50	; 80
     6c2:	80 83       	st	Z, r24
     6c4:	89 ed       	ldi	r24, 0xD9	; 217
     6c6:	80 83       	st	Z, r24
     6c8:	81 e2       	ldi	r24, 0x21	; 33
     6ca:	80 83       	st	Z, r24
     6cc:	80 e2       	ldi	r24, 0x20	; 32
     6ce:	80 83       	st	Z, r24
     6d0:	10 82       	st	Z, r1
     6d2:	8b ed       	ldi	r24, 0xDB	; 219
     6d4:	80 83       	st	Z, r24
     6d6:	80 e3       	ldi	r24, 0x30	; 48
     6d8:	80 83       	st	Z, r24
     6da:	8d ea       	ldi	r24, 0xAD	; 173
     6dc:	80 83       	st	Z, r24
     6de:	10 82       	st	Z, r1
     6e0:	84 ea       	ldi	r24, 0xA4	; 164
     6e2:	80 83       	st	Z, r24
     6e4:	86 ea       	ldi	r24, 0xA6	; 166
     6e6:	80 83       	st	Z, r24
     6e8:	8f ea       	ldi	r24, 0xAF	; 175
     6ea:	80 83       	st	Z, r24
     6ec:	80 e0       	ldi	r24, 0x00	; 0
     6ee:	92 e0       	ldi	r25, 0x02	; 2
}

void OLED_write_d(char chr)
{
	volatile char *oled = (char *) 0x1200;
	oled[0] = chr;
     6f0:	e0 e0       	ldi	r30, 0x00	; 0
     6f2:	f2 e1       	ldi	r31, 0x12	; 18
     6f4:	2f ef       	ldi	r18, 0xFF	; 255
     6f6:	20 83       	st	Z, r18
     6f8:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_c(0x00);
	OLED_write_c(0xa4); //out follows RAM content
	OLED_write_c(0xa6); //set normal display
	OLED_write_c(0xaf); // display on
	
	for (int i = 0; i < 512; i++)
     6fa:	00 97       	sbiw	r24, 0x00	; 0
     6fc:	e1 f7       	brne	.-8      	; 0x6f6 <OLED_init+0x62>
	{
		OLED_write_d(0xFF);
	}
	
	OLED_reset();
     6fe:	0e 94 3c 03 	call	0x678	; 0x678 <OLED_reset>
     702:	08 95       	ret

00000704 <OLED_print_string>:

	// Redraw from SRAM?
}

void OLED_print_string(char* str)
{
     704:	cf 93       	push	r28
     706:	df 93       	push	r29
	uint8_t c;
	uint8_t font_width = 4; // Use sizeof array here
	uint8_t i = 0;
	while (str[i] != '\0') {
     708:	fc 01       	movw	r30, r24
     70a:	20 81       	ld	r18, Z
     70c:	22 23       	and	r18, r18
     70e:	11 f1       	breq	.+68     	; 0x754 <OLED_print_string+0x50>
     710:	dc 01       	movw	r26, r24

void OLED_print_string(char* str)
{
	uint8_t c;
	uint8_t font_width = 4; // Use sizeof array here
	uint8_t i = 0;
     712:	40 e0       	ldi	r20, 0x00	; 0

	// Redraw from SRAM?
}

void OLED_print_string(char* str)
{
     714:	60 e0       	ldi	r22, 0x00	; 0
     716:	50 e0       	ldi	r21, 0x00	; 0
}

void OLED_write_d(char chr)
{
	volatile char *oled = (char *) 0x1200;
	oled[0] = chr;
     718:	c0 e0       	ldi	r28, 0x00	; 0
     71a:	d2 e1       	ldi	r29, 0x12	; 18
     71c:	18 c0       	rjmp	.+48     	; 0x74e <OLED_print_string+0x4a>
	uint8_t c;
	uint8_t font_width = 4; // Use sizeof array here
	uint8_t i = 0;
	while (str[i] != '\0') {
		for (uint8_t j = 0; j < font_width; j++) {
			c = pgm_read_byte_near(font[str[i]-32] + j);
     71e:	ec 91       	ld	r30, X
     720:	f0 e0       	ldi	r31, 0x00	; 0
     722:	ee 0f       	add	r30, r30
     724:	ff 1f       	adc	r31, r31
     726:	ee 0f       	add	r30, r30
     728:	ff 1f       	adc	r31, r31
     72a:	e0 51       	subi	r30, 0x10	; 16
     72c:	f0 40       	sbci	r31, 0x00	; 0
     72e:	e2 0f       	add	r30, r18
     730:	f3 1f       	adc	r31, r19
     732:	e4 91       	lpm	r30, Z
}

void OLED_write_d(char chr)
{
	volatile char *oled = (char *) 0x1200;
	oled[0] = chr;
     734:	e8 83       	st	Y, r30
     736:	2f 5f       	subi	r18, 0xFF	; 255
     738:	3f 4f       	sbci	r19, 0xFF	; 255
{
	uint8_t c;
	uint8_t font_width = 4; // Use sizeof array here
	uint8_t i = 0;
	while (str[i] != '\0') {
		for (uint8_t j = 0; j < font_width; j++) {
     73a:	24 30       	cpi	r18, 0x04	; 4
     73c:	31 05       	cpc	r19, r1
     73e:	79 f7       	brne	.-34     	; 0x71e <OLED_print_string+0x1a>
			c = pgm_read_byte_near(font[str[i]-32] + j);
			OLED_write_d(c);
		}
		i++;
     740:	4f 5f       	subi	r20, 0xFF	; 255
void OLED_print_string(char* str)
{
	uint8_t c;
	uint8_t font_width = 4; // Use sizeof array here
	uint8_t i = 0;
	while (str[i] != '\0') {
     742:	dc 01       	movw	r26, r24
     744:	a4 0f       	add	r26, r20
     746:	b1 1d       	adc	r27, r1
     748:	2c 91       	ld	r18, X
     74a:	22 23       	and	r18, r18
     74c:	19 f0       	breq	.+6      	; 0x754 <OLED_print_string+0x50>

	// Redraw from SRAM?
}

void OLED_print_string(char* str)
{
     74e:	26 2f       	mov	r18, r22
     750:	35 2f       	mov	r19, r21
     752:	e5 cf       	rjmp	.-54     	; 0x71e <OLED_print_string+0x1a>
			c = pgm_read_byte_near(font[str[i]-32] + j);
			OLED_write_d(c);
		}
		i++;
	}
}
     754:	df 91       	pop	r29
     756:	cf 91       	pop	r28
     758:	08 95       	ret

0000075a <OLED_print_arrow>:

void OLED_print_arrow(uint8_t row, uint8_t col)
{
	OLED_pos(row, col);
     75a:	0e 94 2f 03 	call	0x65e	; 0x65e <OLED_pos>
}

void OLED_write_d(char chr)
{
	volatile char *oled = (char *) 0x1200;
	oled[0] = chr;
     75e:	e0 e0       	ldi	r30, 0x00	; 0
     760:	f2 e1       	ldi	r31, 0x12	; 18
     762:	88 e1       	ldi	r24, 0x18	; 24
     764:	80 83       	st	Z, r24
     766:	80 83       	st	Z, r24
     768:	9e e7       	ldi	r25, 0x7E	; 126
     76a:	90 83       	st	Z, r25
     76c:	9c e3       	ldi	r25, 0x3C	; 60
     76e:	90 83       	st	Z, r25
     770:	80 83       	st	Z, r24
     772:	08 95       	ret

00000774 <OLED_move_arrow>:
	OLED_write_d(0b00111100);
	OLED_write_d(0b00011000);
}

void OLED_move_arrow(uint8_t newRow, uint8_t newCol, uint8_t currentRow, uint8_t currentCol)
{
     774:	cf 93       	push	r28
     776:	df 93       	push	r29
     778:	c8 2f       	mov	r28, r24
     77a:	d6 2f       	mov	r29, r22
     77c:	84 2f       	mov	r24, r20
	OLED_pos(currentRow, currentCol);
     77e:	62 2f       	mov	r22, r18
     780:	0e 94 2f 03 	call	0x65e	; 0x65e <OLED_pos>
}

void OLED_write_d(char chr)
{
	volatile char *oled = (char *) 0x1200;
	oled[0] = chr;
     784:	e0 e0       	ldi	r30, 0x00	; 0
     786:	f2 e1       	ldi	r31, 0x12	; 18
     788:	10 82       	st	Z, r1
     78a:	10 82       	st	Z, r1
     78c:	10 82       	st	Z, r1
     78e:	10 82       	st	Z, r1
     790:	10 82       	st	Z, r1
	OLED_write_d(0b00000000);
	OLED_write_d(0b00000000);
	OLED_write_d(0b00000000);
	OLED_write_d(0b00000000);
	
	OLED_print_arrow(newRow, newCol);
     792:	6d 2f       	mov	r22, r29
     794:	8c 2f       	mov	r24, r28
     796:	0e 94 ad 03 	call	0x75a	; 0x75a <OLED_print_arrow>
}
     79a:	df 91       	pop	r29
     79c:	cf 91       	pop	r28
     79e:	08 95       	ret

000007a0 <OLED_create_node>:


menuNode *OLED_create_node(char* name, menuNode* parent)
{
     7a0:	cf 93       	push	r28
     7a2:	df 93       	push	r29
     7a4:	ec 01       	movw	r28, r24
	menuNode* ret = (menuNode*) malloc(sizeof(menuNode));
     7a6:	84 e1       	ldi	r24, 0x14	; 20
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	0e 94 4e 06 	call	0xc9c	; 0xc9c <malloc>
	ret->name = name;
     7ae:	fc 01       	movw	r30, r24
     7b0:	d1 83       	std	Z+1, r29	; 0x01
     7b2:	c0 83       	st	Z, r28
	ret->parent = NULL;
     7b4:	13 82       	std	Z+3, r1	; 0x03
     7b6:	12 82       	std	Z+2, r1	; 0x02
	return ret;
}
     7b8:	df 91       	pop	r29
     7ba:	cf 91       	pop	r28
     7bc:	08 95       	ret

000007be <OLED_generate_menu>:

// Implement function for freeing memory

menuNode *OLED_generate_menu(void)
{	
     7be:	af 92       	push	r10
     7c0:	bf 92       	push	r11
     7c2:	cf 92       	push	r12
     7c4:	df 92       	push	r13
     7c6:	ef 92       	push	r14
     7c8:	ff 92       	push	r15
     7ca:	0f 93       	push	r16
     7cc:	1f 93       	push	r17
     7ce:	cf 93       	push	r28
     7d0:	df 93       	push	r29
	menuNode *mainmenu = OLED_create_node("MAIN MENU", NULL);
     7d2:	60 e0       	ldi	r22, 0x00	; 0
     7d4:	70 e0       	ldi	r23, 0x00	; 0
     7d6:	87 e1       	ldi	r24, 0x17	; 23
     7d8:	92 e0       	ldi	r25, 0x02	; 2
     7da:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <OLED_create_node>
     7de:	ec 01       	movw	r28, r24
	menuNode *highscores = OLED_create_node("Highscores", mainmenu);
     7e0:	bc 01       	movw	r22, r24
     7e2:	81 e2       	ldi	r24, 0x21	; 33
     7e4:	92 e0       	ldi	r25, 0x02	; 2
     7e6:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <OLED_create_node>
     7ea:	6c 01       	movw	r12, r24
	menuNode *playgame = OLED_create_node("Start new game", mainmenu);
     7ec:	be 01       	movw	r22, r28
     7ee:	8c e2       	ldi	r24, 0x2C	; 44
     7f0:	92 e0       	ldi	r25, 0x02	; 2
     7f2:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <OLED_create_node>
     7f6:	5c 01       	movw	r10, r24
	menuNode *debugging = OLED_create_node("Debugging", mainmenu);
     7f8:	be 01       	movw	r22, r28
     7fa:	8b e3       	ldi	r24, 0x3B	; 59
     7fc:	92 e0       	ldi	r25, 0x02	; 2
     7fe:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <OLED_create_node>
     802:	8c 01       	movw	r16, r24
	menuNode *calibrate = OLED_create_node("Calibrate", mainmenu);
     804:	be 01       	movw	r22, r28
     806:	85 e4       	ldi	r24, 0x45	; 69
     808:	92 e0       	ldi	r25, 0x02	; 2
     80a:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <OLED_create_node>
     80e:	7c 01       	movw	r14, r24
	menuNode *difficulty = OLED_create_node("Difficulty", mainmenu);
     810:	be 01       	movw	r22, r28
     812:	8f e4       	ldi	r24, 0x4F	; 79
     814:	92 e0       	ldi	r25, 0x02	; 2
     816:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <OLED_create_node>
	calibrate->parent = mainmenu;
	difficulty->parent = mainmenu;
	debugging->parent = mainmenu;
	*/
	
	mainmenu->children[1] = playgame;
     81a:	bf 82       	std	Y+7, r11	; 0x07
     81c:	ae 82       	std	Y+6, r10	; 0x06
	mainmenu->children[2] = highscores;
     81e:	d9 86       	std	Y+9, r13	; 0x09
     820:	c8 86       	std	Y+8, r12	; 0x08
	mainmenu->children[3] = difficulty;
     822:	9b 87       	std	Y+11, r25	; 0x0b
     824:	8a 87       	std	Y+10, r24	; 0x0a
	mainmenu->children[4] = calibrate;
     826:	fd 86       	std	Y+13, r15	; 0x0d
     828:	ec 86       	std	Y+12, r14	; 0x0c
	mainmenu->children[5] = debugging;
     82a:	1f 87       	std	Y+15, r17	; 0x0f
     82c:	0e 87       	std	Y+14, r16	; 0x0e
	
	return mainmenu;
}
     82e:	ce 01       	movw	r24, r28
     830:	df 91       	pop	r29
     832:	cf 91       	pop	r28
     834:	1f 91       	pop	r17
     836:	0f 91       	pop	r16
     838:	ff 90       	pop	r15
     83a:	ef 90       	pop	r14
     83c:	df 90       	pop	r13
     83e:	cf 90       	pop	r12
     840:	bf 90       	pop	r11
     842:	af 90       	pop	r10
     844:	08 95       	ret

00000846 <OLED_print_menu>:

void OLED_print_menu(menuNode *node)
{
     846:	cf 93       	push	r28
     848:	df 93       	push	r29
     84a:	ec 01       	movw	r28, r24
	OLED_pos(0,50);
     84c:	62 e3       	ldi	r22, 0x32	; 50
     84e:	80 e0       	ldi	r24, 0x00	; 0
     850:	0e 94 2f 03 	call	0x65e	; 0x65e <OLED_pos>
	OLED_print_string(node->name);
     854:	88 81       	ld	r24, Y
     856:	99 81       	ldd	r25, Y+1	; 0x01
     858:	0e 94 82 03 	call	0x704	; 0x704 <OLED_print_string>
	//printf("%s\n", node->name);
	OLED_pos(1,50);
     85c:	62 e3       	ldi	r22, 0x32	; 50
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	0e 94 2f 03 	call	0x65e	; 0x65e <OLED_pos>
	OLED_print_string(node->children[1]->name);
     864:	ee 81       	ldd	r30, Y+6	; 0x06
     866:	ff 81       	ldd	r31, Y+7	; 0x07
     868:	80 81       	ld	r24, Z
     86a:	91 81       	ldd	r25, Z+1	; 0x01
     86c:	0e 94 82 03 	call	0x704	; 0x704 <OLED_print_string>
	OLED_pos(2,50);
     870:	62 e3       	ldi	r22, 0x32	; 50
     872:	82 e0       	ldi	r24, 0x02	; 2
     874:	0e 94 2f 03 	call	0x65e	; 0x65e <OLED_pos>
	OLED_print_string(node->children[2]->name);
     878:	e8 85       	ldd	r30, Y+8	; 0x08
     87a:	f9 85       	ldd	r31, Y+9	; 0x09
     87c:	80 81       	ld	r24, Z
     87e:	91 81       	ldd	r25, Z+1	; 0x01
     880:	0e 94 82 03 	call	0x704	; 0x704 <OLED_print_string>
	OLED_pos(3,50);
     884:	62 e3       	ldi	r22, 0x32	; 50
     886:	83 e0       	ldi	r24, 0x03	; 3
     888:	0e 94 2f 03 	call	0x65e	; 0x65e <OLED_pos>
	OLED_print_string(node->children[3]->name);
     88c:	ea 85       	ldd	r30, Y+10	; 0x0a
     88e:	fb 85       	ldd	r31, Y+11	; 0x0b
     890:	80 81       	ld	r24, Z
     892:	91 81       	ldd	r25, Z+1	; 0x01
     894:	0e 94 82 03 	call	0x704	; 0x704 <OLED_print_string>
	OLED_pos(4,50);
     898:	62 e3       	ldi	r22, 0x32	; 50
     89a:	84 e0       	ldi	r24, 0x04	; 4
     89c:	0e 94 2f 03 	call	0x65e	; 0x65e <OLED_pos>
	OLED_print_string(node->children[4]->name);
     8a0:	ec 85       	ldd	r30, Y+12	; 0x0c
     8a2:	fd 85       	ldd	r31, Y+13	; 0x0d
     8a4:	80 81       	ld	r24, Z
     8a6:	91 81       	ldd	r25, Z+1	; 0x01
     8a8:	0e 94 82 03 	call	0x704	; 0x704 <OLED_print_string>
	OLED_pos(5,50);
     8ac:	62 e3       	ldi	r22, 0x32	; 50
     8ae:	85 e0       	ldi	r24, 0x05	; 5
     8b0:	0e 94 2f 03 	call	0x65e	; 0x65e <OLED_pos>
	OLED_print_string(node->children[5]->name);
     8b4:	ee 85       	ldd	r30, Y+14	; 0x0e
     8b6:	ff 85       	ldd	r31, Y+15	; 0x0f
     8b8:	80 81       	ld	r24, Z
     8ba:	91 81       	ldd	r25, Z+1	; 0x01
     8bc:	0e 94 82 03 	call	0x704	; 0x704 <OLED_print_string>
     8c0:	df 91       	pop	r29
     8c2:	cf 91       	pop	r28
     8c4:	08 95       	ret

000008c6 <SPI_master_init>:
#include <avr/delay.h>

void SPI_master_init(void)
{
	/* Set ~SS, MOSI and SCK output, all others input */
	DDRB = (1 << PB4)|(1 << PB5)|(1 << PB7);
     8c6:	80 eb       	ldi	r24, 0xB0	; 176
     8c8:	87 bb       	out	0x17, r24	; 23
	
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1 << SPE)|(1 << MSTR)|(1 << SPR0);
     8ca:	81 e5       	ldi	r24, 0x51	; 81
     8cc:	8d b9       	out	0x0d, r24	; 13
     8ce:	08 95       	ret

000008d0 <SPI_master_transmit>:
}

void SPI_master_transmit(char cData)
{
	/* Start transmission */
	SPDR = cData;
     8d0:	8f b9       	out	0x0f, r24	; 15
	
	/* Wait for transmission to complete */
	while (!(SPSR & (1 << SPIF))) {
     8d2:	77 9b       	sbis	0x0e, 7	; 14
     8d4:	fe cf       	rjmp	.-4      	; 0x8d2 <SPI_master_transmit+0x2>
		;
	}
	
	// Interrupt here?
}
     8d6:	08 95       	ret

000008d8 <USART_init>:
#include <avr/io.h>

void USART_init(unsigned int ubrr)
{
	/* Set baud rate*/
	UBRR0H = (unsigned char)(ubrr >> 8 );
     8d8:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
     8da:	89 b9       	out	0x09, r24	; 9
	/*Enable receiver and transmitter*/
	UCSR0B = (1 << RXEN0)|(1 << TXEN0);
     8dc:	88 e1       	ldi	r24, 0x18	; 24
     8de:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1 << URSEL0)|(1 << USBS0)|(3 << UCSZ10);
     8e0:	8e e8       	ldi	r24, 0x8E	; 142
     8e2:	80 bd       	out	0x20, r24	; 32
     8e4:	08 95       	ret

000008e6 <USART_transmit>:
}

void USART_transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while (!( UCSR0A & (1 << UDRE0)))
     8e6:	5d 9b       	sbis	0x0b, 5	; 11
     8e8:	fe cf       	rjmp	.-4      	; 0x8e6 <USART_transmit>
		;
	/* Put data into buffer, sends the data */
	UDR0 = data;
     8ea:	8c b9       	out	0x0c, r24	; 12
     8ec:	08 95       	ret

000008ee <USART_receive>:
}

unsigned char USART_receive(void)
{
	/* Wait for data to be received */
	while ( !(UCSR0A & ( 1 << RXC0)) )
     8ee:	5f 9b       	sbis	0x0b, 7	; 11
     8f0:	fe cf       	rjmp	.-4      	; 0x8ee <USART_receive>
		;
	/* Get and return received data from buffer */
	return UDR0;
     8f2:	8c b1       	in	r24, 0x0c	; 12
}
     8f4:	08 95       	ret

000008f6 <__divsf3>:
     8f6:	0c d0       	rcall	.+24     	; 0x910 <__divsf3x>
     8f8:	eb c0       	rjmp	.+470    	; 0xad0 <__fp_round>
     8fa:	e3 d0       	rcall	.+454    	; 0xac2 <__fp_pscB>
     8fc:	40 f0       	brcs	.+16     	; 0x90e <__divsf3+0x18>
     8fe:	da d0       	rcall	.+436    	; 0xab4 <__fp_pscA>
     900:	30 f0       	brcs	.+12     	; 0x90e <__divsf3+0x18>
     902:	21 f4       	brne	.+8      	; 0x90c <__divsf3+0x16>
     904:	5f 3f       	cpi	r21, 0xFF	; 255
     906:	19 f0       	breq	.+6      	; 0x90e <__divsf3+0x18>
     908:	cc c0       	rjmp	.+408    	; 0xaa2 <__fp_inf>
     90a:	51 11       	cpse	r21, r1
     90c:	15 c1       	rjmp	.+554    	; 0xb38 <__fp_szero>
     90e:	cf c0       	rjmp	.+414    	; 0xaae <__fp_nan>

00000910 <__divsf3x>:
     910:	f0 d0       	rcall	.+480    	; 0xaf2 <__fp_split3>
     912:	98 f3       	brcs	.-26     	; 0x8fa <__divsf3+0x4>

00000914 <__divsf3_pse>:
     914:	99 23       	and	r25, r25
     916:	c9 f3       	breq	.-14     	; 0x90a <__divsf3+0x14>
     918:	55 23       	and	r21, r21
     91a:	b1 f3       	breq	.-20     	; 0x908 <__divsf3+0x12>
     91c:	95 1b       	sub	r25, r21
     91e:	55 0b       	sbc	r21, r21
     920:	bb 27       	eor	r27, r27
     922:	aa 27       	eor	r26, r26
     924:	62 17       	cp	r22, r18
     926:	73 07       	cpc	r23, r19
     928:	84 07       	cpc	r24, r20
     92a:	38 f0       	brcs	.+14     	; 0x93a <__divsf3_pse+0x26>
     92c:	9f 5f       	subi	r25, 0xFF	; 255
     92e:	5f 4f       	sbci	r21, 0xFF	; 255
     930:	22 0f       	add	r18, r18
     932:	33 1f       	adc	r19, r19
     934:	44 1f       	adc	r20, r20
     936:	aa 1f       	adc	r26, r26
     938:	a9 f3       	breq	.-22     	; 0x924 <__divsf3_pse+0x10>
     93a:	33 d0       	rcall	.+102    	; 0x9a2 <__divsf3_pse+0x8e>
     93c:	0e 2e       	mov	r0, r30
     93e:	3a f0       	brmi	.+14     	; 0x94e <__divsf3_pse+0x3a>
     940:	e0 e8       	ldi	r30, 0x80	; 128
     942:	30 d0       	rcall	.+96     	; 0x9a4 <__divsf3_pse+0x90>
     944:	91 50       	subi	r25, 0x01	; 1
     946:	50 40       	sbci	r21, 0x00	; 0
     948:	e6 95       	lsr	r30
     94a:	00 1c       	adc	r0, r0
     94c:	ca f7       	brpl	.-14     	; 0x940 <__divsf3_pse+0x2c>
     94e:	29 d0       	rcall	.+82     	; 0x9a2 <__divsf3_pse+0x8e>
     950:	fe 2f       	mov	r31, r30
     952:	27 d0       	rcall	.+78     	; 0x9a2 <__divsf3_pse+0x8e>
     954:	66 0f       	add	r22, r22
     956:	77 1f       	adc	r23, r23
     958:	88 1f       	adc	r24, r24
     95a:	bb 1f       	adc	r27, r27
     95c:	26 17       	cp	r18, r22
     95e:	37 07       	cpc	r19, r23
     960:	48 07       	cpc	r20, r24
     962:	ab 07       	cpc	r26, r27
     964:	b0 e8       	ldi	r27, 0x80	; 128
     966:	09 f0       	breq	.+2      	; 0x96a <__divsf3_pse+0x56>
     968:	bb 0b       	sbc	r27, r27
     96a:	80 2d       	mov	r24, r0
     96c:	bf 01       	movw	r22, r30
     96e:	ff 27       	eor	r31, r31
     970:	93 58       	subi	r25, 0x83	; 131
     972:	5f 4f       	sbci	r21, 0xFF	; 255
     974:	2a f0       	brmi	.+10     	; 0x980 <__divsf3_pse+0x6c>
     976:	9e 3f       	cpi	r25, 0xFE	; 254
     978:	51 05       	cpc	r21, r1
     97a:	68 f0       	brcs	.+26     	; 0x996 <__divsf3_pse+0x82>
     97c:	92 c0       	rjmp	.+292    	; 0xaa2 <__fp_inf>
     97e:	dc c0       	rjmp	.+440    	; 0xb38 <__fp_szero>
     980:	5f 3f       	cpi	r21, 0xFF	; 255
     982:	ec f3       	brlt	.-6      	; 0x97e <__divsf3_pse+0x6a>
     984:	98 3e       	cpi	r25, 0xE8	; 232
     986:	dc f3       	brlt	.-10     	; 0x97e <__divsf3_pse+0x6a>
     988:	86 95       	lsr	r24
     98a:	77 95       	ror	r23
     98c:	67 95       	ror	r22
     98e:	b7 95       	ror	r27
     990:	f7 95       	ror	r31
     992:	9f 5f       	subi	r25, 0xFF	; 255
     994:	c9 f7       	brne	.-14     	; 0x988 <__divsf3_pse+0x74>
     996:	88 0f       	add	r24, r24
     998:	91 1d       	adc	r25, r1
     99a:	96 95       	lsr	r25
     99c:	87 95       	ror	r24
     99e:	97 f9       	bld	r25, 7
     9a0:	08 95       	ret
     9a2:	e1 e0       	ldi	r30, 0x01	; 1
     9a4:	66 0f       	add	r22, r22
     9a6:	77 1f       	adc	r23, r23
     9a8:	88 1f       	adc	r24, r24
     9aa:	bb 1f       	adc	r27, r27
     9ac:	62 17       	cp	r22, r18
     9ae:	73 07       	cpc	r23, r19
     9b0:	84 07       	cpc	r24, r20
     9b2:	ba 07       	cpc	r27, r26
     9b4:	20 f0       	brcs	.+8      	; 0x9be <__divsf3_pse+0xaa>
     9b6:	62 1b       	sub	r22, r18
     9b8:	73 0b       	sbc	r23, r19
     9ba:	84 0b       	sbc	r24, r20
     9bc:	ba 0b       	sbc	r27, r26
     9be:	ee 1f       	adc	r30, r30
     9c0:	88 f7       	brcc	.-30     	; 0x9a4 <__divsf3_pse+0x90>
     9c2:	e0 95       	com	r30
     9c4:	08 95       	ret

000009c6 <__fixsfsi>:
     9c6:	04 d0       	rcall	.+8      	; 0x9d0 <__fixunssfsi>
     9c8:	68 94       	set
     9ca:	b1 11       	cpse	r27, r1
     9cc:	b5 c0       	rjmp	.+362    	; 0xb38 <__fp_szero>
     9ce:	08 95       	ret

000009d0 <__fixunssfsi>:
     9d0:	98 d0       	rcall	.+304    	; 0xb02 <__fp_splitA>
     9d2:	88 f0       	brcs	.+34     	; 0x9f6 <__fixunssfsi+0x26>
     9d4:	9f 57       	subi	r25, 0x7F	; 127
     9d6:	90 f0       	brcs	.+36     	; 0x9fc <__fixunssfsi+0x2c>
     9d8:	b9 2f       	mov	r27, r25
     9da:	99 27       	eor	r25, r25
     9dc:	b7 51       	subi	r27, 0x17	; 23
     9de:	a0 f0       	brcs	.+40     	; 0xa08 <__fixunssfsi+0x38>
     9e0:	d1 f0       	breq	.+52     	; 0xa16 <__fixunssfsi+0x46>
     9e2:	66 0f       	add	r22, r22
     9e4:	77 1f       	adc	r23, r23
     9e6:	88 1f       	adc	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	1a f0       	brmi	.+6      	; 0x9f2 <__fixunssfsi+0x22>
     9ec:	ba 95       	dec	r27
     9ee:	c9 f7       	brne	.-14     	; 0x9e2 <__fixunssfsi+0x12>
     9f0:	12 c0       	rjmp	.+36     	; 0xa16 <__fixunssfsi+0x46>
     9f2:	b1 30       	cpi	r27, 0x01	; 1
     9f4:	81 f0       	breq	.+32     	; 0xa16 <__fixunssfsi+0x46>
     9f6:	9f d0       	rcall	.+318    	; 0xb36 <__fp_zero>
     9f8:	b1 e0       	ldi	r27, 0x01	; 1
     9fa:	08 95       	ret
     9fc:	9c c0       	rjmp	.+312    	; 0xb36 <__fp_zero>
     9fe:	67 2f       	mov	r22, r23
     a00:	78 2f       	mov	r23, r24
     a02:	88 27       	eor	r24, r24
     a04:	b8 5f       	subi	r27, 0xF8	; 248
     a06:	39 f0       	breq	.+14     	; 0xa16 <__fixunssfsi+0x46>
     a08:	b9 3f       	cpi	r27, 0xF9	; 249
     a0a:	cc f3       	brlt	.-14     	; 0x9fe <__fixunssfsi+0x2e>
     a0c:	86 95       	lsr	r24
     a0e:	77 95       	ror	r23
     a10:	67 95       	ror	r22
     a12:	b3 95       	inc	r27
     a14:	d9 f7       	brne	.-10     	; 0xa0c <__fixunssfsi+0x3c>
     a16:	3e f4       	brtc	.+14     	; 0xa26 <__fixunssfsi+0x56>
     a18:	90 95       	com	r25
     a1a:	80 95       	com	r24
     a1c:	70 95       	com	r23
     a1e:	61 95       	neg	r22
     a20:	7f 4f       	sbci	r23, 0xFF	; 255
     a22:	8f 4f       	sbci	r24, 0xFF	; 255
     a24:	9f 4f       	sbci	r25, 0xFF	; 255
     a26:	08 95       	ret

00000a28 <__floatunsisf>:
     a28:	e8 94       	clt
     a2a:	09 c0       	rjmp	.+18     	; 0xa3e <__floatsisf+0x12>

00000a2c <__floatsisf>:
     a2c:	97 fb       	bst	r25, 7
     a2e:	3e f4       	brtc	.+14     	; 0xa3e <__floatsisf+0x12>
     a30:	90 95       	com	r25
     a32:	80 95       	com	r24
     a34:	70 95       	com	r23
     a36:	61 95       	neg	r22
     a38:	7f 4f       	sbci	r23, 0xFF	; 255
     a3a:	8f 4f       	sbci	r24, 0xFF	; 255
     a3c:	9f 4f       	sbci	r25, 0xFF	; 255
     a3e:	99 23       	and	r25, r25
     a40:	a9 f0       	breq	.+42     	; 0xa6c <__floatsisf+0x40>
     a42:	f9 2f       	mov	r31, r25
     a44:	96 e9       	ldi	r25, 0x96	; 150
     a46:	bb 27       	eor	r27, r27
     a48:	93 95       	inc	r25
     a4a:	f6 95       	lsr	r31
     a4c:	87 95       	ror	r24
     a4e:	77 95       	ror	r23
     a50:	67 95       	ror	r22
     a52:	b7 95       	ror	r27
     a54:	f1 11       	cpse	r31, r1
     a56:	f8 cf       	rjmp	.-16     	; 0xa48 <__floatsisf+0x1c>
     a58:	fa f4       	brpl	.+62     	; 0xa98 <__floatsisf+0x6c>
     a5a:	bb 0f       	add	r27, r27
     a5c:	11 f4       	brne	.+4      	; 0xa62 <__floatsisf+0x36>
     a5e:	60 ff       	sbrs	r22, 0
     a60:	1b c0       	rjmp	.+54     	; 0xa98 <__floatsisf+0x6c>
     a62:	6f 5f       	subi	r22, 0xFF	; 255
     a64:	7f 4f       	sbci	r23, 0xFF	; 255
     a66:	8f 4f       	sbci	r24, 0xFF	; 255
     a68:	9f 4f       	sbci	r25, 0xFF	; 255
     a6a:	16 c0       	rjmp	.+44     	; 0xa98 <__floatsisf+0x6c>
     a6c:	88 23       	and	r24, r24
     a6e:	11 f0       	breq	.+4      	; 0xa74 <__floatsisf+0x48>
     a70:	96 e9       	ldi	r25, 0x96	; 150
     a72:	11 c0       	rjmp	.+34     	; 0xa96 <__floatsisf+0x6a>
     a74:	77 23       	and	r23, r23
     a76:	21 f0       	breq	.+8      	; 0xa80 <__floatsisf+0x54>
     a78:	9e e8       	ldi	r25, 0x8E	; 142
     a7a:	87 2f       	mov	r24, r23
     a7c:	76 2f       	mov	r23, r22
     a7e:	05 c0       	rjmp	.+10     	; 0xa8a <__floatsisf+0x5e>
     a80:	66 23       	and	r22, r22
     a82:	71 f0       	breq	.+28     	; 0xaa0 <__floatsisf+0x74>
     a84:	96 e8       	ldi	r25, 0x86	; 134
     a86:	86 2f       	mov	r24, r22
     a88:	70 e0       	ldi	r23, 0x00	; 0
     a8a:	60 e0       	ldi	r22, 0x00	; 0
     a8c:	2a f0       	brmi	.+10     	; 0xa98 <__floatsisf+0x6c>
     a8e:	9a 95       	dec	r25
     a90:	66 0f       	add	r22, r22
     a92:	77 1f       	adc	r23, r23
     a94:	88 1f       	adc	r24, r24
     a96:	da f7       	brpl	.-10     	; 0xa8e <__floatsisf+0x62>
     a98:	88 0f       	add	r24, r24
     a9a:	96 95       	lsr	r25
     a9c:	87 95       	ror	r24
     a9e:	97 f9       	bld	r25, 7
     aa0:	08 95       	ret

00000aa2 <__fp_inf>:
     aa2:	97 f9       	bld	r25, 7
     aa4:	9f 67       	ori	r25, 0x7F	; 127
     aa6:	80 e8       	ldi	r24, 0x80	; 128
     aa8:	70 e0       	ldi	r23, 0x00	; 0
     aaa:	60 e0       	ldi	r22, 0x00	; 0
     aac:	08 95       	ret

00000aae <__fp_nan>:
     aae:	9f ef       	ldi	r25, 0xFF	; 255
     ab0:	80 ec       	ldi	r24, 0xC0	; 192
     ab2:	08 95       	ret

00000ab4 <__fp_pscA>:
     ab4:	00 24       	eor	r0, r0
     ab6:	0a 94       	dec	r0
     ab8:	16 16       	cp	r1, r22
     aba:	17 06       	cpc	r1, r23
     abc:	18 06       	cpc	r1, r24
     abe:	09 06       	cpc	r0, r25
     ac0:	08 95       	ret

00000ac2 <__fp_pscB>:
     ac2:	00 24       	eor	r0, r0
     ac4:	0a 94       	dec	r0
     ac6:	12 16       	cp	r1, r18
     ac8:	13 06       	cpc	r1, r19
     aca:	14 06       	cpc	r1, r20
     acc:	05 06       	cpc	r0, r21
     ace:	08 95       	ret

00000ad0 <__fp_round>:
     ad0:	09 2e       	mov	r0, r25
     ad2:	03 94       	inc	r0
     ad4:	00 0c       	add	r0, r0
     ad6:	11 f4       	brne	.+4      	; 0xadc <__fp_round+0xc>
     ad8:	88 23       	and	r24, r24
     ada:	52 f0       	brmi	.+20     	; 0xaf0 <__fp_round+0x20>
     adc:	bb 0f       	add	r27, r27
     ade:	40 f4       	brcc	.+16     	; 0xaf0 <__fp_round+0x20>
     ae0:	bf 2b       	or	r27, r31
     ae2:	11 f4       	brne	.+4      	; 0xae8 <__fp_round+0x18>
     ae4:	60 ff       	sbrs	r22, 0
     ae6:	04 c0       	rjmp	.+8      	; 0xaf0 <__fp_round+0x20>
     ae8:	6f 5f       	subi	r22, 0xFF	; 255
     aea:	7f 4f       	sbci	r23, 0xFF	; 255
     aec:	8f 4f       	sbci	r24, 0xFF	; 255
     aee:	9f 4f       	sbci	r25, 0xFF	; 255
     af0:	08 95       	ret

00000af2 <__fp_split3>:
     af2:	57 fd       	sbrc	r21, 7
     af4:	90 58       	subi	r25, 0x80	; 128
     af6:	44 0f       	add	r20, r20
     af8:	55 1f       	adc	r21, r21
     afa:	59 f0       	breq	.+22     	; 0xb12 <__fp_splitA+0x10>
     afc:	5f 3f       	cpi	r21, 0xFF	; 255
     afe:	71 f0       	breq	.+28     	; 0xb1c <__fp_splitA+0x1a>
     b00:	47 95       	ror	r20

00000b02 <__fp_splitA>:
     b02:	88 0f       	add	r24, r24
     b04:	97 fb       	bst	r25, 7
     b06:	99 1f       	adc	r25, r25
     b08:	61 f0       	breq	.+24     	; 0xb22 <__fp_splitA+0x20>
     b0a:	9f 3f       	cpi	r25, 0xFF	; 255
     b0c:	79 f0       	breq	.+30     	; 0xb2c <__fp_splitA+0x2a>
     b0e:	87 95       	ror	r24
     b10:	08 95       	ret
     b12:	12 16       	cp	r1, r18
     b14:	13 06       	cpc	r1, r19
     b16:	14 06       	cpc	r1, r20
     b18:	55 1f       	adc	r21, r21
     b1a:	f2 cf       	rjmp	.-28     	; 0xb00 <__fp_split3+0xe>
     b1c:	46 95       	lsr	r20
     b1e:	f1 df       	rcall	.-30     	; 0xb02 <__fp_splitA>
     b20:	08 c0       	rjmp	.+16     	; 0xb32 <__fp_splitA+0x30>
     b22:	16 16       	cp	r1, r22
     b24:	17 06       	cpc	r1, r23
     b26:	18 06       	cpc	r1, r24
     b28:	99 1f       	adc	r25, r25
     b2a:	f1 cf       	rjmp	.-30     	; 0xb0e <__fp_splitA+0xc>
     b2c:	86 95       	lsr	r24
     b2e:	71 05       	cpc	r23, r1
     b30:	61 05       	cpc	r22, r1
     b32:	08 94       	sec
     b34:	08 95       	ret

00000b36 <__fp_zero>:
     b36:	e8 94       	clt

00000b38 <__fp_szero>:
     b38:	bb 27       	eor	r27, r27
     b3a:	66 27       	eor	r22, r22
     b3c:	77 27       	eor	r23, r23
     b3e:	cb 01       	movw	r24, r22
     b40:	97 f9       	bld	r25, 7
     b42:	08 95       	ret

00000b44 <__mulsf3>:
     b44:	0b d0       	rcall	.+22     	; 0xb5c <__mulsf3x>
     b46:	c4 cf       	rjmp	.-120    	; 0xad0 <__fp_round>
     b48:	b5 df       	rcall	.-150    	; 0xab4 <__fp_pscA>
     b4a:	28 f0       	brcs	.+10     	; 0xb56 <__mulsf3+0x12>
     b4c:	ba df       	rcall	.-140    	; 0xac2 <__fp_pscB>
     b4e:	18 f0       	brcs	.+6      	; 0xb56 <__mulsf3+0x12>
     b50:	95 23       	and	r25, r21
     b52:	09 f0       	breq	.+2      	; 0xb56 <__mulsf3+0x12>
     b54:	a6 cf       	rjmp	.-180    	; 0xaa2 <__fp_inf>
     b56:	ab cf       	rjmp	.-170    	; 0xaae <__fp_nan>
     b58:	11 24       	eor	r1, r1
     b5a:	ee cf       	rjmp	.-36     	; 0xb38 <__fp_szero>

00000b5c <__mulsf3x>:
     b5c:	ca df       	rcall	.-108    	; 0xaf2 <__fp_split3>
     b5e:	a0 f3       	brcs	.-24     	; 0xb48 <__mulsf3+0x4>

00000b60 <__mulsf3_pse>:
     b60:	95 9f       	mul	r25, r21
     b62:	d1 f3       	breq	.-12     	; 0xb58 <__mulsf3+0x14>
     b64:	95 0f       	add	r25, r21
     b66:	50 e0       	ldi	r21, 0x00	; 0
     b68:	55 1f       	adc	r21, r21
     b6a:	62 9f       	mul	r22, r18
     b6c:	f0 01       	movw	r30, r0
     b6e:	72 9f       	mul	r23, r18
     b70:	bb 27       	eor	r27, r27
     b72:	f0 0d       	add	r31, r0
     b74:	b1 1d       	adc	r27, r1
     b76:	63 9f       	mul	r22, r19
     b78:	aa 27       	eor	r26, r26
     b7a:	f0 0d       	add	r31, r0
     b7c:	b1 1d       	adc	r27, r1
     b7e:	aa 1f       	adc	r26, r26
     b80:	64 9f       	mul	r22, r20
     b82:	66 27       	eor	r22, r22
     b84:	b0 0d       	add	r27, r0
     b86:	a1 1d       	adc	r26, r1
     b88:	66 1f       	adc	r22, r22
     b8a:	82 9f       	mul	r24, r18
     b8c:	22 27       	eor	r18, r18
     b8e:	b0 0d       	add	r27, r0
     b90:	a1 1d       	adc	r26, r1
     b92:	62 1f       	adc	r22, r18
     b94:	73 9f       	mul	r23, r19
     b96:	b0 0d       	add	r27, r0
     b98:	a1 1d       	adc	r26, r1
     b9a:	62 1f       	adc	r22, r18
     b9c:	83 9f       	mul	r24, r19
     b9e:	a0 0d       	add	r26, r0
     ba0:	61 1d       	adc	r22, r1
     ba2:	22 1f       	adc	r18, r18
     ba4:	74 9f       	mul	r23, r20
     ba6:	33 27       	eor	r19, r19
     ba8:	a0 0d       	add	r26, r0
     baa:	61 1d       	adc	r22, r1
     bac:	23 1f       	adc	r18, r19
     bae:	84 9f       	mul	r24, r20
     bb0:	60 0d       	add	r22, r0
     bb2:	21 1d       	adc	r18, r1
     bb4:	82 2f       	mov	r24, r18
     bb6:	76 2f       	mov	r23, r22
     bb8:	6a 2f       	mov	r22, r26
     bba:	11 24       	eor	r1, r1
     bbc:	9f 57       	subi	r25, 0x7F	; 127
     bbe:	50 40       	sbci	r21, 0x00	; 0
     bc0:	8a f0       	brmi	.+34     	; 0xbe4 <__mulsf3_pse+0x84>
     bc2:	e1 f0       	breq	.+56     	; 0xbfc <__mulsf3_pse+0x9c>
     bc4:	88 23       	and	r24, r24
     bc6:	4a f0       	brmi	.+18     	; 0xbda <__mulsf3_pse+0x7a>
     bc8:	ee 0f       	add	r30, r30
     bca:	ff 1f       	adc	r31, r31
     bcc:	bb 1f       	adc	r27, r27
     bce:	66 1f       	adc	r22, r22
     bd0:	77 1f       	adc	r23, r23
     bd2:	88 1f       	adc	r24, r24
     bd4:	91 50       	subi	r25, 0x01	; 1
     bd6:	50 40       	sbci	r21, 0x00	; 0
     bd8:	a9 f7       	brne	.-22     	; 0xbc4 <__mulsf3_pse+0x64>
     bda:	9e 3f       	cpi	r25, 0xFE	; 254
     bdc:	51 05       	cpc	r21, r1
     bde:	70 f0       	brcs	.+28     	; 0xbfc <__mulsf3_pse+0x9c>
     be0:	60 cf       	rjmp	.-320    	; 0xaa2 <__fp_inf>
     be2:	aa cf       	rjmp	.-172    	; 0xb38 <__fp_szero>
     be4:	5f 3f       	cpi	r21, 0xFF	; 255
     be6:	ec f3       	brlt	.-6      	; 0xbe2 <__mulsf3_pse+0x82>
     be8:	98 3e       	cpi	r25, 0xE8	; 232
     bea:	dc f3       	brlt	.-10     	; 0xbe2 <__mulsf3_pse+0x82>
     bec:	86 95       	lsr	r24
     bee:	77 95       	ror	r23
     bf0:	67 95       	ror	r22
     bf2:	b7 95       	ror	r27
     bf4:	f7 95       	ror	r31
     bf6:	e7 95       	ror	r30
     bf8:	9f 5f       	subi	r25, 0xFF	; 255
     bfa:	c1 f7       	brne	.-16     	; 0xbec <__mulsf3_pse+0x8c>
     bfc:	fe 2b       	or	r31, r30
     bfe:	88 0f       	add	r24, r24
     c00:	91 1d       	adc	r25, r1
     c02:	96 95       	lsr	r25
     c04:	87 95       	ror	r24
     c06:	97 f9       	bld	r25, 7
     c08:	08 95       	ret

00000c0a <round>:
     c0a:	7b df       	rcall	.-266    	; 0xb02 <__fp_splitA>
     c0c:	e0 f0       	brcs	.+56     	; 0xc46 <round+0x3c>
     c0e:	9e 37       	cpi	r25, 0x7E	; 126
     c10:	d8 f0       	brcs	.+54     	; 0xc48 <round+0x3e>
     c12:	96 39       	cpi	r25, 0x96	; 150
     c14:	b8 f4       	brcc	.+46     	; 0xc44 <round+0x3a>
     c16:	9e 38       	cpi	r25, 0x8E	; 142
     c18:	48 f4       	brcc	.+18     	; 0xc2c <round+0x22>
     c1a:	67 2f       	mov	r22, r23
     c1c:	78 2f       	mov	r23, r24
     c1e:	88 27       	eor	r24, r24
     c20:	98 5f       	subi	r25, 0xF8	; 248
     c22:	f9 cf       	rjmp	.-14     	; 0xc16 <round+0xc>
     c24:	86 95       	lsr	r24
     c26:	77 95       	ror	r23
     c28:	67 95       	ror	r22
     c2a:	93 95       	inc	r25
     c2c:	95 39       	cpi	r25, 0x95	; 149
     c2e:	d0 f3       	brcs	.-12     	; 0xc24 <round+0x1a>
     c30:	b6 2f       	mov	r27, r22
     c32:	b1 70       	andi	r27, 0x01	; 1
     c34:	6b 0f       	add	r22, r27
     c36:	71 1d       	adc	r23, r1
     c38:	81 1d       	adc	r24, r1
     c3a:	20 f4       	brcc	.+8      	; 0xc44 <round+0x3a>
     c3c:	87 95       	ror	r24
     c3e:	77 95       	ror	r23
     c40:	67 95       	ror	r22
     c42:	93 95       	inc	r25
     c44:	02 c0       	rjmp	.+4      	; 0xc4a <__fp_mintl>
     c46:	1c c0       	rjmp	.+56     	; 0xc80 <__fp_mpack>
     c48:	77 cf       	rjmp	.-274    	; 0xb38 <__fp_szero>

00000c4a <__fp_mintl>:
     c4a:	88 23       	and	r24, r24
     c4c:	71 f4       	brne	.+28     	; 0xc6a <__fp_mintl+0x20>
     c4e:	77 23       	and	r23, r23
     c50:	21 f0       	breq	.+8      	; 0xc5a <__fp_mintl+0x10>
     c52:	98 50       	subi	r25, 0x08	; 8
     c54:	87 2b       	or	r24, r23
     c56:	76 2f       	mov	r23, r22
     c58:	07 c0       	rjmp	.+14     	; 0xc68 <__fp_mintl+0x1e>
     c5a:	66 23       	and	r22, r22
     c5c:	11 f4       	brne	.+4      	; 0xc62 <__fp_mintl+0x18>
     c5e:	99 27       	eor	r25, r25
     c60:	0d c0       	rjmp	.+26     	; 0xc7c <__fp_mintl+0x32>
     c62:	90 51       	subi	r25, 0x10	; 16
     c64:	86 2b       	or	r24, r22
     c66:	70 e0       	ldi	r23, 0x00	; 0
     c68:	60 e0       	ldi	r22, 0x00	; 0
     c6a:	2a f0       	brmi	.+10     	; 0xc76 <__fp_mintl+0x2c>
     c6c:	9a 95       	dec	r25
     c6e:	66 0f       	add	r22, r22
     c70:	77 1f       	adc	r23, r23
     c72:	88 1f       	adc	r24, r24
     c74:	da f7       	brpl	.-10     	; 0xc6c <__fp_mintl+0x22>
     c76:	88 0f       	add	r24, r24
     c78:	96 95       	lsr	r25
     c7a:	87 95       	ror	r24
     c7c:	97 f9       	bld	r25, 7
     c7e:	08 95       	ret

00000c80 <__fp_mpack>:
     c80:	9f 3f       	cpi	r25, 0xFF	; 255
     c82:	31 f0       	breq	.+12     	; 0xc90 <__fp_mpack_finite+0xc>

00000c84 <__fp_mpack_finite>:
     c84:	91 50       	subi	r25, 0x01	; 1
     c86:	20 f4       	brcc	.+8      	; 0xc90 <__fp_mpack_finite+0xc>
     c88:	87 95       	ror	r24
     c8a:	77 95       	ror	r23
     c8c:	67 95       	ror	r22
     c8e:	b7 95       	ror	r27
     c90:	88 0f       	add	r24, r24
     c92:	91 1d       	adc	r25, r1
     c94:	96 95       	lsr	r25
     c96:	87 95       	ror	r24
     c98:	97 f9       	bld	r25, 7
     c9a:	08 95       	ret

00000c9c <malloc>:
     c9c:	cf 93       	push	r28
     c9e:	df 93       	push	r29
     ca0:	82 30       	cpi	r24, 0x02	; 2
     ca2:	91 05       	cpc	r25, r1
     ca4:	10 f4       	brcc	.+4      	; 0xcaa <malloc+0xe>
     ca6:	82 e0       	ldi	r24, 0x02	; 2
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	e0 91 5c 02 	lds	r30, 0x025C
     cae:	f0 91 5d 02 	lds	r31, 0x025D
     cb2:	20 e0       	ldi	r18, 0x00	; 0
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	a0 e0       	ldi	r26, 0x00	; 0
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	30 97       	sbiw	r30, 0x00	; 0
     cbc:	39 f1       	breq	.+78     	; 0xd0c <malloc+0x70>
     cbe:	40 81       	ld	r20, Z
     cc0:	51 81       	ldd	r21, Z+1	; 0x01
     cc2:	48 17       	cp	r20, r24
     cc4:	59 07       	cpc	r21, r25
     cc6:	b8 f0       	brcs	.+46     	; 0xcf6 <malloc+0x5a>
     cc8:	48 17       	cp	r20, r24
     cca:	59 07       	cpc	r21, r25
     ccc:	71 f4       	brne	.+28     	; 0xcea <malloc+0x4e>
     cce:	82 81       	ldd	r24, Z+2	; 0x02
     cd0:	93 81       	ldd	r25, Z+3	; 0x03
     cd2:	10 97       	sbiw	r26, 0x00	; 0
     cd4:	29 f0       	breq	.+10     	; 0xce0 <malloc+0x44>
     cd6:	13 96       	adiw	r26, 0x03	; 3
     cd8:	9c 93       	st	X, r25
     cda:	8e 93       	st	-X, r24
     cdc:	12 97       	sbiw	r26, 0x02	; 2
     cde:	2c c0       	rjmp	.+88     	; 0xd38 <malloc+0x9c>
     ce0:	90 93 5d 02 	sts	0x025D, r25
     ce4:	80 93 5c 02 	sts	0x025C, r24
     ce8:	27 c0       	rjmp	.+78     	; 0xd38 <malloc+0x9c>
     cea:	21 15       	cp	r18, r1
     cec:	31 05       	cpc	r19, r1
     cee:	31 f0       	breq	.+12     	; 0xcfc <malloc+0x60>
     cf0:	42 17       	cp	r20, r18
     cf2:	53 07       	cpc	r21, r19
     cf4:	18 f0       	brcs	.+6      	; 0xcfc <malloc+0x60>
     cf6:	a9 01       	movw	r20, r18
     cf8:	db 01       	movw	r26, r22
     cfa:	01 c0       	rjmp	.+2      	; 0xcfe <malloc+0x62>
     cfc:	ef 01       	movw	r28, r30
     cfe:	9a 01       	movw	r18, r20
     d00:	bd 01       	movw	r22, r26
     d02:	df 01       	movw	r26, r30
     d04:	02 80       	ldd	r0, Z+2	; 0x02
     d06:	f3 81       	ldd	r31, Z+3	; 0x03
     d08:	e0 2d       	mov	r30, r0
     d0a:	d7 cf       	rjmp	.-82     	; 0xcba <malloc+0x1e>
     d0c:	21 15       	cp	r18, r1
     d0e:	31 05       	cpc	r19, r1
     d10:	f9 f0       	breq	.+62     	; 0xd50 <malloc+0xb4>
     d12:	28 1b       	sub	r18, r24
     d14:	39 0b       	sbc	r19, r25
     d16:	24 30       	cpi	r18, 0x04	; 4
     d18:	31 05       	cpc	r19, r1
     d1a:	80 f4       	brcc	.+32     	; 0xd3c <malloc+0xa0>
     d1c:	8a 81       	ldd	r24, Y+2	; 0x02
     d1e:	9b 81       	ldd	r25, Y+3	; 0x03
     d20:	61 15       	cp	r22, r1
     d22:	71 05       	cpc	r23, r1
     d24:	21 f0       	breq	.+8      	; 0xd2e <malloc+0x92>
     d26:	fb 01       	movw	r30, r22
     d28:	93 83       	std	Z+3, r25	; 0x03
     d2a:	82 83       	std	Z+2, r24	; 0x02
     d2c:	04 c0       	rjmp	.+8      	; 0xd36 <malloc+0x9a>
     d2e:	90 93 5d 02 	sts	0x025D, r25
     d32:	80 93 5c 02 	sts	0x025C, r24
     d36:	fe 01       	movw	r30, r28
     d38:	32 96       	adiw	r30, 0x02	; 2
     d3a:	44 c0       	rjmp	.+136    	; 0xdc4 <malloc+0x128>
     d3c:	fe 01       	movw	r30, r28
     d3e:	e2 0f       	add	r30, r18
     d40:	f3 1f       	adc	r31, r19
     d42:	81 93       	st	Z+, r24
     d44:	91 93       	st	Z+, r25
     d46:	22 50       	subi	r18, 0x02	; 2
     d48:	31 09       	sbc	r19, r1
     d4a:	39 83       	std	Y+1, r19	; 0x01
     d4c:	28 83       	st	Y, r18
     d4e:	3a c0       	rjmp	.+116    	; 0xdc4 <malloc+0x128>
     d50:	20 91 5a 02 	lds	r18, 0x025A
     d54:	30 91 5b 02 	lds	r19, 0x025B
     d58:	23 2b       	or	r18, r19
     d5a:	41 f4       	brne	.+16     	; 0xd6c <malloc+0xd0>
     d5c:	20 91 02 01 	lds	r18, 0x0102
     d60:	30 91 03 01 	lds	r19, 0x0103
     d64:	30 93 5b 02 	sts	0x025B, r19
     d68:	20 93 5a 02 	sts	0x025A, r18
     d6c:	20 91 00 01 	lds	r18, 0x0100
     d70:	30 91 01 01 	lds	r19, 0x0101
     d74:	21 15       	cp	r18, r1
     d76:	31 05       	cpc	r19, r1
     d78:	41 f4       	brne	.+16     	; 0xd8a <malloc+0xee>
     d7a:	2d b7       	in	r18, 0x3d	; 61
     d7c:	3e b7       	in	r19, 0x3e	; 62
     d7e:	40 91 04 01 	lds	r20, 0x0104
     d82:	50 91 05 01 	lds	r21, 0x0105
     d86:	24 1b       	sub	r18, r20
     d88:	35 0b       	sbc	r19, r21
     d8a:	e0 91 5a 02 	lds	r30, 0x025A
     d8e:	f0 91 5b 02 	lds	r31, 0x025B
     d92:	e2 17       	cp	r30, r18
     d94:	f3 07       	cpc	r31, r19
     d96:	a0 f4       	brcc	.+40     	; 0xdc0 <malloc+0x124>
     d98:	2e 1b       	sub	r18, r30
     d9a:	3f 0b       	sbc	r19, r31
     d9c:	28 17       	cp	r18, r24
     d9e:	39 07       	cpc	r19, r25
     da0:	78 f0       	brcs	.+30     	; 0xdc0 <malloc+0x124>
     da2:	ac 01       	movw	r20, r24
     da4:	4e 5f       	subi	r20, 0xFE	; 254
     da6:	5f 4f       	sbci	r21, 0xFF	; 255
     da8:	24 17       	cp	r18, r20
     daa:	35 07       	cpc	r19, r21
     dac:	48 f0       	brcs	.+18     	; 0xdc0 <malloc+0x124>
     dae:	4e 0f       	add	r20, r30
     db0:	5f 1f       	adc	r21, r31
     db2:	50 93 5b 02 	sts	0x025B, r21
     db6:	40 93 5a 02 	sts	0x025A, r20
     dba:	81 93       	st	Z+, r24
     dbc:	91 93       	st	Z+, r25
     dbe:	02 c0       	rjmp	.+4      	; 0xdc4 <malloc+0x128>
     dc0:	e0 e0       	ldi	r30, 0x00	; 0
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	cf 01       	movw	r24, r30
     dc6:	df 91       	pop	r29
     dc8:	cf 91       	pop	r28
     dca:	08 95       	ret

00000dcc <free>:
     dcc:	cf 93       	push	r28
     dce:	df 93       	push	r29
     dd0:	00 97       	sbiw	r24, 0x00	; 0
     dd2:	09 f4       	brne	.+2      	; 0xdd6 <free+0xa>
     dd4:	87 c0       	rjmp	.+270    	; 0xee4 <free+0x118>
     dd6:	fc 01       	movw	r30, r24
     dd8:	32 97       	sbiw	r30, 0x02	; 2
     dda:	13 82       	std	Z+3, r1	; 0x03
     ddc:	12 82       	std	Z+2, r1	; 0x02
     dde:	c0 91 5c 02 	lds	r28, 0x025C
     de2:	d0 91 5d 02 	lds	r29, 0x025D
     de6:	20 97       	sbiw	r28, 0x00	; 0
     de8:	81 f4       	brne	.+32     	; 0xe0a <free+0x3e>
     dea:	20 81       	ld	r18, Z
     dec:	31 81       	ldd	r19, Z+1	; 0x01
     dee:	28 0f       	add	r18, r24
     df0:	39 1f       	adc	r19, r25
     df2:	80 91 5a 02 	lds	r24, 0x025A
     df6:	90 91 5b 02 	lds	r25, 0x025B
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	79 f5       	brne	.+94     	; 0xe5e <free+0x92>
     e00:	f0 93 5b 02 	sts	0x025B, r31
     e04:	e0 93 5a 02 	sts	0x025A, r30
     e08:	6d c0       	rjmp	.+218    	; 0xee4 <free+0x118>
     e0a:	de 01       	movw	r26, r28
     e0c:	20 e0       	ldi	r18, 0x00	; 0
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	ae 17       	cp	r26, r30
     e12:	bf 07       	cpc	r27, r31
     e14:	50 f4       	brcc	.+20     	; 0xe2a <free+0x5e>
     e16:	12 96       	adiw	r26, 0x02	; 2
     e18:	4d 91       	ld	r20, X+
     e1a:	5c 91       	ld	r21, X
     e1c:	13 97       	sbiw	r26, 0x03	; 3
     e1e:	9d 01       	movw	r18, r26
     e20:	41 15       	cp	r20, r1
     e22:	51 05       	cpc	r21, r1
     e24:	09 f1       	breq	.+66     	; 0xe68 <free+0x9c>
     e26:	da 01       	movw	r26, r20
     e28:	f3 cf       	rjmp	.-26     	; 0xe10 <free+0x44>
     e2a:	b3 83       	std	Z+3, r27	; 0x03
     e2c:	a2 83       	std	Z+2, r26	; 0x02
     e2e:	40 81       	ld	r20, Z
     e30:	51 81       	ldd	r21, Z+1	; 0x01
     e32:	84 0f       	add	r24, r20
     e34:	95 1f       	adc	r25, r21
     e36:	8a 17       	cp	r24, r26
     e38:	9b 07       	cpc	r25, r27
     e3a:	71 f4       	brne	.+28     	; 0xe58 <free+0x8c>
     e3c:	8d 91       	ld	r24, X+
     e3e:	9c 91       	ld	r25, X
     e40:	11 97       	sbiw	r26, 0x01	; 1
     e42:	84 0f       	add	r24, r20
     e44:	95 1f       	adc	r25, r21
     e46:	02 96       	adiw	r24, 0x02	; 2
     e48:	91 83       	std	Z+1, r25	; 0x01
     e4a:	80 83       	st	Z, r24
     e4c:	12 96       	adiw	r26, 0x02	; 2
     e4e:	8d 91       	ld	r24, X+
     e50:	9c 91       	ld	r25, X
     e52:	13 97       	sbiw	r26, 0x03	; 3
     e54:	93 83       	std	Z+3, r25	; 0x03
     e56:	82 83       	std	Z+2, r24	; 0x02
     e58:	21 15       	cp	r18, r1
     e5a:	31 05       	cpc	r19, r1
     e5c:	29 f4       	brne	.+10     	; 0xe68 <free+0x9c>
     e5e:	f0 93 5d 02 	sts	0x025D, r31
     e62:	e0 93 5c 02 	sts	0x025C, r30
     e66:	3e c0       	rjmp	.+124    	; 0xee4 <free+0x118>
     e68:	d9 01       	movw	r26, r18
     e6a:	13 96       	adiw	r26, 0x03	; 3
     e6c:	fc 93       	st	X, r31
     e6e:	ee 93       	st	-X, r30
     e70:	12 97       	sbiw	r26, 0x02	; 2
     e72:	4d 91       	ld	r20, X+
     e74:	5d 91       	ld	r21, X+
     e76:	a4 0f       	add	r26, r20
     e78:	b5 1f       	adc	r27, r21
     e7a:	ea 17       	cp	r30, r26
     e7c:	fb 07       	cpc	r31, r27
     e7e:	79 f4       	brne	.+30     	; 0xe9e <free+0xd2>
     e80:	80 81       	ld	r24, Z
     e82:	91 81       	ldd	r25, Z+1	; 0x01
     e84:	84 0f       	add	r24, r20
     e86:	95 1f       	adc	r25, r21
     e88:	02 96       	adiw	r24, 0x02	; 2
     e8a:	d9 01       	movw	r26, r18
     e8c:	11 96       	adiw	r26, 0x01	; 1
     e8e:	9c 93       	st	X, r25
     e90:	8e 93       	st	-X, r24
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	13 96       	adiw	r26, 0x03	; 3
     e98:	9c 93       	st	X, r25
     e9a:	8e 93       	st	-X, r24
     e9c:	12 97       	sbiw	r26, 0x02	; 2
     e9e:	e0 e0       	ldi	r30, 0x00	; 0
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	8a 81       	ldd	r24, Y+2	; 0x02
     ea4:	9b 81       	ldd	r25, Y+3	; 0x03
     ea6:	00 97       	sbiw	r24, 0x00	; 0
     ea8:	19 f0       	breq	.+6      	; 0xeb0 <free+0xe4>
     eaa:	fe 01       	movw	r30, r28
     eac:	ec 01       	movw	r28, r24
     eae:	f9 cf       	rjmp	.-14     	; 0xea2 <free+0xd6>
     eb0:	ce 01       	movw	r24, r28
     eb2:	02 96       	adiw	r24, 0x02	; 2
     eb4:	28 81       	ld	r18, Y
     eb6:	39 81       	ldd	r19, Y+1	; 0x01
     eb8:	82 0f       	add	r24, r18
     eba:	93 1f       	adc	r25, r19
     ebc:	20 91 5a 02 	lds	r18, 0x025A
     ec0:	30 91 5b 02 	lds	r19, 0x025B
     ec4:	28 17       	cp	r18, r24
     ec6:	39 07       	cpc	r19, r25
     ec8:	69 f4       	brne	.+26     	; 0xee4 <free+0x118>
     eca:	30 97       	sbiw	r30, 0x00	; 0
     ecc:	29 f4       	brne	.+10     	; 0xed8 <free+0x10c>
     ece:	10 92 5d 02 	sts	0x025D, r1
     ed2:	10 92 5c 02 	sts	0x025C, r1
     ed6:	02 c0       	rjmp	.+4      	; 0xedc <free+0x110>
     ed8:	13 82       	std	Z+3, r1	; 0x03
     eda:	12 82       	std	Z+2, r1	; 0x02
     edc:	d0 93 5b 02 	sts	0x025B, r29
     ee0:	c0 93 5a 02 	sts	0x025A, r28
     ee4:	df 91       	pop	r29
     ee6:	cf 91       	pop	r28
     ee8:	08 95       	ret

00000eea <fdevopen>:
     eea:	0f 93       	push	r16
     eec:	1f 93       	push	r17
     eee:	cf 93       	push	r28
     ef0:	df 93       	push	r29
     ef2:	ec 01       	movw	r28, r24
     ef4:	8b 01       	movw	r16, r22
     ef6:	00 97       	sbiw	r24, 0x00	; 0
     ef8:	31 f4       	brne	.+12     	; 0xf06 <fdevopen+0x1c>
     efa:	61 15       	cp	r22, r1
     efc:	71 05       	cpc	r23, r1
     efe:	19 f4       	brne	.+6      	; 0xf06 <fdevopen+0x1c>
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	38 c0       	rjmp	.+112    	; 0xf76 <fdevopen+0x8c>
     f06:	6e e0       	ldi	r22, 0x0E	; 14
     f08:	70 e0       	ldi	r23, 0x00	; 0
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	0e 94 ad 09 	call	0x135a	; 0x135a <calloc>
     f12:	fc 01       	movw	r30, r24
     f14:	00 97       	sbiw	r24, 0x00	; 0
     f16:	a1 f3       	breq	.-24     	; 0xf00 <fdevopen+0x16>
     f18:	80 e8       	ldi	r24, 0x80	; 128
     f1a:	83 83       	std	Z+3, r24	; 0x03
     f1c:	01 15       	cp	r16, r1
     f1e:	11 05       	cpc	r17, r1
     f20:	71 f0       	breq	.+28     	; 0xf3e <fdevopen+0x54>
     f22:	13 87       	std	Z+11, r17	; 0x0b
     f24:	02 87       	std	Z+10, r16	; 0x0a
     f26:	81 e8       	ldi	r24, 0x81	; 129
     f28:	83 83       	std	Z+3, r24	; 0x03
     f2a:	80 91 5e 02 	lds	r24, 0x025E
     f2e:	90 91 5f 02 	lds	r25, 0x025F
     f32:	89 2b       	or	r24, r25
     f34:	21 f4       	brne	.+8      	; 0xf3e <fdevopen+0x54>
     f36:	f0 93 5f 02 	sts	0x025F, r31
     f3a:	e0 93 5e 02 	sts	0x025E, r30
     f3e:	20 97       	sbiw	r28, 0x00	; 0
     f40:	c9 f0       	breq	.+50     	; 0xf74 <fdevopen+0x8a>
     f42:	d1 87       	std	Z+9, r29	; 0x09
     f44:	c0 87       	std	Z+8, r28	; 0x08
     f46:	83 81       	ldd	r24, Z+3	; 0x03
     f48:	82 60       	ori	r24, 0x02	; 2
     f4a:	83 83       	std	Z+3, r24	; 0x03
     f4c:	80 91 60 02 	lds	r24, 0x0260
     f50:	90 91 61 02 	lds	r25, 0x0261
     f54:	89 2b       	or	r24, r25
     f56:	71 f4       	brne	.+28     	; 0xf74 <fdevopen+0x8a>
     f58:	f0 93 61 02 	sts	0x0261, r31
     f5c:	e0 93 60 02 	sts	0x0260, r30
     f60:	80 91 62 02 	lds	r24, 0x0262
     f64:	90 91 63 02 	lds	r25, 0x0263
     f68:	89 2b       	or	r24, r25
     f6a:	21 f4       	brne	.+8      	; 0xf74 <fdevopen+0x8a>
     f6c:	f0 93 63 02 	sts	0x0263, r31
     f70:	e0 93 62 02 	sts	0x0262, r30
     f74:	cf 01       	movw	r24, r30
     f76:	df 91       	pop	r29
     f78:	cf 91       	pop	r28
     f7a:	1f 91       	pop	r17
     f7c:	0f 91       	pop	r16
     f7e:	08 95       	ret

00000f80 <printf>:
     f80:	a0 e0       	ldi	r26, 0x00	; 0
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	e6 ec       	ldi	r30, 0xC6	; 198
     f86:	f7 e0       	ldi	r31, 0x07	; 7
     f88:	0c 94 86 0a 	jmp	0x150c	; 0x150c <__prologue_saves__+0x20>
     f8c:	fe 01       	movw	r30, r28
     f8e:	35 96       	adiw	r30, 0x05	; 5
     f90:	61 91       	ld	r22, Z+
     f92:	71 91       	ld	r23, Z+
     f94:	af 01       	movw	r20, r30
     f96:	80 91 60 02 	lds	r24, 0x0260
     f9a:	90 91 61 02 	lds	r25, 0x0261
     f9e:	0e 94 db 07 	call	0xfb6	; 0xfb6 <vfprintf>
     fa2:	e2 e0       	ldi	r30, 0x02	; 2
     fa4:	0c 94 a2 0a 	jmp	0x1544	; 0x1544 <__epilogue_restores__+0x20>

00000fa8 <putchar>:
     fa8:	60 91 60 02 	lds	r22, 0x0260
     fac:	70 91 61 02 	lds	r23, 0x0261
     fb0:	0e 94 e6 09 	call	0x13cc	; 0x13cc <fputc>
     fb4:	08 95       	ret

00000fb6 <vfprintf>:
     fb6:	ac e0       	ldi	r26, 0x0C	; 12
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	e1 ee       	ldi	r30, 0xE1	; 225
     fbc:	f7 e0       	ldi	r31, 0x07	; 7
     fbe:	0c 94 76 0a 	jmp	0x14ec	; 0x14ec <__prologue_saves__>
     fc2:	7c 01       	movw	r14, r24
     fc4:	6b 01       	movw	r12, r22
     fc6:	8a 01       	movw	r16, r20
     fc8:	fc 01       	movw	r30, r24
     fca:	17 82       	std	Z+7, r1	; 0x07
     fcc:	16 82       	std	Z+6, r1	; 0x06
     fce:	83 81       	ldd	r24, Z+3	; 0x03
     fd0:	81 ff       	sbrs	r24, 1
     fd2:	bd c1       	rjmp	.+890    	; 0x134e <vfprintf+0x398>
     fd4:	ce 01       	movw	r24, r28
     fd6:	01 96       	adiw	r24, 0x01	; 1
     fd8:	4c 01       	movw	r8, r24
     fda:	f7 01       	movw	r30, r14
     fdc:	93 81       	ldd	r25, Z+3	; 0x03
     fde:	f6 01       	movw	r30, r12
     fe0:	93 fd       	sbrc	r25, 3
     fe2:	85 91       	lpm	r24, Z+
     fe4:	93 ff       	sbrs	r25, 3
     fe6:	81 91       	ld	r24, Z+
     fe8:	6f 01       	movw	r12, r30
     fea:	88 23       	and	r24, r24
     fec:	09 f4       	brne	.+2      	; 0xff0 <vfprintf+0x3a>
     fee:	ab c1       	rjmp	.+854    	; 0x1346 <vfprintf+0x390>
     ff0:	85 32       	cpi	r24, 0x25	; 37
     ff2:	39 f4       	brne	.+14     	; 0x1002 <vfprintf+0x4c>
     ff4:	93 fd       	sbrc	r25, 3
     ff6:	85 91       	lpm	r24, Z+
     ff8:	93 ff       	sbrs	r25, 3
     ffa:	81 91       	ld	r24, Z+
     ffc:	6f 01       	movw	r12, r30
     ffe:	85 32       	cpi	r24, 0x25	; 37
    1000:	29 f4       	brne	.+10     	; 0x100c <vfprintf+0x56>
    1002:	b7 01       	movw	r22, r14
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	0e 94 e6 09 	call	0x13cc	; 0x13cc <fputc>
    100a:	e7 cf       	rjmp	.-50     	; 0xfda <vfprintf+0x24>
    100c:	51 2c       	mov	r5, r1
    100e:	31 2c       	mov	r3, r1
    1010:	20 e0       	ldi	r18, 0x00	; 0
    1012:	20 32       	cpi	r18, 0x20	; 32
    1014:	a0 f4       	brcc	.+40     	; 0x103e <vfprintf+0x88>
    1016:	8b 32       	cpi	r24, 0x2B	; 43
    1018:	69 f0       	breq	.+26     	; 0x1034 <vfprintf+0x7e>
    101a:	30 f4       	brcc	.+12     	; 0x1028 <vfprintf+0x72>
    101c:	80 32       	cpi	r24, 0x20	; 32
    101e:	59 f0       	breq	.+22     	; 0x1036 <vfprintf+0x80>
    1020:	83 32       	cpi	r24, 0x23	; 35
    1022:	69 f4       	brne	.+26     	; 0x103e <vfprintf+0x88>
    1024:	20 61       	ori	r18, 0x10	; 16
    1026:	2c c0       	rjmp	.+88     	; 0x1080 <vfprintf+0xca>
    1028:	8d 32       	cpi	r24, 0x2D	; 45
    102a:	39 f0       	breq	.+14     	; 0x103a <vfprintf+0x84>
    102c:	80 33       	cpi	r24, 0x30	; 48
    102e:	39 f4       	brne	.+14     	; 0x103e <vfprintf+0x88>
    1030:	21 60       	ori	r18, 0x01	; 1
    1032:	26 c0       	rjmp	.+76     	; 0x1080 <vfprintf+0xca>
    1034:	22 60       	ori	r18, 0x02	; 2
    1036:	24 60       	ori	r18, 0x04	; 4
    1038:	23 c0       	rjmp	.+70     	; 0x1080 <vfprintf+0xca>
    103a:	28 60       	ori	r18, 0x08	; 8
    103c:	21 c0       	rjmp	.+66     	; 0x1080 <vfprintf+0xca>
    103e:	27 fd       	sbrc	r18, 7
    1040:	27 c0       	rjmp	.+78     	; 0x1090 <vfprintf+0xda>
    1042:	30 ed       	ldi	r19, 0xD0	; 208
    1044:	38 0f       	add	r19, r24
    1046:	3a 30       	cpi	r19, 0x0A	; 10
    1048:	78 f4       	brcc	.+30     	; 0x1068 <vfprintf+0xb2>
    104a:	26 ff       	sbrs	r18, 6
    104c:	06 c0       	rjmp	.+12     	; 0x105a <vfprintf+0xa4>
    104e:	fa e0       	ldi	r31, 0x0A	; 10
    1050:	5f 9e       	mul	r5, r31
    1052:	30 0d       	add	r19, r0
    1054:	11 24       	eor	r1, r1
    1056:	53 2e       	mov	r5, r19
    1058:	13 c0       	rjmp	.+38     	; 0x1080 <vfprintf+0xca>
    105a:	8a e0       	ldi	r24, 0x0A	; 10
    105c:	38 9e       	mul	r3, r24
    105e:	30 0d       	add	r19, r0
    1060:	11 24       	eor	r1, r1
    1062:	33 2e       	mov	r3, r19
    1064:	20 62       	ori	r18, 0x20	; 32
    1066:	0c c0       	rjmp	.+24     	; 0x1080 <vfprintf+0xca>
    1068:	8e 32       	cpi	r24, 0x2E	; 46
    106a:	21 f4       	brne	.+8      	; 0x1074 <vfprintf+0xbe>
    106c:	26 fd       	sbrc	r18, 6
    106e:	6b c1       	rjmp	.+726    	; 0x1346 <vfprintf+0x390>
    1070:	20 64       	ori	r18, 0x40	; 64
    1072:	06 c0       	rjmp	.+12     	; 0x1080 <vfprintf+0xca>
    1074:	8c 36       	cpi	r24, 0x6C	; 108
    1076:	11 f4       	brne	.+4      	; 0x107c <vfprintf+0xc6>
    1078:	20 68       	ori	r18, 0x80	; 128
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <vfprintf+0xca>
    107c:	88 36       	cpi	r24, 0x68	; 104
    107e:	41 f4       	brne	.+16     	; 0x1090 <vfprintf+0xda>
    1080:	f6 01       	movw	r30, r12
    1082:	93 fd       	sbrc	r25, 3
    1084:	85 91       	lpm	r24, Z+
    1086:	93 ff       	sbrs	r25, 3
    1088:	81 91       	ld	r24, Z+
    108a:	6f 01       	movw	r12, r30
    108c:	81 11       	cpse	r24, r1
    108e:	c1 cf       	rjmp	.-126    	; 0x1012 <vfprintf+0x5c>
    1090:	98 2f       	mov	r25, r24
    1092:	9f 7d       	andi	r25, 0xDF	; 223
    1094:	95 54       	subi	r25, 0x45	; 69
    1096:	93 30       	cpi	r25, 0x03	; 3
    1098:	28 f4       	brcc	.+10     	; 0x10a4 <vfprintf+0xee>
    109a:	0c 5f       	subi	r16, 0xFC	; 252
    109c:	1f 4f       	sbci	r17, 0xFF	; 255
    109e:	ff e3       	ldi	r31, 0x3F	; 63
    10a0:	f9 83       	std	Y+1, r31	; 0x01
    10a2:	0d c0       	rjmp	.+26     	; 0x10be <vfprintf+0x108>
    10a4:	83 36       	cpi	r24, 0x63	; 99
    10a6:	31 f0       	breq	.+12     	; 0x10b4 <vfprintf+0xfe>
    10a8:	83 37       	cpi	r24, 0x73	; 115
    10aa:	71 f0       	breq	.+28     	; 0x10c8 <vfprintf+0x112>
    10ac:	83 35       	cpi	r24, 0x53	; 83
    10ae:	09 f0       	breq	.+2      	; 0x10b2 <vfprintf+0xfc>
    10b0:	5b c0       	rjmp	.+182    	; 0x1168 <vfprintf+0x1b2>
    10b2:	22 c0       	rjmp	.+68     	; 0x10f8 <vfprintf+0x142>
    10b4:	f8 01       	movw	r30, r16
    10b6:	80 81       	ld	r24, Z
    10b8:	89 83       	std	Y+1, r24	; 0x01
    10ba:	0e 5f       	subi	r16, 0xFE	; 254
    10bc:	1f 4f       	sbci	r17, 0xFF	; 255
    10be:	44 24       	eor	r4, r4
    10c0:	43 94       	inc	r4
    10c2:	51 2c       	mov	r5, r1
    10c4:	54 01       	movw	r10, r8
    10c6:	15 c0       	rjmp	.+42     	; 0x10f2 <vfprintf+0x13c>
    10c8:	38 01       	movw	r6, r16
    10ca:	f2 e0       	ldi	r31, 0x02	; 2
    10cc:	6f 0e       	add	r6, r31
    10ce:	71 1c       	adc	r7, r1
    10d0:	f8 01       	movw	r30, r16
    10d2:	a0 80       	ld	r10, Z
    10d4:	b1 80       	ldd	r11, Z+1	; 0x01
    10d6:	26 ff       	sbrs	r18, 6
    10d8:	03 c0       	rjmp	.+6      	; 0x10e0 <vfprintf+0x12a>
    10da:	65 2d       	mov	r22, r5
    10dc:	70 e0       	ldi	r23, 0x00	; 0
    10de:	02 c0       	rjmp	.+4      	; 0x10e4 <vfprintf+0x12e>
    10e0:	6f ef       	ldi	r22, 0xFF	; 255
    10e2:	7f ef       	ldi	r23, 0xFF	; 255
    10e4:	c5 01       	movw	r24, r10
    10e6:	2c 87       	std	Y+12, r18	; 0x0c
    10e8:	0e 94 db 09 	call	0x13b6	; 0x13b6 <strnlen>
    10ec:	2c 01       	movw	r4, r24
    10ee:	83 01       	movw	r16, r6
    10f0:	2c 85       	ldd	r18, Y+12	; 0x0c
    10f2:	2f 77       	andi	r18, 0x7F	; 127
    10f4:	22 2e       	mov	r2, r18
    10f6:	17 c0       	rjmp	.+46     	; 0x1126 <vfprintf+0x170>
    10f8:	38 01       	movw	r6, r16
    10fa:	f2 e0       	ldi	r31, 0x02	; 2
    10fc:	6f 0e       	add	r6, r31
    10fe:	71 1c       	adc	r7, r1
    1100:	f8 01       	movw	r30, r16
    1102:	a0 80       	ld	r10, Z
    1104:	b1 80       	ldd	r11, Z+1	; 0x01
    1106:	26 ff       	sbrs	r18, 6
    1108:	03 c0       	rjmp	.+6      	; 0x1110 <vfprintf+0x15a>
    110a:	65 2d       	mov	r22, r5
    110c:	70 e0       	ldi	r23, 0x00	; 0
    110e:	02 c0       	rjmp	.+4      	; 0x1114 <vfprintf+0x15e>
    1110:	6f ef       	ldi	r22, 0xFF	; 255
    1112:	7f ef       	ldi	r23, 0xFF	; 255
    1114:	c5 01       	movw	r24, r10
    1116:	2c 87       	std	Y+12, r18	; 0x0c
    1118:	0e 94 c9 09 	call	0x1392	; 0x1392 <strnlen_P>
    111c:	2c 01       	movw	r4, r24
    111e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1120:	20 68       	ori	r18, 0x80	; 128
    1122:	22 2e       	mov	r2, r18
    1124:	83 01       	movw	r16, r6
    1126:	23 fc       	sbrc	r2, 3
    1128:	1b c0       	rjmp	.+54     	; 0x1160 <vfprintf+0x1aa>
    112a:	83 2d       	mov	r24, r3
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	48 16       	cp	r4, r24
    1130:	59 06       	cpc	r5, r25
    1132:	b0 f4       	brcc	.+44     	; 0x1160 <vfprintf+0x1aa>
    1134:	b7 01       	movw	r22, r14
    1136:	80 e2       	ldi	r24, 0x20	; 32
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	0e 94 e6 09 	call	0x13cc	; 0x13cc <fputc>
    113e:	3a 94       	dec	r3
    1140:	f4 cf       	rjmp	.-24     	; 0x112a <vfprintf+0x174>
    1142:	f5 01       	movw	r30, r10
    1144:	27 fc       	sbrc	r2, 7
    1146:	85 91       	lpm	r24, Z+
    1148:	27 fe       	sbrs	r2, 7
    114a:	81 91       	ld	r24, Z+
    114c:	5f 01       	movw	r10, r30
    114e:	b7 01       	movw	r22, r14
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	0e 94 e6 09 	call	0x13cc	; 0x13cc <fputc>
    1156:	31 10       	cpse	r3, r1
    1158:	3a 94       	dec	r3
    115a:	f1 e0       	ldi	r31, 0x01	; 1
    115c:	4f 1a       	sub	r4, r31
    115e:	51 08       	sbc	r5, r1
    1160:	41 14       	cp	r4, r1
    1162:	51 04       	cpc	r5, r1
    1164:	71 f7       	brne	.-36     	; 0x1142 <vfprintf+0x18c>
    1166:	e5 c0       	rjmp	.+458    	; 0x1332 <vfprintf+0x37c>
    1168:	84 36       	cpi	r24, 0x64	; 100
    116a:	11 f0       	breq	.+4      	; 0x1170 <vfprintf+0x1ba>
    116c:	89 36       	cpi	r24, 0x69	; 105
    116e:	39 f5       	brne	.+78     	; 0x11be <vfprintf+0x208>
    1170:	f8 01       	movw	r30, r16
    1172:	27 ff       	sbrs	r18, 7
    1174:	07 c0       	rjmp	.+14     	; 0x1184 <vfprintf+0x1ce>
    1176:	60 81       	ld	r22, Z
    1178:	71 81       	ldd	r23, Z+1	; 0x01
    117a:	82 81       	ldd	r24, Z+2	; 0x02
    117c:	93 81       	ldd	r25, Z+3	; 0x03
    117e:	0c 5f       	subi	r16, 0xFC	; 252
    1180:	1f 4f       	sbci	r17, 0xFF	; 255
    1182:	08 c0       	rjmp	.+16     	; 0x1194 <vfprintf+0x1de>
    1184:	60 81       	ld	r22, Z
    1186:	71 81       	ldd	r23, Z+1	; 0x01
    1188:	88 27       	eor	r24, r24
    118a:	77 fd       	sbrc	r23, 7
    118c:	80 95       	com	r24
    118e:	98 2f       	mov	r25, r24
    1190:	0e 5f       	subi	r16, 0xFE	; 254
    1192:	1f 4f       	sbci	r17, 0xFF	; 255
    1194:	2f 76       	andi	r18, 0x6F	; 111
    1196:	b2 2e       	mov	r11, r18
    1198:	97 ff       	sbrs	r25, 7
    119a:	09 c0       	rjmp	.+18     	; 0x11ae <vfprintf+0x1f8>
    119c:	90 95       	com	r25
    119e:	80 95       	com	r24
    11a0:	70 95       	com	r23
    11a2:	61 95       	neg	r22
    11a4:	7f 4f       	sbci	r23, 0xFF	; 255
    11a6:	8f 4f       	sbci	r24, 0xFF	; 255
    11a8:	9f 4f       	sbci	r25, 0xFF	; 255
    11aa:	20 68       	ori	r18, 0x80	; 128
    11ac:	b2 2e       	mov	r11, r18
    11ae:	2a e0       	ldi	r18, 0x0A	; 10
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	a4 01       	movw	r20, r8
    11b4:	0e 94 18 0a 	call	0x1430	; 0x1430 <__ultoa_invert>
    11b8:	a8 2e       	mov	r10, r24
    11ba:	a8 18       	sub	r10, r8
    11bc:	44 c0       	rjmp	.+136    	; 0x1246 <vfprintf+0x290>
    11be:	85 37       	cpi	r24, 0x75	; 117
    11c0:	29 f4       	brne	.+10     	; 0x11cc <vfprintf+0x216>
    11c2:	2f 7e       	andi	r18, 0xEF	; 239
    11c4:	b2 2e       	mov	r11, r18
    11c6:	2a e0       	ldi	r18, 0x0A	; 10
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	25 c0       	rjmp	.+74     	; 0x1216 <vfprintf+0x260>
    11cc:	f2 2f       	mov	r31, r18
    11ce:	f9 7f       	andi	r31, 0xF9	; 249
    11d0:	bf 2e       	mov	r11, r31
    11d2:	8f 36       	cpi	r24, 0x6F	; 111
    11d4:	c1 f0       	breq	.+48     	; 0x1206 <vfprintf+0x250>
    11d6:	18 f4       	brcc	.+6      	; 0x11de <vfprintf+0x228>
    11d8:	88 35       	cpi	r24, 0x58	; 88
    11da:	79 f0       	breq	.+30     	; 0x11fa <vfprintf+0x244>
    11dc:	b4 c0       	rjmp	.+360    	; 0x1346 <vfprintf+0x390>
    11de:	80 37       	cpi	r24, 0x70	; 112
    11e0:	19 f0       	breq	.+6      	; 0x11e8 <vfprintf+0x232>
    11e2:	88 37       	cpi	r24, 0x78	; 120
    11e4:	21 f0       	breq	.+8      	; 0x11ee <vfprintf+0x238>
    11e6:	af c0       	rjmp	.+350    	; 0x1346 <vfprintf+0x390>
    11e8:	2f 2f       	mov	r18, r31
    11ea:	20 61       	ori	r18, 0x10	; 16
    11ec:	b2 2e       	mov	r11, r18
    11ee:	b4 fe       	sbrs	r11, 4
    11f0:	0d c0       	rjmp	.+26     	; 0x120c <vfprintf+0x256>
    11f2:	8b 2d       	mov	r24, r11
    11f4:	84 60       	ori	r24, 0x04	; 4
    11f6:	b8 2e       	mov	r11, r24
    11f8:	09 c0       	rjmp	.+18     	; 0x120c <vfprintf+0x256>
    11fa:	24 ff       	sbrs	r18, 4
    11fc:	0a c0       	rjmp	.+20     	; 0x1212 <vfprintf+0x25c>
    11fe:	9f 2f       	mov	r25, r31
    1200:	96 60       	ori	r25, 0x06	; 6
    1202:	b9 2e       	mov	r11, r25
    1204:	06 c0       	rjmp	.+12     	; 0x1212 <vfprintf+0x25c>
    1206:	28 e0       	ldi	r18, 0x08	; 8
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	05 c0       	rjmp	.+10     	; 0x1216 <vfprintf+0x260>
    120c:	20 e1       	ldi	r18, 0x10	; 16
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	02 c0       	rjmp	.+4      	; 0x1216 <vfprintf+0x260>
    1212:	20 e1       	ldi	r18, 0x10	; 16
    1214:	32 e0       	ldi	r19, 0x02	; 2
    1216:	f8 01       	movw	r30, r16
    1218:	b7 fe       	sbrs	r11, 7
    121a:	07 c0       	rjmp	.+14     	; 0x122a <vfprintf+0x274>
    121c:	60 81       	ld	r22, Z
    121e:	71 81       	ldd	r23, Z+1	; 0x01
    1220:	82 81       	ldd	r24, Z+2	; 0x02
    1222:	93 81       	ldd	r25, Z+3	; 0x03
    1224:	0c 5f       	subi	r16, 0xFC	; 252
    1226:	1f 4f       	sbci	r17, 0xFF	; 255
    1228:	06 c0       	rjmp	.+12     	; 0x1236 <vfprintf+0x280>
    122a:	60 81       	ld	r22, Z
    122c:	71 81       	ldd	r23, Z+1	; 0x01
    122e:	80 e0       	ldi	r24, 0x00	; 0
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	0e 5f       	subi	r16, 0xFE	; 254
    1234:	1f 4f       	sbci	r17, 0xFF	; 255
    1236:	a4 01       	movw	r20, r8
    1238:	0e 94 18 0a 	call	0x1430	; 0x1430 <__ultoa_invert>
    123c:	a8 2e       	mov	r10, r24
    123e:	a8 18       	sub	r10, r8
    1240:	fb 2d       	mov	r31, r11
    1242:	ff 77       	andi	r31, 0x7F	; 127
    1244:	bf 2e       	mov	r11, r31
    1246:	b6 fe       	sbrs	r11, 6
    1248:	0b c0       	rjmp	.+22     	; 0x1260 <vfprintf+0x2aa>
    124a:	2b 2d       	mov	r18, r11
    124c:	2e 7f       	andi	r18, 0xFE	; 254
    124e:	a5 14       	cp	r10, r5
    1250:	50 f4       	brcc	.+20     	; 0x1266 <vfprintf+0x2b0>
    1252:	b4 fe       	sbrs	r11, 4
    1254:	0a c0       	rjmp	.+20     	; 0x126a <vfprintf+0x2b4>
    1256:	b2 fc       	sbrc	r11, 2
    1258:	08 c0       	rjmp	.+16     	; 0x126a <vfprintf+0x2b4>
    125a:	2b 2d       	mov	r18, r11
    125c:	2e 7e       	andi	r18, 0xEE	; 238
    125e:	05 c0       	rjmp	.+10     	; 0x126a <vfprintf+0x2b4>
    1260:	7a 2c       	mov	r7, r10
    1262:	2b 2d       	mov	r18, r11
    1264:	03 c0       	rjmp	.+6      	; 0x126c <vfprintf+0x2b6>
    1266:	7a 2c       	mov	r7, r10
    1268:	01 c0       	rjmp	.+2      	; 0x126c <vfprintf+0x2b6>
    126a:	75 2c       	mov	r7, r5
    126c:	24 ff       	sbrs	r18, 4
    126e:	0d c0       	rjmp	.+26     	; 0x128a <vfprintf+0x2d4>
    1270:	fe 01       	movw	r30, r28
    1272:	ea 0d       	add	r30, r10
    1274:	f1 1d       	adc	r31, r1
    1276:	80 81       	ld	r24, Z
    1278:	80 33       	cpi	r24, 0x30	; 48
    127a:	11 f4       	brne	.+4      	; 0x1280 <vfprintf+0x2ca>
    127c:	29 7e       	andi	r18, 0xE9	; 233
    127e:	09 c0       	rjmp	.+18     	; 0x1292 <vfprintf+0x2dc>
    1280:	22 ff       	sbrs	r18, 2
    1282:	06 c0       	rjmp	.+12     	; 0x1290 <vfprintf+0x2da>
    1284:	73 94       	inc	r7
    1286:	73 94       	inc	r7
    1288:	04 c0       	rjmp	.+8      	; 0x1292 <vfprintf+0x2dc>
    128a:	82 2f       	mov	r24, r18
    128c:	86 78       	andi	r24, 0x86	; 134
    128e:	09 f0       	breq	.+2      	; 0x1292 <vfprintf+0x2dc>
    1290:	73 94       	inc	r7
    1292:	23 fd       	sbrc	r18, 3
    1294:	13 c0       	rjmp	.+38     	; 0x12bc <vfprintf+0x306>
    1296:	20 ff       	sbrs	r18, 0
    1298:	06 c0       	rjmp	.+12     	; 0x12a6 <vfprintf+0x2f0>
    129a:	5a 2c       	mov	r5, r10
    129c:	73 14       	cp	r7, r3
    129e:	18 f4       	brcc	.+6      	; 0x12a6 <vfprintf+0x2f0>
    12a0:	53 0c       	add	r5, r3
    12a2:	57 18       	sub	r5, r7
    12a4:	73 2c       	mov	r7, r3
    12a6:	73 14       	cp	r7, r3
    12a8:	68 f4       	brcc	.+26     	; 0x12c4 <vfprintf+0x30e>
    12aa:	b7 01       	movw	r22, r14
    12ac:	80 e2       	ldi	r24, 0x20	; 32
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	2c 87       	std	Y+12, r18	; 0x0c
    12b2:	0e 94 e6 09 	call	0x13cc	; 0x13cc <fputc>
    12b6:	73 94       	inc	r7
    12b8:	2c 85       	ldd	r18, Y+12	; 0x0c
    12ba:	f5 cf       	rjmp	.-22     	; 0x12a6 <vfprintf+0x2f0>
    12bc:	73 14       	cp	r7, r3
    12be:	10 f4       	brcc	.+4      	; 0x12c4 <vfprintf+0x30e>
    12c0:	37 18       	sub	r3, r7
    12c2:	01 c0       	rjmp	.+2      	; 0x12c6 <vfprintf+0x310>
    12c4:	31 2c       	mov	r3, r1
    12c6:	24 ff       	sbrs	r18, 4
    12c8:	12 c0       	rjmp	.+36     	; 0x12ee <vfprintf+0x338>
    12ca:	b7 01       	movw	r22, r14
    12cc:	80 e3       	ldi	r24, 0x30	; 48
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	2c 87       	std	Y+12, r18	; 0x0c
    12d2:	0e 94 e6 09 	call	0x13cc	; 0x13cc <fputc>
    12d6:	2c 85       	ldd	r18, Y+12	; 0x0c
    12d8:	22 ff       	sbrs	r18, 2
    12da:	17 c0       	rjmp	.+46     	; 0x130a <vfprintf+0x354>
    12dc:	21 ff       	sbrs	r18, 1
    12de:	03 c0       	rjmp	.+6      	; 0x12e6 <vfprintf+0x330>
    12e0:	88 e5       	ldi	r24, 0x58	; 88
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <vfprintf+0x334>
    12e6:	88 e7       	ldi	r24, 0x78	; 120
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	b7 01       	movw	r22, r14
    12ec:	0c c0       	rjmp	.+24     	; 0x1306 <vfprintf+0x350>
    12ee:	82 2f       	mov	r24, r18
    12f0:	86 78       	andi	r24, 0x86	; 134
    12f2:	59 f0       	breq	.+22     	; 0x130a <vfprintf+0x354>
    12f4:	21 fd       	sbrc	r18, 1
    12f6:	02 c0       	rjmp	.+4      	; 0x12fc <vfprintf+0x346>
    12f8:	80 e2       	ldi	r24, 0x20	; 32
    12fa:	01 c0       	rjmp	.+2      	; 0x12fe <vfprintf+0x348>
    12fc:	8b e2       	ldi	r24, 0x2B	; 43
    12fe:	27 fd       	sbrc	r18, 7
    1300:	8d e2       	ldi	r24, 0x2D	; 45
    1302:	b7 01       	movw	r22, r14
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	0e 94 e6 09 	call	0x13cc	; 0x13cc <fputc>
    130a:	a5 14       	cp	r10, r5
    130c:	38 f4       	brcc	.+14     	; 0x131c <vfprintf+0x366>
    130e:	b7 01       	movw	r22, r14
    1310:	80 e3       	ldi	r24, 0x30	; 48
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	0e 94 e6 09 	call	0x13cc	; 0x13cc <fputc>
    1318:	5a 94       	dec	r5
    131a:	f7 cf       	rjmp	.-18     	; 0x130a <vfprintf+0x354>
    131c:	aa 94       	dec	r10
    131e:	f4 01       	movw	r30, r8
    1320:	ea 0d       	add	r30, r10
    1322:	f1 1d       	adc	r31, r1
    1324:	80 81       	ld	r24, Z
    1326:	b7 01       	movw	r22, r14
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	0e 94 e6 09 	call	0x13cc	; 0x13cc <fputc>
    132e:	a1 10       	cpse	r10, r1
    1330:	f5 cf       	rjmp	.-22     	; 0x131c <vfprintf+0x366>
    1332:	33 20       	and	r3, r3
    1334:	09 f4       	brne	.+2      	; 0x1338 <vfprintf+0x382>
    1336:	51 ce       	rjmp	.-862    	; 0xfda <vfprintf+0x24>
    1338:	b7 01       	movw	r22, r14
    133a:	80 e2       	ldi	r24, 0x20	; 32
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	0e 94 e6 09 	call	0x13cc	; 0x13cc <fputc>
    1342:	3a 94       	dec	r3
    1344:	f6 cf       	rjmp	.-20     	; 0x1332 <vfprintf+0x37c>
    1346:	f7 01       	movw	r30, r14
    1348:	86 81       	ldd	r24, Z+6	; 0x06
    134a:	97 81       	ldd	r25, Z+7	; 0x07
    134c:	02 c0       	rjmp	.+4      	; 0x1352 <vfprintf+0x39c>
    134e:	8f ef       	ldi	r24, 0xFF	; 255
    1350:	9f ef       	ldi	r25, 0xFF	; 255
    1352:	2c 96       	adiw	r28, 0x0c	; 12
    1354:	e2 e1       	ldi	r30, 0x12	; 18
    1356:	0c 94 92 0a 	jmp	0x1524	; 0x1524 <__epilogue_restores__>

0000135a <calloc>:
    135a:	0f 93       	push	r16
    135c:	1f 93       	push	r17
    135e:	cf 93       	push	r28
    1360:	df 93       	push	r29
    1362:	86 9f       	mul	r24, r22
    1364:	80 01       	movw	r16, r0
    1366:	87 9f       	mul	r24, r23
    1368:	10 0d       	add	r17, r0
    136a:	96 9f       	mul	r25, r22
    136c:	10 0d       	add	r17, r0
    136e:	11 24       	eor	r1, r1
    1370:	c8 01       	movw	r24, r16
    1372:	0e 94 4e 06 	call	0xc9c	; 0xc9c <malloc>
    1376:	ec 01       	movw	r28, r24
    1378:	00 97       	sbiw	r24, 0x00	; 0
    137a:	29 f0       	breq	.+10     	; 0x1386 <calloc+0x2c>
    137c:	a8 01       	movw	r20, r16
    137e:	60 e0       	ldi	r22, 0x00	; 0
    1380:	70 e0       	ldi	r23, 0x00	; 0
    1382:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <memset>
    1386:	ce 01       	movw	r24, r28
    1388:	df 91       	pop	r29
    138a:	cf 91       	pop	r28
    138c:	1f 91       	pop	r17
    138e:	0f 91       	pop	r16
    1390:	08 95       	ret

00001392 <strnlen_P>:
    1392:	fc 01       	movw	r30, r24
    1394:	05 90       	lpm	r0, Z+
    1396:	61 50       	subi	r22, 0x01	; 1
    1398:	70 40       	sbci	r23, 0x00	; 0
    139a:	01 10       	cpse	r0, r1
    139c:	d8 f7       	brcc	.-10     	; 0x1394 <strnlen_P+0x2>
    139e:	80 95       	com	r24
    13a0:	90 95       	com	r25
    13a2:	8e 0f       	add	r24, r30
    13a4:	9f 1f       	adc	r25, r31
    13a6:	08 95       	ret

000013a8 <memset>:
    13a8:	dc 01       	movw	r26, r24
    13aa:	01 c0       	rjmp	.+2      	; 0x13ae <memset+0x6>
    13ac:	6d 93       	st	X+, r22
    13ae:	41 50       	subi	r20, 0x01	; 1
    13b0:	50 40       	sbci	r21, 0x00	; 0
    13b2:	e0 f7       	brcc	.-8      	; 0x13ac <memset+0x4>
    13b4:	08 95       	ret

000013b6 <strnlen>:
    13b6:	fc 01       	movw	r30, r24
    13b8:	61 50       	subi	r22, 0x01	; 1
    13ba:	70 40       	sbci	r23, 0x00	; 0
    13bc:	01 90       	ld	r0, Z+
    13be:	01 10       	cpse	r0, r1
    13c0:	d8 f7       	brcc	.-10     	; 0x13b8 <strnlen+0x2>
    13c2:	80 95       	com	r24
    13c4:	90 95       	com	r25
    13c6:	8e 0f       	add	r24, r30
    13c8:	9f 1f       	adc	r25, r31
    13ca:	08 95       	ret

000013cc <fputc>:
    13cc:	0f 93       	push	r16
    13ce:	1f 93       	push	r17
    13d0:	cf 93       	push	r28
    13d2:	df 93       	push	r29
    13d4:	18 2f       	mov	r17, r24
    13d6:	09 2f       	mov	r16, r25
    13d8:	eb 01       	movw	r28, r22
    13da:	8b 81       	ldd	r24, Y+3	; 0x03
    13dc:	81 fd       	sbrc	r24, 1
    13de:	03 c0       	rjmp	.+6      	; 0x13e6 <fputc+0x1a>
    13e0:	8f ef       	ldi	r24, 0xFF	; 255
    13e2:	9f ef       	ldi	r25, 0xFF	; 255
    13e4:	20 c0       	rjmp	.+64     	; 0x1426 <fputc+0x5a>
    13e6:	82 ff       	sbrs	r24, 2
    13e8:	10 c0       	rjmp	.+32     	; 0x140a <fputc+0x3e>
    13ea:	4e 81       	ldd	r20, Y+6	; 0x06
    13ec:	5f 81       	ldd	r21, Y+7	; 0x07
    13ee:	2c 81       	ldd	r18, Y+4	; 0x04
    13f0:	3d 81       	ldd	r19, Y+5	; 0x05
    13f2:	42 17       	cp	r20, r18
    13f4:	53 07       	cpc	r21, r19
    13f6:	7c f4       	brge	.+30     	; 0x1416 <fputc+0x4a>
    13f8:	e8 81       	ld	r30, Y
    13fa:	f9 81       	ldd	r31, Y+1	; 0x01
    13fc:	9f 01       	movw	r18, r30
    13fe:	2f 5f       	subi	r18, 0xFF	; 255
    1400:	3f 4f       	sbci	r19, 0xFF	; 255
    1402:	39 83       	std	Y+1, r19	; 0x01
    1404:	28 83       	st	Y, r18
    1406:	10 83       	st	Z, r17
    1408:	06 c0       	rjmp	.+12     	; 0x1416 <fputc+0x4a>
    140a:	e8 85       	ldd	r30, Y+8	; 0x08
    140c:	f9 85       	ldd	r31, Y+9	; 0x09
    140e:	81 2f       	mov	r24, r17
    1410:	09 95       	icall
    1412:	89 2b       	or	r24, r25
    1414:	29 f7       	brne	.-54     	; 0x13e0 <fputc+0x14>
    1416:	2e 81       	ldd	r18, Y+6	; 0x06
    1418:	3f 81       	ldd	r19, Y+7	; 0x07
    141a:	2f 5f       	subi	r18, 0xFF	; 255
    141c:	3f 4f       	sbci	r19, 0xFF	; 255
    141e:	3f 83       	std	Y+7, r19	; 0x07
    1420:	2e 83       	std	Y+6, r18	; 0x06
    1422:	81 2f       	mov	r24, r17
    1424:	90 2f       	mov	r25, r16
    1426:	df 91       	pop	r29
    1428:	cf 91       	pop	r28
    142a:	1f 91       	pop	r17
    142c:	0f 91       	pop	r16
    142e:	08 95       	ret

00001430 <__ultoa_invert>:
    1430:	fa 01       	movw	r30, r20
    1432:	aa 27       	eor	r26, r26
    1434:	28 30       	cpi	r18, 0x08	; 8
    1436:	51 f1       	breq	.+84     	; 0x148c <__ultoa_invert+0x5c>
    1438:	20 31       	cpi	r18, 0x10	; 16
    143a:	81 f1       	breq	.+96     	; 0x149c <__ultoa_invert+0x6c>
    143c:	e8 94       	clt
    143e:	6f 93       	push	r22
    1440:	6e 7f       	andi	r22, 0xFE	; 254
    1442:	6e 5f       	subi	r22, 0xFE	; 254
    1444:	7f 4f       	sbci	r23, 0xFF	; 255
    1446:	8f 4f       	sbci	r24, 0xFF	; 255
    1448:	9f 4f       	sbci	r25, 0xFF	; 255
    144a:	af 4f       	sbci	r26, 0xFF	; 255
    144c:	b1 e0       	ldi	r27, 0x01	; 1
    144e:	3e d0       	rcall	.+124    	; 0x14cc <__ultoa_invert+0x9c>
    1450:	b4 e0       	ldi	r27, 0x04	; 4
    1452:	3c d0       	rcall	.+120    	; 0x14cc <__ultoa_invert+0x9c>
    1454:	67 0f       	add	r22, r23
    1456:	78 1f       	adc	r23, r24
    1458:	89 1f       	adc	r24, r25
    145a:	9a 1f       	adc	r25, r26
    145c:	a1 1d       	adc	r26, r1
    145e:	68 0f       	add	r22, r24
    1460:	79 1f       	adc	r23, r25
    1462:	8a 1f       	adc	r24, r26
    1464:	91 1d       	adc	r25, r1
    1466:	a1 1d       	adc	r26, r1
    1468:	6a 0f       	add	r22, r26
    146a:	71 1d       	adc	r23, r1
    146c:	81 1d       	adc	r24, r1
    146e:	91 1d       	adc	r25, r1
    1470:	a1 1d       	adc	r26, r1
    1472:	20 d0       	rcall	.+64     	; 0x14b4 <__ultoa_invert+0x84>
    1474:	09 f4       	brne	.+2      	; 0x1478 <__ultoa_invert+0x48>
    1476:	68 94       	set
    1478:	3f 91       	pop	r19
    147a:	2a e0       	ldi	r18, 0x0A	; 10
    147c:	26 9f       	mul	r18, r22
    147e:	11 24       	eor	r1, r1
    1480:	30 19       	sub	r19, r0
    1482:	30 5d       	subi	r19, 0xD0	; 208
    1484:	31 93       	st	Z+, r19
    1486:	de f6       	brtc	.-74     	; 0x143e <__ultoa_invert+0xe>
    1488:	cf 01       	movw	r24, r30
    148a:	08 95       	ret
    148c:	46 2f       	mov	r20, r22
    148e:	47 70       	andi	r20, 0x07	; 7
    1490:	40 5d       	subi	r20, 0xD0	; 208
    1492:	41 93       	st	Z+, r20
    1494:	b3 e0       	ldi	r27, 0x03	; 3
    1496:	0f d0       	rcall	.+30     	; 0x14b6 <__ultoa_invert+0x86>
    1498:	c9 f7       	brne	.-14     	; 0x148c <__ultoa_invert+0x5c>
    149a:	f6 cf       	rjmp	.-20     	; 0x1488 <__ultoa_invert+0x58>
    149c:	46 2f       	mov	r20, r22
    149e:	4f 70       	andi	r20, 0x0F	; 15
    14a0:	40 5d       	subi	r20, 0xD0	; 208
    14a2:	4a 33       	cpi	r20, 0x3A	; 58
    14a4:	18 f0       	brcs	.+6      	; 0x14ac <__ultoa_invert+0x7c>
    14a6:	49 5d       	subi	r20, 0xD9	; 217
    14a8:	31 fd       	sbrc	r19, 1
    14aa:	40 52       	subi	r20, 0x20	; 32
    14ac:	41 93       	st	Z+, r20
    14ae:	02 d0       	rcall	.+4      	; 0x14b4 <__ultoa_invert+0x84>
    14b0:	a9 f7       	brne	.-22     	; 0x149c <__ultoa_invert+0x6c>
    14b2:	ea cf       	rjmp	.-44     	; 0x1488 <__ultoa_invert+0x58>
    14b4:	b4 e0       	ldi	r27, 0x04	; 4
    14b6:	a6 95       	lsr	r26
    14b8:	97 95       	ror	r25
    14ba:	87 95       	ror	r24
    14bc:	77 95       	ror	r23
    14be:	67 95       	ror	r22
    14c0:	ba 95       	dec	r27
    14c2:	c9 f7       	brne	.-14     	; 0x14b6 <__ultoa_invert+0x86>
    14c4:	00 97       	sbiw	r24, 0x00	; 0
    14c6:	61 05       	cpc	r22, r1
    14c8:	71 05       	cpc	r23, r1
    14ca:	08 95       	ret
    14cc:	9b 01       	movw	r18, r22
    14ce:	ac 01       	movw	r20, r24
    14d0:	0a 2e       	mov	r0, r26
    14d2:	06 94       	lsr	r0
    14d4:	57 95       	ror	r21
    14d6:	47 95       	ror	r20
    14d8:	37 95       	ror	r19
    14da:	27 95       	ror	r18
    14dc:	ba 95       	dec	r27
    14de:	c9 f7       	brne	.-14     	; 0x14d2 <__ultoa_invert+0xa2>
    14e0:	62 0f       	add	r22, r18
    14e2:	73 1f       	adc	r23, r19
    14e4:	84 1f       	adc	r24, r20
    14e6:	95 1f       	adc	r25, r21
    14e8:	a0 1d       	adc	r26, r0
    14ea:	08 95       	ret

000014ec <__prologue_saves__>:
    14ec:	2f 92       	push	r2
    14ee:	3f 92       	push	r3
    14f0:	4f 92       	push	r4
    14f2:	5f 92       	push	r5
    14f4:	6f 92       	push	r6
    14f6:	7f 92       	push	r7
    14f8:	8f 92       	push	r8
    14fa:	9f 92       	push	r9
    14fc:	af 92       	push	r10
    14fe:	bf 92       	push	r11
    1500:	cf 92       	push	r12
    1502:	df 92       	push	r13
    1504:	ef 92       	push	r14
    1506:	ff 92       	push	r15
    1508:	0f 93       	push	r16
    150a:	1f 93       	push	r17
    150c:	cf 93       	push	r28
    150e:	df 93       	push	r29
    1510:	cd b7       	in	r28, 0x3d	; 61
    1512:	de b7       	in	r29, 0x3e	; 62
    1514:	ca 1b       	sub	r28, r26
    1516:	db 0b       	sbc	r29, r27
    1518:	0f b6       	in	r0, 0x3f	; 63
    151a:	f8 94       	cli
    151c:	de bf       	out	0x3e, r29	; 62
    151e:	0f be       	out	0x3f, r0	; 63
    1520:	cd bf       	out	0x3d, r28	; 61
    1522:	09 94       	ijmp

00001524 <__epilogue_restores__>:
    1524:	2a 88       	ldd	r2, Y+18	; 0x12
    1526:	39 88       	ldd	r3, Y+17	; 0x11
    1528:	48 88       	ldd	r4, Y+16	; 0x10
    152a:	5f 84       	ldd	r5, Y+15	; 0x0f
    152c:	6e 84       	ldd	r6, Y+14	; 0x0e
    152e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1530:	8c 84       	ldd	r8, Y+12	; 0x0c
    1532:	9b 84       	ldd	r9, Y+11	; 0x0b
    1534:	aa 84       	ldd	r10, Y+10	; 0x0a
    1536:	b9 84       	ldd	r11, Y+9	; 0x09
    1538:	c8 84       	ldd	r12, Y+8	; 0x08
    153a:	df 80       	ldd	r13, Y+7	; 0x07
    153c:	ee 80       	ldd	r14, Y+6	; 0x06
    153e:	fd 80       	ldd	r15, Y+5	; 0x05
    1540:	0c 81       	ldd	r16, Y+4	; 0x04
    1542:	1b 81       	ldd	r17, Y+3	; 0x03
    1544:	aa 81       	ldd	r26, Y+2	; 0x02
    1546:	b9 81       	ldd	r27, Y+1	; 0x01
    1548:	ce 0f       	add	r28, r30
    154a:	d1 1d       	adc	r29, r1
    154c:	0f b6       	in	r0, 0x3f	; 63
    154e:	f8 94       	cli
    1550:	de bf       	out	0x3e, r29	; 62
    1552:	0f be       	out	0x3f, r0	; 63
    1554:	cd bf       	out	0x3d, r28	; 61
    1556:	ed 01       	movw	r28, r26
    1558:	08 95       	ret

0000155a <_exit>:
    155a:	f8 94       	cli

0000155c <__stop_program>:
    155c:	ff cf       	rjmp	.-2      	; 0x155c <__stop_program>
