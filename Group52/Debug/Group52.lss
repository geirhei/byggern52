
Group52.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c6  00800100  000016f8  0000178c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  008001c6  008001c6  00001852  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001852  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000238  00000000  00000000  000018ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002622  00000000  00000000  00001ae6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c68  00000000  00000000  00004108  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c30  00000000  00000000  00004d70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004e8  00000000  00000000  000059a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006cc  00000000  00000000  00005e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000012c4  00000000  00000000  00006554  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001e8  00000000  00000000  00007818  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__ctors_end>
       4:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
       8:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
       c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      10:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      14:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      18:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      1c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      20:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      24:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      28:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      2c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      30:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      34:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      38:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      3c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      40:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      44:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      48:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      4c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      50:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      54:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      58:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      5c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      60:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      64:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      68:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      6c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	00 00       	nop
      72:	00 00       	nop
      74:	00 5c       	subi	r16, 0xC0	; 192
      76:	00 00       	nop
      78:	0c 00       	.word	0x000c	; ????
      7a:	0c 00       	.word	0x000c	; ????
      7c:	7c 28       	or	r7, r12
      7e:	7c 28       	or	r7, r12
      80:	58 dc       	rcall	.-1872   	; 0xfffff932 <__eeprom_end+0xff7ef932>
      82:	68 00       	.word	0x0068	; ????
      84:	24 10       	cpse	r2, r4
      86:	48 00       	.word	0x0048	; ????
      88:	28 54       	subi	r18, 0x48	; 72
      8a:	28 40       	sbci	r18, 0x08	; 8
      8c:	00 0c       	add	r0, r0
      8e:	00 00       	nop
      90:	00 78       	andi	r16, 0x80	; 128
      92:	84 00       	.word	0x0084	; ????
      94:	84 78       	andi	r24, 0x84	; 132
      96:	00 00       	nop
      98:	54 38       	cpi	r21, 0x84	; 132
      9a:	54 00       	.word	0x0054	; ????
      9c:	10 7c       	andi	r17, 0xC0	; 192
      9e:	10 00       	.word	0x0010	; ????
      a0:	80 40       	sbci	r24, 0x00	; 0
      a2:	00 00       	nop
      a4:	10 10       	cpse	r1, r0
      a6:	10 00       	.word	0x0010	; ????
      a8:	00 40       	sbci	r16, 0x00	; 0
      aa:	00 00       	nop
      ac:	60 10       	cpse	r6, r0
      ae:	0c 00       	.word	0x000c	; ????
      b0:	38 54       	subi	r19, 0x48	; 72
      b2:	38 00       	.word	0x0038	; ????
      b4:	48 7c       	andi	r20, 0xC8	; 200
      b6:	40 00       	.word	0x0040	; ????
      b8:	48 64       	ori	r20, 0x48	; 72
      ba:	58 00       	.word	0x0058	; ????
      bc:	44 54       	subi	r20, 0x44	; 68
      be:	2c 00       	.word	0x002c	; ????
      c0:	1c 10       	cpse	r1, r12
      c2:	7c 00       	.word	0x007c	; ????
      c4:	5c 54       	subi	r21, 0x4C	; 76
      c6:	24 00       	.word	0x0024	; ????
      c8:	38 54       	subi	r19, 0x48	; 72
      ca:	24 00       	.word	0x0024	; ????
      cc:	64 14       	cp	r6, r4
      ce:	0c 00       	.word	0x000c	; ????
      d0:	68 54       	subi	r22, 0x48	; 72
      d2:	2c 00       	.word	0x002c	; ????
      d4:	48 54       	subi	r20, 0x48	; 72
      d6:	38 00       	.word	0x0038	; ????
      d8:	00 48       	sbci	r16, 0x80	; 128
      da:	00 00       	nop
      dc:	80 48       	sbci	r24, 0x80	; 128
      de:	00 00       	nop
      e0:	10 28       	or	r1, r0
      e2:	44 00       	.word	0x0044	; ????
      e4:	28 28       	or	r2, r8
      e6:	28 00       	.word	0x0028	; ????
      e8:	44 28       	or	r4, r4
      ea:	10 00       	.word	0x0010	; ????
      ec:	04 54       	subi	r16, 0x44	; 68
      ee:	08 00       	.word	0x0008	; ????
      f0:	38 44       	sbci	r19, 0x48	; 72
      f2:	5c 00       	.word	0x005c	; ????
      f4:	78 14       	cp	r7, r8
      f6:	78 00       	.word	0x0078	; ????
      f8:	7c 54       	subi	r23, 0x4C	; 76
      fa:	28 00       	.word	0x0028	; ????
      fc:	38 44       	sbci	r19, 0x48	; 72
      fe:	28 00       	.word	0x0028	; ????
     100:	7c 44       	sbci	r23, 0x4C	; 76
     102:	38 00       	.word	0x0038	; ????
     104:	7c 54       	subi	r23, 0x4C	; 76
     106:	44 00       	.word	0x0044	; ????
     108:	7c 14       	cp	r7, r12
     10a:	04 00       	.word	0x0004	; ????
     10c:	38 44       	sbci	r19, 0x48	; 72
     10e:	74 00       	.word	0x0074	; ????
     110:	7c 10       	cpse	r7, r12
     112:	7c 00       	.word	0x007c	; ????
     114:	44 7c       	andi	r20, 0xC4	; 196
     116:	44 00       	.word	0x0044	; ????
     118:	20 40       	sbci	r18, 0x00	; 0
     11a:	3c 00       	.word	0x003c	; ????
     11c:	7c 10       	cpse	r7, r12
     11e:	6c 00       	.word	0x006c	; ????
     120:	7c 40       	sbci	r23, 0x0C	; 12
     122:	40 00       	.word	0x0040	; ????
     124:	7c 18       	sub	r7, r12
     126:	7c 00       	.word	0x007c	; ????
     128:	78 10       	cpse	r7, r8
     12a:	3c 00       	.word	0x003c	; ????
     12c:	38 44       	sbci	r19, 0x48	; 72
     12e:	38 00       	.word	0x0038	; ????
     130:	7c 14       	cp	r7, r12
     132:	08 00       	.word	0x0008	; ????
     134:	38 44       	sbci	r19, 0x48	; 72
     136:	b8 00       	.word	0x00b8	; ????
     138:	7c 14       	cp	r7, r12
     13a:	68 00       	.word	0x0068	; ????
     13c:	48 54       	subi	r20, 0x48	; 72
     13e:	24 00       	.word	0x0024	; ????
     140:	04 7c       	andi	r16, 0xC4	; 196
     142:	04 00       	.word	0x0004	; ????
     144:	7c 40       	sbci	r23, 0x0C	; 12
     146:	7c 00       	.word	0x007c	; ????
     148:	3c 60       	ori	r19, 0x0C	; 12
     14a:	3c 00       	.word	0x003c	; ????
     14c:	7c 30       	cpi	r23, 0x0C	; 12
     14e:	7c 00       	.word	0x007c	; ????
     150:	6c 10       	cpse	r6, r12
     152:	6c 00       	.word	0x006c	; ????
     154:	0c 70       	andi	r16, 0x0C	; 12
     156:	0c 00       	.word	0x000c	; ????
     158:	64 54       	subi	r22, 0x44	; 68
     15a:	4c 00       	.word	0x004c	; ????
     15c:	00 7c       	andi	r16, 0xC0	; 192
     15e:	44 00       	.word	0x0044	; ????
     160:	0c 10       	cpse	r0, r12
     162:	60 00       	.word	0x0060	; ????
     164:	44 7c       	andi	r20, 0xC4	; 196
     166:	00 00       	nop
     168:	08 04       	cpc	r0, r8
     16a:	08 00       	.word	0x0008	; ????
     16c:	80 80       	ld	r8, Z
     16e:	80 00       	.word	0x0080	; ????
     170:	00 04       	cpc	r0, r0
     172:	08 00       	.word	0x0008	; ????
     174:	30 48       	sbci	r19, 0x80	; 128
     176:	78 00       	.word	0x0078	; ????
     178:	7c 48       	sbci	r23, 0x8C	; 140
     17a:	30 00       	.word	0x0030	; ????
     17c:	30 48       	sbci	r19, 0x80	; 128
     17e:	48 00       	.word	0x0048	; ????
     180:	30 48       	sbci	r19, 0x80	; 128
     182:	7c 00       	.word	0x007c	; ????
     184:	30 68       	ori	r19, 0x80	; 128
     186:	50 00       	.word	0x0050	; ????
     188:	10 78       	andi	r17, 0x80	; 128
     18a:	14 00       	.word	0x0014	; ????
     18c:	90 a8       	ldd	r9, Z+48	; 0x30
     18e:	78 00       	.word	0x0078	; ????
     190:	7c 08       	sbc	r7, r12
     192:	70 00       	.word	0x0070	; ????
     194:	50 74       	andi	r21, 0x40	; 64
     196:	40 00       	.word	0x0040	; ????
     198:	80 80       	ld	r8, Z
     19a:	74 00       	.word	0x0074	; ????
     19c:	7c 10       	cpse	r7, r12
     19e:	68 00       	.word	0x0068	; ????
     1a0:	44 7c       	andi	r20, 0xC4	; 196
     1a2:	40 00       	.word	0x0040	; ????
     1a4:	78 10       	cpse	r7, r8
     1a6:	78 00       	.word	0x0078	; ????
     1a8:	78 08       	sbc	r7, r8
     1aa:	70 00       	.word	0x0070	; ????
     1ac:	30 48       	sbci	r19, 0x80	; 128
     1ae:	30 00       	.word	0x0030	; ????
     1b0:	f8 28       	or	r15, r8
     1b2:	10 00       	.word	0x0010	; ????
     1b4:	30 48       	sbci	r19, 0x80	; 128
     1b6:	f8 00       	.word	0x00f8	; ????
     1b8:	78 10       	cpse	r7, r8
     1ba:	08 00       	.word	0x0008	; ????
     1bc:	50 58       	subi	r21, 0x80	; 128
     1be:	28 00       	.word	0x0028	; ????
     1c0:	08 3c       	cpi	r16, 0xC8	; 200
     1c2:	48 00       	.word	0x0048	; ????
     1c4:	38 40       	sbci	r19, 0x08	; 8
     1c6:	78 00       	.word	0x0078	; ????
     1c8:	38 40       	sbci	r19, 0x08	; 8
     1ca:	38 00       	.word	0x0038	; ????
     1cc:	78 20       	and	r7, r8
     1ce:	78 00       	.word	0x0078	; ????
     1d0:	48 30       	cpi	r20, 0x08	; 8
     1d2:	48 00       	.word	0x0048	; ????
     1d4:	98 a0       	ldd	r9, Y+32	; 0x20
     1d6:	78 00       	.word	0x0078	; ????
     1d8:	48 68       	ori	r20, 0x88	; 136
     1da:	58 00       	.word	0x0058	; ????
     1dc:	10 78       	andi	r17, 0x80	; 128
     1de:	84 00       	.word	0x0084	; ????
     1e0:	00 7c       	andi	r16, 0xC0	; 192
     1e2:	00 00       	nop
     1e4:	84 78       	andi	r24, 0x84	; 132
     1e6:	10 00       	.word	0x0010	; ????
     1e8:	08 04       	cpc	r0, r8
     1ea:	08 04       	cpc	r0, r8

000001ec <__ctors_end>:
     1ec:	11 24       	eor	r1, r1
     1ee:	1f be       	out	0x3f, r1	; 63
     1f0:	cf ef       	ldi	r28, 0xFF	; 255
     1f2:	d4 e0       	ldi	r29, 0x04	; 4
     1f4:	de bf       	out	0x3e, r29	; 62
     1f6:	cd bf       	out	0x3d, r28	; 61

000001f8 <__do_copy_data>:
     1f8:	11 e0       	ldi	r17, 0x01	; 1
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b1 e0       	ldi	r27, 0x01	; 1
     1fe:	e8 ef       	ldi	r30, 0xF8	; 248
     200:	f6 e1       	ldi	r31, 0x16	; 22
     202:	02 c0       	rjmp	.+4      	; 0x208 <__do_copy_data+0x10>
     204:	05 90       	lpm	r0, Z+
     206:	0d 92       	st	X+, r0
     208:	a6 3c       	cpi	r26, 0xC6	; 198
     20a:	b1 07       	cpc	r27, r17
     20c:	d9 f7       	brne	.-10     	; 0x204 <__do_copy_data+0xc>

0000020e <__do_clear_bss>:
     20e:	21 e0       	ldi	r18, 0x01	; 1
     210:	a6 ec       	ldi	r26, 0xC6	; 198
     212:	b1 e0       	ldi	r27, 0x01	; 1
     214:	01 c0       	rjmp	.+2      	; 0x218 <.do_clear_bss_start>

00000216 <.do_clear_bss_loop>:
     216:	1d 92       	st	X+, r1

00000218 <.do_clear_bss_start>:
     218:	a0 3d       	cpi	r26, 0xD0	; 208
     21a:	b2 07       	cpc	r27, r18
     21c:	e1 f7       	brne	.-8      	; 0x216 <.do_clear_bss_loop>
     21e:	0e 94 92 02 	call	0x524	; 0x524 <main>
     222:	0c 94 7a 0b 	jmp	0x16f4	; 0x16f4 <_exit>

00000226 <__bad_interrupt>:
     226:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000022a <adc_read>:
#include <util/delay.h>
#include "adc.h"

uint8_t adc_read(DeviceType device){
	volatile char *adc = (char *) 0x1400;
	switch (device) {
     22a:	82 30       	cpi	r24, 0x02	; 2
     22c:	69 f0       	breq	.+26     	; 0x248 <adc_read+0x1e>
     22e:	18 f4       	brcc	.+6      	; 0x236 <adc_read+0xc>
     230:	81 30       	cpi	r24, 0x01	; 1
     232:	31 f0       	breq	.+12     	; 0x240 <adc_read+0x16>
     234:	14 c0       	rjmp	.+40     	; 0x25e <adc_read+0x34>
     236:	83 30       	cpi	r24, 0x03	; 3
     238:	59 f0       	breq	.+22     	; 0x250 <adc_read+0x26>
     23a:	84 30       	cpi	r24, 0x04	; 4
     23c:	69 f0       	breq	.+26     	; 0x258 <adc_read+0x2e>
     23e:	0f c0       	rjmp	.+30     	; 0x25e <adc_read+0x34>
		case JOYAXIS1:
		/* Select CH1 */
		adc[0] = 0b00000100;
     240:	84 e0       	ldi	r24, 0x04	; 4
     242:	80 93 00 14 	sts	0x1400, r24
		break;
     246:	0b c0       	rjmp	.+22     	; 0x25e <adc_read+0x34>
		
		case JOYAXIS2:
		/* Select CH2 */
		adc[0] = 0b00000101;
     248:	85 e0       	ldi	r24, 0x05	; 5
     24a:	80 93 00 14 	sts	0x1400, r24
		break;
     24e:	07 c0       	rjmp	.+14     	; 0x25e <adc_read+0x34>
		
		case LSLIDER:
		/* Select CH3 */
		adc[0] = 0b00000110;
     250:	86 e0       	ldi	r24, 0x06	; 6
     252:	80 93 00 14 	sts	0x1400, r24
		break;
     256:	03 c0       	rjmp	.+6      	; 0x25e <adc_read+0x34>
		
		case RSLIDER:
		/* Select CH1 */
		adc[0] = 0b00000111;
     258:	87 e0       	ldi	r24, 0x07	; 7
     25a:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     25e:	2c ec       	ldi	r18, 0xCC	; 204
     260:	8c e0       	ldi	r24, 0x0C	; 12
     262:	91 e0       	ldi	r25, 0x01	; 1
     264:	21 50       	subi	r18, 0x01	; 1
     266:	80 40       	sbci	r24, 0x00	; 0
     268:	90 40       	sbci	r25, 0x00	; 0
     26a:	e1 f7       	brne	.-8      	; 0x264 <adc_read+0x3a>
     26c:	00 c0       	rjmp	.+0      	; 0x26e <adc_read+0x44>
		break;
		default:
		break;
	}
	_delay_ms(70);
	return adc[0];
     26e:	80 91 00 14 	lds	r24, 0x1400
     272:	08 95       	ret

00000274 <CAN_init>:
#include "MCP2515.h"
#include "can.h"

void CAN_init(void)
{
	MCP_init();
     274:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <MCP_init>
     278:	08 95       	ret

0000027a <CAN_message_send>:
}

/* High level function for sending a message on the CAN bus */
void CAN_message_send(can_message_t* msg)
{
     27a:	1f 93       	push	r17
     27c:	cf 93       	push	r28
     27e:	df 93       	push	r29
     280:	ec 01       	movw	r28, r24
	/* Only transmit buffer TXB0 is used */
	
	/* Loop until TXREQ is cleared */
	uint8_t status = MCP_read_status();
     282:	0e 94 ad 03 	call	0x75a	; 0x75a <MCP_read_status>
	uint8_t TXREQ = (status & (1 << 2));
	while (TXREQ) {
     286:	82 ff       	sbrs	r24, 2
     288:	04 c0       	rjmp	.+8      	; 0x292 <CAN_message_send+0x18>
		status = MCP_read_status();
     28a:	0e 94 ad 03 	call	0x75a	; 0x75a <MCP_read_status>
	/* Only transmit buffer TXB0 is used */
	
	/* Loop until TXREQ is cleared */
	uint8_t status = MCP_read_status();
	uint8_t TXREQ = (status & (1 << 2));
	while (TXREQ) {
     28e:	82 fd       	sbrc	r24, 2
     290:	fc cf       	rjmp	.-8      	; 0x28a <CAN_message_send+0x10>
		status = MCP_read_status();
		TXREQ = (status & (1 << 2));
	}
	
	/* Set message ID, standard mode*/
	MCP_write(MCP_TXB0CTRL + 1, 0); // High level identifier
     292:	60 e0       	ldi	r22, 0x00	; 0
     294:	81 e3       	ldi	r24, 0x31	; 49
     296:	0e 94 96 03 	call	0x72c	; 0x72c <MCP_write>
	MCP_write(MCP_TXB0CTRL + 2, (msg->id << 5)); // Low level identifier
     29a:	68 81       	ld	r22, Y
     29c:	62 95       	swap	r22
     29e:	66 0f       	add	r22, r22
     2a0:	60 7e       	andi	r22, 0xE0	; 224
     2a2:	82 e3       	ldi	r24, 0x32	; 50
     2a4:	0e 94 96 03 	call	0x72c	; 0x72c <MCP_write>
	
	/* Set data length */
	MCP_write(MCP_TXB0CTRL + 5, msg->length & 0x0F);
     2a8:	6a 81       	ldd	r22, Y+2	; 0x02
     2aa:	6f 70       	andi	r22, 0x0F	; 15
     2ac:	85 e3       	ldi	r24, 0x35	; 53
     2ae:	0e 94 96 03 	call	0x72c	; 0x72c <MCP_write>
	
	/* Load message data */
	for (uint8_t i = 0; i < msg->length; i++) {
     2b2:	8a 81       	ldd	r24, Y+2	; 0x02
     2b4:	88 23       	and	r24, r24
     2b6:	69 f0       	breq	.+26     	; 0x2d2 <CAN_message_send+0x58>
     2b8:	10 e0       	ldi	r17, 0x00	; 0
		MCP_write(MCP_TXB0CTRL + 6 + i, msg->data[i]);
     2ba:	fe 01       	movw	r30, r28
     2bc:	e1 0f       	add	r30, r17
     2be:	f1 1d       	adc	r31, r1
     2c0:	63 81       	ldd	r22, Z+3	; 0x03
     2c2:	86 e3       	ldi	r24, 0x36	; 54
     2c4:	81 0f       	add	r24, r17
     2c6:	0e 94 96 03 	call	0x72c	; 0x72c <MCP_write>
	
	/* Set data length */
	MCP_write(MCP_TXB0CTRL + 5, msg->length & 0x0F);
	
	/* Load message data */
	for (uint8_t i = 0; i < msg->length; i++) {
     2ca:	1f 5f       	subi	r17, 0xFF	; 255
     2cc:	8a 81       	ldd	r24, Y+2	; 0x02
     2ce:	18 17       	cp	r17, r24
     2d0:	a0 f3       	brcs	.-24     	; 0x2ba <CAN_message_send+0x40>
		MCP_write(MCP_TXB0CTRL + 6 + i, msg->data[i]);
	}
	
	/* Request to send contents of TXB0 */
	MCP_request_to_send(MCP_RTS_TX0);
     2d2:	81 e8       	ldi	r24, 0x81	; 129
     2d4:	0e 94 a8 03 	call	0x750	; 0x750 <MCP_request_to_send>
}
     2d8:	df 91       	pop	r29
     2da:	cf 91       	pop	r28
     2dc:	1f 91       	pop	r17
     2de:	08 95       	ret

000002e0 <CAN_message_receive>:

can_message_t CAN_message_receive(void)
{
     2e0:	9f 92       	push	r9
     2e2:	af 92       	push	r10
     2e4:	bf 92       	push	r11
     2e6:	cf 92       	push	r12
     2e8:	df 92       	push	r13
     2ea:	ef 92       	push	r14
     2ec:	ff 92       	push	r15
     2ee:	0f 93       	push	r16
     2f0:	1f 93       	push	r17
     2f2:	cf 93       	push	r28
     2f4:	df 93       	push	r29
     2f6:	cd b7       	in	r28, 0x3d	; 61
     2f8:	de b7       	in	r29, 0x3e	; 62
     2fa:	2b 97       	sbiw	r28, 0x0b	; 11
     2fc:	0f b6       	in	r0, 0x3f	; 63
     2fe:	f8 94       	cli
     300:	de bf       	out	0x3e, r29	; 62
     302:	0f be       	out	0x3f, r0	; 63
     304:	cd bf       	out	0x3d, r28	; 61
     306:	7c 01       	movw	r14, r24
	/* Only RXB0 is used */
	
	uint8_t canintf = MCP_read(MCP_CANINTF);
     308:	8c e2       	ldi	r24, 0x2C	; 44
     30a:	0e 94 86 03 	call	0x70c	; 0x70c <MCP_read>
	printf("Canintf BEGIN: %02x\n", canintf);
     30e:	1f 92       	push	r1
     310:	8f 93       	push	r24
     312:	86 e0       	ldi	r24, 0x06	; 6
     314:	91 e0       	ldi	r25, 0x01	; 1
     316:	9f 93       	push	r25
     318:	8f 93       	push	r24
     31a:	0e 94 8d 08 	call	0x111a	; 0x111a <printf>
	
	can_message_t message;
	uint8_t buffer = MCP_read(MCP_RXB0SIDH + 1);
     31e:	82 e6       	ldi	r24, 0x62	; 98
     320:	0e 94 86 03 	call	0x70c	; 0x70c <MCP_read>
     324:	c8 2e       	mov	r12, r24
	printf("Buffer: %02x\n", buffer);
     326:	1f 92       	push	r1
     328:	8f 93       	push	r24
     32a:	2b e1       	ldi	r18, 0x1B	; 27
     32c:	31 e0       	ldi	r19, 0x01	; 1
     32e:	3f 93       	push	r19
     330:	2f 93       	push	r18
     332:	0e 94 8d 08 	call	0x111a	; 0x111a <printf>
	message.id = (buffer >> 5);
     336:	c6 94       	lsr	r12
     338:	c6 94       	lsr	r12
     33a:	c6 94       	lsr	r12
     33c:	c6 94       	lsr	r12
     33e:	c6 94       	lsr	r12
     340:	d1 2c       	mov	r13, r1
	buffer = MCP_read(MCP_RXB0CTRL + 5);
     342:	85 e6       	ldi	r24, 0x65	; 101
     344:	0e 94 86 03 	call	0x70c	; 0x70c <MCP_read>
	message.length = (buffer & 0x0F);
     348:	8f 70       	andi	r24, 0x0F	; 15
     34a:	98 2e       	mov	r9, r24
	for (uint8_t i = 0; i < message.length; i++) {
     34c:	0f b6       	in	r0, 0x3f	; 63
     34e:	f8 94       	cli
     350:	de bf       	out	0x3e, r29	; 62
     352:	0f be       	out	0x3f, r0	; 63
     354:	cd bf       	out	0x3d, r28	; 61
     356:	99 20       	and	r9, r9
     358:	a9 f0       	breq	.+42     	; 0x384 <CAN_message_receive+0xa4>
     35a:	8e 01       	movw	r16, r28
     35c:	0c 5f       	subi	r16, 0xFC	; 252
     35e:	1f 4f       	sbci	r17, 0xFF	; 255
     360:	0f 2e       	mov	r0, r31
     362:	f6 e6       	ldi	r31, 0x66	; 102
     364:	af 2e       	mov	r10, r31
     366:	f0 2d       	mov	r31, r0
     368:	a9 0c       	add	r10, r9
     36a:	0f 2e       	mov	r0, r31
     36c:	f6 e6       	ldi	r31, 0x66	; 102
     36e:	bf 2e       	mov	r11, r31
     370:	f0 2d       	mov	r31, r0
		message.data[i] = MCP_read(MCP_RXB0CTRL + 6 + i);
     372:	8b 2d       	mov	r24, r11
     374:	0e 94 86 03 	call	0x70c	; 0x70c <MCP_read>
     378:	f8 01       	movw	r30, r16
     37a:	81 93       	st	Z+, r24
     37c:	8f 01       	movw	r16, r30
     37e:	b3 94       	inc	r11
	uint8_t buffer = MCP_read(MCP_RXB0SIDH + 1);
	printf("Buffer: %02x\n", buffer);
	message.id = (buffer >> 5);
	buffer = MCP_read(MCP_RXB0CTRL + 5);
	message.length = (buffer & 0x0F);
	for (uint8_t i = 0; i < message.length; i++) {
     380:	ba 10       	cpse	r11, r10
     382:	f7 cf       	rjmp	.-18     	; 0x372 <CAN_message_receive+0x92>
		message.data[i] = MCP_read(MCP_RXB0CTRL + 6 + i);
	}
	
	/* Clear CANINTF.RX0IF */
	MCP_modify_bit(MCP_CANINTF, 0x01, 0x00);
     384:	40 e0       	ldi	r20, 0x00	; 0
     386:	61 e0       	ldi	r22, 0x01	; 1
     388:	8c e2       	ldi	r24, 0x2C	; 44
     38a:	0e 94 b4 03 	call	0x768	; 0x768 <MCP_modify_bit>
	
	canintf = MCP_read(MCP_CANINTF);
     38e:	8c e2       	ldi	r24, 0x2C	; 44
     390:	0e 94 86 03 	call	0x70c	; 0x70c <MCP_read>
	printf("Canintf END: %02x\n", canintf);
     394:	1f 92       	push	r1
     396:	8f 93       	push	r24
     398:	29 e2       	ldi	r18, 0x29	; 41
     39a:	31 e0       	ldi	r19, 0x01	; 1
     39c:	3f 93       	push	r19
     39e:	2f 93       	push	r18
     3a0:	0e 94 8d 08 	call	0x111a	; 0x111a <printf>
	
	return message;
     3a4:	da 82       	std	Y+2, r13	; 0x02
     3a6:	c9 82       	std	Y+1, r12	; 0x01
     3a8:	9b 82       	std	Y+3, r9	; 0x03
     3aa:	8b e0       	ldi	r24, 0x0B	; 11
     3ac:	fe 01       	movw	r30, r28
     3ae:	31 96       	adiw	r30, 0x01	; 1
     3b0:	d7 01       	movw	r26, r14
     3b2:	01 90       	ld	r0, Z+
     3b4:	0d 92       	st	X+, r0
     3b6:	8a 95       	dec	r24
     3b8:	e1 f7       	brne	.-8      	; 0x3b2 <CAN_message_receive+0xd2>
     3ba:	0f 90       	pop	r0
     3bc:	0f 90       	pop	r0
     3be:	0f 90       	pop	r0
     3c0:	0f 90       	pop	r0
}
     3c2:	c7 01       	movw	r24, r14
     3c4:	2b 96       	adiw	r28, 0x0b	; 11
     3c6:	0f b6       	in	r0, 0x3f	; 63
     3c8:	f8 94       	cli
     3ca:	de bf       	out	0x3e, r29	; 62
     3cc:	0f be       	out	0x3f, r0	; 63
     3ce:	cd bf       	out	0x3d, r28	; 61
     3d0:	df 91       	pop	r29
     3d2:	cf 91       	pop	r28
     3d4:	1f 91       	pop	r17
     3d6:	0f 91       	pop	r16
     3d8:	ff 90       	pop	r15
     3da:	ef 90       	pop	r14
     3dc:	df 90       	pop	r13
     3de:	cf 90       	pop	r12
     3e0:	bf 90       	pop	r11
     3e2:	af 90       	pop	r10
     3e4:	9f 90       	pop	r9
     3e6:	08 95       	ret

000003e8 <JOYSTICK_init>:
#include "math.h"

void JOYSTICK_init(void)
{
	/* Set PB2 as input for button*/
	DDRB &= ~(1 << PB2);
     3e8:	ba 98       	cbi	0x17, 2	; 23
	PORTB &= (1 << PB2);
     3ea:	88 b3       	in	r24, 0x18	; 24
     3ec:	84 70       	andi	r24, 0x04	; 4
     3ee:	88 bb       	out	0x18, r24	; 24
     3f0:	08 95       	ret

000003f2 <toPositionPercent>:
	return NEUTRAL;
}

int16_t toPositionPercent(int16_t value)
{
	value -= 127;
     3f2:	8f 57       	subi	r24, 0x7F	; 127
     3f4:	91 09       	sbc	r25, r1
	int16_t percentValue = round((float)value / 127 * 100);
     3f6:	bc 01       	movw	r22, r24
     3f8:	88 27       	eor	r24, r24
     3fa:	77 fd       	sbrc	r23, 7
     3fc:	80 95       	com	r24
     3fe:	98 2f       	mov	r25, r24
     400:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__floatsisf>
     404:	20 e0       	ldi	r18, 0x00	; 0
     406:	30 e0       	ldi	r19, 0x00	; 0
     408:	4e ef       	ldi	r20, 0xFE	; 254
     40a:	52 e4       	ldi	r21, 0x42	; 66
     40c:	0e 94 48 05 	call	0xa90	; 0xa90 <__divsf3>
     410:	20 e0       	ldi	r18, 0x00	; 0
     412:	30 e0       	ldi	r19, 0x00	; 0
     414:	48 ec       	ldi	r20, 0xC8	; 200
     416:	52 e4       	ldi	r21, 0x42	; 66
     418:	0e 94 6f 06 	call	0xcde	; 0xcde <__mulsf3>
     41c:	0e 94 d2 06 	call	0xda4	; 0xda4 <round>
     420:	0e 94 b0 05 	call	0xb60	; 0xb60 <__fixsfsi>
	return percentValue;
}
     424:	cb 01       	movw	r24, r22
     426:	08 95       	ret

00000428 <JOYSTICK_get_position>:
{
	
}

struct positions JOYSTICK_get_position(void)
{
     428:	ff 92       	push	r15
     42a:	0f 93       	push	r16
     42c:	1f 93       	push	r17
     42e:	cf 93       	push	r28
     430:	df 93       	push	r29
     432:	cd b7       	in	r28, 0x3d	; 61
     434:	de b7       	in	r29, 0x3e	; 62
     436:	28 97       	sbiw	r28, 0x08	; 8
     438:	0f b6       	in	r0, 0x3f	; 63
     43a:	f8 94       	cli
     43c:	de bf       	out	0x3e, r29	; 62
     43e:	0f be       	out	0x3f, r0	; 63
     440:	cd bf       	out	0x3d, r28	; 61
	int16_t yValue = (int16_t) adc_read(JOYAXIS1);
     442:	81 e0       	ldi	r24, 0x01	; 1
     444:	0e 94 15 01 	call	0x22a	; 0x22a <adc_read>
     448:	f8 2e       	mov	r15, r24
	int16_t xValue = (int16_t) adc_read(JOYAXIS2);
     44a:	82 e0       	ldi	r24, 0x02	; 2
     44c:	0e 94 15 01 	call	0x22a	; 0x22a <adc_read>
	
	int16_t xPosition = toPositionPercent(xValue);
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <toPositionPercent>
     456:	18 2f       	mov	r17, r24
     458:	09 2f       	mov	r16, r25
	int16_t yPosition = toPositionPercent(yValue);
     45a:	8f 2d       	mov	r24, r15
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <toPositionPercent>
	
	struct positions pos;
	pos.x = xPosition;
	pos.y = yPosition;
	
	return pos;
     462:	19 83       	std	Y+1, r17	; 0x01
     464:	0a 83       	std	Y+2, r16	; 0x02
     466:	8b 83       	std	Y+3, r24	; 0x03
     468:	9c 83       	std	Y+4, r25	; 0x04
     46a:	21 2f       	mov	r18, r17
     46c:	30 2f       	mov	r19, r16
     46e:	48 2f       	mov	r20, r24
     470:	59 2f       	mov	r21, r25
     472:	6d 81       	ldd	r22, Y+5	; 0x05
     474:	7e 81       	ldd	r23, Y+6	; 0x06
}
     476:	8f 81       	ldd	r24, Y+7	; 0x07
     478:	98 85       	ldd	r25, Y+8	; 0x08
     47a:	28 96       	adiw	r28, 0x08	; 8
     47c:	0f b6       	in	r0, 0x3f	; 63
     47e:	f8 94       	cli
     480:	de bf       	out	0x3e, r29	; 62
     482:	0f be       	out	0x3f, r0	; 63
     484:	cd bf       	out	0x3d, r28	; 61
     486:	df 91       	pop	r29
     488:	cf 91       	pop	r28
     48a:	1f 91       	pop	r17
     48c:	0f 91       	pop	r16
     48e:	ff 90       	pop	r15
     490:	08 95       	ret

00000492 <JOYSTICK_get_direction>:


DirectionType JOYSTICK_get_direction(void)
{
     492:	cf 93       	push	r28
     494:	df 93       	push	r29
     496:	cd b7       	in	r28, 0x3d	; 61
     498:	de b7       	in	r29, 0x3e	; 62
     49a:	28 97       	sbiw	r28, 0x08	; 8
     49c:	0f b6       	in	r0, 0x3f	; 63
     49e:	f8 94       	cli
     4a0:	de bf       	out	0x3e, r29	; 62
     4a2:	0f be       	out	0x3f, r0	; 63
     4a4:	cd bf       	out	0x3d, r28	; 61
	struct positions pos = JOYSTICK_get_position();
     4a6:	0e 94 14 02 	call	0x428	; 0x428 <JOYSTICK_get_position>
     4aa:	29 83       	std	Y+1, r18	; 0x01
     4ac:	3a 83       	std	Y+2, r19	; 0x02
     4ae:	4b 83       	std	Y+3, r20	; 0x03
     4b0:	5c 83       	std	Y+4, r21	; 0x04
     4b2:	29 81       	ldd	r18, Y+1	; 0x01
     4b4:	3a 81       	ldd	r19, Y+2	; 0x02
     4b6:	8b 81       	ldd	r24, Y+3	; 0x03
     4b8:	9c 81       	ldd	r25, Y+4	; 0x04
	int8_t THRESHOLD = 25;
	
	if (pos.y < THRESHOLD && pos.y > -THRESHOLD) {
     4ba:	ac 01       	movw	r20, r24
     4bc:	48 5e       	subi	r20, 0xE8	; 232
     4be:	5f 4f       	sbci	r21, 0xFF	; 255
     4c0:	41 33       	cpi	r20, 0x31	; 49
     4c2:	51 05       	cpc	r21, r1
     4c4:	48 f4       	brcc	.+18     	; 0x4d8 <JOYSTICK_get_direction+0x46>
		
		if (pos.x < -THRESHOLD) {
     4c6:	27 3e       	cpi	r18, 0xE7	; 231
     4c8:	8f ef       	ldi	r24, 0xFF	; 255
     4ca:	38 07       	cpc	r19, r24
     4cc:	94 f0       	brlt	.+36     	; 0x4f2 <JOYSTICK_get_direction+0x60>
			return LEFT;
		} else if (pos.x > THRESHOLD) {
     4ce:	2a 31       	cpi	r18, 0x1A	; 26
     4d0:	31 05       	cpc	r19, r1
     4d2:	8c f4       	brge	.+34     	; 0x4f6 <JOYSTICK_get_direction+0x64>
			return UP;
		}
		
	}
	
	return NEUTRAL;
     4d4:	80 e0       	ldi	r24, 0x00	; 0
     4d6:	16 c0       	rjmp	.+44     	; 0x504 <__stack+0x5>
			return LEFT;
		} else if (pos.x > THRESHOLD) {
			return RIGHT;
		}
		
	} else if (pos.x < THRESHOLD && pos.x > -THRESHOLD) {
     4d8:	28 5e       	subi	r18, 0xE8	; 232
     4da:	3f 4f       	sbci	r19, 0xFF	; 255
     4dc:	21 33       	cpi	r18, 0x31	; 49
     4de:	31 05       	cpc	r19, r1
     4e0:	60 f4       	brcc	.+24     	; 0x4fa <JOYSTICK_get_direction+0x68>
		
		if (pos.y < -THRESHOLD) {
     4e2:	87 3e       	cpi	r24, 0xE7	; 231
     4e4:	2f ef       	ldi	r18, 0xFF	; 255
     4e6:	92 07       	cpc	r25, r18
     4e8:	54 f0       	brlt	.+20     	; 0x4fe <JOYSTICK_get_direction+0x6c>
			return DOWN;
		} else if (pos.y > THRESHOLD) {
     4ea:	4a 97       	sbiw	r24, 0x1a	; 26
     4ec:	54 f4       	brge	.+20     	; 0x502 <__stack+0x3>
			return UP;
		}
		
	}
	
	return NEUTRAL;
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	09 c0       	rjmp	.+18     	; 0x504 <__stack+0x5>
	int8_t THRESHOLD = 25;
	
	if (pos.y < THRESHOLD && pos.y > -THRESHOLD) {
		
		if (pos.x < -THRESHOLD) {
			return LEFT;
     4f2:	81 e0       	ldi	r24, 0x01	; 1
     4f4:	07 c0       	rjmp	.+14     	; 0x504 <__stack+0x5>
		} else if (pos.x > THRESHOLD) {
			return RIGHT;
     4f6:	82 e0       	ldi	r24, 0x02	; 2
     4f8:	05 c0       	rjmp	.+10     	; 0x504 <__stack+0x5>
			return UP;
		}
		
	}
	
	return NEUTRAL;
     4fa:	80 e0       	ldi	r24, 0x00	; 0
     4fc:	03 c0       	rjmp	.+6      	; 0x504 <__stack+0x5>
		}
		
	} else if (pos.x < THRESHOLD && pos.x > -THRESHOLD) {
		
		if (pos.y < -THRESHOLD) {
			return DOWN;
     4fe:	84 e0       	ldi	r24, 0x04	; 4
     500:	01 c0       	rjmp	.+2      	; 0x504 <__stack+0x5>
		} else if (pos.y > THRESHOLD) {
			return UP;
     502:	83 e0       	ldi	r24, 0x03	; 3
		}
		
	}
	
	return NEUTRAL;
}
     504:	28 96       	adiw	r28, 0x08	; 8
     506:	0f b6       	in	r0, 0x3f	; 63
     508:	f8 94       	cli
     50a:	de bf       	out	0x3e, r29	; 62
     50c:	0f be       	out	0x3f, r0	; 63
     50e:	cd bf       	out	0x3d, r28	; 61
     510:	df 91       	pop	r29
     512:	cf 91       	pop	r28
     514:	08 95       	ret

00000516 <JOYSTICK_read_button>:
	return pos;
}

uint8_t JOYSTICK_read_button(void)
{
	return (PINB & (1 << PB2)) == 0;
     516:	86 b3       	in	r24, 0x16	; 22
     518:	82 fb       	bst	r24, 2
     51a:	88 27       	eor	r24, r24
     51c:	80 f9       	bld	r24, 0
     51e:	91 e0       	ldi	r25, 0x01	; 1
     520:	89 27       	eor	r24, r25
     522:	08 95       	ret

00000524 <main>:
void SRAM_test(void);
void SRAM_test2(void);


int main(void)
{
     524:	cf 93       	push	r28
     526:	df 93       	push	r29
     528:	cd b7       	in	r28, 0x3d	; 61
     52a:	de b7       	in	r29, 0x3e	; 62
     52c:	ac 97       	sbiw	r28, 0x2c	; 44
     52e:	0f b6       	in	r0, 0x3f	; 63
     530:	f8 94       	cli
     532:	de bf       	out	0x3e, r29	; 62
     534:	0f be       	out	0x3f, r0	; 63
     536:	cd bf       	out	0x3d, r28	; 61
	/* Needs to be set when using external memory */
	MCUCR |= (1 << SRE);
     538:	85 b7       	in	r24, 0x35	; 53
     53a:	80 68       	ori	r24, 0x80	; 128
     53c:	85 bf       	out	0x35, r24	; 53

	fdevopen(USART_transmit, USART_receive);
     53e:	64 e4       	ldi	r22, 0x44	; 68
     540:	75 e0       	ldi	r23, 0x05	; 5
     542:	80 e4       	ldi	r24, 0x40	; 64
     544:	95 e0       	ldi	r25, 0x05	; 5
     546:	0e 94 42 08 	call	0x1084	; 0x1084 <fdevopen>
	USART_init(MYUBBR);
     54a:	8f e1       	ldi	r24, 0x1F	; 31
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	0e 94 39 05 	call	0xa72	; 0xa72 <USART_init>
	OLED_init();
     552:	0e 94 17 04 	call	0x82e	; 0x82e <OLED_init>
	JOYSTICK_init();
     556:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <JOYSTICK_init>
	SPI_master_init();
     55a:	0e 94 30 05 	call	0xa60	; 0xa60 <SPI_master_init>
	CAN_init();
     55e:	0e 94 3a 01 	call	0x274	; 0x274 <CAN_init>
	
	OLED_reset();
     562:	0e 94 09 04 	call	0x812	; 0x812 <OLED_reset>
	OLED_pos(2,20);
     566:	64 e1       	ldi	r22, 0x14	; 20
     568:	82 e0       	ldi	r24, 0x02	; 2
     56a:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <OLED_pos>
	
	menuNode *menu = OLED_generate_menu();
     56e:	0e 94 ac 04 	call	0x958	; 0x958 <OLED_generate_menu>
	OLED_print_menu(menu);
     572:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <OLED_print_menu>
	DirectionType joydir = NEUTRAL;
	uint8_t buttonPressed = 0;
	
	/* MCP TEST */
	
	char status = MCP_read(MCP_CANCTRL);
     576:	8f e0       	ldi	r24, 0x0F	; 15
     578:	0e 94 86 03 	call	0x70c	; 0x70c <MCP_read>
	printf("CANCTRL: %02x\n", status);
     57c:	1f 92       	push	r1
     57e:	8f 93       	push	r24
     580:	8c e3       	ldi	r24, 0x3C	; 60
     582:	91 e0       	ldi	r25, 0x01	; 1
     584:	9f 93       	push	r25
     586:	8f 93       	push	r24
     588:	0e 94 8d 08 	call	0x111a	; 0x111a <printf>
	
	can_message_t can_message;
	can_message.data[0] = 0x01;
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	8c 83       	std	Y+4, r24	; 0x04
	can_message.data[1] = 0x02;
     590:	82 e0       	ldi	r24, 0x02	; 2
     592:	8d 83       	std	Y+5, r24	; 0x05
	can_message.data[2] = 0x03;
     594:	83 e0       	ldi	r24, 0x03	; 3
     596:	8e 83       	std	Y+6, r24	; 0x06
	can_message.data[3] = 0x04;
     598:	84 e0       	ldi	r24, 0x04	; 4
     59a:	8f 83       	std	Y+7, r24	; 0x07
	can_message.data[4] = 0x05;
     59c:	85 e0       	ldi	r24, 0x05	; 5
     59e:	88 87       	std	Y+8, r24	; 0x08
	can_message.data[5] = 0x06;
     5a0:	86 e0       	ldi	r24, 0x06	; 6
     5a2:	89 87       	std	Y+9, r24	; 0x09
	can_message.data[6] = 0x07;
     5a4:	87 e0       	ldi	r24, 0x07	; 7
     5a6:	8a 87       	std	Y+10, r24	; 0x0a
	can_message.data[7] = 0x08;
     5a8:	88 e0       	ldi	r24, 0x08	; 8
     5aa:	8b 87       	std	Y+11, r24	; 0x0b
	can_message.length = 8;
     5ac:	8b 83       	std	Y+3, r24	; 0x03
	can_message.id = 2;
     5ae:	82 e0       	ldi	r24, 0x02	; 2
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	9a 83       	std	Y+2, r25	; 0x02
     5b4:	89 83       	std	Y+1, r24	; 0x01
	CAN_message_send(&can_message);
     5b6:	ce 01       	movw	r24, r28
     5b8:	01 96       	adiw	r24, 0x01	; 1
     5ba:	0e 94 3d 01 	call	0x27a	; 0x27a <CAN_message_send>
	
	uint8_t RXB0CTRL = MCP_read(MCP_RXB0CTRL);
     5be:	80 e6       	ldi	r24, 0x60	; 96
     5c0:	0e 94 86 03 	call	0x70c	; 0x70c <MCP_read>
	printf("RXB0CTRL: %02x\n", RXB0CTRL);
     5c4:	1f 92       	push	r1
     5c6:	8f 93       	push	r24
     5c8:	8b e4       	ldi	r24, 0x4B	; 75
     5ca:	91 e0       	ldi	r25, 0x01	; 1
     5cc:	9f 93       	push	r25
     5ce:	8f 93       	push	r24
     5d0:	0e 94 8d 08 	call	0x111a	; 0x111a <printf>
	
	can_message_t received_message = CAN_message_receive();
     5d4:	ce 01       	movw	r24, r28
     5d6:	0c 96       	adiw	r24, 0x0c	; 12
     5d8:	0e 94 70 01 	call	0x2e0	; 0x2e0 <CAN_message_receive>
     5dc:	ae 84       	ldd	r10, Y+14	; 0x0e
	//uint8_t received_data[8];
	//memcpy(received_data, received_message.data, 8);
	
	printf("ID: %02x\n", received_message.id);
     5de:	8d 85       	ldd	r24, Y+13	; 0x0d
     5e0:	8f 93       	push	r24
     5e2:	8c 85       	ldd	r24, Y+12	; 0x0c
     5e4:	8f 93       	push	r24
     5e6:	8b e5       	ldi	r24, 0x5B	; 91
     5e8:	91 e0       	ldi	r25, 0x01	; 1
     5ea:	9f 93       	push	r25
     5ec:	8f 93       	push	r24
     5ee:	0e 94 8d 08 	call	0x111a	; 0x111a <printf>
	printf("length: %02x\n", received_message.length);
     5f2:	1f 92       	push	r1
     5f4:	af 92       	push	r10
     5f6:	85 e6       	ldi	r24, 0x65	; 101
     5f8:	91 e0       	ldi	r25, 0x01	; 1
     5fa:	9f 93       	push	r25
     5fc:	8f 93       	push	r24
     5fe:	0e 94 8d 08 	call	0x111a	; 0x111a <printf>
	for (uint8_t i = 0; i < received_message.length; i++) {
     602:	0f b6       	in	r0, 0x3f	; 63
     604:	f8 94       	cli
     606:	de bf       	out	0x3e, r29	; 62
     608:	0f be       	out	0x3f, r0	; 63
     60a:	cd bf       	out	0x3d, r28	; 61
     60c:	aa 20       	and	r10, r10
     60e:	b9 f0       	breq	.+46     	; 0x63e <main+0x11a>
     610:	7e 01       	movw	r14, r28
     612:	9f e0       	ldi	r25, 0x0F	; 15
     614:	e9 0e       	add	r14, r25
     616:	f1 1c       	adc	r15, r1
     618:	d1 2c       	mov	r13, r1
		printf("Received: %02x\n", received_message.data[i]);
     61a:	03 e7       	ldi	r16, 0x73	; 115
     61c:	11 e0       	ldi	r17, 0x01	; 1
     61e:	f7 01       	movw	r30, r14
     620:	81 91       	ld	r24, Z+
     622:	7f 01       	movw	r14, r30
     624:	1f 92       	push	r1
     626:	8f 93       	push	r24
     628:	1f 93       	push	r17
     62a:	0f 93       	push	r16
     62c:	0e 94 8d 08 	call	0x111a	; 0x111a <printf>
	//uint8_t received_data[8];
	//memcpy(received_data, received_message.data, 8);
	
	printf("ID: %02x\n", received_message.id);
	printf("length: %02x\n", received_message.length);
	for (uint8_t i = 0; i < received_message.length; i++) {
     630:	d3 94       	inc	r13
     632:	0f 90       	pop	r0
     634:	0f 90       	pop	r0
     636:	0f 90       	pop	r0
     638:	0f 90       	pop	r0
     63a:	da 10       	cpse	r13, r10
     63c:	f0 cf       	rjmp	.-32     	; 0x61e <main+0xfa>
		printf("Received: %02x\n", received_message.data[i]);
	}
	
	
	
	printf("\n");
     63e:	8a e0       	ldi	r24, 0x0A	; 10
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	0e 94 a1 08 	call	0x1142	; 0x1142 <putchar>
	OLED_pos(2,20);
	
	menuNode *menu = OLED_generate_menu();
	OLED_print_menu(menu);
	
	uint8_t currentRow = 1;
     646:	01 e0       	ldi	r16, 0x01	; 1
		
				
		/* Create seperate function for this */
		joydir = JOYSTICK_get_direction();
		
		joydata.id = 1;
     648:	cc 24       	eor	r12, r12
     64a:	c3 94       	inc	r12
     64c:	d1 2c       	mov	r13, r1
		joydata.length = 2;
     64e:	68 94       	set
     650:	88 24       	eor	r8, r8
     652:	81 f8       	bld	r8, 1
		joydata.data[0] = (uint8_t) 'J';
     654:	0f 2e       	mov	r0, r31
     656:	fa e4       	ldi	r31, 0x4A	; 74
     658:	9f 2e       	mov	r9, r31
     65a:	f0 2d       	mov	r31, r0
				currentRow -= 1;
			}
			
		} else if (joydir == DOWN) {
			if (currentRow == 7) {
				currentRow = 1;
     65c:	55 24       	eor	r5, r5
     65e:	53 94       	inc	r5
		CAN_message_send(&joydata);
		
		lastRow = currentRow;
		if (joydir == UP) {
			if (currentRow == 1) {
				currentRow = 7;
     660:	0f 2e       	mov	r0, r31
     662:	f7 e0       	ldi	r31, 0x07	; 7
     664:	6f 2e       	mov	r6, r31
     666:	f0 2d       	mov	r31, r0
			menu = menu->children[currentRow];
		}
		
		
		joydata_received = CAN_message_receive();
		for (uint8_t i = 0; i < received_message.length; i++) {
     668:	71 2c       	mov	r7, r1
			printf("Received: %02x\n", received_message.data[i]);
     66a:	0f 2e       	mov	r0, r31
     66c:	f3 e7       	ldi	r31, 0x73	; 115
     66e:	ef 2e       	mov	r14, r31
     670:	f1 e0       	ldi	r31, 0x01	; 1
     672:	ff 2e       	mov	r15, r31
     674:	f0 2d       	mov	r31, r0
	while(1)
	{	
		
				
		/* Create seperate function for this */
		joydir = JOYSTICK_get_direction();
     676:	0e 94 49 02 	call	0x492	; 0x492 <JOYSTICK_get_direction>
     67a:	18 2f       	mov	r17, r24
		
		joydata.id = 1;
     67c:	d8 8e       	std	Y+24, r13	; 0x18
     67e:	cf 8a       	std	Y+23, r12	; 0x17
		joydata.length = 2;
     680:	89 8e       	std	Y+25, r8	; 0x19
		joydata.data[0] = (uint8_t) 'J';
     682:	9a 8e       	std	Y+26, r9	; 0x1a
		joydata.data[1] = joydir;
     684:	8b 8f       	std	Y+27, r24	; 0x1b
		
		CAN_message_send(&joydata);
     686:	ce 01       	movw	r24, r28
     688:	47 96       	adiw	r24, 0x17	; 23
     68a:	0e 94 3d 01 	call	0x27a	; 0x27a <CAN_message_send>
		
		lastRow = currentRow;
		if (joydir == UP) {
     68e:	13 30       	cpi	r17, 0x03	; 3
     690:	31 f4       	brne	.+12     	; 0x69e <main+0x17a>
			if (currentRow == 1) {
     692:	01 30       	cpi	r16, 0x01	; 1
     694:	61 f0       	breq	.+24     	; 0x6ae <main+0x18a>
				currentRow = 7;
			} else {
				currentRow -= 1;
     696:	44 24       	eor	r4, r4
     698:	4a 94       	dec	r4
     69a:	40 0e       	add	r4, r16
     69c:	0d c0       	rjmp	.+26     	; 0x6b8 <main+0x194>
			}
			
		} else if (joydir == DOWN) {
     69e:	14 30       	cpi	r17, 0x04	; 4
     6a0:	41 f4       	brne	.+16     	; 0x6b2 <main+0x18e>
			if (currentRow == 7) {
     6a2:	07 30       	cpi	r16, 0x07	; 7
     6a4:	41 f0       	breq	.+16     	; 0x6b6 <main+0x192>
				currentRow = 1;
			} else {
				currentRow += 1;
     6a6:	44 24       	eor	r4, r4
     6a8:	43 94       	inc	r4
     6aa:	40 0e       	add	r4, r16
     6ac:	05 c0       	rjmp	.+10     	; 0x6b8 <main+0x194>
		CAN_message_send(&joydata);
		
		lastRow = currentRow;
		if (joydir == UP) {
			if (currentRow == 1) {
				currentRow = 7;
     6ae:	46 2c       	mov	r4, r6
     6b0:	03 c0       	rjmp	.+6      	; 0x6b8 <main+0x194>
     6b2:	40 2e       	mov	r4, r16
     6b4:	01 c0       	rjmp	.+2      	; 0x6b8 <main+0x194>
				currentRow -= 1;
			}
			
		} else if (joydir == DOWN) {
			if (currentRow == 7) {
				currentRow = 1;
     6b6:	45 2c       	mov	r4, r5
			} else {
				currentRow += 1;
			}
		}
		
		OLED_move_arrow(currentRow, 20, lastRow, 20);
     6b8:	24 e1       	ldi	r18, 0x14	; 20
     6ba:	40 2f       	mov	r20, r16
     6bc:	64 e1       	ldi	r22, 0x14	; 20
     6be:	84 2d       	mov	r24, r4
     6c0:	0e 94 87 04 	call	0x90e	; 0x90e <OLED_move_arrow>
		buttonPressed = JOYSTICK_read_button();
     6c4:	0e 94 8b 02 	call	0x516	; 0x516 <JOYSTICK_read_button>
		if (buttonPressed) {
			menu = menu->children[currentRow];
		}
		
		
		joydata_received = CAN_message_receive();
     6c8:	ce 01       	movw	r24, r28
     6ca:	82 96       	adiw	r24, 0x22	; 34
     6cc:	0e 94 70 01 	call	0x2e0	; 0x2e0 <CAN_message_receive>
		for (uint8_t i = 0; i < received_message.length; i++) {
     6d0:	aa 20       	and	r10, r10
     6d2:	a1 f0       	breq	.+40     	; 0x6fc <main+0x1d8>
     6d4:	8e 01       	movw	r16, r28
     6d6:	01 5f       	subi	r16, 0xF1	; 241
     6d8:	1f 4f       	sbci	r17, 0xFF	; 255
     6da:	b7 2c       	mov	r11, r7
			printf("Received: %02x\n", received_message.data[i]);
     6dc:	f8 01       	movw	r30, r16
     6de:	91 91       	ld	r25, Z+
     6e0:	8f 01       	movw	r16, r30
     6e2:	1f 92       	push	r1
     6e4:	9f 93       	push	r25
     6e6:	ff 92       	push	r15
     6e8:	ef 92       	push	r14
     6ea:	0e 94 8d 08 	call	0x111a	; 0x111a <printf>
			menu = menu->children[currentRow];
		}
		
		
		joydata_received = CAN_message_receive();
		for (uint8_t i = 0; i < received_message.length; i++) {
     6ee:	b3 94       	inc	r11
     6f0:	0f 90       	pop	r0
     6f2:	0f 90       	pop	r0
     6f4:	0f 90       	pop	r0
     6f6:	0f 90       	pop	r0
     6f8:	ba 10       	cpse	r11, r10
     6fa:	f0 cf       	rjmp	.-32     	; 0x6dc <main+0x1b8>
	OLED_pos(2,20);
	
	menuNode *menu = OLED_generate_menu();
	OLED_print_menu(menu);
	
	uint8_t currentRow = 1;
     6fc:	04 2d       	mov	r16, r4
     6fe:	bb cf       	rjmp	.-138    	; 0x676 <main+0x152>

00000700 <MCP_reset>:
	MCP_set_mode(MODE_LOOPBACK); // Sets loopback operation mode for testing
}

void MCP_reset(void)
{
	PORTB &= ~(1 << PB4);
     700:	c4 98       	cbi	0x18, 4	; 24
	SPI_master_transmit(MCP_RESET);
     702:	80 ec       	ldi	r24, 0xC0	; 192
     704:	0e 94 35 05 	call	0xa6a	; 0xa6a <SPI_master_transmit>
	PORTB |= (1 << PB4);
     708:	c4 9a       	sbi	0x18, 4	; 24
     70a:	08 95       	ret

0000070c <MCP_read>:
}

/* Returns the content of a register */
uint8_t MCP_read(uint8_t addr)
{
     70c:	cf 93       	push	r28
     70e:	c8 2f       	mov	r28, r24
	PORTB &= ~(1 << PB4);
     710:	c4 98       	cbi	0x18, 4	; 24
	SPI_master_transmit(MCP_READ);
     712:	83 e0       	ldi	r24, 0x03	; 3
     714:	0e 94 35 05 	call	0xa6a	; 0xa6a <SPI_master_transmit>
	SPI_master_transmit(addr);
     718:	8c 2f       	mov	r24, r28
     71a:	0e 94 35 05 	call	0xa6a	; 0xa6a <SPI_master_transmit>
	SPI_master_transmit(0x00);
     71e:	80 e0       	ldi	r24, 0x00	; 0
     720:	0e 94 35 05 	call	0xa6a	; 0xa6a <SPI_master_transmit>
	char data = SPDR;
     724:	8f b1       	in	r24, 0x0f	; 15
	PORTB |= (1 << PB4);
     726:	c4 9a       	sbi	0x18, 4	; 24
	return data;
}
     728:	cf 91       	pop	r28
     72a:	08 95       	ret

0000072c <MCP_write>:

void MCP_write(uint8_t addr, uint8_t data)
{
     72c:	cf 93       	push	r28
     72e:	df 93       	push	r29
     730:	d8 2f       	mov	r29, r24
     732:	c6 2f       	mov	r28, r22
	PORTB &= ~(1 << PB4);
     734:	c4 98       	cbi	0x18, 4	; 24
	SPI_master_transmit(MCP_WRITE);
     736:	82 e0       	ldi	r24, 0x02	; 2
     738:	0e 94 35 05 	call	0xa6a	; 0xa6a <SPI_master_transmit>
	SPI_master_transmit(addr);
     73c:	8d 2f       	mov	r24, r29
     73e:	0e 94 35 05 	call	0xa6a	; 0xa6a <SPI_master_transmit>
	SPI_master_transmit(data);
     742:	8c 2f       	mov	r24, r28
     744:	0e 94 35 05 	call	0xa6a	; 0xa6a <SPI_master_transmit>
	PORTB |= (1 << PB4);
     748:	c4 9a       	sbi	0x18, 4	; 24
}
     74a:	df 91       	pop	r29
     74c:	cf 91       	pop	r28
     74e:	08 95       	ret

00000750 <MCP_request_to_send>:
}

/* Instructs controller to begin message transmission for the selected buffers */
void MCP_request_to_send(uint8_t buffer)
{
	PORTB &= ~(1 << PB4);
     750:	c4 98       	cbi	0x18, 4	; 24
	SPI_master_transmit(buffer);
     752:	0e 94 35 05 	call	0xa6a	; 0xa6a <SPI_master_transmit>
	PORTB |= (1 << PB4);
     756:	c4 9a       	sbi	0x18, 4	; 24
     758:	08 95       	ret

0000075a <MCP_read_status>:
}

/* Returns some status bits for transmit and receive functions */
uint8_t MCP_read_status(void)
{
	PORTB &= ~(1 << PB4);
     75a:	c4 98       	cbi	0x18, 4	; 24
	SPI_master_transmit(MCP_READ_STATUS);
     75c:	80 ea       	ldi	r24, 0xA0	; 160
     75e:	0e 94 35 05 	call	0xa6a	; 0xa6a <SPI_master_transmit>
	//SPI_master_transmit(0x00); // Unneccessary because of "repeat data out"?
	char status = SPDR;
     762:	8f b1       	in	r24, 0x0f	; 15
	PORTB |= (1 << PB4);
     764:	c4 9a       	sbi	0x18, 4	; 24
	return status;
}
     766:	08 95       	ret

00000768 <MCP_modify_bit>:
	MCP_modify_bit(MCP_CANCTRL, mask, mode);
}

/* Changes the value of the register bits specified by the mask */
void MCP_modify_bit(uint8_t addr, uint8_t mask, uint8_t data)
{
     768:	1f 93       	push	r17
     76a:	cf 93       	push	r28
     76c:	df 93       	push	r29
     76e:	18 2f       	mov	r17, r24
     770:	d6 2f       	mov	r29, r22
     772:	c4 2f       	mov	r28, r20
	PORTB &= ~(1 << PB4);
     774:	c4 98       	cbi	0x18, 4	; 24
	SPI_master_transmit(MCP_BITMOD);
     776:	85 e0       	ldi	r24, 0x05	; 5
     778:	0e 94 35 05 	call	0xa6a	; 0xa6a <SPI_master_transmit>
	SPI_master_transmit(addr);
     77c:	81 2f       	mov	r24, r17
     77e:	0e 94 35 05 	call	0xa6a	; 0xa6a <SPI_master_transmit>
	SPI_master_transmit(mask);
     782:	8d 2f       	mov	r24, r29
     784:	0e 94 35 05 	call	0xa6a	; 0xa6a <SPI_master_transmit>
	SPI_master_transmit(data);
     788:	8c 2f       	mov	r24, r28
     78a:	0e 94 35 05 	call	0xa6a	; 0xa6a <SPI_master_transmit>
	PORTB |= (1 << PB4);
     78e:	c4 9a       	sbi	0x18, 4	; 24
     790:	df 91       	pop	r29
     792:	cf 91       	pop	r28
     794:	1f 91       	pop	r17
     796:	08 95       	ret

00000798 <MCP_set_mode>:
			break;
		default:
			break;
	}
	
	MCP_modify_bit(MCP_CANCTRL, mask, mode);
     798:	48 2f       	mov	r20, r24
     79a:	60 ee       	ldi	r22, 0xE0	; 224
     79c:	8f e0       	ldi	r24, 0x0F	; 15
     79e:	0e 94 b4 03 	call	0x768	; 0x768 <MCP_modify_bit>
     7a2:	08 95       	ret

000007a4 <MCP_init>:
#include "MCP2515.h"
#include "mcp.h"

void MCP_init(void)
{
	MCP_reset();
     7a4:	0e 94 80 03 	call	0x700	; 0x700 <MCP_reset>
	
	MCP_modify_bit(MCP_RXB0CTRL, 0b01100000, 0xFF); // Turns masks/filters off for RX0
     7a8:	4f ef       	ldi	r20, 0xFF	; 255
     7aa:	60 e6       	ldi	r22, 0x60	; 96
     7ac:	80 e6       	ldi	r24, 0x60	; 96
     7ae:	0e 94 b4 03 	call	0x768	; 0x768 <MCP_modify_bit>
	MCP_modify_bit(MCP_RXB1CTRL, 0b01100000, 0xFF); // Turns masks/filters off for RX1
     7b2:	4f ef       	ldi	r20, 0xFF	; 255
     7b4:	60 e6       	ldi	r22, 0x60	; 96
     7b6:	80 e7       	ldi	r24, 0x70	; 112
     7b8:	0e 94 b4 03 	call	0x768	; 0x768 <MCP_modify_bit>
	MCP_set_mode(MODE_LOOPBACK); // Sets loopback operation mode for testing
     7bc:	80 e4       	ldi	r24, 0x40	; 64
     7be:	0e 94 cc 03 	call	0x798	; 0x798 <MCP_set_mode>
     7c2:	08 95       	ret

000007c4 <OLED_goto_line>:
}

void OLED_write_c(char chr)
{
	volatile char *oled = (char *) 0x1000;
	oled[0] = chr;
     7c4:	e0 e0       	ldi	r30, 0x00	; 0
     7c6:	f0 e1       	ldi	r31, 0x10	; 16
     7c8:	92 e2       	ldi	r25, 0x22	; 34
     7ca:	90 83       	st	Z, r25
     7cc:	80 83       	st	Z, r24
     7ce:	87 e0       	ldi	r24, 0x07	; 7
     7d0:	80 83       	st	Z, r24
     7d2:	08 95       	ret

000007d4 <OLED_clear_line>:
	OLED_write_c(0x07);
}

void OLED_clear_line(uint8_t line)
{
	OLED_goto_line(line);
     7d4:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <OLED_goto_line>
}

void OLED_write_c(char chr)
{
	volatile char *oled = (char *) 0x1000;
	oled[0] = chr;
     7d8:	e0 e0       	ldi	r30, 0x00	; 0
     7da:	f0 e1       	ldi	r31, 0x10	; 16
     7dc:	81 e2       	ldi	r24, 0x21	; 33
     7de:	80 83       	st	Z, r24
     7e0:	10 82       	st	Z, r1
     7e2:	8f e7       	ldi	r24, 0x7F	; 127
     7e4:	80 83       	st	Z, r24
     7e6:	80 e8       	ldi	r24, 0x80	; 128
     7e8:	90 e0       	ldi	r25, 0x00	; 0
}

void OLED_write_d(char chr)
{
	volatile char *oled = (char *) 0x1200;
	oled[0] = chr;
     7ea:	e0 e0       	ldi	r30, 0x00	; 0
     7ec:	f2 e1       	ldi	r31, 0x12	; 18
     7ee:	10 82       	st	Z, r1
     7f0:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_c(0x21);
	OLED_write_c(0x00);
	OLED_write_c(0x7F);

	/* Write zeros to line */
	for (int i = 0; i < 128; i++) {
     7f2:	00 97       	sbiw	r24, 0x00	; 0
     7f4:	e1 f7       	brne	.-8      	; 0x7ee <OLED_clear_line+0x1a>
		OLED_write_d(0x00);
	}
}
     7f6:	08 95       	ret

000007f8 <OLED_pos>:
}

void OLED_write_c(char chr)
{
	volatile char *oled = (char *) 0x1000;
	oled[0] = chr;
     7f8:	e0 e0       	ldi	r30, 0x00	; 0
     7fa:	f0 e1       	ldi	r31, 0x10	; 16
     7fc:	92 e2       	ldi	r25, 0x22	; 34
     7fe:	90 83       	st	Z, r25
     800:	80 83       	st	Z, r24
     802:	87 e0       	ldi	r24, 0x07	; 7
     804:	80 83       	st	Z, r24
     806:	81 e2       	ldi	r24, 0x21	; 33
     808:	80 83       	st	Z, r24
     80a:	60 83       	st	Z, r22
     80c:	8f e7       	ldi	r24, 0x7F	; 127
     80e:	80 83       	st	Z, r24
     810:	08 95       	ret

00000812 <OLED_reset>:
	OLED_write_c(column);
	OLED_write_c(0x7F);
}

void OLED_reset(void)
{
     812:	cf 93       	push	r28
	for (uint8_t i = 0; i < 8; i++) {
     814:	c0 e0       	ldi	r28, 0x00	; 0
		OLED_clear_line(i);
     816:	8c 2f       	mov	r24, r28
     818:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <OLED_clear_line>
	OLED_write_c(0x7F);
}

void OLED_reset(void)
{
	for (uint8_t i = 0; i < 8; i++) {
     81c:	cf 5f       	subi	r28, 0xFF	; 255
     81e:	c8 30       	cpi	r28, 0x08	; 8
     820:	d1 f7       	brne	.-12     	; 0x816 <OLED_reset+0x4>
		OLED_clear_line(i);
	}
	OLED_pos(0,0);
     822:	60 e0       	ldi	r22, 0x00	; 0
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <OLED_pos>

	// Redraw from SRAM?
}
     82a:	cf 91       	pop	r28
     82c:	08 95       	ret

0000082e <OLED_init>:
}

void OLED_write_c(char chr)
{
	volatile char *oled = (char *) 0x1000;
	oled[0] = chr;
     82e:	e0 e0       	ldi	r30, 0x00	; 0
     830:	f0 e1       	ldi	r31, 0x10	; 16
     832:	8e ea       	ldi	r24, 0xAE	; 174
     834:	80 83       	st	Z, r24
     836:	81 ea       	ldi	r24, 0xA1	; 161
     838:	80 83       	st	Z, r24
     83a:	8a ed       	ldi	r24, 0xDA	; 218
     83c:	80 83       	st	Z, r24
     83e:	82 e1       	ldi	r24, 0x12	; 18
     840:	80 83       	st	Z, r24
     842:	88 ec       	ldi	r24, 0xC8	; 200
     844:	80 83       	st	Z, r24
     846:	88 ea       	ldi	r24, 0xA8	; 168
     848:	80 83       	st	Z, r24
     84a:	8f e3       	ldi	r24, 0x3F	; 63
     84c:	80 83       	st	Z, r24
     84e:	85 ed       	ldi	r24, 0xD5	; 213
     850:	80 83       	st	Z, r24
     852:	80 e8       	ldi	r24, 0x80	; 128
     854:	80 83       	st	Z, r24
     856:	81 e8       	ldi	r24, 0x81	; 129
     858:	80 83       	st	Z, r24
     85a:	80 e5       	ldi	r24, 0x50	; 80
     85c:	80 83       	st	Z, r24
     85e:	89 ed       	ldi	r24, 0xD9	; 217
     860:	80 83       	st	Z, r24
     862:	81 e2       	ldi	r24, 0x21	; 33
     864:	80 83       	st	Z, r24
     866:	80 e2       	ldi	r24, 0x20	; 32
     868:	80 83       	st	Z, r24
     86a:	10 82       	st	Z, r1
     86c:	8b ed       	ldi	r24, 0xDB	; 219
     86e:	80 83       	st	Z, r24
     870:	80 e3       	ldi	r24, 0x30	; 48
     872:	80 83       	st	Z, r24
     874:	8d ea       	ldi	r24, 0xAD	; 173
     876:	80 83       	st	Z, r24
     878:	10 82       	st	Z, r1
     87a:	84 ea       	ldi	r24, 0xA4	; 164
     87c:	80 83       	st	Z, r24
     87e:	86 ea       	ldi	r24, 0xA6	; 166
     880:	80 83       	st	Z, r24
     882:	8f ea       	ldi	r24, 0xAF	; 175
     884:	80 83       	st	Z, r24
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	92 e0       	ldi	r25, 0x02	; 2
}

void OLED_write_d(char chr)
{
	volatile char *oled = (char *) 0x1200;
	oled[0] = chr;
     88a:	e0 e0       	ldi	r30, 0x00	; 0
     88c:	f2 e1       	ldi	r31, 0x12	; 18
     88e:	2f ef       	ldi	r18, 0xFF	; 255
     890:	20 83       	st	Z, r18
     892:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_c(0x00);
	OLED_write_c(0xa4); //out follows RAM content
	OLED_write_c(0xa6); //set normal display
	OLED_write_c(0xaf); // display on
	
	for (int i = 0; i < 512; i++)
     894:	00 97       	sbiw	r24, 0x00	; 0
     896:	e1 f7       	brne	.-8      	; 0x890 <OLED_init+0x62>
	{
		OLED_write_d(0xFF);
	}
	
	OLED_reset();
     898:	0e 94 09 04 	call	0x812	; 0x812 <OLED_reset>
     89c:	08 95       	ret

0000089e <OLED_print_string>:

	// Redraw from SRAM?
}

void OLED_print_string(char* str)
{
     89e:	cf 93       	push	r28
     8a0:	df 93       	push	r29
	uint8_t c;
	uint8_t font_width = 4; // Use sizeof array here
	uint8_t i = 0;
	while (str[i] != '\0') {
     8a2:	fc 01       	movw	r30, r24
     8a4:	20 81       	ld	r18, Z
     8a6:	22 23       	and	r18, r18
     8a8:	11 f1       	breq	.+68     	; 0x8ee <OLED_print_string+0x50>
     8aa:	dc 01       	movw	r26, r24

void OLED_print_string(char* str)
{
	uint8_t c;
	uint8_t font_width = 4; // Use sizeof array here
	uint8_t i = 0;
     8ac:	40 e0       	ldi	r20, 0x00	; 0

	// Redraw from SRAM?
}

void OLED_print_string(char* str)
{
     8ae:	60 e0       	ldi	r22, 0x00	; 0
     8b0:	50 e0       	ldi	r21, 0x00	; 0
}

void OLED_write_d(char chr)
{
	volatile char *oled = (char *) 0x1200;
	oled[0] = chr;
     8b2:	c0 e0       	ldi	r28, 0x00	; 0
     8b4:	d2 e1       	ldi	r29, 0x12	; 18
     8b6:	18 c0       	rjmp	.+48     	; 0x8e8 <OLED_print_string+0x4a>
	uint8_t c;
	uint8_t font_width = 4; // Use sizeof array here
	uint8_t i = 0;
	while (str[i] != '\0') {
		for (uint8_t j = 0; j < font_width; j++) {
			c = pgm_read_byte_near(font[str[i]-32] + j);
     8b8:	ec 91       	ld	r30, X
     8ba:	f0 e0       	ldi	r31, 0x00	; 0
     8bc:	ee 0f       	add	r30, r30
     8be:	ff 1f       	adc	r31, r31
     8c0:	ee 0f       	add	r30, r30
     8c2:	ff 1f       	adc	r31, r31
     8c4:	e0 51       	subi	r30, 0x10	; 16
     8c6:	f0 40       	sbci	r31, 0x00	; 0
     8c8:	e2 0f       	add	r30, r18
     8ca:	f3 1f       	adc	r31, r19
     8cc:	e4 91       	lpm	r30, Z
}

void OLED_write_d(char chr)
{
	volatile char *oled = (char *) 0x1200;
	oled[0] = chr;
     8ce:	e8 83       	st	Y, r30
     8d0:	2f 5f       	subi	r18, 0xFF	; 255
     8d2:	3f 4f       	sbci	r19, 0xFF	; 255
{
	uint8_t c;
	uint8_t font_width = 4; // Use sizeof array here
	uint8_t i = 0;
	while (str[i] != '\0') {
		for (uint8_t j = 0; j < font_width; j++) {
     8d4:	24 30       	cpi	r18, 0x04	; 4
     8d6:	31 05       	cpc	r19, r1
     8d8:	79 f7       	brne	.-34     	; 0x8b8 <OLED_print_string+0x1a>
			c = pgm_read_byte_near(font[str[i]-32] + j);
			OLED_write_d(c);
		}
		i++;
     8da:	4f 5f       	subi	r20, 0xFF	; 255
void OLED_print_string(char* str)
{
	uint8_t c;
	uint8_t font_width = 4; // Use sizeof array here
	uint8_t i = 0;
	while (str[i] != '\0') {
     8dc:	dc 01       	movw	r26, r24
     8de:	a4 0f       	add	r26, r20
     8e0:	b1 1d       	adc	r27, r1
     8e2:	2c 91       	ld	r18, X
     8e4:	22 23       	and	r18, r18
     8e6:	19 f0       	breq	.+6      	; 0x8ee <OLED_print_string+0x50>

	// Redraw from SRAM?
}

void OLED_print_string(char* str)
{
     8e8:	26 2f       	mov	r18, r22
     8ea:	35 2f       	mov	r19, r21
     8ec:	e5 cf       	rjmp	.-54     	; 0x8b8 <OLED_print_string+0x1a>
			c = pgm_read_byte_near(font[str[i]-32] + j);
			OLED_write_d(c);
		}
		i++;
	}
}
     8ee:	df 91       	pop	r29
     8f0:	cf 91       	pop	r28
     8f2:	08 95       	ret

000008f4 <OLED_print_arrow>:

void OLED_print_arrow(uint8_t row, uint8_t col)
{
	OLED_pos(row, col);
     8f4:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <OLED_pos>
}

void OLED_write_d(char chr)
{
	volatile char *oled = (char *) 0x1200;
	oled[0] = chr;
     8f8:	e0 e0       	ldi	r30, 0x00	; 0
     8fa:	f2 e1       	ldi	r31, 0x12	; 18
     8fc:	88 e1       	ldi	r24, 0x18	; 24
     8fe:	80 83       	st	Z, r24
     900:	80 83       	st	Z, r24
     902:	9e e7       	ldi	r25, 0x7E	; 126
     904:	90 83       	st	Z, r25
     906:	9c e3       	ldi	r25, 0x3C	; 60
     908:	90 83       	st	Z, r25
     90a:	80 83       	st	Z, r24
     90c:	08 95       	ret

0000090e <OLED_move_arrow>:
	OLED_write_d(0b00111100);
	OLED_write_d(0b00011000);
}

void OLED_move_arrow(uint8_t newRow, uint8_t newCol, uint8_t currentRow, uint8_t currentCol)
{
     90e:	cf 93       	push	r28
     910:	df 93       	push	r29
     912:	c8 2f       	mov	r28, r24
     914:	d6 2f       	mov	r29, r22
     916:	84 2f       	mov	r24, r20
	OLED_pos(currentRow, currentCol);
     918:	62 2f       	mov	r22, r18
     91a:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <OLED_pos>
}

void OLED_write_d(char chr)
{
	volatile char *oled = (char *) 0x1200;
	oled[0] = chr;
     91e:	e0 e0       	ldi	r30, 0x00	; 0
     920:	f2 e1       	ldi	r31, 0x12	; 18
     922:	10 82       	st	Z, r1
     924:	10 82       	st	Z, r1
     926:	10 82       	st	Z, r1
     928:	10 82       	st	Z, r1
     92a:	10 82       	st	Z, r1
	OLED_write_d(0b00000000);
	OLED_write_d(0b00000000);
	OLED_write_d(0b00000000);
	OLED_write_d(0b00000000);
	
	OLED_print_arrow(newRow, newCol);
     92c:	6d 2f       	mov	r22, r29
     92e:	8c 2f       	mov	r24, r28
     930:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <OLED_print_arrow>
}
     934:	df 91       	pop	r29
     936:	cf 91       	pop	r28
     938:	08 95       	ret

0000093a <OLED_create_node>:


menuNode *OLED_create_node(char* name, menuNode* parent)
{
     93a:	cf 93       	push	r28
     93c:	df 93       	push	r29
     93e:	ec 01       	movw	r28, r24
	menuNode* ret = (menuNode*) malloc(sizeof(menuNode));
     940:	84 e1       	ldi	r24, 0x14	; 20
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	0e 94 1b 07 	call	0xe36	; 0xe36 <malloc>
	ret->name = name;
     948:	fc 01       	movw	r30, r24
     94a:	d1 83       	std	Z+1, r29	; 0x01
     94c:	c0 83       	st	Z, r28
	ret->parent = NULL;
     94e:	13 82       	std	Z+3, r1	; 0x03
     950:	12 82       	std	Z+2, r1	; 0x02
	return ret;
}
     952:	df 91       	pop	r29
     954:	cf 91       	pop	r28
     956:	08 95       	ret

00000958 <OLED_generate_menu>:

// Implement function for freeing memory

menuNode *OLED_generate_menu(void)
{	
     958:	af 92       	push	r10
     95a:	bf 92       	push	r11
     95c:	cf 92       	push	r12
     95e:	df 92       	push	r13
     960:	ef 92       	push	r14
     962:	ff 92       	push	r15
     964:	0f 93       	push	r16
     966:	1f 93       	push	r17
     968:	cf 93       	push	r28
     96a:	df 93       	push	r29
	menuNode *mainmenu = OLED_create_node("MAIN MENU", NULL);
     96c:	60 e0       	ldi	r22, 0x00	; 0
     96e:	70 e0       	ldi	r23, 0x00	; 0
     970:	83 e8       	ldi	r24, 0x83	; 131
     972:	91 e0       	ldi	r25, 0x01	; 1
     974:	0e 94 9d 04 	call	0x93a	; 0x93a <OLED_create_node>
     978:	ec 01       	movw	r28, r24
	menuNode *highscores = OLED_create_node("Highscores", mainmenu);
     97a:	bc 01       	movw	r22, r24
     97c:	8d e8       	ldi	r24, 0x8D	; 141
     97e:	91 e0       	ldi	r25, 0x01	; 1
     980:	0e 94 9d 04 	call	0x93a	; 0x93a <OLED_create_node>
     984:	6c 01       	movw	r12, r24
	menuNode *playgame = OLED_create_node("Start new game", mainmenu);
     986:	be 01       	movw	r22, r28
     988:	88 e9       	ldi	r24, 0x98	; 152
     98a:	91 e0       	ldi	r25, 0x01	; 1
     98c:	0e 94 9d 04 	call	0x93a	; 0x93a <OLED_create_node>
     990:	5c 01       	movw	r10, r24
	menuNode *debugging = OLED_create_node("Debugging", mainmenu);
     992:	be 01       	movw	r22, r28
     994:	87 ea       	ldi	r24, 0xA7	; 167
     996:	91 e0       	ldi	r25, 0x01	; 1
     998:	0e 94 9d 04 	call	0x93a	; 0x93a <OLED_create_node>
     99c:	8c 01       	movw	r16, r24
	menuNode *calibrate = OLED_create_node("Calibrate", mainmenu);
     99e:	be 01       	movw	r22, r28
     9a0:	81 eb       	ldi	r24, 0xB1	; 177
     9a2:	91 e0       	ldi	r25, 0x01	; 1
     9a4:	0e 94 9d 04 	call	0x93a	; 0x93a <OLED_create_node>
     9a8:	7c 01       	movw	r14, r24
	menuNode *difficulty = OLED_create_node("Difficulty", mainmenu);
     9aa:	be 01       	movw	r22, r28
     9ac:	8b eb       	ldi	r24, 0xBB	; 187
     9ae:	91 e0       	ldi	r25, 0x01	; 1
     9b0:	0e 94 9d 04 	call	0x93a	; 0x93a <OLED_create_node>
	calibrate->parent = mainmenu;
	difficulty->parent = mainmenu;
	debugging->parent = mainmenu;
	*/
	
	mainmenu->children[1] = playgame;
     9b4:	bf 82       	std	Y+7, r11	; 0x07
     9b6:	ae 82       	std	Y+6, r10	; 0x06
	mainmenu->children[2] = highscores;
     9b8:	d9 86       	std	Y+9, r13	; 0x09
     9ba:	c8 86       	std	Y+8, r12	; 0x08
	mainmenu->children[3] = difficulty;
     9bc:	9b 87       	std	Y+11, r25	; 0x0b
     9be:	8a 87       	std	Y+10, r24	; 0x0a
	mainmenu->children[4] = calibrate;
     9c0:	fd 86       	std	Y+13, r15	; 0x0d
     9c2:	ec 86       	std	Y+12, r14	; 0x0c
	mainmenu->children[5] = debugging;
     9c4:	1f 87       	std	Y+15, r17	; 0x0f
     9c6:	0e 87       	std	Y+14, r16	; 0x0e
	
	return mainmenu;
}
     9c8:	ce 01       	movw	r24, r28
     9ca:	df 91       	pop	r29
     9cc:	cf 91       	pop	r28
     9ce:	1f 91       	pop	r17
     9d0:	0f 91       	pop	r16
     9d2:	ff 90       	pop	r15
     9d4:	ef 90       	pop	r14
     9d6:	df 90       	pop	r13
     9d8:	cf 90       	pop	r12
     9da:	bf 90       	pop	r11
     9dc:	af 90       	pop	r10
     9de:	08 95       	ret

000009e0 <OLED_print_menu>:

void OLED_print_menu(menuNode *node)
{
     9e0:	cf 93       	push	r28
     9e2:	df 93       	push	r29
     9e4:	ec 01       	movw	r28, r24
	OLED_pos(0,50);
     9e6:	62 e3       	ldi	r22, 0x32	; 50
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <OLED_pos>
	OLED_print_string(node->name);
     9ee:	88 81       	ld	r24, Y
     9f0:	99 81       	ldd	r25, Y+1	; 0x01
     9f2:	0e 94 4f 04 	call	0x89e	; 0x89e <OLED_print_string>
	//printf("%s\n", node->name);
	OLED_pos(1,50);
     9f6:	62 e3       	ldi	r22, 0x32	; 50
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <OLED_pos>
	OLED_print_string(node->children[1]->name);
     9fe:	ee 81       	ldd	r30, Y+6	; 0x06
     a00:	ff 81       	ldd	r31, Y+7	; 0x07
     a02:	80 81       	ld	r24, Z
     a04:	91 81       	ldd	r25, Z+1	; 0x01
     a06:	0e 94 4f 04 	call	0x89e	; 0x89e <OLED_print_string>
	OLED_pos(2,50);
     a0a:	62 e3       	ldi	r22, 0x32	; 50
     a0c:	82 e0       	ldi	r24, 0x02	; 2
     a0e:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <OLED_pos>
	OLED_print_string(node->children[2]->name);
     a12:	e8 85       	ldd	r30, Y+8	; 0x08
     a14:	f9 85       	ldd	r31, Y+9	; 0x09
     a16:	80 81       	ld	r24, Z
     a18:	91 81       	ldd	r25, Z+1	; 0x01
     a1a:	0e 94 4f 04 	call	0x89e	; 0x89e <OLED_print_string>
	OLED_pos(3,50);
     a1e:	62 e3       	ldi	r22, 0x32	; 50
     a20:	83 e0       	ldi	r24, 0x03	; 3
     a22:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <OLED_pos>
	OLED_print_string(node->children[3]->name);
     a26:	ea 85       	ldd	r30, Y+10	; 0x0a
     a28:	fb 85       	ldd	r31, Y+11	; 0x0b
     a2a:	80 81       	ld	r24, Z
     a2c:	91 81       	ldd	r25, Z+1	; 0x01
     a2e:	0e 94 4f 04 	call	0x89e	; 0x89e <OLED_print_string>
	OLED_pos(4,50);
     a32:	62 e3       	ldi	r22, 0x32	; 50
     a34:	84 e0       	ldi	r24, 0x04	; 4
     a36:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <OLED_pos>
	OLED_print_string(node->children[4]->name);
     a3a:	ec 85       	ldd	r30, Y+12	; 0x0c
     a3c:	fd 85       	ldd	r31, Y+13	; 0x0d
     a3e:	80 81       	ld	r24, Z
     a40:	91 81       	ldd	r25, Z+1	; 0x01
     a42:	0e 94 4f 04 	call	0x89e	; 0x89e <OLED_print_string>
	OLED_pos(5,50);
     a46:	62 e3       	ldi	r22, 0x32	; 50
     a48:	85 e0       	ldi	r24, 0x05	; 5
     a4a:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <OLED_pos>
	OLED_print_string(node->children[5]->name);
     a4e:	ee 85       	ldd	r30, Y+14	; 0x0e
     a50:	ff 85       	ldd	r31, Y+15	; 0x0f
     a52:	80 81       	ld	r24, Z
     a54:	91 81       	ldd	r25, Z+1	; 0x01
     a56:	0e 94 4f 04 	call	0x89e	; 0x89e <OLED_print_string>
     a5a:	df 91       	pop	r29
     a5c:	cf 91       	pop	r28
     a5e:	08 95       	ret

00000a60 <SPI_master_init>:
#include <avr/delay.h>

void SPI_master_init(void)
{
	/* Set ~SS, MOSI and SCK output, all others input */
	DDRB = (1 << PB4)|(1 << PB5)|(1 << PB7);
     a60:	80 eb       	ldi	r24, 0xB0	; 176
     a62:	87 bb       	out	0x17, r24	; 23
	
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1 << SPE)|(1 << MSTR)|(1 << SPR0);
     a64:	81 e5       	ldi	r24, 0x51	; 81
     a66:	8d b9       	out	0x0d, r24	; 13
     a68:	08 95       	ret

00000a6a <SPI_master_transmit>:
}

void SPI_master_transmit(uint8_t cData)
{
	/* Start transmission */
	SPDR = cData;
     a6a:	8f b9       	out	0x0f, r24	; 15
	
	/* Wait for transmission to complete */
	while (!(SPSR & (1 << SPIF))) {
     a6c:	77 9b       	sbis	0x0e, 7	; 14
     a6e:	fe cf       	rjmp	.-4      	; 0xa6c <SPI_master_transmit+0x2>
		;
	}
}
     a70:	08 95       	ret

00000a72 <USART_init>:
#include <avr/io.h>

void USART_init(unsigned int ubrr)
{
	/* Set baud rate*/
	UBRR0H = (unsigned char)(ubrr >> 8 );
     a72:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
     a74:	89 b9       	out	0x09, r24	; 9
	/*Enable receiver and transmitter*/
	UCSR0B = (1 << RXEN0)|(1 << TXEN0);
     a76:	88 e1       	ldi	r24, 0x18	; 24
     a78:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1 << URSEL0)|(1 << USBS0)|(3 << UCSZ10);
     a7a:	8e e8       	ldi	r24, 0x8E	; 142
     a7c:	80 bd       	out	0x20, r24	; 32
     a7e:	08 95       	ret

00000a80 <USART_transmit>:
}

void USART_transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while (!( UCSR0A & (1 << UDRE0)))
     a80:	5d 9b       	sbis	0x0b, 5	; 11
     a82:	fe cf       	rjmp	.-4      	; 0xa80 <USART_transmit>
		;
	/* Put data into buffer, sends the data */
	UDR0 = data;
     a84:	8c b9       	out	0x0c, r24	; 12
     a86:	08 95       	ret

00000a88 <USART_receive>:
}

unsigned char USART_receive(void)
{
	/* Wait for data to be received */
	while ( !(UCSR0A & ( 1 << RXC0)) )
     a88:	5f 9b       	sbis	0x0b, 7	; 11
     a8a:	fe cf       	rjmp	.-4      	; 0xa88 <USART_receive>
		;
	/* Get and return received data from buffer */
	return UDR0;
     a8c:	8c b1       	in	r24, 0x0c	; 12
}
     a8e:	08 95       	ret

00000a90 <__divsf3>:
     a90:	0c d0       	rcall	.+24     	; 0xaaa <__divsf3x>
     a92:	eb c0       	rjmp	.+470    	; 0xc6a <__fp_round>
     a94:	e3 d0       	rcall	.+454    	; 0xc5c <__fp_pscB>
     a96:	40 f0       	brcs	.+16     	; 0xaa8 <__divsf3+0x18>
     a98:	da d0       	rcall	.+436    	; 0xc4e <__fp_pscA>
     a9a:	30 f0       	brcs	.+12     	; 0xaa8 <__divsf3+0x18>
     a9c:	21 f4       	brne	.+8      	; 0xaa6 <__divsf3+0x16>
     a9e:	5f 3f       	cpi	r21, 0xFF	; 255
     aa0:	19 f0       	breq	.+6      	; 0xaa8 <__divsf3+0x18>
     aa2:	cc c0       	rjmp	.+408    	; 0xc3c <__fp_inf>
     aa4:	51 11       	cpse	r21, r1
     aa6:	15 c1       	rjmp	.+554    	; 0xcd2 <__fp_szero>
     aa8:	cf c0       	rjmp	.+414    	; 0xc48 <__fp_nan>

00000aaa <__divsf3x>:
     aaa:	f0 d0       	rcall	.+480    	; 0xc8c <__fp_split3>
     aac:	98 f3       	brcs	.-26     	; 0xa94 <__divsf3+0x4>

00000aae <__divsf3_pse>:
     aae:	99 23       	and	r25, r25
     ab0:	c9 f3       	breq	.-14     	; 0xaa4 <__divsf3+0x14>
     ab2:	55 23       	and	r21, r21
     ab4:	b1 f3       	breq	.-20     	; 0xaa2 <__divsf3+0x12>
     ab6:	95 1b       	sub	r25, r21
     ab8:	55 0b       	sbc	r21, r21
     aba:	bb 27       	eor	r27, r27
     abc:	aa 27       	eor	r26, r26
     abe:	62 17       	cp	r22, r18
     ac0:	73 07       	cpc	r23, r19
     ac2:	84 07       	cpc	r24, r20
     ac4:	38 f0       	brcs	.+14     	; 0xad4 <__divsf3_pse+0x26>
     ac6:	9f 5f       	subi	r25, 0xFF	; 255
     ac8:	5f 4f       	sbci	r21, 0xFF	; 255
     aca:	22 0f       	add	r18, r18
     acc:	33 1f       	adc	r19, r19
     ace:	44 1f       	adc	r20, r20
     ad0:	aa 1f       	adc	r26, r26
     ad2:	a9 f3       	breq	.-22     	; 0xabe <__divsf3_pse+0x10>
     ad4:	33 d0       	rcall	.+102    	; 0xb3c <__divsf3_pse+0x8e>
     ad6:	0e 2e       	mov	r0, r30
     ad8:	3a f0       	brmi	.+14     	; 0xae8 <__divsf3_pse+0x3a>
     ada:	e0 e8       	ldi	r30, 0x80	; 128
     adc:	30 d0       	rcall	.+96     	; 0xb3e <__divsf3_pse+0x90>
     ade:	91 50       	subi	r25, 0x01	; 1
     ae0:	50 40       	sbci	r21, 0x00	; 0
     ae2:	e6 95       	lsr	r30
     ae4:	00 1c       	adc	r0, r0
     ae6:	ca f7       	brpl	.-14     	; 0xada <__divsf3_pse+0x2c>
     ae8:	29 d0       	rcall	.+82     	; 0xb3c <__divsf3_pse+0x8e>
     aea:	fe 2f       	mov	r31, r30
     aec:	27 d0       	rcall	.+78     	; 0xb3c <__divsf3_pse+0x8e>
     aee:	66 0f       	add	r22, r22
     af0:	77 1f       	adc	r23, r23
     af2:	88 1f       	adc	r24, r24
     af4:	bb 1f       	adc	r27, r27
     af6:	26 17       	cp	r18, r22
     af8:	37 07       	cpc	r19, r23
     afa:	48 07       	cpc	r20, r24
     afc:	ab 07       	cpc	r26, r27
     afe:	b0 e8       	ldi	r27, 0x80	; 128
     b00:	09 f0       	breq	.+2      	; 0xb04 <__divsf3_pse+0x56>
     b02:	bb 0b       	sbc	r27, r27
     b04:	80 2d       	mov	r24, r0
     b06:	bf 01       	movw	r22, r30
     b08:	ff 27       	eor	r31, r31
     b0a:	93 58       	subi	r25, 0x83	; 131
     b0c:	5f 4f       	sbci	r21, 0xFF	; 255
     b0e:	2a f0       	brmi	.+10     	; 0xb1a <__divsf3_pse+0x6c>
     b10:	9e 3f       	cpi	r25, 0xFE	; 254
     b12:	51 05       	cpc	r21, r1
     b14:	68 f0       	brcs	.+26     	; 0xb30 <__divsf3_pse+0x82>
     b16:	92 c0       	rjmp	.+292    	; 0xc3c <__fp_inf>
     b18:	dc c0       	rjmp	.+440    	; 0xcd2 <__fp_szero>
     b1a:	5f 3f       	cpi	r21, 0xFF	; 255
     b1c:	ec f3       	brlt	.-6      	; 0xb18 <__divsf3_pse+0x6a>
     b1e:	98 3e       	cpi	r25, 0xE8	; 232
     b20:	dc f3       	brlt	.-10     	; 0xb18 <__divsf3_pse+0x6a>
     b22:	86 95       	lsr	r24
     b24:	77 95       	ror	r23
     b26:	67 95       	ror	r22
     b28:	b7 95       	ror	r27
     b2a:	f7 95       	ror	r31
     b2c:	9f 5f       	subi	r25, 0xFF	; 255
     b2e:	c9 f7       	brne	.-14     	; 0xb22 <__divsf3_pse+0x74>
     b30:	88 0f       	add	r24, r24
     b32:	91 1d       	adc	r25, r1
     b34:	96 95       	lsr	r25
     b36:	87 95       	ror	r24
     b38:	97 f9       	bld	r25, 7
     b3a:	08 95       	ret
     b3c:	e1 e0       	ldi	r30, 0x01	; 1
     b3e:	66 0f       	add	r22, r22
     b40:	77 1f       	adc	r23, r23
     b42:	88 1f       	adc	r24, r24
     b44:	bb 1f       	adc	r27, r27
     b46:	62 17       	cp	r22, r18
     b48:	73 07       	cpc	r23, r19
     b4a:	84 07       	cpc	r24, r20
     b4c:	ba 07       	cpc	r27, r26
     b4e:	20 f0       	brcs	.+8      	; 0xb58 <__divsf3_pse+0xaa>
     b50:	62 1b       	sub	r22, r18
     b52:	73 0b       	sbc	r23, r19
     b54:	84 0b       	sbc	r24, r20
     b56:	ba 0b       	sbc	r27, r26
     b58:	ee 1f       	adc	r30, r30
     b5a:	88 f7       	brcc	.-30     	; 0xb3e <__divsf3_pse+0x90>
     b5c:	e0 95       	com	r30
     b5e:	08 95       	ret

00000b60 <__fixsfsi>:
     b60:	04 d0       	rcall	.+8      	; 0xb6a <__fixunssfsi>
     b62:	68 94       	set
     b64:	b1 11       	cpse	r27, r1
     b66:	b5 c0       	rjmp	.+362    	; 0xcd2 <__fp_szero>
     b68:	08 95       	ret

00000b6a <__fixunssfsi>:
     b6a:	98 d0       	rcall	.+304    	; 0xc9c <__fp_splitA>
     b6c:	88 f0       	brcs	.+34     	; 0xb90 <__fixunssfsi+0x26>
     b6e:	9f 57       	subi	r25, 0x7F	; 127
     b70:	90 f0       	brcs	.+36     	; 0xb96 <__fixunssfsi+0x2c>
     b72:	b9 2f       	mov	r27, r25
     b74:	99 27       	eor	r25, r25
     b76:	b7 51       	subi	r27, 0x17	; 23
     b78:	a0 f0       	brcs	.+40     	; 0xba2 <__fixunssfsi+0x38>
     b7a:	d1 f0       	breq	.+52     	; 0xbb0 <__fixunssfsi+0x46>
     b7c:	66 0f       	add	r22, r22
     b7e:	77 1f       	adc	r23, r23
     b80:	88 1f       	adc	r24, r24
     b82:	99 1f       	adc	r25, r25
     b84:	1a f0       	brmi	.+6      	; 0xb8c <__fixunssfsi+0x22>
     b86:	ba 95       	dec	r27
     b88:	c9 f7       	brne	.-14     	; 0xb7c <__fixunssfsi+0x12>
     b8a:	12 c0       	rjmp	.+36     	; 0xbb0 <__fixunssfsi+0x46>
     b8c:	b1 30       	cpi	r27, 0x01	; 1
     b8e:	81 f0       	breq	.+32     	; 0xbb0 <__fixunssfsi+0x46>
     b90:	9f d0       	rcall	.+318    	; 0xcd0 <__fp_zero>
     b92:	b1 e0       	ldi	r27, 0x01	; 1
     b94:	08 95       	ret
     b96:	9c c0       	rjmp	.+312    	; 0xcd0 <__fp_zero>
     b98:	67 2f       	mov	r22, r23
     b9a:	78 2f       	mov	r23, r24
     b9c:	88 27       	eor	r24, r24
     b9e:	b8 5f       	subi	r27, 0xF8	; 248
     ba0:	39 f0       	breq	.+14     	; 0xbb0 <__fixunssfsi+0x46>
     ba2:	b9 3f       	cpi	r27, 0xF9	; 249
     ba4:	cc f3       	brlt	.-14     	; 0xb98 <__fixunssfsi+0x2e>
     ba6:	86 95       	lsr	r24
     ba8:	77 95       	ror	r23
     baa:	67 95       	ror	r22
     bac:	b3 95       	inc	r27
     bae:	d9 f7       	brne	.-10     	; 0xba6 <__fixunssfsi+0x3c>
     bb0:	3e f4       	brtc	.+14     	; 0xbc0 <__fixunssfsi+0x56>
     bb2:	90 95       	com	r25
     bb4:	80 95       	com	r24
     bb6:	70 95       	com	r23
     bb8:	61 95       	neg	r22
     bba:	7f 4f       	sbci	r23, 0xFF	; 255
     bbc:	8f 4f       	sbci	r24, 0xFF	; 255
     bbe:	9f 4f       	sbci	r25, 0xFF	; 255
     bc0:	08 95       	ret

00000bc2 <__floatunsisf>:
     bc2:	e8 94       	clt
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__floatsisf+0x12>

00000bc6 <__floatsisf>:
     bc6:	97 fb       	bst	r25, 7
     bc8:	3e f4       	brtc	.+14     	; 0xbd8 <__floatsisf+0x12>
     bca:	90 95       	com	r25
     bcc:	80 95       	com	r24
     bce:	70 95       	com	r23
     bd0:	61 95       	neg	r22
     bd2:	7f 4f       	sbci	r23, 0xFF	; 255
     bd4:	8f 4f       	sbci	r24, 0xFF	; 255
     bd6:	9f 4f       	sbci	r25, 0xFF	; 255
     bd8:	99 23       	and	r25, r25
     bda:	a9 f0       	breq	.+42     	; 0xc06 <__floatsisf+0x40>
     bdc:	f9 2f       	mov	r31, r25
     bde:	96 e9       	ldi	r25, 0x96	; 150
     be0:	bb 27       	eor	r27, r27
     be2:	93 95       	inc	r25
     be4:	f6 95       	lsr	r31
     be6:	87 95       	ror	r24
     be8:	77 95       	ror	r23
     bea:	67 95       	ror	r22
     bec:	b7 95       	ror	r27
     bee:	f1 11       	cpse	r31, r1
     bf0:	f8 cf       	rjmp	.-16     	; 0xbe2 <__floatsisf+0x1c>
     bf2:	fa f4       	brpl	.+62     	; 0xc32 <__floatsisf+0x6c>
     bf4:	bb 0f       	add	r27, r27
     bf6:	11 f4       	brne	.+4      	; 0xbfc <__floatsisf+0x36>
     bf8:	60 ff       	sbrs	r22, 0
     bfa:	1b c0       	rjmp	.+54     	; 0xc32 <__floatsisf+0x6c>
     bfc:	6f 5f       	subi	r22, 0xFF	; 255
     bfe:	7f 4f       	sbci	r23, 0xFF	; 255
     c00:	8f 4f       	sbci	r24, 0xFF	; 255
     c02:	9f 4f       	sbci	r25, 0xFF	; 255
     c04:	16 c0       	rjmp	.+44     	; 0xc32 <__floatsisf+0x6c>
     c06:	88 23       	and	r24, r24
     c08:	11 f0       	breq	.+4      	; 0xc0e <__floatsisf+0x48>
     c0a:	96 e9       	ldi	r25, 0x96	; 150
     c0c:	11 c0       	rjmp	.+34     	; 0xc30 <__floatsisf+0x6a>
     c0e:	77 23       	and	r23, r23
     c10:	21 f0       	breq	.+8      	; 0xc1a <__floatsisf+0x54>
     c12:	9e e8       	ldi	r25, 0x8E	; 142
     c14:	87 2f       	mov	r24, r23
     c16:	76 2f       	mov	r23, r22
     c18:	05 c0       	rjmp	.+10     	; 0xc24 <__floatsisf+0x5e>
     c1a:	66 23       	and	r22, r22
     c1c:	71 f0       	breq	.+28     	; 0xc3a <__floatsisf+0x74>
     c1e:	96 e8       	ldi	r25, 0x86	; 134
     c20:	86 2f       	mov	r24, r22
     c22:	70 e0       	ldi	r23, 0x00	; 0
     c24:	60 e0       	ldi	r22, 0x00	; 0
     c26:	2a f0       	brmi	.+10     	; 0xc32 <__floatsisf+0x6c>
     c28:	9a 95       	dec	r25
     c2a:	66 0f       	add	r22, r22
     c2c:	77 1f       	adc	r23, r23
     c2e:	88 1f       	adc	r24, r24
     c30:	da f7       	brpl	.-10     	; 0xc28 <__floatsisf+0x62>
     c32:	88 0f       	add	r24, r24
     c34:	96 95       	lsr	r25
     c36:	87 95       	ror	r24
     c38:	97 f9       	bld	r25, 7
     c3a:	08 95       	ret

00000c3c <__fp_inf>:
     c3c:	97 f9       	bld	r25, 7
     c3e:	9f 67       	ori	r25, 0x7F	; 127
     c40:	80 e8       	ldi	r24, 0x80	; 128
     c42:	70 e0       	ldi	r23, 0x00	; 0
     c44:	60 e0       	ldi	r22, 0x00	; 0
     c46:	08 95       	ret

00000c48 <__fp_nan>:
     c48:	9f ef       	ldi	r25, 0xFF	; 255
     c4a:	80 ec       	ldi	r24, 0xC0	; 192
     c4c:	08 95       	ret

00000c4e <__fp_pscA>:
     c4e:	00 24       	eor	r0, r0
     c50:	0a 94       	dec	r0
     c52:	16 16       	cp	r1, r22
     c54:	17 06       	cpc	r1, r23
     c56:	18 06       	cpc	r1, r24
     c58:	09 06       	cpc	r0, r25
     c5a:	08 95       	ret

00000c5c <__fp_pscB>:
     c5c:	00 24       	eor	r0, r0
     c5e:	0a 94       	dec	r0
     c60:	12 16       	cp	r1, r18
     c62:	13 06       	cpc	r1, r19
     c64:	14 06       	cpc	r1, r20
     c66:	05 06       	cpc	r0, r21
     c68:	08 95       	ret

00000c6a <__fp_round>:
     c6a:	09 2e       	mov	r0, r25
     c6c:	03 94       	inc	r0
     c6e:	00 0c       	add	r0, r0
     c70:	11 f4       	brne	.+4      	; 0xc76 <__fp_round+0xc>
     c72:	88 23       	and	r24, r24
     c74:	52 f0       	brmi	.+20     	; 0xc8a <__fp_round+0x20>
     c76:	bb 0f       	add	r27, r27
     c78:	40 f4       	brcc	.+16     	; 0xc8a <__fp_round+0x20>
     c7a:	bf 2b       	or	r27, r31
     c7c:	11 f4       	brne	.+4      	; 0xc82 <__fp_round+0x18>
     c7e:	60 ff       	sbrs	r22, 0
     c80:	04 c0       	rjmp	.+8      	; 0xc8a <__fp_round+0x20>
     c82:	6f 5f       	subi	r22, 0xFF	; 255
     c84:	7f 4f       	sbci	r23, 0xFF	; 255
     c86:	8f 4f       	sbci	r24, 0xFF	; 255
     c88:	9f 4f       	sbci	r25, 0xFF	; 255
     c8a:	08 95       	ret

00000c8c <__fp_split3>:
     c8c:	57 fd       	sbrc	r21, 7
     c8e:	90 58       	subi	r25, 0x80	; 128
     c90:	44 0f       	add	r20, r20
     c92:	55 1f       	adc	r21, r21
     c94:	59 f0       	breq	.+22     	; 0xcac <__fp_splitA+0x10>
     c96:	5f 3f       	cpi	r21, 0xFF	; 255
     c98:	71 f0       	breq	.+28     	; 0xcb6 <__fp_splitA+0x1a>
     c9a:	47 95       	ror	r20

00000c9c <__fp_splitA>:
     c9c:	88 0f       	add	r24, r24
     c9e:	97 fb       	bst	r25, 7
     ca0:	99 1f       	adc	r25, r25
     ca2:	61 f0       	breq	.+24     	; 0xcbc <__fp_splitA+0x20>
     ca4:	9f 3f       	cpi	r25, 0xFF	; 255
     ca6:	79 f0       	breq	.+30     	; 0xcc6 <__fp_splitA+0x2a>
     ca8:	87 95       	ror	r24
     caa:	08 95       	ret
     cac:	12 16       	cp	r1, r18
     cae:	13 06       	cpc	r1, r19
     cb0:	14 06       	cpc	r1, r20
     cb2:	55 1f       	adc	r21, r21
     cb4:	f2 cf       	rjmp	.-28     	; 0xc9a <__fp_split3+0xe>
     cb6:	46 95       	lsr	r20
     cb8:	f1 df       	rcall	.-30     	; 0xc9c <__fp_splitA>
     cba:	08 c0       	rjmp	.+16     	; 0xccc <__fp_splitA+0x30>
     cbc:	16 16       	cp	r1, r22
     cbe:	17 06       	cpc	r1, r23
     cc0:	18 06       	cpc	r1, r24
     cc2:	99 1f       	adc	r25, r25
     cc4:	f1 cf       	rjmp	.-30     	; 0xca8 <__fp_splitA+0xc>
     cc6:	86 95       	lsr	r24
     cc8:	71 05       	cpc	r23, r1
     cca:	61 05       	cpc	r22, r1
     ccc:	08 94       	sec
     cce:	08 95       	ret

00000cd0 <__fp_zero>:
     cd0:	e8 94       	clt

00000cd2 <__fp_szero>:
     cd2:	bb 27       	eor	r27, r27
     cd4:	66 27       	eor	r22, r22
     cd6:	77 27       	eor	r23, r23
     cd8:	cb 01       	movw	r24, r22
     cda:	97 f9       	bld	r25, 7
     cdc:	08 95       	ret

00000cde <__mulsf3>:
     cde:	0b d0       	rcall	.+22     	; 0xcf6 <__mulsf3x>
     ce0:	c4 cf       	rjmp	.-120    	; 0xc6a <__fp_round>
     ce2:	b5 df       	rcall	.-150    	; 0xc4e <__fp_pscA>
     ce4:	28 f0       	brcs	.+10     	; 0xcf0 <__mulsf3+0x12>
     ce6:	ba df       	rcall	.-140    	; 0xc5c <__fp_pscB>
     ce8:	18 f0       	brcs	.+6      	; 0xcf0 <__mulsf3+0x12>
     cea:	95 23       	and	r25, r21
     cec:	09 f0       	breq	.+2      	; 0xcf0 <__mulsf3+0x12>
     cee:	a6 cf       	rjmp	.-180    	; 0xc3c <__fp_inf>
     cf0:	ab cf       	rjmp	.-170    	; 0xc48 <__fp_nan>
     cf2:	11 24       	eor	r1, r1
     cf4:	ee cf       	rjmp	.-36     	; 0xcd2 <__fp_szero>

00000cf6 <__mulsf3x>:
     cf6:	ca df       	rcall	.-108    	; 0xc8c <__fp_split3>
     cf8:	a0 f3       	brcs	.-24     	; 0xce2 <__mulsf3+0x4>

00000cfa <__mulsf3_pse>:
     cfa:	95 9f       	mul	r25, r21
     cfc:	d1 f3       	breq	.-12     	; 0xcf2 <__mulsf3+0x14>
     cfe:	95 0f       	add	r25, r21
     d00:	50 e0       	ldi	r21, 0x00	; 0
     d02:	55 1f       	adc	r21, r21
     d04:	62 9f       	mul	r22, r18
     d06:	f0 01       	movw	r30, r0
     d08:	72 9f       	mul	r23, r18
     d0a:	bb 27       	eor	r27, r27
     d0c:	f0 0d       	add	r31, r0
     d0e:	b1 1d       	adc	r27, r1
     d10:	63 9f       	mul	r22, r19
     d12:	aa 27       	eor	r26, r26
     d14:	f0 0d       	add	r31, r0
     d16:	b1 1d       	adc	r27, r1
     d18:	aa 1f       	adc	r26, r26
     d1a:	64 9f       	mul	r22, r20
     d1c:	66 27       	eor	r22, r22
     d1e:	b0 0d       	add	r27, r0
     d20:	a1 1d       	adc	r26, r1
     d22:	66 1f       	adc	r22, r22
     d24:	82 9f       	mul	r24, r18
     d26:	22 27       	eor	r18, r18
     d28:	b0 0d       	add	r27, r0
     d2a:	a1 1d       	adc	r26, r1
     d2c:	62 1f       	adc	r22, r18
     d2e:	73 9f       	mul	r23, r19
     d30:	b0 0d       	add	r27, r0
     d32:	a1 1d       	adc	r26, r1
     d34:	62 1f       	adc	r22, r18
     d36:	83 9f       	mul	r24, r19
     d38:	a0 0d       	add	r26, r0
     d3a:	61 1d       	adc	r22, r1
     d3c:	22 1f       	adc	r18, r18
     d3e:	74 9f       	mul	r23, r20
     d40:	33 27       	eor	r19, r19
     d42:	a0 0d       	add	r26, r0
     d44:	61 1d       	adc	r22, r1
     d46:	23 1f       	adc	r18, r19
     d48:	84 9f       	mul	r24, r20
     d4a:	60 0d       	add	r22, r0
     d4c:	21 1d       	adc	r18, r1
     d4e:	82 2f       	mov	r24, r18
     d50:	76 2f       	mov	r23, r22
     d52:	6a 2f       	mov	r22, r26
     d54:	11 24       	eor	r1, r1
     d56:	9f 57       	subi	r25, 0x7F	; 127
     d58:	50 40       	sbci	r21, 0x00	; 0
     d5a:	8a f0       	brmi	.+34     	; 0xd7e <__mulsf3_pse+0x84>
     d5c:	e1 f0       	breq	.+56     	; 0xd96 <__mulsf3_pse+0x9c>
     d5e:	88 23       	and	r24, r24
     d60:	4a f0       	brmi	.+18     	; 0xd74 <__mulsf3_pse+0x7a>
     d62:	ee 0f       	add	r30, r30
     d64:	ff 1f       	adc	r31, r31
     d66:	bb 1f       	adc	r27, r27
     d68:	66 1f       	adc	r22, r22
     d6a:	77 1f       	adc	r23, r23
     d6c:	88 1f       	adc	r24, r24
     d6e:	91 50       	subi	r25, 0x01	; 1
     d70:	50 40       	sbci	r21, 0x00	; 0
     d72:	a9 f7       	brne	.-22     	; 0xd5e <__mulsf3_pse+0x64>
     d74:	9e 3f       	cpi	r25, 0xFE	; 254
     d76:	51 05       	cpc	r21, r1
     d78:	70 f0       	brcs	.+28     	; 0xd96 <__mulsf3_pse+0x9c>
     d7a:	60 cf       	rjmp	.-320    	; 0xc3c <__fp_inf>
     d7c:	aa cf       	rjmp	.-172    	; 0xcd2 <__fp_szero>
     d7e:	5f 3f       	cpi	r21, 0xFF	; 255
     d80:	ec f3       	brlt	.-6      	; 0xd7c <__mulsf3_pse+0x82>
     d82:	98 3e       	cpi	r25, 0xE8	; 232
     d84:	dc f3       	brlt	.-10     	; 0xd7c <__mulsf3_pse+0x82>
     d86:	86 95       	lsr	r24
     d88:	77 95       	ror	r23
     d8a:	67 95       	ror	r22
     d8c:	b7 95       	ror	r27
     d8e:	f7 95       	ror	r31
     d90:	e7 95       	ror	r30
     d92:	9f 5f       	subi	r25, 0xFF	; 255
     d94:	c1 f7       	brne	.-16     	; 0xd86 <__mulsf3_pse+0x8c>
     d96:	fe 2b       	or	r31, r30
     d98:	88 0f       	add	r24, r24
     d9a:	91 1d       	adc	r25, r1
     d9c:	96 95       	lsr	r25
     d9e:	87 95       	ror	r24
     da0:	97 f9       	bld	r25, 7
     da2:	08 95       	ret

00000da4 <round>:
     da4:	7b df       	rcall	.-266    	; 0xc9c <__fp_splitA>
     da6:	e0 f0       	brcs	.+56     	; 0xde0 <round+0x3c>
     da8:	9e 37       	cpi	r25, 0x7E	; 126
     daa:	d8 f0       	brcs	.+54     	; 0xde2 <round+0x3e>
     dac:	96 39       	cpi	r25, 0x96	; 150
     dae:	b8 f4       	brcc	.+46     	; 0xdde <round+0x3a>
     db0:	9e 38       	cpi	r25, 0x8E	; 142
     db2:	48 f4       	brcc	.+18     	; 0xdc6 <round+0x22>
     db4:	67 2f       	mov	r22, r23
     db6:	78 2f       	mov	r23, r24
     db8:	88 27       	eor	r24, r24
     dba:	98 5f       	subi	r25, 0xF8	; 248
     dbc:	f9 cf       	rjmp	.-14     	; 0xdb0 <round+0xc>
     dbe:	86 95       	lsr	r24
     dc0:	77 95       	ror	r23
     dc2:	67 95       	ror	r22
     dc4:	93 95       	inc	r25
     dc6:	95 39       	cpi	r25, 0x95	; 149
     dc8:	d0 f3       	brcs	.-12     	; 0xdbe <round+0x1a>
     dca:	b6 2f       	mov	r27, r22
     dcc:	b1 70       	andi	r27, 0x01	; 1
     dce:	6b 0f       	add	r22, r27
     dd0:	71 1d       	adc	r23, r1
     dd2:	81 1d       	adc	r24, r1
     dd4:	20 f4       	brcc	.+8      	; 0xdde <round+0x3a>
     dd6:	87 95       	ror	r24
     dd8:	77 95       	ror	r23
     dda:	67 95       	ror	r22
     ddc:	93 95       	inc	r25
     dde:	02 c0       	rjmp	.+4      	; 0xde4 <__fp_mintl>
     de0:	1c c0       	rjmp	.+56     	; 0xe1a <__fp_mpack>
     de2:	77 cf       	rjmp	.-274    	; 0xcd2 <__fp_szero>

00000de4 <__fp_mintl>:
     de4:	88 23       	and	r24, r24
     de6:	71 f4       	brne	.+28     	; 0xe04 <__fp_mintl+0x20>
     de8:	77 23       	and	r23, r23
     dea:	21 f0       	breq	.+8      	; 0xdf4 <__fp_mintl+0x10>
     dec:	98 50       	subi	r25, 0x08	; 8
     dee:	87 2b       	or	r24, r23
     df0:	76 2f       	mov	r23, r22
     df2:	07 c0       	rjmp	.+14     	; 0xe02 <__fp_mintl+0x1e>
     df4:	66 23       	and	r22, r22
     df6:	11 f4       	brne	.+4      	; 0xdfc <__fp_mintl+0x18>
     df8:	99 27       	eor	r25, r25
     dfa:	0d c0       	rjmp	.+26     	; 0xe16 <__fp_mintl+0x32>
     dfc:	90 51       	subi	r25, 0x10	; 16
     dfe:	86 2b       	or	r24, r22
     e00:	70 e0       	ldi	r23, 0x00	; 0
     e02:	60 e0       	ldi	r22, 0x00	; 0
     e04:	2a f0       	brmi	.+10     	; 0xe10 <__fp_mintl+0x2c>
     e06:	9a 95       	dec	r25
     e08:	66 0f       	add	r22, r22
     e0a:	77 1f       	adc	r23, r23
     e0c:	88 1f       	adc	r24, r24
     e0e:	da f7       	brpl	.-10     	; 0xe06 <__fp_mintl+0x22>
     e10:	88 0f       	add	r24, r24
     e12:	96 95       	lsr	r25
     e14:	87 95       	ror	r24
     e16:	97 f9       	bld	r25, 7
     e18:	08 95       	ret

00000e1a <__fp_mpack>:
     e1a:	9f 3f       	cpi	r25, 0xFF	; 255
     e1c:	31 f0       	breq	.+12     	; 0xe2a <__fp_mpack_finite+0xc>

00000e1e <__fp_mpack_finite>:
     e1e:	91 50       	subi	r25, 0x01	; 1
     e20:	20 f4       	brcc	.+8      	; 0xe2a <__fp_mpack_finite+0xc>
     e22:	87 95       	ror	r24
     e24:	77 95       	ror	r23
     e26:	67 95       	ror	r22
     e28:	b7 95       	ror	r27
     e2a:	88 0f       	add	r24, r24
     e2c:	91 1d       	adc	r25, r1
     e2e:	96 95       	lsr	r25
     e30:	87 95       	ror	r24
     e32:	97 f9       	bld	r25, 7
     e34:	08 95       	ret

00000e36 <malloc>:
     e36:	cf 93       	push	r28
     e38:	df 93       	push	r29
     e3a:	82 30       	cpi	r24, 0x02	; 2
     e3c:	91 05       	cpc	r25, r1
     e3e:	10 f4       	brcc	.+4      	; 0xe44 <malloc+0xe>
     e40:	82 e0       	ldi	r24, 0x02	; 2
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	e0 91 c8 01 	lds	r30, 0x01C8
     e48:	f0 91 c9 01 	lds	r31, 0x01C9
     e4c:	20 e0       	ldi	r18, 0x00	; 0
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	a0 e0       	ldi	r26, 0x00	; 0
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	30 97       	sbiw	r30, 0x00	; 0
     e56:	39 f1       	breq	.+78     	; 0xea6 <malloc+0x70>
     e58:	40 81       	ld	r20, Z
     e5a:	51 81       	ldd	r21, Z+1	; 0x01
     e5c:	48 17       	cp	r20, r24
     e5e:	59 07       	cpc	r21, r25
     e60:	b8 f0       	brcs	.+46     	; 0xe90 <malloc+0x5a>
     e62:	48 17       	cp	r20, r24
     e64:	59 07       	cpc	r21, r25
     e66:	71 f4       	brne	.+28     	; 0xe84 <malloc+0x4e>
     e68:	82 81       	ldd	r24, Z+2	; 0x02
     e6a:	93 81       	ldd	r25, Z+3	; 0x03
     e6c:	10 97       	sbiw	r26, 0x00	; 0
     e6e:	29 f0       	breq	.+10     	; 0xe7a <malloc+0x44>
     e70:	13 96       	adiw	r26, 0x03	; 3
     e72:	9c 93       	st	X, r25
     e74:	8e 93       	st	-X, r24
     e76:	12 97       	sbiw	r26, 0x02	; 2
     e78:	2c c0       	rjmp	.+88     	; 0xed2 <malloc+0x9c>
     e7a:	90 93 c9 01 	sts	0x01C9, r25
     e7e:	80 93 c8 01 	sts	0x01C8, r24
     e82:	27 c0       	rjmp	.+78     	; 0xed2 <malloc+0x9c>
     e84:	21 15       	cp	r18, r1
     e86:	31 05       	cpc	r19, r1
     e88:	31 f0       	breq	.+12     	; 0xe96 <malloc+0x60>
     e8a:	42 17       	cp	r20, r18
     e8c:	53 07       	cpc	r21, r19
     e8e:	18 f0       	brcs	.+6      	; 0xe96 <malloc+0x60>
     e90:	a9 01       	movw	r20, r18
     e92:	db 01       	movw	r26, r22
     e94:	01 c0       	rjmp	.+2      	; 0xe98 <malloc+0x62>
     e96:	ef 01       	movw	r28, r30
     e98:	9a 01       	movw	r18, r20
     e9a:	bd 01       	movw	r22, r26
     e9c:	df 01       	movw	r26, r30
     e9e:	02 80       	ldd	r0, Z+2	; 0x02
     ea0:	f3 81       	ldd	r31, Z+3	; 0x03
     ea2:	e0 2d       	mov	r30, r0
     ea4:	d7 cf       	rjmp	.-82     	; 0xe54 <malloc+0x1e>
     ea6:	21 15       	cp	r18, r1
     ea8:	31 05       	cpc	r19, r1
     eaa:	f9 f0       	breq	.+62     	; 0xeea <malloc+0xb4>
     eac:	28 1b       	sub	r18, r24
     eae:	39 0b       	sbc	r19, r25
     eb0:	24 30       	cpi	r18, 0x04	; 4
     eb2:	31 05       	cpc	r19, r1
     eb4:	80 f4       	brcc	.+32     	; 0xed6 <malloc+0xa0>
     eb6:	8a 81       	ldd	r24, Y+2	; 0x02
     eb8:	9b 81       	ldd	r25, Y+3	; 0x03
     eba:	61 15       	cp	r22, r1
     ebc:	71 05       	cpc	r23, r1
     ebe:	21 f0       	breq	.+8      	; 0xec8 <malloc+0x92>
     ec0:	fb 01       	movw	r30, r22
     ec2:	93 83       	std	Z+3, r25	; 0x03
     ec4:	82 83       	std	Z+2, r24	; 0x02
     ec6:	04 c0       	rjmp	.+8      	; 0xed0 <malloc+0x9a>
     ec8:	90 93 c9 01 	sts	0x01C9, r25
     ecc:	80 93 c8 01 	sts	0x01C8, r24
     ed0:	fe 01       	movw	r30, r28
     ed2:	32 96       	adiw	r30, 0x02	; 2
     ed4:	44 c0       	rjmp	.+136    	; 0xf5e <malloc+0x128>
     ed6:	fe 01       	movw	r30, r28
     ed8:	e2 0f       	add	r30, r18
     eda:	f3 1f       	adc	r31, r19
     edc:	81 93       	st	Z+, r24
     ede:	91 93       	st	Z+, r25
     ee0:	22 50       	subi	r18, 0x02	; 2
     ee2:	31 09       	sbc	r19, r1
     ee4:	39 83       	std	Y+1, r19	; 0x01
     ee6:	28 83       	st	Y, r18
     ee8:	3a c0       	rjmp	.+116    	; 0xf5e <malloc+0x128>
     eea:	20 91 c6 01 	lds	r18, 0x01C6
     eee:	30 91 c7 01 	lds	r19, 0x01C7
     ef2:	23 2b       	or	r18, r19
     ef4:	41 f4       	brne	.+16     	; 0xf06 <malloc+0xd0>
     ef6:	20 91 02 01 	lds	r18, 0x0102
     efa:	30 91 03 01 	lds	r19, 0x0103
     efe:	30 93 c7 01 	sts	0x01C7, r19
     f02:	20 93 c6 01 	sts	0x01C6, r18
     f06:	20 91 00 01 	lds	r18, 0x0100
     f0a:	30 91 01 01 	lds	r19, 0x0101
     f0e:	21 15       	cp	r18, r1
     f10:	31 05       	cpc	r19, r1
     f12:	41 f4       	brne	.+16     	; 0xf24 <malloc+0xee>
     f14:	2d b7       	in	r18, 0x3d	; 61
     f16:	3e b7       	in	r19, 0x3e	; 62
     f18:	40 91 04 01 	lds	r20, 0x0104
     f1c:	50 91 05 01 	lds	r21, 0x0105
     f20:	24 1b       	sub	r18, r20
     f22:	35 0b       	sbc	r19, r21
     f24:	e0 91 c6 01 	lds	r30, 0x01C6
     f28:	f0 91 c7 01 	lds	r31, 0x01C7
     f2c:	e2 17       	cp	r30, r18
     f2e:	f3 07       	cpc	r31, r19
     f30:	a0 f4       	brcc	.+40     	; 0xf5a <malloc+0x124>
     f32:	2e 1b       	sub	r18, r30
     f34:	3f 0b       	sbc	r19, r31
     f36:	28 17       	cp	r18, r24
     f38:	39 07       	cpc	r19, r25
     f3a:	78 f0       	brcs	.+30     	; 0xf5a <malloc+0x124>
     f3c:	ac 01       	movw	r20, r24
     f3e:	4e 5f       	subi	r20, 0xFE	; 254
     f40:	5f 4f       	sbci	r21, 0xFF	; 255
     f42:	24 17       	cp	r18, r20
     f44:	35 07       	cpc	r19, r21
     f46:	48 f0       	brcs	.+18     	; 0xf5a <malloc+0x124>
     f48:	4e 0f       	add	r20, r30
     f4a:	5f 1f       	adc	r21, r31
     f4c:	50 93 c7 01 	sts	0x01C7, r21
     f50:	40 93 c6 01 	sts	0x01C6, r20
     f54:	81 93       	st	Z+, r24
     f56:	91 93       	st	Z+, r25
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <malloc+0x128>
     f5a:	e0 e0       	ldi	r30, 0x00	; 0
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	cf 01       	movw	r24, r30
     f60:	df 91       	pop	r29
     f62:	cf 91       	pop	r28
     f64:	08 95       	ret

00000f66 <free>:
     f66:	cf 93       	push	r28
     f68:	df 93       	push	r29
     f6a:	00 97       	sbiw	r24, 0x00	; 0
     f6c:	09 f4       	brne	.+2      	; 0xf70 <free+0xa>
     f6e:	87 c0       	rjmp	.+270    	; 0x107e <free+0x118>
     f70:	fc 01       	movw	r30, r24
     f72:	32 97       	sbiw	r30, 0x02	; 2
     f74:	13 82       	std	Z+3, r1	; 0x03
     f76:	12 82       	std	Z+2, r1	; 0x02
     f78:	c0 91 c8 01 	lds	r28, 0x01C8
     f7c:	d0 91 c9 01 	lds	r29, 0x01C9
     f80:	20 97       	sbiw	r28, 0x00	; 0
     f82:	81 f4       	brne	.+32     	; 0xfa4 <free+0x3e>
     f84:	20 81       	ld	r18, Z
     f86:	31 81       	ldd	r19, Z+1	; 0x01
     f88:	28 0f       	add	r18, r24
     f8a:	39 1f       	adc	r19, r25
     f8c:	80 91 c6 01 	lds	r24, 0x01C6
     f90:	90 91 c7 01 	lds	r25, 0x01C7
     f94:	82 17       	cp	r24, r18
     f96:	93 07       	cpc	r25, r19
     f98:	79 f5       	brne	.+94     	; 0xff8 <free+0x92>
     f9a:	f0 93 c7 01 	sts	0x01C7, r31
     f9e:	e0 93 c6 01 	sts	0x01C6, r30
     fa2:	6d c0       	rjmp	.+218    	; 0x107e <free+0x118>
     fa4:	de 01       	movw	r26, r28
     fa6:	20 e0       	ldi	r18, 0x00	; 0
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	ae 17       	cp	r26, r30
     fac:	bf 07       	cpc	r27, r31
     fae:	50 f4       	brcc	.+20     	; 0xfc4 <free+0x5e>
     fb0:	12 96       	adiw	r26, 0x02	; 2
     fb2:	4d 91       	ld	r20, X+
     fb4:	5c 91       	ld	r21, X
     fb6:	13 97       	sbiw	r26, 0x03	; 3
     fb8:	9d 01       	movw	r18, r26
     fba:	41 15       	cp	r20, r1
     fbc:	51 05       	cpc	r21, r1
     fbe:	09 f1       	breq	.+66     	; 0x1002 <free+0x9c>
     fc0:	da 01       	movw	r26, r20
     fc2:	f3 cf       	rjmp	.-26     	; 0xfaa <free+0x44>
     fc4:	b3 83       	std	Z+3, r27	; 0x03
     fc6:	a2 83       	std	Z+2, r26	; 0x02
     fc8:	40 81       	ld	r20, Z
     fca:	51 81       	ldd	r21, Z+1	; 0x01
     fcc:	84 0f       	add	r24, r20
     fce:	95 1f       	adc	r25, r21
     fd0:	8a 17       	cp	r24, r26
     fd2:	9b 07       	cpc	r25, r27
     fd4:	71 f4       	brne	.+28     	; 0xff2 <free+0x8c>
     fd6:	8d 91       	ld	r24, X+
     fd8:	9c 91       	ld	r25, X
     fda:	11 97       	sbiw	r26, 0x01	; 1
     fdc:	84 0f       	add	r24, r20
     fde:	95 1f       	adc	r25, r21
     fe0:	02 96       	adiw	r24, 0x02	; 2
     fe2:	91 83       	std	Z+1, r25	; 0x01
     fe4:	80 83       	st	Z, r24
     fe6:	12 96       	adiw	r26, 0x02	; 2
     fe8:	8d 91       	ld	r24, X+
     fea:	9c 91       	ld	r25, X
     fec:	13 97       	sbiw	r26, 0x03	; 3
     fee:	93 83       	std	Z+3, r25	; 0x03
     ff0:	82 83       	std	Z+2, r24	; 0x02
     ff2:	21 15       	cp	r18, r1
     ff4:	31 05       	cpc	r19, r1
     ff6:	29 f4       	brne	.+10     	; 0x1002 <free+0x9c>
     ff8:	f0 93 c9 01 	sts	0x01C9, r31
     ffc:	e0 93 c8 01 	sts	0x01C8, r30
    1000:	3e c0       	rjmp	.+124    	; 0x107e <free+0x118>
    1002:	d9 01       	movw	r26, r18
    1004:	13 96       	adiw	r26, 0x03	; 3
    1006:	fc 93       	st	X, r31
    1008:	ee 93       	st	-X, r30
    100a:	12 97       	sbiw	r26, 0x02	; 2
    100c:	4d 91       	ld	r20, X+
    100e:	5d 91       	ld	r21, X+
    1010:	a4 0f       	add	r26, r20
    1012:	b5 1f       	adc	r27, r21
    1014:	ea 17       	cp	r30, r26
    1016:	fb 07       	cpc	r31, r27
    1018:	79 f4       	brne	.+30     	; 0x1038 <free+0xd2>
    101a:	80 81       	ld	r24, Z
    101c:	91 81       	ldd	r25, Z+1	; 0x01
    101e:	84 0f       	add	r24, r20
    1020:	95 1f       	adc	r25, r21
    1022:	02 96       	adiw	r24, 0x02	; 2
    1024:	d9 01       	movw	r26, r18
    1026:	11 96       	adiw	r26, 0x01	; 1
    1028:	9c 93       	st	X, r25
    102a:	8e 93       	st	-X, r24
    102c:	82 81       	ldd	r24, Z+2	; 0x02
    102e:	93 81       	ldd	r25, Z+3	; 0x03
    1030:	13 96       	adiw	r26, 0x03	; 3
    1032:	9c 93       	st	X, r25
    1034:	8e 93       	st	-X, r24
    1036:	12 97       	sbiw	r26, 0x02	; 2
    1038:	e0 e0       	ldi	r30, 0x00	; 0
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	8a 81       	ldd	r24, Y+2	; 0x02
    103e:	9b 81       	ldd	r25, Y+3	; 0x03
    1040:	00 97       	sbiw	r24, 0x00	; 0
    1042:	19 f0       	breq	.+6      	; 0x104a <free+0xe4>
    1044:	fe 01       	movw	r30, r28
    1046:	ec 01       	movw	r28, r24
    1048:	f9 cf       	rjmp	.-14     	; 0x103c <free+0xd6>
    104a:	ce 01       	movw	r24, r28
    104c:	02 96       	adiw	r24, 0x02	; 2
    104e:	28 81       	ld	r18, Y
    1050:	39 81       	ldd	r19, Y+1	; 0x01
    1052:	82 0f       	add	r24, r18
    1054:	93 1f       	adc	r25, r19
    1056:	20 91 c6 01 	lds	r18, 0x01C6
    105a:	30 91 c7 01 	lds	r19, 0x01C7
    105e:	28 17       	cp	r18, r24
    1060:	39 07       	cpc	r19, r25
    1062:	69 f4       	brne	.+26     	; 0x107e <free+0x118>
    1064:	30 97       	sbiw	r30, 0x00	; 0
    1066:	29 f4       	brne	.+10     	; 0x1072 <free+0x10c>
    1068:	10 92 c9 01 	sts	0x01C9, r1
    106c:	10 92 c8 01 	sts	0x01C8, r1
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <free+0x110>
    1072:	13 82       	std	Z+3, r1	; 0x03
    1074:	12 82       	std	Z+2, r1	; 0x02
    1076:	d0 93 c7 01 	sts	0x01C7, r29
    107a:	c0 93 c6 01 	sts	0x01C6, r28
    107e:	df 91       	pop	r29
    1080:	cf 91       	pop	r28
    1082:	08 95       	ret

00001084 <fdevopen>:
    1084:	0f 93       	push	r16
    1086:	1f 93       	push	r17
    1088:	cf 93       	push	r28
    108a:	df 93       	push	r29
    108c:	ec 01       	movw	r28, r24
    108e:	8b 01       	movw	r16, r22
    1090:	00 97       	sbiw	r24, 0x00	; 0
    1092:	31 f4       	brne	.+12     	; 0x10a0 <fdevopen+0x1c>
    1094:	61 15       	cp	r22, r1
    1096:	71 05       	cpc	r23, r1
    1098:	19 f4       	brne	.+6      	; 0x10a0 <fdevopen+0x1c>
    109a:	80 e0       	ldi	r24, 0x00	; 0
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	38 c0       	rjmp	.+112    	; 0x1110 <fdevopen+0x8c>
    10a0:	6e e0       	ldi	r22, 0x0E	; 14
    10a2:	70 e0       	ldi	r23, 0x00	; 0
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <calloc>
    10ac:	fc 01       	movw	r30, r24
    10ae:	00 97       	sbiw	r24, 0x00	; 0
    10b0:	a1 f3       	breq	.-24     	; 0x109a <fdevopen+0x16>
    10b2:	80 e8       	ldi	r24, 0x80	; 128
    10b4:	83 83       	std	Z+3, r24	; 0x03
    10b6:	01 15       	cp	r16, r1
    10b8:	11 05       	cpc	r17, r1
    10ba:	71 f0       	breq	.+28     	; 0x10d8 <fdevopen+0x54>
    10bc:	13 87       	std	Z+11, r17	; 0x0b
    10be:	02 87       	std	Z+10, r16	; 0x0a
    10c0:	81 e8       	ldi	r24, 0x81	; 129
    10c2:	83 83       	std	Z+3, r24	; 0x03
    10c4:	80 91 ca 01 	lds	r24, 0x01CA
    10c8:	90 91 cb 01 	lds	r25, 0x01CB
    10cc:	89 2b       	or	r24, r25
    10ce:	21 f4       	brne	.+8      	; 0x10d8 <fdevopen+0x54>
    10d0:	f0 93 cb 01 	sts	0x01CB, r31
    10d4:	e0 93 ca 01 	sts	0x01CA, r30
    10d8:	20 97       	sbiw	r28, 0x00	; 0
    10da:	c9 f0       	breq	.+50     	; 0x110e <fdevopen+0x8a>
    10dc:	d1 87       	std	Z+9, r29	; 0x09
    10de:	c0 87       	std	Z+8, r28	; 0x08
    10e0:	83 81       	ldd	r24, Z+3	; 0x03
    10e2:	82 60       	ori	r24, 0x02	; 2
    10e4:	83 83       	std	Z+3, r24	; 0x03
    10e6:	80 91 cc 01 	lds	r24, 0x01CC
    10ea:	90 91 cd 01 	lds	r25, 0x01CD
    10ee:	89 2b       	or	r24, r25
    10f0:	71 f4       	brne	.+28     	; 0x110e <fdevopen+0x8a>
    10f2:	f0 93 cd 01 	sts	0x01CD, r31
    10f6:	e0 93 cc 01 	sts	0x01CC, r30
    10fa:	80 91 ce 01 	lds	r24, 0x01CE
    10fe:	90 91 cf 01 	lds	r25, 0x01CF
    1102:	89 2b       	or	r24, r25
    1104:	21 f4       	brne	.+8      	; 0x110e <fdevopen+0x8a>
    1106:	f0 93 cf 01 	sts	0x01CF, r31
    110a:	e0 93 ce 01 	sts	0x01CE, r30
    110e:	cf 01       	movw	r24, r30
    1110:	df 91       	pop	r29
    1112:	cf 91       	pop	r28
    1114:	1f 91       	pop	r17
    1116:	0f 91       	pop	r16
    1118:	08 95       	ret

0000111a <printf>:
    111a:	a0 e0       	ldi	r26, 0x00	; 0
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	e3 e9       	ldi	r30, 0x93	; 147
    1120:	f8 e0       	ldi	r31, 0x08	; 8
    1122:	0c 94 53 0b 	jmp	0x16a6	; 0x16a6 <__prologue_saves__+0x20>
    1126:	fe 01       	movw	r30, r28
    1128:	35 96       	adiw	r30, 0x05	; 5
    112a:	61 91       	ld	r22, Z+
    112c:	71 91       	ld	r23, Z+
    112e:	af 01       	movw	r20, r30
    1130:	80 91 cc 01 	lds	r24, 0x01CC
    1134:	90 91 cd 01 	lds	r25, 0x01CD
    1138:	0e 94 a8 08 	call	0x1150	; 0x1150 <vfprintf>
    113c:	e2 e0       	ldi	r30, 0x02	; 2
    113e:	0c 94 6f 0b 	jmp	0x16de	; 0x16de <__epilogue_restores__+0x20>

00001142 <putchar>:
    1142:	60 91 cc 01 	lds	r22, 0x01CC
    1146:	70 91 cd 01 	lds	r23, 0x01CD
    114a:	0e 94 b3 0a 	call	0x1566	; 0x1566 <fputc>
    114e:	08 95       	ret

00001150 <vfprintf>:
    1150:	ac e0       	ldi	r26, 0x0C	; 12
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	ee ea       	ldi	r30, 0xAE	; 174
    1156:	f8 e0       	ldi	r31, 0x08	; 8
    1158:	0c 94 43 0b 	jmp	0x1686	; 0x1686 <__prologue_saves__>
    115c:	7c 01       	movw	r14, r24
    115e:	6b 01       	movw	r12, r22
    1160:	8a 01       	movw	r16, r20
    1162:	fc 01       	movw	r30, r24
    1164:	17 82       	std	Z+7, r1	; 0x07
    1166:	16 82       	std	Z+6, r1	; 0x06
    1168:	83 81       	ldd	r24, Z+3	; 0x03
    116a:	81 ff       	sbrs	r24, 1
    116c:	bd c1       	rjmp	.+890    	; 0x14e8 <vfprintf+0x398>
    116e:	ce 01       	movw	r24, r28
    1170:	01 96       	adiw	r24, 0x01	; 1
    1172:	4c 01       	movw	r8, r24
    1174:	f7 01       	movw	r30, r14
    1176:	93 81       	ldd	r25, Z+3	; 0x03
    1178:	f6 01       	movw	r30, r12
    117a:	93 fd       	sbrc	r25, 3
    117c:	85 91       	lpm	r24, Z+
    117e:	93 ff       	sbrs	r25, 3
    1180:	81 91       	ld	r24, Z+
    1182:	6f 01       	movw	r12, r30
    1184:	88 23       	and	r24, r24
    1186:	09 f4       	brne	.+2      	; 0x118a <vfprintf+0x3a>
    1188:	ab c1       	rjmp	.+854    	; 0x14e0 <vfprintf+0x390>
    118a:	85 32       	cpi	r24, 0x25	; 37
    118c:	39 f4       	brne	.+14     	; 0x119c <vfprintf+0x4c>
    118e:	93 fd       	sbrc	r25, 3
    1190:	85 91       	lpm	r24, Z+
    1192:	93 ff       	sbrs	r25, 3
    1194:	81 91       	ld	r24, Z+
    1196:	6f 01       	movw	r12, r30
    1198:	85 32       	cpi	r24, 0x25	; 37
    119a:	29 f4       	brne	.+10     	; 0x11a6 <vfprintf+0x56>
    119c:	b7 01       	movw	r22, r14
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	0e 94 b3 0a 	call	0x1566	; 0x1566 <fputc>
    11a4:	e7 cf       	rjmp	.-50     	; 0x1174 <vfprintf+0x24>
    11a6:	51 2c       	mov	r5, r1
    11a8:	31 2c       	mov	r3, r1
    11aa:	20 e0       	ldi	r18, 0x00	; 0
    11ac:	20 32       	cpi	r18, 0x20	; 32
    11ae:	a0 f4       	brcc	.+40     	; 0x11d8 <vfprintf+0x88>
    11b0:	8b 32       	cpi	r24, 0x2B	; 43
    11b2:	69 f0       	breq	.+26     	; 0x11ce <vfprintf+0x7e>
    11b4:	30 f4       	brcc	.+12     	; 0x11c2 <vfprintf+0x72>
    11b6:	80 32       	cpi	r24, 0x20	; 32
    11b8:	59 f0       	breq	.+22     	; 0x11d0 <vfprintf+0x80>
    11ba:	83 32       	cpi	r24, 0x23	; 35
    11bc:	69 f4       	brne	.+26     	; 0x11d8 <vfprintf+0x88>
    11be:	20 61       	ori	r18, 0x10	; 16
    11c0:	2c c0       	rjmp	.+88     	; 0x121a <vfprintf+0xca>
    11c2:	8d 32       	cpi	r24, 0x2D	; 45
    11c4:	39 f0       	breq	.+14     	; 0x11d4 <vfprintf+0x84>
    11c6:	80 33       	cpi	r24, 0x30	; 48
    11c8:	39 f4       	brne	.+14     	; 0x11d8 <vfprintf+0x88>
    11ca:	21 60       	ori	r18, 0x01	; 1
    11cc:	26 c0       	rjmp	.+76     	; 0x121a <vfprintf+0xca>
    11ce:	22 60       	ori	r18, 0x02	; 2
    11d0:	24 60       	ori	r18, 0x04	; 4
    11d2:	23 c0       	rjmp	.+70     	; 0x121a <vfprintf+0xca>
    11d4:	28 60       	ori	r18, 0x08	; 8
    11d6:	21 c0       	rjmp	.+66     	; 0x121a <vfprintf+0xca>
    11d8:	27 fd       	sbrc	r18, 7
    11da:	27 c0       	rjmp	.+78     	; 0x122a <vfprintf+0xda>
    11dc:	30 ed       	ldi	r19, 0xD0	; 208
    11de:	38 0f       	add	r19, r24
    11e0:	3a 30       	cpi	r19, 0x0A	; 10
    11e2:	78 f4       	brcc	.+30     	; 0x1202 <vfprintf+0xb2>
    11e4:	26 ff       	sbrs	r18, 6
    11e6:	06 c0       	rjmp	.+12     	; 0x11f4 <vfprintf+0xa4>
    11e8:	fa e0       	ldi	r31, 0x0A	; 10
    11ea:	5f 9e       	mul	r5, r31
    11ec:	30 0d       	add	r19, r0
    11ee:	11 24       	eor	r1, r1
    11f0:	53 2e       	mov	r5, r19
    11f2:	13 c0       	rjmp	.+38     	; 0x121a <vfprintf+0xca>
    11f4:	8a e0       	ldi	r24, 0x0A	; 10
    11f6:	38 9e       	mul	r3, r24
    11f8:	30 0d       	add	r19, r0
    11fa:	11 24       	eor	r1, r1
    11fc:	33 2e       	mov	r3, r19
    11fe:	20 62       	ori	r18, 0x20	; 32
    1200:	0c c0       	rjmp	.+24     	; 0x121a <vfprintf+0xca>
    1202:	8e 32       	cpi	r24, 0x2E	; 46
    1204:	21 f4       	brne	.+8      	; 0x120e <vfprintf+0xbe>
    1206:	26 fd       	sbrc	r18, 6
    1208:	6b c1       	rjmp	.+726    	; 0x14e0 <vfprintf+0x390>
    120a:	20 64       	ori	r18, 0x40	; 64
    120c:	06 c0       	rjmp	.+12     	; 0x121a <vfprintf+0xca>
    120e:	8c 36       	cpi	r24, 0x6C	; 108
    1210:	11 f4       	brne	.+4      	; 0x1216 <vfprintf+0xc6>
    1212:	20 68       	ori	r18, 0x80	; 128
    1214:	02 c0       	rjmp	.+4      	; 0x121a <vfprintf+0xca>
    1216:	88 36       	cpi	r24, 0x68	; 104
    1218:	41 f4       	brne	.+16     	; 0x122a <vfprintf+0xda>
    121a:	f6 01       	movw	r30, r12
    121c:	93 fd       	sbrc	r25, 3
    121e:	85 91       	lpm	r24, Z+
    1220:	93 ff       	sbrs	r25, 3
    1222:	81 91       	ld	r24, Z+
    1224:	6f 01       	movw	r12, r30
    1226:	81 11       	cpse	r24, r1
    1228:	c1 cf       	rjmp	.-126    	; 0x11ac <vfprintf+0x5c>
    122a:	98 2f       	mov	r25, r24
    122c:	9f 7d       	andi	r25, 0xDF	; 223
    122e:	95 54       	subi	r25, 0x45	; 69
    1230:	93 30       	cpi	r25, 0x03	; 3
    1232:	28 f4       	brcc	.+10     	; 0x123e <vfprintf+0xee>
    1234:	0c 5f       	subi	r16, 0xFC	; 252
    1236:	1f 4f       	sbci	r17, 0xFF	; 255
    1238:	ff e3       	ldi	r31, 0x3F	; 63
    123a:	f9 83       	std	Y+1, r31	; 0x01
    123c:	0d c0       	rjmp	.+26     	; 0x1258 <vfprintf+0x108>
    123e:	83 36       	cpi	r24, 0x63	; 99
    1240:	31 f0       	breq	.+12     	; 0x124e <vfprintf+0xfe>
    1242:	83 37       	cpi	r24, 0x73	; 115
    1244:	71 f0       	breq	.+28     	; 0x1262 <vfprintf+0x112>
    1246:	83 35       	cpi	r24, 0x53	; 83
    1248:	09 f0       	breq	.+2      	; 0x124c <vfprintf+0xfc>
    124a:	5b c0       	rjmp	.+182    	; 0x1302 <vfprintf+0x1b2>
    124c:	22 c0       	rjmp	.+68     	; 0x1292 <vfprintf+0x142>
    124e:	f8 01       	movw	r30, r16
    1250:	80 81       	ld	r24, Z
    1252:	89 83       	std	Y+1, r24	; 0x01
    1254:	0e 5f       	subi	r16, 0xFE	; 254
    1256:	1f 4f       	sbci	r17, 0xFF	; 255
    1258:	44 24       	eor	r4, r4
    125a:	43 94       	inc	r4
    125c:	51 2c       	mov	r5, r1
    125e:	54 01       	movw	r10, r8
    1260:	15 c0       	rjmp	.+42     	; 0x128c <vfprintf+0x13c>
    1262:	38 01       	movw	r6, r16
    1264:	f2 e0       	ldi	r31, 0x02	; 2
    1266:	6f 0e       	add	r6, r31
    1268:	71 1c       	adc	r7, r1
    126a:	f8 01       	movw	r30, r16
    126c:	a0 80       	ld	r10, Z
    126e:	b1 80       	ldd	r11, Z+1	; 0x01
    1270:	26 ff       	sbrs	r18, 6
    1272:	03 c0       	rjmp	.+6      	; 0x127a <vfprintf+0x12a>
    1274:	65 2d       	mov	r22, r5
    1276:	70 e0       	ldi	r23, 0x00	; 0
    1278:	02 c0       	rjmp	.+4      	; 0x127e <vfprintf+0x12e>
    127a:	6f ef       	ldi	r22, 0xFF	; 255
    127c:	7f ef       	ldi	r23, 0xFF	; 255
    127e:	c5 01       	movw	r24, r10
    1280:	2c 87       	std	Y+12, r18	; 0x0c
    1282:	0e 94 a8 0a 	call	0x1550	; 0x1550 <strnlen>
    1286:	2c 01       	movw	r4, r24
    1288:	83 01       	movw	r16, r6
    128a:	2c 85       	ldd	r18, Y+12	; 0x0c
    128c:	2f 77       	andi	r18, 0x7F	; 127
    128e:	22 2e       	mov	r2, r18
    1290:	17 c0       	rjmp	.+46     	; 0x12c0 <vfprintf+0x170>
    1292:	38 01       	movw	r6, r16
    1294:	f2 e0       	ldi	r31, 0x02	; 2
    1296:	6f 0e       	add	r6, r31
    1298:	71 1c       	adc	r7, r1
    129a:	f8 01       	movw	r30, r16
    129c:	a0 80       	ld	r10, Z
    129e:	b1 80       	ldd	r11, Z+1	; 0x01
    12a0:	26 ff       	sbrs	r18, 6
    12a2:	03 c0       	rjmp	.+6      	; 0x12aa <vfprintf+0x15a>
    12a4:	65 2d       	mov	r22, r5
    12a6:	70 e0       	ldi	r23, 0x00	; 0
    12a8:	02 c0       	rjmp	.+4      	; 0x12ae <vfprintf+0x15e>
    12aa:	6f ef       	ldi	r22, 0xFF	; 255
    12ac:	7f ef       	ldi	r23, 0xFF	; 255
    12ae:	c5 01       	movw	r24, r10
    12b0:	2c 87       	std	Y+12, r18	; 0x0c
    12b2:	0e 94 96 0a 	call	0x152c	; 0x152c <strnlen_P>
    12b6:	2c 01       	movw	r4, r24
    12b8:	2c 85       	ldd	r18, Y+12	; 0x0c
    12ba:	20 68       	ori	r18, 0x80	; 128
    12bc:	22 2e       	mov	r2, r18
    12be:	83 01       	movw	r16, r6
    12c0:	23 fc       	sbrc	r2, 3
    12c2:	1b c0       	rjmp	.+54     	; 0x12fa <vfprintf+0x1aa>
    12c4:	83 2d       	mov	r24, r3
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	48 16       	cp	r4, r24
    12ca:	59 06       	cpc	r5, r25
    12cc:	b0 f4       	brcc	.+44     	; 0x12fa <vfprintf+0x1aa>
    12ce:	b7 01       	movw	r22, r14
    12d0:	80 e2       	ldi	r24, 0x20	; 32
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	0e 94 b3 0a 	call	0x1566	; 0x1566 <fputc>
    12d8:	3a 94       	dec	r3
    12da:	f4 cf       	rjmp	.-24     	; 0x12c4 <vfprintf+0x174>
    12dc:	f5 01       	movw	r30, r10
    12de:	27 fc       	sbrc	r2, 7
    12e0:	85 91       	lpm	r24, Z+
    12e2:	27 fe       	sbrs	r2, 7
    12e4:	81 91       	ld	r24, Z+
    12e6:	5f 01       	movw	r10, r30
    12e8:	b7 01       	movw	r22, r14
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	0e 94 b3 0a 	call	0x1566	; 0x1566 <fputc>
    12f0:	31 10       	cpse	r3, r1
    12f2:	3a 94       	dec	r3
    12f4:	f1 e0       	ldi	r31, 0x01	; 1
    12f6:	4f 1a       	sub	r4, r31
    12f8:	51 08       	sbc	r5, r1
    12fa:	41 14       	cp	r4, r1
    12fc:	51 04       	cpc	r5, r1
    12fe:	71 f7       	brne	.-36     	; 0x12dc <vfprintf+0x18c>
    1300:	e5 c0       	rjmp	.+458    	; 0x14cc <vfprintf+0x37c>
    1302:	84 36       	cpi	r24, 0x64	; 100
    1304:	11 f0       	breq	.+4      	; 0x130a <vfprintf+0x1ba>
    1306:	89 36       	cpi	r24, 0x69	; 105
    1308:	39 f5       	brne	.+78     	; 0x1358 <vfprintf+0x208>
    130a:	f8 01       	movw	r30, r16
    130c:	27 ff       	sbrs	r18, 7
    130e:	07 c0       	rjmp	.+14     	; 0x131e <vfprintf+0x1ce>
    1310:	60 81       	ld	r22, Z
    1312:	71 81       	ldd	r23, Z+1	; 0x01
    1314:	82 81       	ldd	r24, Z+2	; 0x02
    1316:	93 81       	ldd	r25, Z+3	; 0x03
    1318:	0c 5f       	subi	r16, 0xFC	; 252
    131a:	1f 4f       	sbci	r17, 0xFF	; 255
    131c:	08 c0       	rjmp	.+16     	; 0x132e <vfprintf+0x1de>
    131e:	60 81       	ld	r22, Z
    1320:	71 81       	ldd	r23, Z+1	; 0x01
    1322:	88 27       	eor	r24, r24
    1324:	77 fd       	sbrc	r23, 7
    1326:	80 95       	com	r24
    1328:	98 2f       	mov	r25, r24
    132a:	0e 5f       	subi	r16, 0xFE	; 254
    132c:	1f 4f       	sbci	r17, 0xFF	; 255
    132e:	2f 76       	andi	r18, 0x6F	; 111
    1330:	b2 2e       	mov	r11, r18
    1332:	97 ff       	sbrs	r25, 7
    1334:	09 c0       	rjmp	.+18     	; 0x1348 <vfprintf+0x1f8>
    1336:	90 95       	com	r25
    1338:	80 95       	com	r24
    133a:	70 95       	com	r23
    133c:	61 95       	neg	r22
    133e:	7f 4f       	sbci	r23, 0xFF	; 255
    1340:	8f 4f       	sbci	r24, 0xFF	; 255
    1342:	9f 4f       	sbci	r25, 0xFF	; 255
    1344:	20 68       	ori	r18, 0x80	; 128
    1346:	b2 2e       	mov	r11, r18
    1348:	2a e0       	ldi	r18, 0x0A	; 10
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	a4 01       	movw	r20, r8
    134e:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <__ultoa_invert>
    1352:	a8 2e       	mov	r10, r24
    1354:	a8 18       	sub	r10, r8
    1356:	44 c0       	rjmp	.+136    	; 0x13e0 <vfprintf+0x290>
    1358:	85 37       	cpi	r24, 0x75	; 117
    135a:	29 f4       	brne	.+10     	; 0x1366 <vfprintf+0x216>
    135c:	2f 7e       	andi	r18, 0xEF	; 239
    135e:	b2 2e       	mov	r11, r18
    1360:	2a e0       	ldi	r18, 0x0A	; 10
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	25 c0       	rjmp	.+74     	; 0x13b0 <vfprintf+0x260>
    1366:	f2 2f       	mov	r31, r18
    1368:	f9 7f       	andi	r31, 0xF9	; 249
    136a:	bf 2e       	mov	r11, r31
    136c:	8f 36       	cpi	r24, 0x6F	; 111
    136e:	c1 f0       	breq	.+48     	; 0x13a0 <vfprintf+0x250>
    1370:	18 f4       	brcc	.+6      	; 0x1378 <vfprintf+0x228>
    1372:	88 35       	cpi	r24, 0x58	; 88
    1374:	79 f0       	breq	.+30     	; 0x1394 <vfprintf+0x244>
    1376:	b4 c0       	rjmp	.+360    	; 0x14e0 <vfprintf+0x390>
    1378:	80 37       	cpi	r24, 0x70	; 112
    137a:	19 f0       	breq	.+6      	; 0x1382 <vfprintf+0x232>
    137c:	88 37       	cpi	r24, 0x78	; 120
    137e:	21 f0       	breq	.+8      	; 0x1388 <vfprintf+0x238>
    1380:	af c0       	rjmp	.+350    	; 0x14e0 <vfprintf+0x390>
    1382:	2f 2f       	mov	r18, r31
    1384:	20 61       	ori	r18, 0x10	; 16
    1386:	b2 2e       	mov	r11, r18
    1388:	b4 fe       	sbrs	r11, 4
    138a:	0d c0       	rjmp	.+26     	; 0x13a6 <vfprintf+0x256>
    138c:	8b 2d       	mov	r24, r11
    138e:	84 60       	ori	r24, 0x04	; 4
    1390:	b8 2e       	mov	r11, r24
    1392:	09 c0       	rjmp	.+18     	; 0x13a6 <vfprintf+0x256>
    1394:	24 ff       	sbrs	r18, 4
    1396:	0a c0       	rjmp	.+20     	; 0x13ac <vfprintf+0x25c>
    1398:	9f 2f       	mov	r25, r31
    139a:	96 60       	ori	r25, 0x06	; 6
    139c:	b9 2e       	mov	r11, r25
    139e:	06 c0       	rjmp	.+12     	; 0x13ac <vfprintf+0x25c>
    13a0:	28 e0       	ldi	r18, 0x08	; 8
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	05 c0       	rjmp	.+10     	; 0x13b0 <vfprintf+0x260>
    13a6:	20 e1       	ldi	r18, 0x10	; 16
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	02 c0       	rjmp	.+4      	; 0x13b0 <vfprintf+0x260>
    13ac:	20 e1       	ldi	r18, 0x10	; 16
    13ae:	32 e0       	ldi	r19, 0x02	; 2
    13b0:	f8 01       	movw	r30, r16
    13b2:	b7 fe       	sbrs	r11, 7
    13b4:	07 c0       	rjmp	.+14     	; 0x13c4 <vfprintf+0x274>
    13b6:	60 81       	ld	r22, Z
    13b8:	71 81       	ldd	r23, Z+1	; 0x01
    13ba:	82 81       	ldd	r24, Z+2	; 0x02
    13bc:	93 81       	ldd	r25, Z+3	; 0x03
    13be:	0c 5f       	subi	r16, 0xFC	; 252
    13c0:	1f 4f       	sbci	r17, 0xFF	; 255
    13c2:	06 c0       	rjmp	.+12     	; 0x13d0 <vfprintf+0x280>
    13c4:	60 81       	ld	r22, Z
    13c6:	71 81       	ldd	r23, Z+1	; 0x01
    13c8:	80 e0       	ldi	r24, 0x00	; 0
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	0e 5f       	subi	r16, 0xFE	; 254
    13ce:	1f 4f       	sbci	r17, 0xFF	; 255
    13d0:	a4 01       	movw	r20, r8
    13d2:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <__ultoa_invert>
    13d6:	a8 2e       	mov	r10, r24
    13d8:	a8 18       	sub	r10, r8
    13da:	fb 2d       	mov	r31, r11
    13dc:	ff 77       	andi	r31, 0x7F	; 127
    13de:	bf 2e       	mov	r11, r31
    13e0:	b6 fe       	sbrs	r11, 6
    13e2:	0b c0       	rjmp	.+22     	; 0x13fa <vfprintf+0x2aa>
    13e4:	2b 2d       	mov	r18, r11
    13e6:	2e 7f       	andi	r18, 0xFE	; 254
    13e8:	a5 14       	cp	r10, r5
    13ea:	50 f4       	brcc	.+20     	; 0x1400 <vfprintf+0x2b0>
    13ec:	b4 fe       	sbrs	r11, 4
    13ee:	0a c0       	rjmp	.+20     	; 0x1404 <vfprintf+0x2b4>
    13f0:	b2 fc       	sbrc	r11, 2
    13f2:	08 c0       	rjmp	.+16     	; 0x1404 <vfprintf+0x2b4>
    13f4:	2b 2d       	mov	r18, r11
    13f6:	2e 7e       	andi	r18, 0xEE	; 238
    13f8:	05 c0       	rjmp	.+10     	; 0x1404 <vfprintf+0x2b4>
    13fa:	7a 2c       	mov	r7, r10
    13fc:	2b 2d       	mov	r18, r11
    13fe:	03 c0       	rjmp	.+6      	; 0x1406 <vfprintf+0x2b6>
    1400:	7a 2c       	mov	r7, r10
    1402:	01 c0       	rjmp	.+2      	; 0x1406 <vfprintf+0x2b6>
    1404:	75 2c       	mov	r7, r5
    1406:	24 ff       	sbrs	r18, 4
    1408:	0d c0       	rjmp	.+26     	; 0x1424 <vfprintf+0x2d4>
    140a:	fe 01       	movw	r30, r28
    140c:	ea 0d       	add	r30, r10
    140e:	f1 1d       	adc	r31, r1
    1410:	80 81       	ld	r24, Z
    1412:	80 33       	cpi	r24, 0x30	; 48
    1414:	11 f4       	brne	.+4      	; 0x141a <vfprintf+0x2ca>
    1416:	29 7e       	andi	r18, 0xE9	; 233
    1418:	09 c0       	rjmp	.+18     	; 0x142c <vfprintf+0x2dc>
    141a:	22 ff       	sbrs	r18, 2
    141c:	06 c0       	rjmp	.+12     	; 0x142a <vfprintf+0x2da>
    141e:	73 94       	inc	r7
    1420:	73 94       	inc	r7
    1422:	04 c0       	rjmp	.+8      	; 0x142c <vfprintf+0x2dc>
    1424:	82 2f       	mov	r24, r18
    1426:	86 78       	andi	r24, 0x86	; 134
    1428:	09 f0       	breq	.+2      	; 0x142c <vfprintf+0x2dc>
    142a:	73 94       	inc	r7
    142c:	23 fd       	sbrc	r18, 3
    142e:	13 c0       	rjmp	.+38     	; 0x1456 <vfprintf+0x306>
    1430:	20 ff       	sbrs	r18, 0
    1432:	06 c0       	rjmp	.+12     	; 0x1440 <vfprintf+0x2f0>
    1434:	5a 2c       	mov	r5, r10
    1436:	73 14       	cp	r7, r3
    1438:	18 f4       	brcc	.+6      	; 0x1440 <vfprintf+0x2f0>
    143a:	53 0c       	add	r5, r3
    143c:	57 18       	sub	r5, r7
    143e:	73 2c       	mov	r7, r3
    1440:	73 14       	cp	r7, r3
    1442:	68 f4       	brcc	.+26     	; 0x145e <vfprintf+0x30e>
    1444:	b7 01       	movw	r22, r14
    1446:	80 e2       	ldi	r24, 0x20	; 32
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	2c 87       	std	Y+12, r18	; 0x0c
    144c:	0e 94 b3 0a 	call	0x1566	; 0x1566 <fputc>
    1450:	73 94       	inc	r7
    1452:	2c 85       	ldd	r18, Y+12	; 0x0c
    1454:	f5 cf       	rjmp	.-22     	; 0x1440 <vfprintf+0x2f0>
    1456:	73 14       	cp	r7, r3
    1458:	10 f4       	brcc	.+4      	; 0x145e <vfprintf+0x30e>
    145a:	37 18       	sub	r3, r7
    145c:	01 c0       	rjmp	.+2      	; 0x1460 <vfprintf+0x310>
    145e:	31 2c       	mov	r3, r1
    1460:	24 ff       	sbrs	r18, 4
    1462:	12 c0       	rjmp	.+36     	; 0x1488 <vfprintf+0x338>
    1464:	b7 01       	movw	r22, r14
    1466:	80 e3       	ldi	r24, 0x30	; 48
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	2c 87       	std	Y+12, r18	; 0x0c
    146c:	0e 94 b3 0a 	call	0x1566	; 0x1566 <fputc>
    1470:	2c 85       	ldd	r18, Y+12	; 0x0c
    1472:	22 ff       	sbrs	r18, 2
    1474:	17 c0       	rjmp	.+46     	; 0x14a4 <vfprintf+0x354>
    1476:	21 ff       	sbrs	r18, 1
    1478:	03 c0       	rjmp	.+6      	; 0x1480 <vfprintf+0x330>
    147a:	88 e5       	ldi	r24, 0x58	; 88
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	02 c0       	rjmp	.+4      	; 0x1484 <vfprintf+0x334>
    1480:	88 e7       	ldi	r24, 0x78	; 120
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	b7 01       	movw	r22, r14
    1486:	0c c0       	rjmp	.+24     	; 0x14a0 <vfprintf+0x350>
    1488:	82 2f       	mov	r24, r18
    148a:	86 78       	andi	r24, 0x86	; 134
    148c:	59 f0       	breq	.+22     	; 0x14a4 <vfprintf+0x354>
    148e:	21 fd       	sbrc	r18, 1
    1490:	02 c0       	rjmp	.+4      	; 0x1496 <vfprintf+0x346>
    1492:	80 e2       	ldi	r24, 0x20	; 32
    1494:	01 c0       	rjmp	.+2      	; 0x1498 <vfprintf+0x348>
    1496:	8b e2       	ldi	r24, 0x2B	; 43
    1498:	27 fd       	sbrc	r18, 7
    149a:	8d e2       	ldi	r24, 0x2D	; 45
    149c:	b7 01       	movw	r22, r14
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	0e 94 b3 0a 	call	0x1566	; 0x1566 <fputc>
    14a4:	a5 14       	cp	r10, r5
    14a6:	38 f4       	brcc	.+14     	; 0x14b6 <vfprintf+0x366>
    14a8:	b7 01       	movw	r22, r14
    14aa:	80 e3       	ldi	r24, 0x30	; 48
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	0e 94 b3 0a 	call	0x1566	; 0x1566 <fputc>
    14b2:	5a 94       	dec	r5
    14b4:	f7 cf       	rjmp	.-18     	; 0x14a4 <vfprintf+0x354>
    14b6:	aa 94       	dec	r10
    14b8:	f4 01       	movw	r30, r8
    14ba:	ea 0d       	add	r30, r10
    14bc:	f1 1d       	adc	r31, r1
    14be:	80 81       	ld	r24, Z
    14c0:	b7 01       	movw	r22, r14
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	0e 94 b3 0a 	call	0x1566	; 0x1566 <fputc>
    14c8:	a1 10       	cpse	r10, r1
    14ca:	f5 cf       	rjmp	.-22     	; 0x14b6 <vfprintf+0x366>
    14cc:	33 20       	and	r3, r3
    14ce:	09 f4       	brne	.+2      	; 0x14d2 <vfprintf+0x382>
    14d0:	51 ce       	rjmp	.-862    	; 0x1174 <vfprintf+0x24>
    14d2:	b7 01       	movw	r22, r14
    14d4:	80 e2       	ldi	r24, 0x20	; 32
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	0e 94 b3 0a 	call	0x1566	; 0x1566 <fputc>
    14dc:	3a 94       	dec	r3
    14de:	f6 cf       	rjmp	.-20     	; 0x14cc <vfprintf+0x37c>
    14e0:	f7 01       	movw	r30, r14
    14e2:	86 81       	ldd	r24, Z+6	; 0x06
    14e4:	97 81       	ldd	r25, Z+7	; 0x07
    14e6:	02 c0       	rjmp	.+4      	; 0x14ec <vfprintf+0x39c>
    14e8:	8f ef       	ldi	r24, 0xFF	; 255
    14ea:	9f ef       	ldi	r25, 0xFF	; 255
    14ec:	2c 96       	adiw	r28, 0x0c	; 12
    14ee:	e2 e1       	ldi	r30, 0x12	; 18
    14f0:	0c 94 5f 0b 	jmp	0x16be	; 0x16be <__epilogue_restores__>

000014f4 <calloc>:
    14f4:	0f 93       	push	r16
    14f6:	1f 93       	push	r17
    14f8:	cf 93       	push	r28
    14fa:	df 93       	push	r29
    14fc:	86 9f       	mul	r24, r22
    14fe:	80 01       	movw	r16, r0
    1500:	87 9f       	mul	r24, r23
    1502:	10 0d       	add	r17, r0
    1504:	96 9f       	mul	r25, r22
    1506:	10 0d       	add	r17, r0
    1508:	11 24       	eor	r1, r1
    150a:	c8 01       	movw	r24, r16
    150c:	0e 94 1b 07 	call	0xe36	; 0xe36 <malloc>
    1510:	ec 01       	movw	r28, r24
    1512:	00 97       	sbiw	r24, 0x00	; 0
    1514:	29 f0       	breq	.+10     	; 0x1520 <calloc+0x2c>
    1516:	a8 01       	movw	r20, r16
    1518:	60 e0       	ldi	r22, 0x00	; 0
    151a:	70 e0       	ldi	r23, 0x00	; 0
    151c:	0e 94 a1 0a 	call	0x1542	; 0x1542 <memset>
    1520:	ce 01       	movw	r24, r28
    1522:	df 91       	pop	r29
    1524:	cf 91       	pop	r28
    1526:	1f 91       	pop	r17
    1528:	0f 91       	pop	r16
    152a:	08 95       	ret

0000152c <strnlen_P>:
    152c:	fc 01       	movw	r30, r24
    152e:	05 90       	lpm	r0, Z+
    1530:	61 50       	subi	r22, 0x01	; 1
    1532:	70 40       	sbci	r23, 0x00	; 0
    1534:	01 10       	cpse	r0, r1
    1536:	d8 f7       	brcc	.-10     	; 0x152e <strnlen_P+0x2>
    1538:	80 95       	com	r24
    153a:	90 95       	com	r25
    153c:	8e 0f       	add	r24, r30
    153e:	9f 1f       	adc	r25, r31
    1540:	08 95       	ret

00001542 <memset>:
    1542:	dc 01       	movw	r26, r24
    1544:	01 c0       	rjmp	.+2      	; 0x1548 <memset+0x6>
    1546:	6d 93       	st	X+, r22
    1548:	41 50       	subi	r20, 0x01	; 1
    154a:	50 40       	sbci	r21, 0x00	; 0
    154c:	e0 f7       	brcc	.-8      	; 0x1546 <memset+0x4>
    154e:	08 95       	ret

00001550 <strnlen>:
    1550:	fc 01       	movw	r30, r24
    1552:	61 50       	subi	r22, 0x01	; 1
    1554:	70 40       	sbci	r23, 0x00	; 0
    1556:	01 90       	ld	r0, Z+
    1558:	01 10       	cpse	r0, r1
    155a:	d8 f7       	brcc	.-10     	; 0x1552 <strnlen+0x2>
    155c:	80 95       	com	r24
    155e:	90 95       	com	r25
    1560:	8e 0f       	add	r24, r30
    1562:	9f 1f       	adc	r25, r31
    1564:	08 95       	ret

00001566 <fputc>:
    1566:	0f 93       	push	r16
    1568:	1f 93       	push	r17
    156a:	cf 93       	push	r28
    156c:	df 93       	push	r29
    156e:	18 2f       	mov	r17, r24
    1570:	09 2f       	mov	r16, r25
    1572:	eb 01       	movw	r28, r22
    1574:	8b 81       	ldd	r24, Y+3	; 0x03
    1576:	81 fd       	sbrc	r24, 1
    1578:	03 c0       	rjmp	.+6      	; 0x1580 <fputc+0x1a>
    157a:	8f ef       	ldi	r24, 0xFF	; 255
    157c:	9f ef       	ldi	r25, 0xFF	; 255
    157e:	20 c0       	rjmp	.+64     	; 0x15c0 <fputc+0x5a>
    1580:	82 ff       	sbrs	r24, 2
    1582:	10 c0       	rjmp	.+32     	; 0x15a4 <fputc+0x3e>
    1584:	4e 81       	ldd	r20, Y+6	; 0x06
    1586:	5f 81       	ldd	r21, Y+7	; 0x07
    1588:	2c 81       	ldd	r18, Y+4	; 0x04
    158a:	3d 81       	ldd	r19, Y+5	; 0x05
    158c:	42 17       	cp	r20, r18
    158e:	53 07       	cpc	r21, r19
    1590:	7c f4       	brge	.+30     	; 0x15b0 <fputc+0x4a>
    1592:	e8 81       	ld	r30, Y
    1594:	f9 81       	ldd	r31, Y+1	; 0x01
    1596:	9f 01       	movw	r18, r30
    1598:	2f 5f       	subi	r18, 0xFF	; 255
    159a:	3f 4f       	sbci	r19, 0xFF	; 255
    159c:	39 83       	std	Y+1, r19	; 0x01
    159e:	28 83       	st	Y, r18
    15a0:	10 83       	st	Z, r17
    15a2:	06 c0       	rjmp	.+12     	; 0x15b0 <fputc+0x4a>
    15a4:	e8 85       	ldd	r30, Y+8	; 0x08
    15a6:	f9 85       	ldd	r31, Y+9	; 0x09
    15a8:	81 2f       	mov	r24, r17
    15aa:	09 95       	icall
    15ac:	89 2b       	or	r24, r25
    15ae:	29 f7       	brne	.-54     	; 0x157a <fputc+0x14>
    15b0:	2e 81       	ldd	r18, Y+6	; 0x06
    15b2:	3f 81       	ldd	r19, Y+7	; 0x07
    15b4:	2f 5f       	subi	r18, 0xFF	; 255
    15b6:	3f 4f       	sbci	r19, 0xFF	; 255
    15b8:	3f 83       	std	Y+7, r19	; 0x07
    15ba:	2e 83       	std	Y+6, r18	; 0x06
    15bc:	81 2f       	mov	r24, r17
    15be:	90 2f       	mov	r25, r16
    15c0:	df 91       	pop	r29
    15c2:	cf 91       	pop	r28
    15c4:	1f 91       	pop	r17
    15c6:	0f 91       	pop	r16
    15c8:	08 95       	ret

000015ca <__ultoa_invert>:
    15ca:	fa 01       	movw	r30, r20
    15cc:	aa 27       	eor	r26, r26
    15ce:	28 30       	cpi	r18, 0x08	; 8
    15d0:	51 f1       	breq	.+84     	; 0x1626 <__ultoa_invert+0x5c>
    15d2:	20 31       	cpi	r18, 0x10	; 16
    15d4:	81 f1       	breq	.+96     	; 0x1636 <__ultoa_invert+0x6c>
    15d6:	e8 94       	clt
    15d8:	6f 93       	push	r22
    15da:	6e 7f       	andi	r22, 0xFE	; 254
    15dc:	6e 5f       	subi	r22, 0xFE	; 254
    15de:	7f 4f       	sbci	r23, 0xFF	; 255
    15e0:	8f 4f       	sbci	r24, 0xFF	; 255
    15e2:	9f 4f       	sbci	r25, 0xFF	; 255
    15e4:	af 4f       	sbci	r26, 0xFF	; 255
    15e6:	b1 e0       	ldi	r27, 0x01	; 1
    15e8:	3e d0       	rcall	.+124    	; 0x1666 <__ultoa_invert+0x9c>
    15ea:	b4 e0       	ldi	r27, 0x04	; 4
    15ec:	3c d0       	rcall	.+120    	; 0x1666 <__ultoa_invert+0x9c>
    15ee:	67 0f       	add	r22, r23
    15f0:	78 1f       	adc	r23, r24
    15f2:	89 1f       	adc	r24, r25
    15f4:	9a 1f       	adc	r25, r26
    15f6:	a1 1d       	adc	r26, r1
    15f8:	68 0f       	add	r22, r24
    15fa:	79 1f       	adc	r23, r25
    15fc:	8a 1f       	adc	r24, r26
    15fe:	91 1d       	adc	r25, r1
    1600:	a1 1d       	adc	r26, r1
    1602:	6a 0f       	add	r22, r26
    1604:	71 1d       	adc	r23, r1
    1606:	81 1d       	adc	r24, r1
    1608:	91 1d       	adc	r25, r1
    160a:	a1 1d       	adc	r26, r1
    160c:	20 d0       	rcall	.+64     	; 0x164e <__ultoa_invert+0x84>
    160e:	09 f4       	brne	.+2      	; 0x1612 <__ultoa_invert+0x48>
    1610:	68 94       	set
    1612:	3f 91       	pop	r19
    1614:	2a e0       	ldi	r18, 0x0A	; 10
    1616:	26 9f       	mul	r18, r22
    1618:	11 24       	eor	r1, r1
    161a:	30 19       	sub	r19, r0
    161c:	30 5d       	subi	r19, 0xD0	; 208
    161e:	31 93       	st	Z+, r19
    1620:	de f6       	brtc	.-74     	; 0x15d8 <__ultoa_invert+0xe>
    1622:	cf 01       	movw	r24, r30
    1624:	08 95       	ret
    1626:	46 2f       	mov	r20, r22
    1628:	47 70       	andi	r20, 0x07	; 7
    162a:	40 5d       	subi	r20, 0xD0	; 208
    162c:	41 93       	st	Z+, r20
    162e:	b3 e0       	ldi	r27, 0x03	; 3
    1630:	0f d0       	rcall	.+30     	; 0x1650 <__ultoa_invert+0x86>
    1632:	c9 f7       	brne	.-14     	; 0x1626 <__ultoa_invert+0x5c>
    1634:	f6 cf       	rjmp	.-20     	; 0x1622 <__ultoa_invert+0x58>
    1636:	46 2f       	mov	r20, r22
    1638:	4f 70       	andi	r20, 0x0F	; 15
    163a:	40 5d       	subi	r20, 0xD0	; 208
    163c:	4a 33       	cpi	r20, 0x3A	; 58
    163e:	18 f0       	brcs	.+6      	; 0x1646 <__ultoa_invert+0x7c>
    1640:	49 5d       	subi	r20, 0xD9	; 217
    1642:	31 fd       	sbrc	r19, 1
    1644:	40 52       	subi	r20, 0x20	; 32
    1646:	41 93       	st	Z+, r20
    1648:	02 d0       	rcall	.+4      	; 0x164e <__ultoa_invert+0x84>
    164a:	a9 f7       	brne	.-22     	; 0x1636 <__ultoa_invert+0x6c>
    164c:	ea cf       	rjmp	.-44     	; 0x1622 <__ultoa_invert+0x58>
    164e:	b4 e0       	ldi	r27, 0x04	; 4
    1650:	a6 95       	lsr	r26
    1652:	97 95       	ror	r25
    1654:	87 95       	ror	r24
    1656:	77 95       	ror	r23
    1658:	67 95       	ror	r22
    165a:	ba 95       	dec	r27
    165c:	c9 f7       	brne	.-14     	; 0x1650 <__ultoa_invert+0x86>
    165e:	00 97       	sbiw	r24, 0x00	; 0
    1660:	61 05       	cpc	r22, r1
    1662:	71 05       	cpc	r23, r1
    1664:	08 95       	ret
    1666:	9b 01       	movw	r18, r22
    1668:	ac 01       	movw	r20, r24
    166a:	0a 2e       	mov	r0, r26
    166c:	06 94       	lsr	r0
    166e:	57 95       	ror	r21
    1670:	47 95       	ror	r20
    1672:	37 95       	ror	r19
    1674:	27 95       	ror	r18
    1676:	ba 95       	dec	r27
    1678:	c9 f7       	brne	.-14     	; 0x166c <__ultoa_invert+0xa2>
    167a:	62 0f       	add	r22, r18
    167c:	73 1f       	adc	r23, r19
    167e:	84 1f       	adc	r24, r20
    1680:	95 1f       	adc	r25, r21
    1682:	a0 1d       	adc	r26, r0
    1684:	08 95       	ret

00001686 <__prologue_saves__>:
    1686:	2f 92       	push	r2
    1688:	3f 92       	push	r3
    168a:	4f 92       	push	r4
    168c:	5f 92       	push	r5
    168e:	6f 92       	push	r6
    1690:	7f 92       	push	r7
    1692:	8f 92       	push	r8
    1694:	9f 92       	push	r9
    1696:	af 92       	push	r10
    1698:	bf 92       	push	r11
    169a:	cf 92       	push	r12
    169c:	df 92       	push	r13
    169e:	ef 92       	push	r14
    16a0:	ff 92       	push	r15
    16a2:	0f 93       	push	r16
    16a4:	1f 93       	push	r17
    16a6:	cf 93       	push	r28
    16a8:	df 93       	push	r29
    16aa:	cd b7       	in	r28, 0x3d	; 61
    16ac:	de b7       	in	r29, 0x3e	; 62
    16ae:	ca 1b       	sub	r28, r26
    16b0:	db 0b       	sbc	r29, r27
    16b2:	0f b6       	in	r0, 0x3f	; 63
    16b4:	f8 94       	cli
    16b6:	de bf       	out	0x3e, r29	; 62
    16b8:	0f be       	out	0x3f, r0	; 63
    16ba:	cd bf       	out	0x3d, r28	; 61
    16bc:	09 94       	ijmp

000016be <__epilogue_restores__>:
    16be:	2a 88       	ldd	r2, Y+18	; 0x12
    16c0:	39 88       	ldd	r3, Y+17	; 0x11
    16c2:	48 88       	ldd	r4, Y+16	; 0x10
    16c4:	5f 84       	ldd	r5, Y+15	; 0x0f
    16c6:	6e 84       	ldd	r6, Y+14	; 0x0e
    16c8:	7d 84       	ldd	r7, Y+13	; 0x0d
    16ca:	8c 84       	ldd	r8, Y+12	; 0x0c
    16cc:	9b 84       	ldd	r9, Y+11	; 0x0b
    16ce:	aa 84       	ldd	r10, Y+10	; 0x0a
    16d0:	b9 84       	ldd	r11, Y+9	; 0x09
    16d2:	c8 84       	ldd	r12, Y+8	; 0x08
    16d4:	df 80       	ldd	r13, Y+7	; 0x07
    16d6:	ee 80       	ldd	r14, Y+6	; 0x06
    16d8:	fd 80       	ldd	r15, Y+5	; 0x05
    16da:	0c 81       	ldd	r16, Y+4	; 0x04
    16dc:	1b 81       	ldd	r17, Y+3	; 0x03
    16de:	aa 81       	ldd	r26, Y+2	; 0x02
    16e0:	b9 81       	ldd	r27, Y+1	; 0x01
    16e2:	ce 0f       	add	r28, r30
    16e4:	d1 1d       	adc	r29, r1
    16e6:	0f b6       	in	r0, 0x3f	; 63
    16e8:	f8 94       	cli
    16ea:	de bf       	out	0x3e, r29	; 62
    16ec:	0f be       	out	0x3f, r0	; 63
    16ee:	cd bf       	out	0x3d, r28	; 61
    16f0:	ed 01       	movw	r28, r26
    16f2:	08 95       	ret

000016f4 <_exit>:
    16f4:	f8 94       	cli

000016f6 <__stop_program>:
    16f6:	ff cf       	rjmp	.-2      	; 0x16f6 <__stop_program>
