
Group52.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000016a  00800100  0000157c  00001610  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000157c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080026a  0080026a  0000177a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000177a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000240  00000000  00000000  000017d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000260d  00000000  00000000  00001a16  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c91  00000000  00000000  00004023  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c14  00000000  00000000  00004cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000052c  00000000  00000000  000058c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006f4  00000000  00000000  00005df4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001320  00000000  00000000  000064e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000208  00000000  00000000  00007808  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__ctors_end>
       4:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
       8:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
       c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      10:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      14:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      18:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      1c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      20:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      24:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      28:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      2c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      30:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      34:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      38:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      3c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      40:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      44:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      48:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      4c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      50:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      54:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      58:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      5c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      60:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      64:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      68:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      6c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	00 00       	nop
      72:	00 00       	nop
      74:	00 5c       	subi	r16, 0xC0	; 192
      76:	00 00       	nop
      78:	0c 00       	.word	0x000c	; ????
      7a:	0c 00       	.word	0x000c	; ????
      7c:	7c 28       	or	r7, r12
      7e:	7c 28       	or	r7, r12
      80:	58 dc       	rcall	.-1872   	; 0xfffff932 <__eeprom_end+0xff7ef932>
      82:	68 00       	.word	0x0068	; ????
      84:	24 10       	cpse	r2, r4
      86:	48 00       	.word	0x0048	; ????
      88:	28 54       	subi	r18, 0x48	; 72
      8a:	28 40       	sbci	r18, 0x08	; 8
      8c:	00 0c       	add	r0, r0
      8e:	00 00       	nop
      90:	00 78       	andi	r16, 0x80	; 128
      92:	84 00       	.word	0x0084	; ????
      94:	84 78       	andi	r24, 0x84	; 132
      96:	00 00       	nop
      98:	54 38       	cpi	r21, 0x84	; 132
      9a:	54 00       	.word	0x0054	; ????
      9c:	10 7c       	andi	r17, 0xC0	; 192
      9e:	10 00       	.word	0x0010	; ????
      a0:	80 40       	sbci	r24, 0x00	; 0
      a2:	00 00       	nop
      a4:	10 10       	cpse	r1, r0
      a6:	10 00       	.word	0x0010	; ????
      a8:	00 40       	sbci	r16, 0x00	; 0
      aa:	00 00       	nop
      ac:	60 10       	cpse	r6, r0
      ae:	0c 00       	.word	0x000c	; ????
      b0:	38 54       	subi	r19, 0x48	; 72
      b2:	38 00       	.word	0x0038	; ????
      b4:	48 7c       	andi	r20, 0xC8	; 200
      b6:	40 00       	.word	0x0040	; ????
      b8:	48 64       	ori	r20, 0x48	; 72
      ba:	58 00       	.word	0x0058	; ????
      bc:	44 54       	subi	r20, 0x44	; 68
      be:	2c 00       	.word	0x002c	; ????
      c0:	1c 10       	cpse	r1, r12
      c2:	7c 00       	.word	0x007c	; ????
      c4:	5c 54       	subi	r21, 0x4C	; 76
      c6:	24 00       	.word	0x0024	; ????
      c8:	38 54       	subi	r19, 0x48	; 72
      ca:	24 00       	.word	0x0024	; ????
      cc:	64 14       	cp	r6, r4
      ce:	0c 00       	.word	0x000c	; ????
      d0:	68 54       	subi	r22, 0x48	; 72
      d2:	2c 00       	.word	0x002c	; ????
      d4:	48 54       	subi	r20, 0x48	; 72
      d6:	38 00       	.word	0x0038	; ????
      d8:	00 48       	sbci	r16, 0x80	; 128
      da:	00 00       	nop
      dc:	80 48       	sbci	r24, 0x80	; 128
      de:	00 00       	nop
      e0:	10 28       	or	r1, r0
      e2:	44 00       	.word	0x0044	; ????
      e4:	28 28       	or	r2, r8
      e6:	28 00       	.word	0x0028	; ????
      e8:	44 28       	or	r4, r4
      ea:	10 00       	.word	0x0010	; ????
      ec:	04 54       	subi	r16, 0x44	; 68
      ee:	08 00       	.word	0x0008	; ????
      f0:	38 44       	sbci	r19, 0x48	; 72
      f2:	5c 00       	.word	0x005c	; ????
      f4:	78 14       	cp	r7, r8
      f6:	78 00       	.word	0x0078	; ????
      f8:	7c 54       	subi	r23, 0x4C	; 76
      fa:	28 00       	.word	0x0028	; ????
      fc:	38 44       	sbci	r19, 0x48	; 72
      fe:	28 00       	.word	0x0028	; ????
     100:	7c 44       	sbci	r23, 0x4C	; 76
     102:	38 00       	.word	0x0038	; ????
     104:	7c 54       	subi	r23, 0x4C	; 76
     106:	44 00       	.word	0x0044	; ????
     108:	7c 14       	cp	r7, r12
     10a:	04 00       	.word	0x0004	; ????
     10c:	38 44       	sbci	r19, 0x48	; 72
     10e:	74 00       	.word	0x0074	; ????
     110:	7c 10       	cpse	r7, r12
     112:	7c 00       	.word	0x007c	; ????
     114:	44 7c       	andi	r20, 0xC4	; 196
     116:	44 00       	.word	0x0044	; ????
     118:	20 40       	sbci	r18, 0x00	; 0
     11a:	3c 00       	.word	0x003c	; ????
     11c:	7c 10       	cpse	r7, r12
     11e:	6c 00       	.word	0x006c	; ????
     120:	7c 40       	sbci	r23, 0x0C	; 12
     122:	40 00       	.word	0x0040	; ????
     124:	7c 18       	sub	r7, r12
     126:	7c 00       	.word	0x007c	; ????
     128:	78 10       	cpse	r7, r8
     12a:	3c 00       	.word	0x003c	; ????
     12c:	38 44       	sbci	r19, 0x48	; 72
     12e:	38 00       	.word	0x0038	; ????
     130:	7c 14       	cp	r7, r12
     132:	08 00       	.word	0x0008	; ????
     134:	38 44       	sbci	r19, 0x48	; 72
     136:	b8 00       	.word	0x00b8	; ????
     138:	7c 14       	cp	r7, r12
     13a:	68 00       	.word	0x0068	; ????
     13c:	48 54       	subi	r20, 0x48	; 72
     13e:	24 00       	.word	0x0024	; ????
     140:	04 7c       	andi	r16, 0xC4	; 196
     142:	04 00       	.word	0x0004	; ????
     144:	7c 40       	sbci	r23, 0x0C	; 12
     146:	7c 00       	.word	0x007c	; ????
     148:	3c 60       	ori	r19, 0x0C	; 12
     14a:	3c 00       	.word	0x003c	; ????
     14c:	7c 30       	cpi	r23, 0x0C	; 12
     14e:	7c 00       	.word	0x007c	; ????
     150:	6c 10       	cpse	r6, r12
     152:	6c 00       	.word	0x006c	; ????
     154:	0c 70       	andi	r16, 0x0C	; 12
     156:	0c 00       	.word	0x000c	; ????
     158:	64 54       	subi	r22, 0x44	; 68
     15a:	4c 00       	.word	0x004c	; ????
     15c:	00 7c       	andi	r16, 0xC0	; 192
     15e:	44 00       	.word	0x0044	; ????
     160:	0c 10       	cpse	r0, r12
     162:	60 00       	.word	0x0060	; ????
     164:	44 7c       	andi	r20, 0xC4	; 196
     166:	00 00       	nop
     168:	08 04       	cpc	r0, r8
     16a:	08 00       	.word	0x0008	; ????
     16c:	80 80       	ld	r8, Z
     16e:	80 00       	.word	0x0080	; ????
     170:	00 04       	cpc	r0, r0
     172:	08 00       	.word	0x0008	; ????
     174:	30 48       	sbci	r19, 0x80	; 128
     176:	78 00       	.word	0x0078	; ????
     178:	7c 48       	sbci	r23, 0x8C	; 140
     17a:	30 00       	.word	0x0030	; ????
     17c:	30 48       	sbci	r19, 0x80	; 128
     17e:	48 00       	.word	0x0048	; ????
     180:	30 48       	sbci	r19, 0x80	; 128
     182:	7c 00       	.word	0x007c	; ????
     184:	30 68       	ori	r19, 0x80	; 128
     186:	50 00       	.word	0x0050	; ????
     188:	10 78       	andi	r17, 0x80	; 128
     18a:	14 00       	.word	0x0014	; ????
     18c:	90 a8       	ldd	r9, Z+48	; 0x30
     18e:	78 00       	.word	0x0078	; ????
     190:	7c 08       	sbc	r7, r12
     192:	70 00       	.word	0x0070	; ????
     194:	50 74       	andi	r21, 0x40	; 64
     196:	40 00       	.word	0x0040	; ????
     198:	80 80       	ld	r8, Z
     19a:	74 00       	.word	0x0074	; ????
     19c:	7c 10       	cpse	r7, r12
     19e:	68 00       	.word	0x0068	; ????
     1a0:	44 7c       	andi	r20, 0xC4	; 196
     1a2:	40 00       	.word	0x0040	; ????
     1a4:	78 10       	cpse	r7, r8
     1a6:	78 00       	.word	0x0078	; ????
     1a8:	78 08       	sbc	r7, r8
     1aa:	70 00       	.word	0x0070	; ????
     1ac:	30 48       	sbci	r19, 0x80	; 128
     1ae:	30 00       	.word	0x0030	; ????
     1b0:	f8 28       	or	r15, r8
     1b2:	10 00       	.word	0x0010	; ????
     1b4:	30 48       	sbci	r19, 0x80	; 128
     1b6:	f8 00       	.word	0x00f8	; ????
     1b8:	78 10       	cpse	r7, r8
     1ba:	08 00       	.word	0x0008	; ????
     1bc:	50 58       	subi	r21, 0x80	; 128
     1be:	28 00       	.word	0x0028	; ????
     1c0:	08 3c       	cpi	r16, 0xC8	; 200
     1c2:	48 00       	.word	0x0048	; ????
     1c4:	38 40       	sbci	r19, 0x08	; 8
     1c6:	78 00       	.word	0x0078	; ????
     1c8:	38 40       	sbci	r19, 0x08	; 8
     1ca:	38 00       	.word	0x0038	; ????
     1cc:	78 20       	and	r7, r8
     1ce:	78 00       	.word	0x0078	; ????
     1d0:	48 30       	cpi	r20, 0x08	; 8
     1d2:	48 00       	.word	0x0048	; ????
     1d4:	98 a0       	ldd	r9, Y+32	; 0x20
     1d6:	78 00       	.word	0x0078	; ????
     1d8:	48 68       	ori	r20, 0x88	; 136
     1da:	58 00       	.word	0x0058	; ????
     1dc:	10 78       	andi	r17, 0x80	; 128
     1de:	84 00       	.word	0x0084	; ????
     1e0:	00 7c       	andi	r16, 0xC0	; 192
     1e2:	00 00       	nop
     1e4:	84 78       	andi	r24, 0x84	; 132
     1e6:	10 00       	.word	0x0010	; ????
     1e8:	08 04       	cpc	r0, r8
     1ea:	08 04       	cpc	r0, r8

000001ec <__ctors_end>:
     1ec:	11 24       	eor	r1, r1
     1ee:	1f be       	out	0x3f, r1	; 63
     1f0:	cf ef       	ldi	r28, 0xFF	; 255
     1f2:	d4 e0       	ldi	r29, 0x04	; 4
     1f4:	de bf       	out	0x3e, r29	; 62
     1f6:	cd bf       	out	0x3d, r28	; 61

000001f8 <__do_copy_data>:
     1f8:	12 e0       	ldi	r17, 0x02	; 2
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b1 e0       	ldi	r27, 0x01	; 1
     1fe:	ec e7       	ldi	r30, 0x7C	; 124
     200:	f5 e1       	ldi	r31, 0x15	; 21
     202:	02 c0       	rjmp	.+4      	; 0x208 <__do_copy_data+0x10>
     204:	05 90       	lpm	r0, Z+
     206:	0d 92       	st	X+, r0
     208:	aa 36       	cpi	r26, 0x6A	; 106
     20a:	b1 07       	cpc	r27, r17
     20c:	d9 f7       	brne	.-10     	; 0x204 <__do_copy_data+0xc>

0000020e <__do_clear_bss>:
     20e:	22 e0       	ldi	r18, 0x02	; 2
     210:	aa e6       	ldi	r26, 0x6A	; 106
     212:	b2 e0       	ldi	r27, 0x02	; 2
     214:	01 c0       	rjmp	.+2      	; 0x218 <.do_clear_bss_start>

00000216 <.do_clear_bss_loop>:
     216:	1d 92       	st	X+, r1

00000218 <.do_clear_bss_start>:
     218:	a4 37       	cpi	r26, 0x74	; 116
     21a:	b2 07       	cpc	r27, r18
     21c:	e1 f7       	brne	.-8      	; 0x216 <.do_clear_bss_loop>
     21e:	0e 94 0e 02 	call	0x41c	; 0x41c <main>
     222:	0c 94 bc 0a 	jmp	0x1578	; 0x1578 <_exit>

00000226 <__bad_interrupt>:
     226:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000022a <adc_read>:
#include <util/delay.h>
#include "adc.h"

uint8_t adc_read(DeviceType device){
	volatile char *adc = (char *) 0x1400;
	switch (device) {
     22a:	82 30       	cpi	r24, 0x02	; 2
     22c:	69 f0       	breq	.+26     	; 0x248 <adc_read+0x1e>
     22e:	18 f4       	brcc	.+6      	; 0x236 <adc_read+0xc>
     230:	81 30       	cpi	r24, 0x01	; 1
     232:	31 f0       	breq	.+12     	; 0x240 <adc_read+0x16>
     234:	14 c0       	rjmp	.+40     	; 0x25e <adc_read+0x34>
     236:	83 30       	cpi	r24, 0x03	; 3
     238:	59 f0       	breq	.+22     	; 0x250 <adc_read+0x26>
     23a:	84 30       	cpi	r24, 0x04	; 4
     23c:	69 f0       	breq	.+26     	; 0x258 <adc_read+0x2e>
     23e:	0f c0       	rjmp	.+30     	; 0x25e <adc_read+0x34>
		case JOYAXIS1:
		/* Select CH1 */
		adc[0] = 0b00000100;
     240:	84 e0       	ldi	r24, 0x04	; 4
     242:	80 93 00 14 	sts	0x1400, r24
		break;
     246:	0b c0       	rjmp	.+22     	; 0x25e <adc_read+0x34>
		
		case JOYAXIS2:
		/* Select CH2 */
		adc[0] = 0b00000101;
     248:	85 e0       	ldi	r24, 0x05	; 5
     24a:	80 93 00 14 	sts	0x1400, r24
		break;
     24e:	07 c0       	rjmp	.+14     	; 0x25e <adc_read+0x34>
		
		case LSLIDER:
		/* Select CH3 */
		adc[0] = 0b00000110;
     250:	86 e0       	ldi	r24, 0x06	; 6
     252:	80 93 00 14 	sts	0x1400, r24
		break;
     256:	03 c0       	rjmp	.+6      	; 0x25e <adc_read+0x34>
		
		case RSLIDER:
		/* Select CH1 */
		adc[0] = 0b00000111;
     258:	87 e0       	ldi	r24, 0x07	; 7
     25a:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     25e:	2c ec       	ldi	r18, 0xCC	; 204
     260:	8c e0       	ldi	r24, 0x0C	; 12
     262:	91 e0       	ldi	r25, 0x01	; 1
     264:	21 50       	subi	r18, 0x01	; 1
     266:	80 40       	sbci	r24, 0x00	; 0
     268:	90 40       	sbci	r25, 0x00	; 0
     26a:	e1 f7       	brne	.-8      	; 0x264 <adc_read+0x3a>
     26c:	00 c0       	rjmp	.+0      	; 0x26e <adc_read+0x44>
		break;
		default:
		break;
	}
	_delay_ms(70);
	return adc[0];
     26e:	80 91 00 14 	lds	r24, 0x1400
     272:	08 95       	ret

00000274 <CAN_init>:
#include "MCP2515.h"
#include "can.h"

void CAN_init(void)
{
	MCP_init();
     274:	0e 94 14 03 	call	0x628	; 0x628 <MCP_init>
     278:	08 95       	ret

0000027a <CAN_message_send>:
}

/* High level function for sending a message on the CAN bus */
void CAN_message_send(can_message_t* msg)
{
     27a:	1f 93       	push	r17
     27c:	cf 93       	push	r28
     27e:	df 93       	push	r29
     280:	ec 01       	movw	r28, r24
	/* Only transmit buffer TXB0 is used */
	
	/* Loop until TXREQ is cleared */
	uint8_t status = MCP_read_status();
     282:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <MCP_read_status>
	uint8_t TXREQ = (status & (1 << 2));
	//printf("TXREQ: %02x\n", TXREQ);
	while (TXREQ) {
     286:	82 ff       	sbrs	r24, 2
     288:	04 c0       	rjmp	.+8      	; 0x292 <CAN_message_send+0x18>
		status = MCP_read_status();
     28a:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <MCP_read_status>
	
	/* Loop until TXREQ is cleared */
	uint8_t status = MCP_read_status();
	uint8_t TXREQ = (status & (1 << 2));
	//printf("TXREQ: %02x\n", TXREQ);
	while (TXREQ) {
     28e:	82 fd       	sbrc	r24, 2
     290:	fc cf       	rjmp	.-8      	; 0x28a <CAN_message_send+0x10>
		status = MCP_read_status();
		TXREQ = (status & (1 << 2));
	}
	
	/* Set message ID, standard mode*/
	MCP_write(MCP_TXB0CTRL + 2, 0); // High level identifier
     292:	60 e0       	ldi	r22, 0x00	; 0
     294:	82 e3       	ldi	r24, 0x32	; 50
     296:	0e 94 cf 02 	call	0x59e	; 0x59e <MCP_write>
	MCP_write(MCP_TXB0CTRL + 3, (msg->id << 5)); // Low level identifier
     29a:	68 81       	ld	r22, Y
     29c:	62 95       	swap	r22
     29e:	66 0f       	add	r22, r22
     2a0:	60 7e       	andi	r22, 0xE0	; 224
     2a2:	83 e3       	ldi	r24, 0x33	; 51
     2a4:	0e 94 cf 02 	call	0x59e	; 0x59e <MCP_write>
	//printf("msgid: %02x\n", value);
	
	/* Set data length */
	MCP_write(MCP_TXB0CTRL + 5, msg->length & 0x0F);
     2a8:	6a 81       	ldd	r22, Y+2	; 0x02
     2aa:	6f 70       	andi	r22, 0x0F	; 15
     2ac:	85 e3       	ldi	r24, 0x35	; 53
     2ae:	0e 94 cf 02 	call	0x59e	; 0x59e <MCP_write>
	
	/* Load message data */
	for (uint8_t i = 0; i < msg->length; i++) {
     2b2:	8a 81       	ldd	r24, Y+2	; 0x02
     2b4:	88 23       	and	r24, r24
     2b6:	69 f0       	breq	.+26     	; 0x2d2 <CAN_message_send+0x58>
     2b8:	10 e0       	ldi	r17, 0x00	; 0
		MCP_write(MCP_TXB0CTRL + 6 + i, msg->data[i]);
     2ba:	fe 01       	movw	r30, r28
     2bc:	e1 0f       	add	r30, r17
     2be:	f1 1d       	adc	r31, r1
     2c0:	63 81       	ldd	r22, Z+3	; 0x03
     2c2:	86 e3       	ldi	r24, 0x36	; 54
     2c4:	81 0f       	add	r24, r17
     2c6:	0e 94 cf 02 	call	0x59e	; 0x59e <MCP_write>
	
	/* Set data length */
	MCP_write(MCP_TXB0CTRL + 5, msg->length & 0x0F);
	
	/* Load message data */
	for (uint8_t i = 0; i < msg->length; i++) {
     2ca:	1f 5f       	subi	r17, 0xFF	; 255
     2cc:	8a 81       	ldd	r24, Y+2	; 0x02
     2ce:	18 17       	cp	r17, r24
     2d0:	a0 f3       	brcs	.-24     	; 0x2ba <CAN_message_send+0x40>
		MCP_write(MCP_TXB0CTRL + 6 + i, msg->data[i]);
	}
	
	/* Request to send contents of TXB0 */
	MCP_request_to_send(MCP_RTS_TX0);
     2d2:	81 e8       	ldi	r24, 0x81	; 129
     2d4:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <MCP_request_to_send>
     2d8:	df 91       	pop	r29
     2da:	cf 91       	pop	r28
     2dc:	1f 91       	pop	r17
     2de:	08 95       	ret

000002e0 <JOYSTICK_init>:
#include "math.h"

void JOYSTICK_init(void)
{
	/* Set PB2 as input for button*/
	DDRB &= ~(1 << PB2);
     2e0:	ba 98       	cbi	0x17, 2	; 23
	PORTB &= (1 << PB2);
     2e2:	88 b3       	in	r24, 0x18	; 24
     2e4:	84 70       	andi	r24, 0x04	; 4
     2e6:	88 bb       	out	0x18, r24	; 24
     2e8:	08 95       	ret

000002ea <toPositionPercent>:
	return NEUTRAL;
}

int16_t toPositionPercent(int16_t value)
{
	value -= 127;
     2ea:	8f 57       	subi	r24, 0x7F	; 127
     2ec:	91 09       	sbc	r25, r1
	int16_t percentValue = round((float)value / 127 * 100);
     2ee:	bc 01       	movw	r22, r24
     2f0:	88 27       	eor	r24, r24
     2f2:	77 fd       	sbrc	r23, 7
     2f4:	80 95       	com	r24
     2f6:	98 2f       	mov	r25, r24
     2f8:	0e 94 25 05 	call	0xa4a	; 0xa4a <__floatsisf>
     2fc:	20 e0       	ldi	r18, 0x00	; 0
     2fe:	30 e0       	ldi	r19, 0x00	; 0
     300:	4e ef       	ldi	r20, 0xFE	; 254
     302:	52 e4       	ldi	r21, 0x42	; 66
     304:	0e 94 8a 04 	call	0x914	; 0x914 <__divsf3>
     308:	20 e0       	ldi	r18, 0x00	; 0
     30a:	30 e0       	ldi	r19, 0x00	; 0
     30c:	48 ec       	ldi	r20, 0xC8	; 200
     30e:	52 e4       	ldi	r21, 0x42	; 66
     310:	0e 94 b1 05 	call	0xb62	; 0xb62 <__mulsf3>
     314:	0e 94 14 06 	call	0xc28	; 0xc28 <round>
     318:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <__fixsfsi>
	return percentValue;
}
     31c:	cb 01       	movw	r24, r22
     31e:	08 95       	ret

00000320 <JOYSTICK_get_position>:
{
	
}

struct positions JOYSTICK_get_position(void)
{
     320:	ff 92       	push	r15
     322:	0f 93       	push	r16
     324:	1f 93       	push	r17
     326:	cf 93       	push	r28
     328:	df 93       	push	r29
     32a:	cd b7       	in	r28, 0x3d	; 61
     32c:	de b7       	in	r29, 0x3e	; 62
     32e:	28 97       	sbiw	r28, 0x08	; 8
     330:	0f b6       	in	r0, 0x3f	; 63
     332:	f8 94       	cli
     334:	de bf       	out	0x3e, r29	; 62
     336:	0f be       	out	0x3f, r0	; 63
     338:	cd bf       	out	0x3d, r28	; 61
	int16_t yValue = (int16_t) adc_read(JOYAXIS1);
     33a:	81 e0       	ldi	r24, 0x01	; 1
     33c:	0e 94 15 01 	call	0x22a	; 0x22a <adc_read>
     340:	f8 2e       	mov	r15, r24
	int16_t xValue = (int16_t) adc_read(JOYAXIS2);
     342:	82 e0       	ldi	r24, 0x02	; 2
     344:	0e 94 15 01 	call	0x22a	; 0x22a <adc_read>
	
	int16_t xPosition = toPositionPercent(xValue);
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	0e 94 75 01 	call	0x2ea	; 0x2ea <toPositionPercent>
     34e:	18 2f       	mov	r17, r24
     350:	09 2f       	mov	r16, r25
	int16_t yPosition = toPositionPercent(yValue);
     352:	8f 2d       	mov	r24, r15
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	0e 94 75 01 	call	0x2ea	; 0x2ea <toPositionPercent>
	
	struct positions pos;
	pos.x = xPosition;
	pos.y = yPosition;
	
	return pos;
     35a:	19 83       	std	Y+1, r17	; 0x01
     35c:	0a 83       	std	Y+2, r16	; 0x02
     35e:	8b 83       	std	Y+3, r24	; 0x03
     360:	9c 83       	std	Y+4, r25	; 0x04
     362:	21 2f       	mov	r18, r17
     364:	30 2f       	mov	r19, r16
     366:	48 2f       	mov	r20, r24
     368:	59 2f       	mov	r21, r25
     36a:	6d 81       	ldd	r22, Y+5	; 0x05
     36c:	7e 81       	ldd	r23, Y+6	; 0x06
}
     36e:	8f 81       	ldd	r24, Y+7	; 0x07
     370:	98 85       	ldd	r25, Y+8	; 0x08
     372:	28 96       	adiw	r28, 0x08	; 8
     374:	0f b6       	in	r0, 0x3f	; 63
     376:	f8 94       	cli
     378:	de bf       	out	0x3e, r29	; 62
     37a:	0f be       	out	0x3f, r0	; 63
     37c:	cd bf       	out	0x3d, r28	; 61
     37e:	df 91       	pop	r29
     380:	cf 91       	pop	r28
     382:	1f 91       	pop	r17
     384:	0f 91       	pop	r16
     386:	ff 90       	pop	r15
     388:	08 95       	ret

0000038a <JOYSTICK_get_direction>:


DirectionType JOYSTICK_get_direction(void)
{
     38a:	cf 93       	push	r28
     38c:	df 93       	push	r29
     38e:	cd b7       	in	r28, 0x3d	; 61
     390:	de b7       	in	r29, 0x3e	; 62
     392:	28 97       	sbiw	r28, 0x08	; 8
     394:	0f b6       	in	r0, 0x3f	; 63
     396:	f8 94       	cli
     398:	de bf       	out	0x3e, r29	; 62
     39a:	0f be       	out	0x3f, r0	; 63
     39c:	cd bf       	out	0x3d, r28	; 61
	struct positions pos = JOYSTICK_get_position();
     39e:	0e 94 90 01 	call	0x320	; 0x320 <JOYSTICK_get_position>
     3a2:	29 83       	std	Y+1, r18	; 0x01
     3a4:	3a 83       	std	Y+2, r19	; 0x02
     3a6:	4b 83       	std	Y+3, r20	; 0x03
     3a8:	5c 83       	std	Y+4, r21	; 0x04
     3aa:	29 81       	ldd	r18, Y+1	; 0x01
     3ac:	3a 81       	ldd	r19, Y+2	; 0x02
     3ae:	8b 81       	ldd	r24, Y+3	; 0x03
     3b0:	9c 81       	ldd	r25, Y+4	; 0x04
	int8_t THRESHOLD = 25;
	
	if (pos.y < THRESHOLD && pos.y > -THRESHOLD) {
     3b2:	ac 01       	movw	r20, r24
     3b4:	48 5e       	subi	r20, 0xE8	; 232
     3b6:	5f 4f       	sbci	r21, 0xFF	; 255
     3b8:	41 33       	cpi	r20, 0x31	; 49
     3ba:	51 05       	cpc	r21, r1
     3bc:	48 f4       	brcc	.+18     	; 0x3d0 <JOYSTICK_get_direction+0x46>
		
		if (pos.x < -THRESHOLD) {
     3be:	27 3e       	cpi	r18, 0xE7	; 231
     3c0:	8f ef       	ldi	r24, 0xFF	; 255
     3c2:	38 07       	cpc	r19, r24
     3c4:	94 f0       	brlt	.+36     	; 0x3ea <JOYSTICK_get_direction+0x60>
			return LEFT;
		} else if (pos.x > THRESHOLD) {
     3c6:	2a 31       	cpi	r18, 0x1A	; 26
     3c8:	31 05       	cpc	r19, r1
     3ca:	8c f4       	brge	.+34     	; 0x3ee <JOYSTICK_get_direction+0x64>
			return UP;
		}
		
	}
	
	return NEUTRAL;
     3cc:	80 e0       	ldi	r24, 0x00	; 0
     3ce:	16 c0       	rjmp	.+44     	; 0x3fc <JOYSTICK_get_direction+0x72>
			return LEFT;
		} else if (pos.x > THRESHOLD) {
			return RIGHT;
		}
		
	} else if (pos.x < THRESHOLD && pos.x > -THRESHOLD) {
     3d0:	28 5e       	subi	r18, 0xE8	; 232
     3d2:	3f 4f       	sbci	r19, 0xFF	; 255
     3d4:	21 33       	cpi	r18, 0x31	; 49
     3d6:	31 05       	cpc	r19, r1
     3d8:	60 f4       	brcc	.+24     	; 0x3f2 <JOYSTICK_get_direction+0x68>
		
		if (pos.y < -THRESHOLD) {
     3da:	87 3e       	cpi	r24, 0xE7	; 231
     3dc:	2f ef       	ldi	r18, 0xFF	; 255
     3de:	92 07       	cpc	r25, r18
     3e0:	54 f0       	brlt	.+20     	; 0x3f6 <JOYSTICK_get_direction+0x6c>
			return DOWN;
		} else if (pos.y > THRESHOLD) {
     3e2:	4a 97       	sbiw	r24, 0x1a	; 26
     3e4:	54 f4       	brge	.+20     	; 0x3fa <JOYSTICK_get_direction+0x70>
			return UP;
		}
		
	}
	
	return NEUTRAL;
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	09 c0       	rjmp	.+18     	; 0x3fc <JOYSTICK_get_direction+0x72>
	int8_t THRESHOLD = 25;
	
	if (pos.y < THRESHOLD && pos.y > -THRESHOLD) {
		
		if (pos.x < -THRESHOLD) {
			return LEFT;
     3ea:	81 e0       	ldi	r24, 0x01	; 1
     3ec:	07 c0       	rjmp	.+14     	; 0x3fc <JOYSTICK_get_direction+0x72>
		} else if (pos.x > THRESHOLD) {
			return RIGHT;
     3ee:	82 e0       	ldi	r24, 0x02	; 2
     3f0:	05 c0       	rjmp	.+10     	; 0x3fc <JOYSTICK_get_direction+0x72>
			return UP;
		}
		
	}
	
	return NEUTRAL;
     3f2:	80 e0       	ldi	r24, 0x00	; 0
     3f4:	03 c0       	rjmp	.+6      	; 0x3fc <JOYSTICK_get_direction+0x72>
		}
		
	} else if (pos.x < THRESHOLD && pos.x > -THRESHOLD) {
		
		if (pos.y < -THRESHOLD) {
			return DOWN;
     3f6:	84 e0       	ldi	r24, 0x04	; 4
     3f8:	01 c0       	rjmp	.+2      	; 0x3fc <JOYSTICK_get_direction+0x72>
		} else if (pos.y > THRESHOLD) {
			return UP;
     3fa:	83 e0       	ldi	r24, 0x03	; 3
		}
		
	}
	
	return NEUTRAL;
}
     3fc:	28 96       	adiw	r28, 0x08	; 8
     3fe:	0f b6       	in	r0, 0x3f	; 63
     400:	f8 94       	cli
     402:	de bf       	out	0x3e, r29	; 62
     404:	0f be       	out	0x3f, r0	; 63
     406:	cd bf       	out	0x3d, r28	; 61
     408:	df 91       	pop	r29
     40a:	cf 91       	pop	r28
     40c:	08 95       	ret

0000040e <JOYSTICK_read_button>:
	return pos;
}

uint8_t JOYSTICK_read_button(void)
{
	return (PINB & (1 << PB2)) == 0;
     40e:	86 b3       	in	r24, 0x16	; 22
     410:	82 fb       	bst	r24, 2
     412:	88 27       	eor	r24, r24
     414:	80 f9       	bld	r24, 0
     416:	91 e0       	ldi	r25, 0x01	; 1
     418:	89 27       	eor	r24, r25
     41a:	08 95       	ret

0000041c <main>:
void SRAM_test(void);
void SRAM_test2(void);


int main(void)
{
     41c:	cf 93       	push	r28
     41e:	df 93       	push	r29
     420:	cd b7       	in	r28, 0x3d	; 61
     422:	de b7       	in	r29, 0x3e	; 62
     424:	2b 97       	sbiw	r28, 0x0b	; 11
     426:	0f b6       	in	r0, 0x3f	; 63
     428:	f8 94       	cli
     42a:	de bf       	out	0x3e, r29	; 62
     42c:	0f be       	out	0x3f, r0	; 63
     42e:	cd bf       	out	0x3d, r28	; 61
	/* Needs to be set when using external memory */
	MCUCR |= (1 << SRE);
     430:	85 b7       	in	r24, 0x35	; 53
     432:	80 68       	ori	r24, 0x80	; 128
     434:	85 bf       	out	0x35, r24	; 53

	fdevopen(USART_transmit, USART_receive);
     436:	66 e8       	ldi	r22, 0x86	; 134
     438:	74 e0       	ldi	r23, 0x04	; 4
     43a:	82 e8       	ldi	r24, 0x82	; 130
     43c:	94 e0       	ldi	r25, 0x04	; 4
     43e:	0e 94 84 07 	call	0xf08	; 0xf08 <fdevopen>
	USART_init(MYUBBR);
     442:	8f e1       	ldi	r24, 0x1F	; 31
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <USART_init>
	OLED_init();
     44a:	0e 94 59 03 	call	0x6b2	; 0x6b2 <OLED_init>
	JOYSTICK_init();
     44e:	0e 94 70 01 	call	0x2e0	; 0x2e0 <JOYSTICK_init>
	SPI_master_init();
     452:	0e 94 72 04 	call	0x8e4	; 0x8e4 <SPI_master_init>
	CAN_init();
     456:	0e 94 3a 01 	call	0x274	; 0x274 <CAN_init>
	
	OLED_reset();
     45a:	0e 94 4b 03 	call	0x696	; 0x696 <OLED_reset>
	OLED_pos(2,20);
     45e:	64 e1       	ldi	r22, 0x14	; 20
     460:	82 e0       	ldi	r24, 0x02	; 2
     462:	0e 94 3e 03 	call	0x67c	; 0x67c <OLED_pos>
	
	menuNode *menu = OLED_generate_menu();
     466:	0e 94 ee 03 	call	0x7dc	; 0x7dc <OLED_generate_menu>
	OLED_print_menu(menu);
     46a:	0e 94 32 04 	call	0x864	; 0x864 <OLED_print_menu>
	DirectionType joydir = NEUTRAL;
	uint8_t buttonPressed = 0;
	
	/* MCP TEST */
	
	char status = MCP_read(MCP_CANCTRL);
     46e:	8f e0       	ldi	r24, 0x0F	; 15
     470:	0e 94 bc 02 	call	0x578	; 0x578 <MCP_read>
	printf("CANCTRL: %02x\n", status);
     474:	1f 92       	push	r1
     476:	8f 93       	push	r24
     478:	86 e0       	ldi	r24, 0x06	; 6
     47a:	91 e0       	ldi	r25, 0x01	; 1
     47c:	9f 93       	push	r25
     47e:	8f 93       	push	r24
     480:	0e 94 cf 07 	call	0xf9e	; 0xf9e <printf>
	
	can_message_t can_message;
	can_message.data[0] = 0xff;
     484:	8f ef       	ldi	r24, 0xFF	; 255
     486:	8c 83       	std	Y+4, r24	; 0x04
	can_message.data[1] = 0xcc;
     488:	8c ec       	ldi	r24, 0xCC	; 204
     48a:	8d 83       	std	Y+5, r24	; 0x05
	can_message.length = 2;
     48c:	82 e0       	ldi	r24, 0x02	; 2
     48e:	8b 83       	std	Y+3, r24	; 0x03
	can_message.id = 2;
     490:	82 e0       	ldi	r24, 0x02	; 2
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	9a 83       	std	Y+2, r25	; 0x02
     496:	89 83       	std	Y+1, r24	; 0x01
	CAN_message_send(&can_message);
     498:	ce 01       	movw	r24, r28
     49a:	01 96       	adiw	r24, 0x01	; 1
     49c:	0e 94 3d 01 	call	0x27a	; 0x27a <CAN_message_send>
	
	uint8_t RXB0CTRL = MCP_read(MCP_RXB0CTRL);
     4a0:	80 e6       	ldi	r24, 0x60	; 96
     4a2:	0e 94 bc 02 	call	0x578	; 0x578 <MCP_read>
	printf("RXB0CTRL: %02x\n", RXB0CTRL);
     4a6:	1f 92       	push	r1
     4a8:	8f 93       	push	r24
     4aa:	85 e1       	ldi	r24, 0x15	; 21
     4ac:	91 e0       	ldi	r25, 0x01	; 1
     4ae:	9f 93       	push	r25
     4b0:	8f 93       	push	r24
     4b2:	0e 94 cf 07 	call	0xf9e	; 0xf9e <printf>
     4b6:	0f b6       	in	r0, 0x3f	; 63
     4b8:	f8 94       	cli
     4ba:	de bf       	out	0x3e, r29	; 62
     4bc:	0f be       	out	0x3f, r0	; 63
     4be:	cd bf       	out	0x3d, r28	; 61
     4c0:	0f 2e       	mov	r0, r31
     4c2:	f6 e6       	ldi	r31, 0x66	; 102
     4c4:	ff 2e       	mov	r15, r31
     4c6:	f0 2d       	mov	r31, r0
	
	uint8_t received;
	for (uint8_t i = 0; i < 8; i++) {
		received = MCP_read(MCP_RXB0CTRL + 6 + i);
		printf("Received: %02x\n", received);
     4c8:	05 e2       	ldi	r16, 0x25	; 37
     4ca:	11 e0       	ldi	r17, 0x01	; 1
	uint8_t RXB0CTRL = MCP_read(MCP_RXB0CTRL);
	printf("RXB0CTRL: %02x\n", RXB0CTRL);
	
	uint8_t received;
	for (uint8_t i = 0; i < 8; i++) {
		received = MCP_read(MCP_RXB0CTRL + 6 + i);
     4cc:	8f 2d       	mov	r24, r15
     4ce:	0e 94 bc 02 	call	0x578	; 0x578 <MCP_read>
		printf("Received: %02x\n", received);
     4d2:	1f 92       	push	r1
     4d4:	8f 93       	push	r24
     4d6:	1f 93       	push	r17
     4d8:	0f 93       	push	r16
     4da:	0e 94 cf 07 	call	0xf9e	; 0xf9e <printf>
     4de:	f3 94       	inc	r15
	
	uint8_t RXB0CTRL = MCP_read(MCP_RXB0CTRL);
	printf("RXB0CTRL: %02x\n", RXB0CTRL);
	
	uint8_t received;
	for (uint8_t i = 0; i < 8; i++) {
     4e0:	0f 90       	pop	r0
     4e2:	0f 90       	pop	r0
     4e4:	0f 90       	pop	r0
     4e6:	0f 90       	pop	r0
     4e8:	9e e6       	ldi	r25, 0x6E	; 110
     4ea:	f9 12       	cpse	r15, r25
     4ec:	ef cf       	rjmp	.-34     	; 0x4cc <main+0xb0>
		received = MCP_read(MCP_RXB0CTRL + 6 + i);
		printf("Received: %02x\n", received);
	}
	
	printf("\n");
     4ee:	8a e0       	ldi	r24, 0x0A	; 10
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <putchar>
	
	/* Clear CANINTF.RX0IF */
	MCP_modify_bit(MCP_CANINTF, 0x01, 0x00);
     4f6:	40 e0       	ldi	r20, 0x00	; 0
     4f8:	61 e0       	ldi	r22, 0x01	; 1
     4fa:	8c e2       	ldi	r24, 0x2C	; 44
     4fc:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <MCP_modify_bit>
	uint8_t canintf = MCP_read(MCP_CANINTF);
     500:	8c e2       	ldi	r24, 0x2C	; 44
     502:	0e 94 bc 02 	call	0x578	; 0x578 <MCP_read>
	printf("CANINTF: %02x\n", canintf);
     506:	1f 92       	push	r1
     508:	8f 93       	push	r24
     50a:	85 e3       	ldi	r24, 0x35	; 53
     50c:	91 e0       	ldi	r25, 0x01	; 1
     50e:	9f 93       	push	r25
     510:	8f 93       	push	r24
     512:	0e 94 cf 07 	call	0xf9e	; 0xf9e <printf>
     516:	0f 90       	pop	r0
     518:	0f 90       	pop	r0
     51a:	0f 90       	pop	r0
     51c:	0f 90       	pop	r0
	OLED_pos(2,20);
	
	menuNode *menu = OLED_generate_menu();
	OLED_print_menu(menu);
	
	uint8_t currentRow = 1;
     51e:	11 e0       	ldi	r17, 0x01	; 1
				currentRow -= 1;
			}
			
		} else if (joydir == DOWN) {
			if (currentRow == 7) {
				currentRow = 1;
     520:	ee 24       	eor	r14, r14
     522:	e3 94       	inc	r14
	{	
		joydir = JOYSTICK_get_direction();
		lastRow = currentRow;
		if (joydir == UP) {
			if (currentRow == 1) {
				currentRow = 7;
     524:	0f 2e       	mov	r0, r31
     526:	f7 e0       	ldi	r31, 0x07	; 7
     528:	ff 2e       	mov	r15, r31
     52a:	f0 2d       	mov	r31, r0
	
	/* MCP TEST END */
	
	while(1)
	{	
		joydir = JOYSTICK_get_direction();
     52c:	0e 94 c5 01 	call	0x38a	; 0x38a <JOYSTICK_get_direction>
		lastRow = currentRow;
		if (joydir == UP) {
     530:	83 30       	cpi	r24, 0x03	; 3
     532:	29 f4       	brne	.+10     	; 0x53e <__stack+0x3f>
			if (currentRow == 1) {
     534:	11 30       	cpi	r17, 0x01	; 1
     536:	51 f0       	breq	.+20     	; 0x54c <__stack+0x4d>
				currentRow = 7;
			} else {
				currentRow -= 1;
     538:	0f ef       	ldi	r16, 0xFF	; 255
     53a:	01 0f       	add	r16, r17
     53c:	0c c0       	rjmp	.+24     	; 0x556 <__stack+0x57>
			}
			
		} else if (joydir == DOWN) {
     53e:	84 30       	cpi	r24, 0x04	; 4
     540:	39 f4       	brne	.+14     	; 0x550 <__stack+0x51>
			if (currentRow == 7) {
     542:	17 30       	cpi	r17, 0x07	; 7
     544:	39 f0       	breq	.+14     	; 0x554 <__stack+0x55>
				currentRow = 1;
			} else {
				currentRow += 1;
     546:	01 e0       	ldi	r16, 0x01	; 1
     548:	01 0f       	add	r16, r17
     54a:	05 c0       	rjmp	.+10     	; 0x556 <__stack+0x57>
	{	
		joydir = JOYSTICK_get_direction();
		lastRow = currentRow;
		if (joydir == UP) {
			if (currentRow == 1) {
				currentRow = 7;
     54c:	0f 2d       	mov	r16, r15
     54e:	03 c0       	rjmp	.+6      	; 0x556 <__stack+0x57>
     550:	01 2f       	mov	r16, r17
     552:	01 c0       	rjmp	.+2      	; 0x556 <__stack+0x57>
				currentRow -= 1;
			}
			
		} else if (joydir == DOWN) {
			if (currentRow == 7) {
				currentRow = 1;
     554:	0e 2d       	mov	r16, r14
			} else {
				currentRow += 1;
			}
		}
		
		OLED_move_arrow(currentRow, 20, lastRow, 20);
     556:	24 e1       	ldi	r18, 0x14	; 20
     558:	41 2f       	mov	r20, r17
     55a:	64 e1       	ldi	r22, 0x14	; 20
     55c:	80 2f       	mov	r24, r16
     55e:	0e 94 c9 03 	call	0x792	; 0x792 <OLED_move_arrow>
		buttonPressed = JOYSTICK_read_button();
     562:	0e 94 07 02 	call	0x40e	; 0x40e <JOYSTICK_read_button>
     566:	10 2f       	mov	r17, r16
     568:	e1 cf       	rjmp	.-62     	; 0x52c <__stack+0x2d>

0000056a <MCP_reset>:
	MCP_set_mode(MODE_LOOPBACK); // Sets loopback operation mode for testing
}

void MCP_reset(void)
{
	PORTB &= ~(1 << PB4);
     56a:	c4 98       	cbi	0x18, 4	; 24
	SPI_master_transmit(MCP_RESET);
     56c:	80 ec       	ldi	r24, 0xC0	; 192
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	0e 94 77 04 	call	0x8ee	; 0x8ee <SPI_master_transmit>
	PORTB |= (1 << PB4);
     574:	c4 9a       	sbi	0x18, 4	; 24
     576:	08 95       	ret

00000578 <MCP_read>:
}

/* Returns the content of a register */
uint8_t MCP_read(uint8_t addr)
{
     578:	cf 93       	push	r28
     57a:	c8 2f       	mov	r28, r24
	PORTB &= ~(1 << PB4);
     57c:	c4 98       	cbi	0x18, 4	; 24
	SPI_master_transmit(MCP_READ);
     57e:	83 e0       	ldi	r24, 0x03	; 3
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	0e 94 77 04 	call	0x8ee	; 0x8ee <SPI_master_transmit>
	SPI_master_transmit(addr);
     586:	8c 2f       	mov	r24, r28
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	0e 94 77 04 	call	0x8ee	; 0x8ee <SPI_master_transmit>
	SPI_master_transmit(0x00);
     58e:	80 e0       	ldi	r24, 0x00	; 0
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	0e 94 77 04 	call	0x8ee	; 0x8ee <SPI_master_transmit>
	char data = SPDR;
     596:	8f b1       	in	r24, 0x0f	; 15
	PORTB |= (1 << PB4);
     598:	c4 9a       	sbi	0x18, 4	; 24
	return data;
}
     59a:	cf 91       	pop	r28
     59c:	08 95       	ret

0000059e <MCP_write>:

void MCP_write(uint8_t addr, uint8_t data)
{
     59e:	cf 93       	push	r28
     5a0:	df 93       	push	r29
     5a2:	d8 2f       	mov	r29, r24
     5a4:	c6 2f       	mov	r28, r22
	PORTB &= ~(1 << PB4);
     5a6:	c4 98       	cbi	0x18, 4	; 24
	SPI_master_transmit(MCP_WRITE);
     5a8:	82 e0       	ldi	r24, 0x02	; 2
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	0e 94 77 04 	call	0x8ee	; 0x8ee <SPI_master_transmit>
	SPI_master_transmit(addr);
     5b0:	8d 2f       	mov	r24, r29
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	0e 94 77 04 	call	0x8ee	; 0x8ee <SPI_master_transmit>
	SPI_master_transmit(data);
     5b8:	8c 2f       	mov	r24, r28
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	0e 94 77 04 	call	0x8ee	; 0x8ee <SPI_master_transmit>
	PORTB |= (1 << PB4);
     5c0:	c4 9a       	sbi	0x18, 4	; 24
}
     5c2:	df 91       	pop	r29
     5c4:	cf 91       	pop	r28
     5c6:	08 95       	ret

000005c8 <MCP_request_to_send>:
}

/* Instructs controller to begin message transmission for the selected buffers */
void MCP_request_to_send(uint8_t buffer)
{
	PORTB &= ~(1 << PB4);
     5c8:	c4 98       	cbi	0x18, 4	; 24
	SPI_master_transmit(buffer);
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	0e 94 77 04 	call	0x8ee	; 0x8ee <SPI_master_transmit>
	PORTB |= (1 << PB4);
     5d0:	c4 9a       	sbi	0x18, 4	; 24
     5d2:	08 95       	ret

000005d4 <MCP_read_status>:
}

/* Returns some status bits for transmit and receive functions */
uint8_t MCP_read_status(void)
{
	PORTB &= ~(1 << PB4);
     5d4:	c4 98       	cbi	0x18, 4	; 24
	SPI_master_transmit(MCP_READ_STATUS);
     5d6:	80 ea       	ldi	r24, 0xA0	; 160
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	0e 94 77 04 	call	0x8ee	; 0x8ee <SPI_master_transmit>
	//SPI_master_transmit(0x00); // Unneccessary because of "repeat data out"?
	char status = SPDR;
     5de:	8f b1       	in	r24, 0x0f	; 15
	PORTB |= (1 << PB4);
     5e0:	c4 9a       	sbi	0x18, 4	; 24
	return status;
}
     5e2:	08 95       	ret

000005e4 <MCP_modify_bit>:
	MCP_modify_bit(MCP_CANCTRL, mask, mode);
}

/* Changes the value of the register bits specified by the mask */
void MCP_modify_bit(uint8_t addr, uint8_t mask, uint8_t data)
{
     5e4:	1f 93       	push	r17
     5e6:	cf 93       	push	r28
     5e8:	df 93       	push	r29
     5ea:	18 2f       	mov	r17, r24
     5ec:	d6 2f       	mov	r29, r22
     5ee:	c4 2f       	mov	r28, r20
	PORTB &= ~(1 << PB4);
     5f0:	c4 98       	cbi	0x18, 4	; 24
	SPI_master_transmit(MCP_BITMOD);
     5f2:	85 e0       	ldi	r24, 0x05	; 5
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	0e 94 77 04 	call	0x8ee	; 0x8ee <SPI_master_transmit>
	SPI_master_transmit(addr);
     5fa:	81 2f       	mov	r24, r17
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	0e 94 77 04 	call	0x8ee	; 0x8ee <SPI_master_transmit>
	SPI_master_transmit(mask);
     602:	8d 2f       	mov	r24, r29
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	0e 94 77 04 	call	0x8ee	; 0x8ee <SPI_master_transmit>
	SPI_master_transmit(data);
     60a:	8c 2f       	mov	r24, r28
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	0e 94 77 04 	call	0x8ee	; 0x8ee <SPI_master_transmit>
	PORTB |= (1 << PB4);
     612:	c4 9a       	sbi	0x18, 4	; 24
     614:	df 91       	pop	r29
     616:	cf 91       	pop	r28
     618:	1f 91       	pop	r17
     61a:	08 95       	ret

0000061c <MCP_set_mode>:
			break;
		default:
			break;
	}
	
	MCP_modify_bit(MCP_CANCTRL, mask, mode);
     61c:	48 2f       	mov	r20, r24
     61e:	60 ee       	ldi	r22, 0xE0	; 224
     620:	8f e0       	ldi	r24, 0x0F	; 15
     622:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <MCP_modify_bit>
     626:	08 95       	ret

00000628 <MCP_init>:
#include "MCP2515.h"
#include "mcp.h"

void MCP_init(void)
{
	MCP_reset();
     628:	0e 94 b5 02 	call	0x56a	; 0x56a <MCP_reset>
	
	MCP_modify_bit(MCP_RXB0CTRL, 0b01100000, 0xFF); // Turns masks/filters off for RX0
     62c:	4f ef       	ldi	r20, 0xFF	; 255
     62e:	60 e6       	ldi	r22, 0x60	; 96
     630:	80 e6       	ldi	r24, 0x60	; 96
     632:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <MCP_modify_bit>
	MCP_modify_bit(MCP_RXB1CTRL, 0b01100000, 0xFF); // Turns masks/filters off for RX1
     636:	4f ef       	ldi	r20, 0xFF	; 255
     638:	60 e6       	ldi	r22, 0x60	; 96
     63a:	80 e7       	ldi	r24, 0x70	; 112
     63c:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <MCP_modify_bit>
	MCP_set_mode(MODE_LOOPBACK); // Sets loopback operation mode for testing
     640:	80 e4       	ldi	r24, 0x40	; 64
     642:	0e 94 0e 03 	call	0x61c	; 0x61c <MCP_set_mode>
     646:	08 95       	ret

00000648 <OLED_goto_line>:
}

void OLED_write_c(char chr)
{
	volatile char *oled = (char *) 0x1000;
	oled[0] = chr;
     648:	e0 e0       	ldi	r30, 0x00	; 0
     64a:	f0 e1       	ldi	r31, 0x10	; 16
     64c:	92 e2       	ldi	r25, 0x22	; 34
     64e:	90 83       	st	Z, r25
     650:	80 83       	st	Z, r24
     652:	87 e0       	ldi	r24, 0x07	; 7
     654:	80 83       	st	Z, r24
     656:	08 95       	ret

00000658 <OLED_clear_line>:
	OLED_write_c(0x07);
}

void OLED_clear_line(uint8_t line)
{
	OLED_goto_line(line);
     658:	0e 94 24 03 	call	0x648	; 0x648 <OLED_goto_line>
}

void OLED_write_c(char chr)
{
	volatile char *oled = (char *) 0x1000;
	oled[0] = chr;
     65c:	e0 e0       	ldi	r30, 0x00	; 0
     65e:	f0 e1       	ldi	r31, 0x10	; 16
     660:	81 e2       	ldi	r24, 0x21	; 33
     662:	80 83       	st	Z, r24
     664:	10 82       	st	Z, r1
     666:	8f e7       	ldi	r24, 0x7F	; 127
     668:	80 83       	st	Z, r24
     66a:	80 e8       	ldi	r24, 0x80	; 128
     66c:	90 e0       	ldi	r25, 0x00	; 0
}

void OLED_write_d(char chr)
{
	volatile char *oled = (char *) 0x1200;
	oled[0] = chr;
     66e:	e0 e0       	ldi	r30, 0x00	; 0
     670:	f2 e1       	ldi	r31, 0x12	; 18
     672:	10 82       	st	Z, r1
     674:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_c(0x21);
	OLED_write_c(0x00);
	OLED_write_c(0x7F);

	/* Write zeros to line */
	for (int i = 0; i < 128; i++) {
     676:	00 97       	sbiw	r24, 0x00	; 0
     678:	e1 f7       	brne	.-8      	; 0x672 <OLED_clear_line+0x1a>
		OLED_write_d(0x00);
	}
}
     67a:	08 95       	ret

0000067c <OLED_pos>:
}

void OLED_write_c(char chr)
{
	volatile char *oled = (char *) 0x1000;
	oled[0] = chr;
     67c:	e0 e0       	ldi	r30, 0x00	; 0
     67e:	f0 e1       	ldi	r31, 0x10	; 16
     680:	92 e2       	ldi	r25, 0x22	; 34
     682:	90 83       	st	Z, r25
     684:	80 83       	st	Z, r24
     686:	87 e0       	ldi	r24, 0x07	; 7
     688:	80 83       	st	Z, r24
     68a:	81 e2       	ldi	r24, 0x21	; 33
     68c:	80 83       	st	Z, r24
     68e:	60 83       	st	Z, r22
     690:	8f e7       	ldi	r24, 0x7F	; 127
     692:	80 83       	st	Z, r24
     694:	08 95       	ret

00000696 <OLED_reset>:
	OLED_write_c(column);
	OLED_write_c(0x7F);
}

void OLED_reset(void)
{
     696:	cf 93       	push	r28
	for (uint8_t i = 0; i < 8; i++) {
     698:	c0 e0       	ldi	r28, 0x00	; 0
		OLED_clear_line(i);
     69a:	8c 2f       	mov	r24, r28
     69c:	0e 94 2c 03 	call	0x658	; 0x658 <OLED_clear_line>
	OLED_write_c(0x7F);
}

void OLED_reset(void)
{
	for (uint8_t i = 0; i < 8; i++) {
     6a0:	cf 5f       	subi	r28, 0xFF	; 255
     6a2:	c8 30       	cpi	r28, 0x08	; 8
     6a4:	d1 f7       	brne	.-12     	; 0x69a <OLED_reset+0x4>
		OLED_clear_line(i);
	}
	OLED_pos(0,0);
     6a6:	60 e0       	ldi	r22, 0x00	; 0
     6a8:	80 e0       	ldi	r24, 0x00	; 0
     6aa:	0e 94 3e 03 	call	0x67c	; 0x67c <OLED_pos>

	// Redraw from SRAM?
}
     6ae:	cf 91       	pop	r28
     6b0:	08 95       	ret

000006b2 <OLED_init>:
}

void OLED_write_c(char chr)
{
	volatile char *oled = (char *) 0x1000;
	oled[0] = chr;
     6b2:	e0 e0       	ldi	r30, 0x00	; 0
     6b4:	f0 e1       	ldi	r31, 0x10	; 16
     6b6:	8e ea       	ldi	r24, 0xAE	; 174
     6b8:	80 83       	st	Z, r24
     6ba:	81 ea       	ldi	r24, 0xA1	; 161
     6bc:	80 83       	st	Z, r24
     6be:	8a ed       	ldi	r24, 0xDA	; 218
     6c0:	80 83       	st	Z, r24
     6c2:	82 e1       	ldi	r24, 0x12	; 18
     6c4:	80 83       	st	Z, r24
     6c6:	88 ec       	ldi	r24, 0xC8	; 200
     6c8:	80 83       	st	Z, r24
     6ca:	88 ea       	ldi	r24, 0xA8	; 168
     6cc:	80 83       	st	Z, r24
     6ce:	8f e3       	ldi	r24, 0x3F	; 63
     6d0:	80 83       	st	Z, r24
     6d2:	85 ed       	ldi	r24, 0xD5	; 213
     6d4:	80 83       	st	Z, r24
     6d6:	80 e8       	ldi	r24, 0x80	; 128
     6d8:	80 83       	st	Z, r24
     6da:	81 e8       	ldi	r24, 0x81	; 129
     6dc:	80 83       	st	Z, r24
     6de:	80 e5       	ldi	r24, 0x50	; 80
     6e0:	80 83       	st	Z, r24
     6e2:	89 ed       	ldi	r24, 0xD9	; 217
     6e4:	80 83       	st	Z, r24
     6e6:	81 e2       	ldi	r24, 0x21	; 33
     6e8:	80 83       	st	Z, r24
     6ea:	80 e2       	ldi	r24, 0x20	; 32
     6ec:	80 83       	st	Z, r24
     6ee:	10 82       	st	Z, r1
     6f0:	8b ed       	ldi	r24, 0xDB	; 219
     6f2:	80 83       	st	Z, r24
     6f4:	80 e3       	ldi	r24, 0x30	; 48
     6f6:	80 83       	st	Z, r24
     6f8:	8d ea       	ldi	r24, 0xAD	; 173
     6fa:	80 83       	st	Z, r24
     6fc:	10 82       	st	Z, r1
     6fe:	84 ea       	ldi	r24, 0xA4	; 164
     700:	80 83       	st	Z, r24
     702:	86 ea       	ldi	r24, 0xA6	; 166
     704:	80 83       	st	Z, r24
     706:	8f ea       	ldi	r24, 0xAF	; 175
     708:	80 83       	st	Z, r24
     70a:	80 e0       	ldi	r24, 0x00	; 0
     70c:	92 e0       	ldi	r25, 0x02	; 2
}

void OLED_write_d(char chr)
{
	volatile char *oled = (char *) 0x1200;
	oled[0] = chr;
     70e:	e0 e0       	ldi	r30, 0x00	; 0
     710:	f2 e1       	ldi	r31, 0x12	; 18
     712:	2f ef       	ldi	r18, 0xFF	; 255
     714:	20 83       	st	Z, r18
     716:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_c(0x00);
	OLED_write_c(0xa4); //out follows RAM content
	OLED_write_c(0xa6); //set normal display
	OLED_write_c(0xaf); // display on
	
	for (int i = 0; i < 512; i++)
     718:	00 97       	sbiw	r24, 0x00	; 0
     71a:	e1 f7       	brne	.-8      	; 0x714 <OLED_init+0x62>
	{
		OLED_write_d(0xFF);
	}
	
	OLED_reset();
     71c:	0e 94 4b 03 	call	0x696	; 0x696 <OLED_reset>
     720:	08 95       	ret

00000722 <OLED_print_string>:

	// Redraw from SRAM?
}

void OLED_print_string(char* str)
{
     722:	cf 93       	push	r28
     724:	df 93       	push	r29
	uint8_t c;
	uint8_t font_width = 4; // Use sizeof array here
	uint8_t i = 0;
	while (str[i] != '\0') {
     726:	fc 01       	movw	r30, r24
     728:	20 81       	ld	r18, Z
     72a:	22 23       	and	r18, r18
     72c:	11 f1       	breq	.+68     	; 0x772 <OLED_print_string+0x50>
     72e:	dc 01       	movw	r26, r24

void OLED_print_string(char* str)
{
	uint8_t c;
	uint8_t font_width = 4; // Use sizeof array here
	uint8_t i = 0;
     730:	40 e0       	ldi	r20, 0x00	; 0

	// Redraw from SRAM?
}

void OLED_print_string(char* str)
{
     732:	60 e0       	ldi	r22, 0x00	; 0
     734:	50 e0       	ldi	r21, 0x00	; 0
}

void OLED_write_d(char chr)
{
	volatile char *oled = (char *) 0x1200;
	oled[0] = chr;
     736:	c0 e0       	ldi	r28, 0x00	; 0
     738:	d2 e1       	ldi	r29, 0x12	; 18
     73a:	18 c0       	rjmp	.+48     	; 0x76c <OLED_print_string+0x4a>
	uint8_t c;
	uint8_t font_width = 4; // Use sizeof array here
	uint8_t i = 0;
	while (str[i] != '\0') {
		for (uint8_t j = 0; j < font_width; j++) {
			c = pgm_read_byte_near(font[str[i]-32] + j);
     73c:	ec 91       	ld	r30, X
     73e:	f0 e0       	ldi	r31, 0x00	; 0
     740:	ee 0f       	add	r30, r30
     742:	ff 1f       	adc	r31, r31
     744:	ee 0f       	add	r30, r30
     746:	ff 1f       	adc	r31, r31
     748:	e0 51       	subi	r30, 0x10	; 16
     74a:	f0 40       	sbci	r31, 0x00	; 0
     74c:	e2 0f       	add	r30, r18
     74e:	f3 1f       	adc	r31, r19
     750:	e4 91       	lpm	r30, Z
}

void OLED_write_d(char chr)
{
	volatile char *oled = (char *) 0x1200;
	oled[0] = chr;
     752:	e8 83       	st	Y, r30
     754:	2f 5f       	subi	r18, 0xFF	; 255
     756:	3f 4f       	sbci	r19, 0xFF	; 255
{
	uint8_t c;
	uint8_t font_width = 4; // Use sizeof array here
	uint8_t i = 0;
	while (str[i] != '\0') {
		for (uint8_t j = 0; j < font_width; j++) {
     758:	24 30       	cpi	r18, 0x04	; 4
     75a:	31 05       	cpc	r19, r1
     75c:	79 f7       	brne	.-34     	; 0x73c <OLED_print_string+0x1a>
			c = pgm_read_byte_near(font[str[i]-32] + j);
			OLED_write_d(c);
		}
		i++;
     75e:	4f 5f       	subi	r20, 0xFF	; 255
void OLED_print_string(char* str)
{
	uint8_t c;
	uint8_t font_width = 4; // Use sizeof array here
	uint8_t i = 0;
	while (str[i] != '\0') {
     760:	dc 01       	movw	r26, r24
     762:	a4 0f       	add	r26, r20
     764:	b1 1d       	adc	r27, r1
     766:	2c 91       	ld	r18, X
     768:	22 23       	and	r18, r18
     76a:	19 f0       	breq	.+6      	; 0x772 <OLED_print_string+0x50>

	// Redraw from SRAM?
}

void OLED_print_string(char* str)
{
     76c:	26 2f       	mov	r18, r22
     76e:	35 2f       	mov	r19, r21
     770:	e5 cf       	rjmp	.-54     	; 0x73c <OLED_print_string+0x1a>
			c = pgm_read_byte_near(font[str[i]-32] + j);
			OLED_write_d(c);
		}
		i++;
	}
}
     772:	df 91       	pop	r29
     774:	cf 91       	pop	r28
     776:	08 95       	ret

00000778 <OLED_print_arrow>:

void OLED_print_arrow(uint8_t row, uint8_t col)
{
	OLED_pos(row, col);
     778:	0e 94 3e 03 	call	0x67c	; 0x67c <OLED_pos>
}

void OLED_write_d(char chr)
{
	volatile char *oled = (char *) 0x1200;
	oled[0] = chr;
     77c:	e0 e0       	ldi	r30, 0x00	; 0
     77e:	f2 e1       	ldi	r31, 0x12	; 18
     780:	88 e1       	ldi	r24, 0x18	; 24
     782:	80 83       	st	Z, r24
     784:	80 83       	st	Z, r24
     786:	9e e7       	ldi	r25, 0x7E	; 126
     788:	90 83       	st	Z, r25
     78a:	9c e3       	ldi	r25, 0x3C	; 60
     78c:	90 83       	st	Z, r25
     78e:	80 83       	st	Z, r24
     790:	08 95       	ret

00000792 <OLED_move_arrow>:
	OLED_write_d(0b00111100);
	OLED_write_d(0b00011000);
}

void OLED_move_arrow(uint8_t newRow, uint8_t newCol, uint8_t currentRow, uint8_t currentCol)
{
     792:	cf 93       	push	r28
     794:	df 93       	push	r29
     796:	c8 2f       	mov	r28, r24
     798:	d6 2f       	mov	r29, r22
     79a:	84 2f       	mov	r24, r20
	OLED_pos(currentRow, currentCol);
     79c:	62 2f       	mov	r22, r18
     79e:	0e 94 3e 03 	call	0x67c	; 0x67c <OLED_pos>
}

void OLED_write_d(char chr)
{
	volatile char *oled = (char *) 0x1200;
	oled[0] = chr;
     7a2:	e0 e0       	ldi	r30, 0x00	; 0
     7a4:	f2 e1       	ldi	r31, 0x12	; 18
     7a6:	10 82       	st	Z, r1
     7a8:	10 82       	st	Z, r1
     7aa:	10 82       	st	Z, r1
     7ac:	10 82       	st	Z, r1
     7ae:	10 82       	st	Z, r1
	OLED_write_d(0b00000000);
	OLED_write_d(0b00000000);
	OLED_write_d(0b00000000);
	OLED_write_d(0b00000000);
	
	OLED_print_arrow(newRow, newCol);
     7b0:	6d 2f       	mov	r22, r29
     7b2:	8c 2f       	mov	r24, r28
     7b4:	0e 94 bc 03 	call	0x778	; 0x778 <OLED_print_arrow>
}
     7b8:	df 91       	pop	r29
     7ba:	cf 91       	pop	r28
     7bc:	08 95       	ret

000007be <OLED_create_node>:


menuNode *OLED_create_node(char* name, menuNode* parent)
{
     7be:	cf 93       	push	r28
     7c0:	df 93       	push	r29
     7c2:	ec 01       	movw	r28, r24
	menuNode* ret = (menuNode*) malloc(sizeof(menuNode));
     7c4:	84 e1       	ldi	r24, 0x14	; 20
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	0e 94 5d 06 	call	0xcba	; 0xcba <malloc>
	ret->name = name;
     7cc:	fc 01       	movw	r30, r24
     7ce:	d1 83       	std	Z+1, r29	; 0x01
     7d0:	c0 83       	st	Z, r28
	ret->parent = NULL;
     7d2:	13 82       	std	Z+3, r1	; 0x03
     7d4:	12 82       	std	Z+2, r1	; 0x02
	return ret;
}
     7d6:	df 91       	pop	r29
     7d8:	cf 91       	pop	r28
     7da:	08 95       	ret

000007dc <OLED_generate_menu>:

// Implement function for freeing memory

menuNode *OLED_generate_menu(void)
{	
     7dc:	af 92       	push	r10
     7de:	bf 92       	push	r11
     7e0:	cf 92       	push	r12
     7e2:	df 92       	push	r13
     7e4:	ef 92       	push	r14
     7e6:	ff 92       	push	r15
     7e8:	0f 93       	push	r16
     7ea:	1f 93       	push	r17
     7ec:	cf 93       	push	r28
     7ee:	df 93       	push	r29
	menuNode *mainmenu = OLED_create_node("MAIN MENU", NULL);
     7f0:	60 e0       	ldi	r22, 0x00	; 0
     7f2:	70 e0       	ldi	r23, 0x00	; 0
     7f4:	86 e2       	ldi	r24, 0x26	; 38
     7f6:	92 e0       	ldi	r25, 0x02	; 2
     7f8:	0e 94 df 03 	call	0x7be	; 0x7be <OLED_create_node>
     7fc:	ec 01       	movw	r28, r24
	menuNode *highscores = OLED_create_node("Highscores", mainmenu);
     7fe:	bc 01       	movw	r22, r24
     800:	80 e3       	ldi	r24, 0x30	; 48
     802:	92 e0       	ldi	r25, 0x02	; 2
     804:	0e 94 df 03 	call	0x7be	; 0x7be <OLED_create_node>
     808:	6c 01       	movw	r12, r24
	menuNode *playgame = OLED_create_node("Start new game", mainmenu);
     80a:	be 01       	movw	r22, r28
     80c:	8b e3       	ldi	r24, 0x3B	; 59
     80e:	92 e0       	ldi	r25, 0x02	; 2
     810:	0e 94 df 03 	call	0x7be	; 0x7be <OLED_create_node>
     814:	5c 01       	movw	r10, r24
	menuNode *debugging = OLED_create_node("Debugging", mainmenu);
     816:	be 01       	movw	r22, r28
     818:	8a e4       	ldi	r24, 0x4A	; 74
     81a:	92 e0       	ldi	r25, 0x02	; 2
     81c:	0e 94 df 03 	call	0x7be	; 0x7be <OLED_create_node>
     820:	8c 01       	movw	r16, r24
	menuNode *calibrate = OLED_create_node("Calibrate", mainmenu);
     822:	be 01       	movw	r22, r28
     824:	84 e5       	ldi	r24, 0x54	; 84
     826:	92 e0       	ldi	r25, 0x02	; 2
     828:	0e 94 df 03 	call	0x7be	; 0x7be <OLED_create_node>
     82c:	7c 01       	movw	r14, r24
	menuNode *difficulty = OLED_create_node("Difficulty", mainmenu);
     82e:	be 01       	movw	r22, r28
     830:	8e e5       	ldi	r24, 0x5E	; 94
     832:	92 e0       	ldi	r25, 0x02	; 2
     834:	0e 94 df 03 	call	0x7be	; 0x7be <OLED_create_node>
	calibrate->parent = mainmenu;
	difficulty->parent = mainmenu;
	debugging->parent = mainmenu;
	*/
	
	mainmenu->children[1] = playgame;
     838:	bf 82       	std	Y+7, r11	; 0x07
     83a:	ae 82       	std	Y+6, r10	; 0x06
	mainmenu->children[2] = highscores;
     83c:	d9 86       	std	Y+9, r13	; 0x09
     83e:	c8 86       	std	Y+8, r12	; 0x08
	mainmenu->children[3] = difficulty;
     840:	9b 87       	std	Y+11, r25	; 0x0b
     842:	8a 87       	std	Y+10, r24	; 0x0a
	mainmenu->children[4] = calibrate;
     844:	fd 86       	std	Y+13, r15	; 0x0d
     846:	ec 86       	std	Y+12, r14	; 0x0c
	mainmenu->children[5] = debugging;
     848:	1f 87       	std	Y+15, r17	; 0x0f
     84a:	0e 87       	std	Y+14, r16	; 0x0e
	
	return mainmenu;
}
     84c:	ce 01       	movw	r24, r28
     84e:	df 91       	pop	r29
     850:	cf 91       	pop	r28
     852:	1f 91       	pop	r17
     854:	0f 91       	pop	r16
     856:	ff 90       	pop	r15
     858:	ef 90       	pop	r14
     85a:	df 90       	pop	r13
     85c:	cf 90       	pop	r12
     85e:	bf 90       	pop	r11
     860:	af 90       	pop	r10
     862:	08 95       	ret

00000864 <OLED_print_menu>:

void OLED_print_menu(menuNode *node)
{
     864:	cf 93       	push	r28
     866:	df 93       	push	r29
     868:	ec 01       	movw	r28, r24
	OLED_pos(0,50);
     86a:	62 e3       	ldi	r22, 0x32	; 50
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	0e 94 3e 03 	call	0x67c	; 0x67c <OLED_pos>
	OLED_print_string(node->name);
     872:	88 81       	ld	r24, Y
     874:	99 81       	ldd	r25, Y+1	; 0x01
     876:	0e 94 91 03 	call	0x722	; 0x722 <OLED_print_string>
	//printf("%s\n", node->name);
	OLED_pos(1,50);
     87a:	62 e3       	ldi	r22, 0x32	; 50
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	0e 94 3e 03 	call	0x67c	; 0x67c <OLED_pos>
	OLED_print_string(node->children[1]->name);
     882:	ee 81       	ldd	r30, Y+6	; 0x06
     884:	ff 81       	ldd	r31, Y+7	; 0x07
     886:	80 81       	ld	r24, Z
     888:	91 81       	ldd	r25, Z+1	; 0x01
     88a:	0e 94 91 03 	call	0x722	; 0x722 <OLED_print_string>
	OLED_pos(2,50);
     88e:	62 e3       	ldi	r22, 0x32	; 50
     890:	82 e0       	ldi	r24, 0x02	; 2
     892:	0e 94 3e 03 	call	0x67c	; 0x67c <OLED_pos>
	OLED_print_string(node->children[2]->name);
     896:	e8 85       	ldd	r30, Y+8	; 0x08
     898:	f9 85       	ldd	r31, Y+9	; 0x09
     89a:	80 81       	ld	r24, Z
     89c:	91 81       	ldd	r25, Z+1	; 0x01
     89e:	0e 94 91 03 	call	0x722	; 0x722 <OLED_print_string>
	OLED_pos(3,50);
     8a2:	62 e3       	ldi	r22, 0x32	; 50
     8a4:	83 e0       	ldi	r24, 0x03	; 3
     8a6:	0e 94 3e 03 	call	0x67c	; 0x67c <OLED_pos>
	OLED_print_string(node->children[3]->name);
     8aa:	ea 85       	ldd	r30, Y+10	; 0x0a
     8ac:	fb 85       	ldd	r31, Y+11	; 0x0b
     8ae:	80 81       	ld	r24, Z
     8b0:	91 81       	ldd	r25, Z+1	; 0x01
     8b2:	0e 94 91 03 	call	0x722	; 0x722 <OLED_print_string>
	OLED_pos(4,50);
     8b6:	62 e3       	ldi	r22, 0x32	; 50
     8b8:	84 e0       	ldi	r24, 0x04	; 4
     8ba:	0e 94 3e 03 	call	0x67c	; 0x67c <OLED_pos>
	OLED_print_string(node->children[4]->name);
     8be:	ec 85       	ldd	r30, Y+12	; 0x0c
     8c0:	fd 85       	ldd	r31, Y+13	; 0x0d
     8c2:	80 81       	ld	r24, Z
     8c4:	91 81       	ldd	r25, Z+1	; 0x01
     8c6:	0e 94 91 03 	call	0x722	; 0x722 <OLED_print_string>
	OLED_pos(5,50);
     8ca:	62 e3       	ldi	r22, 0x32	; 50
     8cc:	85 e0       	ldi	r24, 0x05	; 5
     8ce:	0e 94 3e 03 	call	0x67c	; 0x67c <OLED_pos>
	OLED_print_string(node->children[5]->name);
     8d2:	ee 85       	ldd	r30, Y+14	; 0x0e
     8d4:	ff 85       	ldd	r31, Y+15	; 0x0f
     8d6:	80 81       	ld	r24, Z
     8d8:	91 81       	ldd	r25, Z+1	; 0x01
     8da:	0e 94 91 03 	call	0x722	; 0x722 <OLED_print_string>
     8de:	df 91       	pop	r29
     8e0:	cf 91       	pop	r28
     8e2:	08 95       	ret

000008e4 <SPI_master_init>:
#include <avr/delay.h>

void SPI_master_init(void)
{
	/* Set ~SS, MOSI and SCK output, all others input */
	DDRB = (1 << PB4)|(1 << PB5)|(1 << PB7);
     8e4:	80 eb       	ldi	r24, 0xB0	; 176
     8e6:	87 bb       	out	0x17, r24	; 23
	
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1 << SPE)|(1 << MSTR)|(1 << SPR0);
     8e8:	81 e5       	ldi	r24, 0x51	; 81
     8ea:	8d b9       	out	0x0d, r24	; 13
     8ec:	08 95       	ret

000008ee <SPI_master_transmit>:
}

void SPI_master_transmit(char cData)
{
	/* Start transmission */
	SPDR = cData;
     8ee:	8f b9       	out	0x0f, r24	; 15
	
	/* Wait for transmission to complete */
	while (!(SPSR & (1 << SPIF))) {
     8f0:	77 9b       	sbis	0x0e, 7	; 14
     8f2:	fe cf       	rjmp	.-4      	; 0x8f0 <SPI_master_transmit+0x2>
		;
	}
	
	// Interrupt here?
}
     8f4:	08 95       	ret

000008f6 <USART_init>:
#include <avr/io.h>

void USART_init(unsigned int ubrr)
{
	/* Set baud rate*/
	UBRR0H = (unsigned char)(ubrr >> 8 );
     8f6:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
     8f8:	89 b9       	out	0x09, r24	; 9
	/*Enable receiver and transmitter*/
	UCSR0B = (1 << RXEN0)|(1 << TXEN0);
     8fa:	88 e1       	ldi	r24, 0x18	; 24
     8fc:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1 << URSEL0)|(1 << USBS0)|(3 << UCSZ10);
     8fe:	8e e8       	ldi	r24, 0x8E	; 142
     900:	80 bd       	out	0x20, r24	; 32
     902:	08 95       	ret

00000904 <USART_transmit>:
}

void USART_transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while (!( UCSR0A & (1 << UDRE0)))
     904:	5d 9b       	sbis	0x0b, 5	; 11
     906:	fe cf       	rjmp	.-4      	; 0x904 <USART_transmit>
		;
	/* Put data into buffer, sends the data */
	UDR0 = data;
     908:	8c b9       	out	0x0c, r24	; 12
     90a:	08 95       	ret

0000090c <USART_receive>:
}

unsigned char USART_receive(void)
{
	/* Wait for data to be received */
	while ( !(UCSR0A & ( 1 << RXC0)) )
     90c:	5f 9b       	sbis	0x0b, 7	; 11
     90e:	fe cf       	rjmp	.-4      	; 0x90c <USART_receive>
		;
	/* Get and return received data from buffer */
	return UDR0;
     910:	8c b1       	in	r24, 0x0c	; 12
}
     912:	08 95       	ret

00000914 <__divsf3>:
     914:	0c d0       	rcall	.+24     	; 0x92e <__divsf3x>
     916:	eb c0       	rjmp	.+470    	; 0xaee <__fp_round>
     918:	e3 d0       	rcall	.+454    	; 0xae0 <__fp_pscB>
     91a:	40 f0       	brcs	.+16     	; 0x92c <__divsf3+0x18>
     91c:	da d0       	rcall	.+436    	; 0xad2 <__fp_pscA>
     91e:	30 f0       	brcs	.+12     	; 0x92c <__divsf3+0x18>
     920:	21 f4       	brne	.+8      	; 0x92a <__divsf3+0x16>
     922:	5f 3f       	cpi	r21, 0xFF	; 255
     924:	19 f0       	breq	.+6      	; 0x92c <__divsf3+0x18>
     926:	cc c0       	rjmp	.+408    	; 0xac0 <__fp_inf>
     928:	51 11       	cpse	r21, r1
     92a:	15 c1       	rjmp	.+554    	; 0xb56 <__fp_szero>
     92c:	cf c0       	rjmp	.+414    	; 0xacc <__fp_nan>

0000092e <__divsf3x>:
     92e:	f0 d0       	rcall	.+480    	; 0xb10 <__fp_split3>
     930:	98 f3       	brcs	.-26     	; 0x918 <__divsf3+0x4>

00000932 <__divsf3_pse>:
     932:	99 23       	and	r25, r25
     934:	c9 f3       	breq	.-14     	; 0x928 <__divsf3+0x14>
     936:	55 23       	and	r21, r21
     938:	b1 f3       	breq	.-20     	; 0x926 <__divsf3+0x12>
     93a:	95 1b       	sub	r25, r21
     93c:	55 0b       	sbc	r21, r21
     93e:	bb 27       	eor	r27, r27
     940:	aa 27       	eor	r26, r26
     942:	62 17       	cp	r22, r18
     944:	73 07       	cpc	r23, r19
     946:	84 07       	cpc	r24, r20
     948:	38 f0       	brcs	.+14     	; 0x958 <__divsf3_pse+0x26>
     94a:	9f 5f       	subi	r25, 0xFF	; 255
     94c:	5f 4f       	sbci	r21, 0xFF	; 255
     94e:	22 0f       	add	r18, r18
     950:	33 1f       	adc	r19, r19
     952:	44 1f       	adc	r20, r20
     954:	aa 1f       	adc	r26, r26
     956:	a9 f3       	breq	.-22     	; 0x942 <__divsf3_pse+0x10>
     958:	33 d0       	rcall	.+102    	; 0x9c0 <__divsf3_pse+0x8e>
     95a:	0e 2e       	mov	r0, r30
     95c:	3a f0       	brmi	.+14     	; 0x96c <__divsf3_pse+0x3a>
     95e:	e0 e8       	ldi	r30, 0x80	; 128
     960:	30 d0       	rcall	.+96     	; 0x9c2 <__divsf3_pse+0x90>
     962:	91 50       	subi	r25, 0x01	; 1
     964:	50 40       	sbci	r21, 0x00	; 0
     966:	e6 95       	lsr	r30
     968:	00 1c       	adc	r0, r0
     96a:	ca f7       	brpl	.-14     	; 0x95e <__divsf3_pse+0x2c>
     96c:	29 d0       	rcall	.+82     	; 0x9c0 <__divsf3_pse+0x8e>
     96e:	fe 2f       	mov	r31, r30
     970:	27 d0       	rcall	.+78     	; 0x9c0 <__divsf3_pse+0x8e>
     972:	66 0f       	add	r22, r22
     974:	77 1f       	adc	r23, r23
     976:	88 1f       	adc	r24, r24
     978:	bb 1f       	adc	r27, r27
     97a:	26 17       	cp	r18, r22
     97c:	37 07       	cpc	r19, r23
     97e:	48 07       	cpc	r20, r24
     980:	ab 07       	cpc	r26, r27
     982:	b0 e8       	ldi	r27, 0x80	; 128
     984:	09 f0       	breq	.+2      	; 0x988 <__divsf3_pse+0x56>
     986:	bb 0b       	sbc	r27, r27
     988:	80 2d       	mov	r24, r0
     98a:	bf 01       	movw	r22, r30
     98c:	ff 27       	eor	r31, r31
     98e:	93 58       	subi	r25, 0x83	; 131
     990:	5f 4f       	sbci	r21, 0xFF	; 255
     992:	2a f0       	brmi	.+10     	; 0x99e <__divsf3_pse+0x6c>
     994:	9e 3f       	cpi	r25, 0xFE	; 254
     996:	51 05       	cpc	r21, r1
     998:	68 f0       	brcs	.+26     	; 0x9b4 <__divsf3_pse+0x82>
     99a:	92 c0       	rjmp	.+292    	; 0xac0 <__fp_inf>
     99c:	dc c0       	rjmp	.+440    	; 0xb56 <__fp_szero>
     99e:	5f 3f       	cpi	r21, 0xFF	; 255
     9a0:	ec f3       	brlt	.-6      	; 0x99c <__divsf3_pse+0x6a>
     9a2:	98 3e       	cpi	r25, 0xE8	; 232
     9a4:	dc f3       	brlt	.-10     	; 0x99c <__divsf3_pse+0x6a>
     9a6:	86 95       	lsr	r24
     9a8:	77 95       	ror	r23
     9aa:	67 95       	ror	r22
     9ac:	b7 95       	ror	r27
     9ae:	f7 95       	ror	r31
     9b0:	9f 5f       	subi	r25, 0xFF	; 255
     9b2:	c9 f7       	brne	.-14     	; 0x9a6 <__divsf3_pse+0x74>
     9b4:	88 0f       	add	r24, r24
     9b6:	91 1d       	adc	r25, r1
     9b8:	96 95       	lsr	r25
     9ba:	87 95       	ror	r24
     9bc:	97 f9       	bld	r25, 7
     9be:	08 95       	ret
     9c0:	e1 e0       	ldi	r30, 0x01	; 1
     9c2:	66 0f       	add	r22, r22
     9c4:	77 1f       	adc	r23, r23
     9c6:	88 1f       	adc	r24, r24
     9c8:	bb 1f       	adc	r27, r27
     9ca:	62 17       	cp	r22, r18
     9cc:	73 07       	cpc	r23, r19
     9ce:	84 07       	cpc	r24, r20
     9d0:	ba 07       	cpc	r27, r26
     9d2:	20 f0       	brcs	.+8      	; 0x9dc <__divsf3_pse+0xaa>
     9d4:	62 1b       	sub	r22, r18
     9d6:	73 0b       	sbc	r23, r19
     9d8:	84 0b       	sbc	r24, r20
     9da:	ba 0b       	sbc	r27, r26
     9dc:	ee 1f       	adc	r30, r30
     9de:	88 f7       	brcc	.-30     	; 0x9c2 <__divsf3_pse+0x90>
     9e0:	e0 95       	com	r30
     9e2:	08 95       	ret

000009e4 <__fixsfsi>:
     9e4:	04 d0       	rcall	.+8      	; 0x9ee <__fixunssfsi>
     9e6:	68 94       	set
     9e8:	b1 11       	cpse	r27, r1
     9ea:	b5 c0       	rjmp	.+362    	; 0xb56 <__fp_szero>
     9ec:	08 95       	ret

000009ee <__fixunssfsi>:
     9ee:	98 d0       	rcall	.+304    	; 0xb20 <__fp_splitA>
     9f0:	88 f0       	brcs	.+34     	; 0xa14 <__fixunssfsi+0x26>
     9f2:	9f 57       	subi	r25, 0x7F	; 127
     9f4:	90 f0       	brcs	.+36     	; 0xa1a <__fixunssfsi+0x2c>
     9f6:	b9 2f       	mov	r27, r25
     9f8:	99 27       	eor	r25, r25
     9fa:	b7 51       	subi	r27, 0x17	; 23
     9fc:	a0 f0       	brcs	.+40     	; 0xa26 <__fixunssfsi+0x38>
     9fe:	d1 f0       	breq	.+52     	; 0xa34 <__fixunssfsi+0x46>
     a00:	66 0f       	add	r22, r22
     a02:	77 1f       	adc	r23, r23
     a04:	88 1f       	adc	r24, r24
     a06:	99 1f       	adc	r25, r25
     a08:	1a f0       	brmi	.+6      	; 0xa10 <__fixunssfsi+0x22>
     a0a:	ba 95       	dec	r27
     a0c:	c9 f7       	brne	.-14     	; 0xa00 <__fixunssfsi+0x12>
     a0e:	12 c0       	rjmp	.+36     	; 0xa34 <__fixunssfsi+0x46>
     a10:	b1 30       	cpi	r27, 0x01	; 1
     a12:	81 f0       	breq	.+32     	; 0xa34 <__fixunssfsi+0x46>
     a14:	9f d0       	rcall	.+318    	; 0xb54 <__fp_zero>
     a16:	b1 e0       	ldi	r27, 0x01	; 1
     a18:	08 95       	ret
     a1a:	9c c0       	rjmp	.+312    	; 0xb54 <__fp_zero>
     a1c:	67 2f       	mov	r22, r23
     a1e:	78 2f       	mov	r23, r24
     a20:	88 27       	eor	r24, r24
     a22:	b8 5f       	subi	r27, 0xF8	; 248
     a24:	39 f0       	breq	.+14     	; 0xa34 <__fixunssfsi+0x46>
     a26:	b9 3f       	cpi	r27, 0xF9	; 249
     a28:	cc f3       	brlt	.-14     	; 0xa1c <__fixunssfsi+0x2e>
     a2a:	86 95       	lsr	r24
     a2c:	77 95       	ror	r23
     a2e:	67 95       	ror	r22
     a30:	b3 95       	inc	r27
     a32:	d9 f7       	brne	.-10     	; 0xa2a <__fixunssfsi+0x3c>
     a34:	3e f4       	brtc	.+14     	; 0xa44 <__fixunssfsi+0x56>
     a36:	90 95       	com	r25
     a38:	80 95       	com	r24
     a3a:	70 95       	com	r23
     a3c:	61 95       	neg	r22
     a3e:	7f 4f       	sbci	r23, 0xFF	; 255
     a40:	8f 4f       	sbci	r24, 0xFF	; 255
     a42:	9f 4f       	sbci	r25, 0xFF	; 255
     a44:	08 95       	ret

00000a46 <__floatunsisf>:
     a46:	e8 94       	clt
     a48:	09 c0       	rjmp	.+18     	; 0xa5c <__floatsisf+0x12>

00000a4a <__floatsisf>:
     a4a:	97 fb       	bst	r25, 7
     a4c:	3e f4       	brtc	.+14     	; 0xa5c <__floatsisf+0x12>
     a4e:	90 95       	com	r25
     a50:	80 95       	com	r24
     a52:	70 95       	com	r23
     a54:	61 95       	neg	r22
     a56:	7f 4f       	sbci	r23, 0xFF	; 255
     a58:	8f 4f       	sbci	r24, 0xFF	; 255
     a5a:	9f 4f       	sbci	r25, 0xFF	; 255
     a5c:	99 23       	and	r25, r25
     a5e:	a9 f0       	breq	.+42     	; 0xa8a <__floatsisf+0x40>
     a60:	f9 2f       	mov	r31, r25
     a62:	96 e9       	ldi	r25, 0x96	; 150
     a64:	bb 27       	eor	r27, r27
     a66:	93 95       	inc	r25
     a68:	f6 95       	lsr	r31
     a6a:	87 95       	ror	r24
     a6c:	77 95       	ror	r23
     a6e:	67 95       	ror	r22
     a70:	b7 95       	ror	r27
     a72:	f1 11       	cpse	r31, r1
     a74:	f8 cf       	rjmp	.-16     	; 0xa66 <__floatsisf+0x1c>
     a76:	fa f4       	brpl	.+62     	; 0xab6 <__floatsisf+0x6c>
     a78:	bb 0f       	add	r27, r27
     a7a:	11 f4       	brne	.+4      	; 0xa80 <__floatsisf+0x36>
     a7c:	60 ff       	sbrs	r22, 0
     a7e:	1b c0       	rjmp	.+54     	; 0xab6 <__floatsisf+0x6c>
     a80:	6f 5f       	subi	r22, 0xFF	; 255
     a82:	7f 4f       	sbci	r23, 0xFF	; 255
     a84:	8f 4f       	sbci	r24, 0xFF	; 255
     a86:	9f 4f       	sbci	r25, 0xFF	; 255
     a88:	16 c0       	rjmp	.+44     	; 0xab6 <__floatsisf+0x6c>
     a8a:	88 23       	and	r24, r24
     a8c:	11 f0       	breq	.+4      	; 0xa92 <__floatsisf+0x48>
     a8e:	96 e9       	ldi	r25, 0x96	; 150
     a90:	11 c0       	rjmp	.+34     	; 0xab4 <__floatsisf+0x6a>
     a92:	77 23       	and	r23, r23
     a94:	21 f0       	breq	.+8      	; 0xa9e <__floatsisf+0x54>
     a96:	9e e8       	ldi	r25, 0x8E	; 142
     a98:	87 2f       	mov	r24, r23
     a9a:	76 2f       	mov	r23, r22
     a9c:	05 c0       	rjmp	.+10     	; 0xaa8 <__floatsisf+0x5e>
     a9e:	66 23       	and	r22, r22
     aa0:	71 f0       	breq	.+28     	; 0xabe <__floatsisf+0x74>
     aa2:	96 e8       	ldi	r25, 0x86	; 134
     aa4:	86 2f       	mov	r24, r22
     aa6:	70 e0       	ldi	r23, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	2a f0       	brmi	.+10     	; 0xab6 <__floatsisf+0x6c>
     aac:	9a 95       	dec	r25
     aae:	66 0f       	add	r22, r22
     ab0:	77 1f       	adc	r23, r23
     ab2:	88 1f       	adc	r24, r24
     ab4:	da f7       	brpl	.-10     	; 0xaac <__floatsisf+0x62>
     ab6:	88 0f       	add	r24, r24
     ab8:	96 95       	lsr	r25
     aba:	87 95       	ror	r24
     abc:	97 f9       	bld	r25, 7
     abe:	08 95       	ret

00000ac0 <__fp_inf>:
     ac0:	97 f9       	bld	r25, 7
     ac2:	9f 67       	ori	r25, 0x7F	; 127
     ac4:	80 e8       	ldi	r24, 0x80	; 128
     ac6:	70 e0       	ldi	r23, 0x00	; 0
     ac8:	60 e0       	ldi	r22, 0x00	; 0
     aca:	08 95       	ret

00000acc <__fp_nan>:
     acc:	9f ef       	ldi	r25, 0xFF	; 255
     ace:	80 ec       	ldi	r24, 0xC0	; 192
     ad0:	08 95       	ret

00000ad2 <__fp_pscA>:
     ad2:	00 24       	eor	r0, r0
     ad4:	0a 94       	dec	r0
     ad6:	16 16       	cp	r1, r22
     ad8:	17 06       	cpc	r1, r23
     ada:	18 06       	cpc	r1, r24
     adc:	09 06       	cpc	r0, r25
     ade:	08 95       	ret

00000ae0 <__fp_pscB>:
     ae0:	00 24       	eor	r0, r0
     ae2:	0a 94       	dec	r0
     ae4:	12 16       	cp	r1, r18
     ae6:	13 06       	cpc	r1, r19
     ae8:	14 06       	cpc	r1, r20
     aea:	05 06       	cpc	r0, r21
     aec:	08 95       	ret

00000aee <__fp_round>:
     aee:	09 2e       	mov	r0, r25
     af0:	03 94       	inc	r0
     af2:	00 0c       	add	r0, r0
     af4:	11 f4       	brne	.+4      	; 0xafa <__fp_round+0xc>
     af6:	88 23       	and	r24, r24
     af8:	52 f0       	brmi	.+20     	; 0xb0e <__fp_round+0x20>
     afa:	bb 0f       	add	r27, r27
     afc:	40 f4       	brcc	.+16     	; 0xb0e <__fp_round+0x20>
     afe:	bf 2b       	or	r27, r31
     b00:	11 f4       	brne	.+4      	; 0xb06 <__fp_round+0x18>
     b02:	60 ff       	sbrs	r22, 0
     b04:	04 c0       	rjmp	.+8      	; 0xb0e <__fp_round+0x20>
     b06:	6f 5f       	subi	r22, 0xFF	; 255
     b08:	7f 4f       	sbci	r23, 0xFF	; 255
     b0a:	8f 4f       	sbci	r24, 0xFF	; 255
     b0c:	9f 4f       	sbci	r25, 0xFF	; 255
     b0e:	08 95       	ret

00000b10 <__fp_split3>:
     b10:	57 fd       	sbrc	r21, 7
     b12:	90 58       	subi	r25, 0x80	; 128
     b14:	44 0f       	add	r20, r20
     b16:	55 1f       	adc	r21, r21
     b18:	59 f0       	breq	.+22     	; 0xb30 <__fp_splitA+0x10>
     b1a:	5f 3f       	cpi	r21, 0xFF	; 255
     b1c:	71 f0       	breq	.+28     	; 0xb3a <__fp_splitA+0x1a>
     b1e:	47 95       	ror	r20

00000b20 <__fp_splitA>:
     b20:	88 0f       	add	r24, r24
     b22:	97 fb       	bst	r25, 7
     b24:	99 1f       	adc	r25, r25
     b26:	61 f0       	breq	.+24     	; 0xb40 <__fp_splitA+0x20>
     b28:	9f 3f       	cpi	r25, 0xFF	; 255
     b2a:	79 f0       	breq	.+30     	; 0xb4a <__fp_splitA+0x2a>
     b2c:	87 95       	ror	r24
     b2e:	08 95       	ret
     b30:	12 16       	cp	r1, r18
     b32:	13 06       	cpc	r1, r19
     b34:	14 06       	cpc	r1, r20
     b36:	55 1f       	adc	r21, r21
     b38:	f2 cf       	rjmp	.-28     	; 0xb1e <__fp_split3+0xe>
     b3a:	46 95       	lsr	r20
     b3c:	f1 df       	rcall	.-30     	; 0xb20 <__fp_splitA>
     b3e:	08 c0       	rjmp	.+16     	; 0xb50 <__fp_splitA+0x30>
     b40:	16 16       	cp	r1, r22
     b42:	17 06       	cpc	r1, r23
     b44:	18 06       	cpc	r1, r24
     b46:	99 1f       	adc	r25, r25
     b48:	f1 cf       	rjmp	.-30     	; 0xb2c <__fp_splitA+0xc>
     b4a:	86 95       	lsr	r24
     b4c:	71 05       	cpc	r23, r1
     b4e:	61 05       	cpc	r22, r1
     b50:	08 94       	sec
     b52:	08 95       	ret

00000b54 <__fp_zero>:
     b54:	e8 94       	clt

00000b56 <__fp_szero>:
     b56:	bb 27       	eor	r27, r27
     b58:	66 27       	eor	r22, r22
     b5a:	77 27       	eor	r23, r23
     b5c:	cb 01       	movw	r24, r22
     b5e:	97 f9       	bld	r25, 7
     b60:	08 95       	ret

00000b62 <__mulsf3>:
     b62:	0b d0       	rcall	.+22     	; 0xb7a <__mulsf3x>
     b64:	c4 cf       	rjmp	.-120    	; 0xaee <__fp_round>
     b66:	b5 df       	rcall	.-150    	; 0xad2 <__fp_pscA>
     b68:	28 f0       	brcs	.+10     	; 0xb74 <__mulsf3+0x12>
     b6a:	ba df       	rcall	.-140    	; 0xae0 <__fp_pscB>
     b6c:	18 f0       	brcs	.+6      	; 0xb74 <__mulsf3+0x12>
     b6e:	95 23       	and	r25, r21
     b70:	09 f0       	breq	.+2      	; 0xb74 <__mulsf3+0x12>
     b72:	a6 cf       	rjmp	.-180    	; 0xac0 <__fp_inf>
     b74:	ab cf       	rjmp	.-170    	; 0xacc <__fp_nan>
     b76:	11 24       	eor	r1, r1
     b78:	ee cf       	rjmp	.-36     	; 0xb56 <__fp_szero>

00000b7a <__mulsf3x>:
     b7a:	ca df       	rcall	.-108    	; 0xb10 <__fp_split3>
     b7c:	a0 f3       	brcs	.-24     	; 0xb66 <__mulsf3+0x4>

00000b7e <__mulsf3_pse>:
     b7e:	95 9f       	mul	r25, r21
     b80:	d1 f3       	breq	.-12     	; 0xb76 <__mulsf3+0x14>
     b82:	95 0f       	add	r25, r21
     b84:	50 e0       	ldi	r21, 0x00	; 0
     b86:	55 1f       	adc	r21, r21
     b88:	62 9f       	mul	r22, r18
     b8a:	f0 01       	movw	r30, r0
     b8c:	72 9f       	mul	r23, r18
     b8e:	bb 27       	eor	r27, r27
     b90:	f0 0d       	add	r31, r0
     b92:	b1 1d       	adc	r27, r1
     b94:	63 9f       	mul	r22, r19
     b96:	aa 27       	eor	r26, r26
     b98:	f0 0d       	add	r31, r0
     b9a:	b1 1d       	adc	r27, r1
     b9c:	aa 1f       	adc	r26, r26
     b9e:	64 9f       	mul	r22, r20
     ba0:	66 27       	eor	r22, r22
     ba2:	b0 0d       	add	r27, r0
     ba4:	a1 1d       	adc	r26, r1
     ba6:	66 1f       	adc	r22, r22
     ba8:	82 9f       	mul	r24, r18
     baa:	22 27       	eor	r18, r18
     bac:	b0 0d       	add	r27, r0
     bae:	a1 1d       	adc	r26, r1
     bb0:	62 1f       	adc	r22, r18
     bb2:	73 9f       	mul	r23, r19
     bb4:	b0 0d       	add	r27, r0
     bb6:	a1 1d       	adc	r26, r1
     bb8:	62 1f       	adc	r22, r18
     bba:	83 9f       	mul	r24, r19
     bbc:	a0 0d       	add	r26, r0
     bbe:	61 1d       	adc	r22, r1
     bc0:	22 1f       	adc	r18, r18
     bc2:	74 9f       	mul	r23, r20
     bc4:	33 27       	eor	r19, r19
     bc6:	a0 0d       	add	r26, r0
     bc8:	61 1d       	adc	r22, r1
     bca:	23 1f       	adc	r18, r19
     bcc:	84 9f       	mul	r24, r20
     bce:	60 0d       	add	r22, r0
     bd0:	21 1d       	adc	r18, r1
     bd2:	82 2f       	mov	r24, r18
     bd4:	76 2f       	mov	r23, r22
     bd6:	6a 2f       	mov	r22, r26
     bd8:	11 24       	eor	r1, r1
     bda:	9f 57       	subi	r25, 0x7F	; 127
     bdc:	50 40       	sbci	r21, 0x00	; 0
     bde:	8a f0       	brmi	.+34     	; 0xc02 <__mulsf3_pse+0x84>
     be0:	e1 f0       	breq	.+56     	; 0xc1a <__mulsf3_pse+0x9c>
     be2:	88 23       	and	r24, r24
     be4:	4a f0       	brmi	.+18     	; 0xbf8 <__mulsf3_pse+0x7a>
     be6:	ee 0f       	add	r30, r30
     be8:	ff 1f       	adc	r31, r31
     bea:	bb 1f       	adc	r27, r27
     bec:	66 1f       	adc	r22, r22
     bee:	77 1f       	adc	r23, r23
     bf0:	88 1f       	adc	r24, r24
     bf2:	91 50       	subi	r25, 0x01	; 1
     bf4:	50 40       	sbci	r21, 0x00	; 0
     bf6:	a9 f7       	brne	.-22     	; 0xbe2 <__mulsf3_pse+0x64>
     bf8:	9e 3f       	cpi	r25, 0xFE	; 254
     bfa:	51 05       	cpc	r21, r1
     bfc:	70 f0       	brcs	.+28     	; 0xc1a <__mulsf3_pse+0x9c>
     bfe:	60 cf       	rjmp	.-320    	; 0xac0 <__fp_inf>
     c00:	aa cf       	rjmp	.-172    	; 0xb56 <__fp_szero>
     c02:	5f 3f       	cpi	r21, 0xFF	; 255
     c04:	ec f3       	brlt	.-6      	; 0xc00 <__mulsf3_pse+0x82>
     c06:	98 3e       	cpi	r25, 0xE8	; 232
     c08:	dc f3       	brlt	.-10     	; 0xc00 <__mulsf3_pse+0x82>
     c0a:	86 95       	lsr	r24
     c0c:	77 95       	ror	r23
     c0e:	67 95       	ror	r22
     c10:	b7 95       	ror	r27
     c12:	f7 95       	ror	r31
     c14:	e7 95       	ror	r30
     c16:	9f 5f       	subi	r25, 0xFF	; 255
     c18:	c1 f7       	brne	.-16     	; 0xc0a <__mulsf3_pse+0x8c>
     c1a:	fe 2b       	or	r31, r30
     c1c:	88 0f       	add	r24, r24
     c1e:	91 1d       	adc	r25, r1
     c20:	96 95       	lsr	r25
     c22:	87 95       	ror	r24
     c24:	97 f9       	bld	r25, 7
     c26:	08 95       	ret

00000c28 <round>:
     c28:	7b df       	rcall	.-266    	; 0xb20 <__fp_splitA>
     c2a:	e0 f0       	brcs	.+56     	; 0xc64 <round+0x3c>
     c2c:	9e 37       	cpi	r25, 0x7E	; 126
     c2e:	d8 f0       	brcs	.+54     	; 0xc66 <round+0x3e>
     c30:	96 39       	cpi	r25, 0x96	; 150
     c32:	b8 f4       	brcc	.+46     	; 0xc62 <round+0x3a>
     c34:	9e 38       	cpi	r25, 0x8E	; 142
     c36:	48 f4       	brcc	.+18     	; 0xc4a <round+0x22>
     c38:	67 2f       	mov	r22, r23
     c3a:	78 2f       	mov	r23, r24
     c3c:	88 27       	eor	r24, r24
     c3e:	98 5f       	subi	r25, 0xF8	; 248
     c40:	f9 cf       	rjmp	.-14     	; 0xc34 <round+0xc>
     c42:	86 95       	lsr	r24
     c44:	77 95       	ror	r23
     c46:	67 95       	ror	r22
     c48:	93 95       	inc	r25
     c4a:	95 39       	cpi	r25, 0x95	; 149
     c4c:	d0 f3       	brcs	.-12     	; 0xc42 <round+0x1a>
     c4e:	b6 2f       	mov	r27, r22
     c50:	b1 70       	andi	r27, 0x01	; 1
     c52:	6b 0f       	add	r22, r27
     c54:	71 1d       	adc	r23, r1
     c56:	81 1d       	adc	r24, r1
     c58:	20 f4       	brcc	.+8      	; 0xc62 <round+0x3a>
     c5a:	87 95       	ror	r24
     c5c:	77 95       	ror	r23
     c5e:	67 95       	ror	r22
     c60:	93 95       	inc	r25
     c62:	02 c0       	rjmp	.+4      	; 0xc68 <__fp_mintl>
     c64:	1c c0       	rjmp	.+56     	; 0xc9e <__fp_mpack>
     c66:	77 cf       	rjmp	.-274    	; 0xb56 <__fp_szero>

00000c68 <__fp_mintl>:
     c68:	88 23       	and	r24, r24
     c6a:	71 f4       	brne	.+28     	; 0xc88 <__fp_mintl+0x20>
     c6c:	77 23       	and	r23, r23
     c6e:	21 f0       	breq	.+8      	; 0xc78 <__fp_mintl+0x10>
     c70:	98 50       	subi	r25, 0x08	; 8
     c72:	87 2b       	or	r24, r23
     c74:	76 2f       	mov	r23, r22
     c76:	07 c0       	rjmp	.+14     	; 0xc86 <__fp_mintl+0x1e>
     c78:	66 23       	and	r22, r22
     c7a:	11 f4       	brne	.+4      	; 0xc80 <__fp_mintl+0x18>
     c7c:	99 27       	eor	r25, r25
     c7e:	0d c0       	rjmp	.+26     	; 0xc9a <__fp_mintl+0x32>
     c80:	90 51       	subi	r25, 0x10	; 16
     c82:	86 2b       	or	r24, r22
     c84:	70 e0       	ldi	r23, 0x00	; 0
     c86:	60 e0       	ldi	r22, 0x00	; 0
     c88:	2a f0       	brmi	.+10     	; 0xc94 <__fp_mintl+0x2c>
     c8a:	9a 95       	dec	r25
     c8c:	66 0f       	add	r22, r22
     c8e:	77 1f       	adc	r23, r23
     c90:	88 1f       	adc	r24, r24
     c92:	da f7       	brpl	.-10     	; 0xc8a <__fp_mintl+0x22>
     c94:	88 0f       	add	r24, r24
     c96:	96 95       	lsr	r25
     c98:	87 95       	ror	r24
     c9a:	97 f9       	bld	r25, 7
     c9c:	08 95       	ret

00000c9e <__fp_mpack>:
     c9e:	9f 3f       	cpi	r25, 0xFF	; 255
     ca0:	31 f0       	breq	.+12     	; 0xcae <__fp_mpack_finite+0xc>

00000ca2 <__fp_mpack_finite>:
     ca2:	91 50       	subi	r25, 0x01	; 1
     ca4:	20 f4       	brcc	.+8      	; 0xcae <__fp_mpack_finite+0xc>
     ca6:	87 95       	ror	r24
     ca8:	77 95       	ror	r23
     caa:	67 95       	ror	r22
     cac:	b7 95       	ror	r27
     cae:	88 0f       	add	r24, r24
     cb0:	91 1d       	adc	r25, r1
     cb2:	96 95       	lsr	r25
     cb4:	87 95       	ror	r24
     cb6:	97 f9       	bld	r25, 7
     cb8:	08 95       	ret

00000cba <malloc>:
     cba:	cf 93       	push	r28
     cbc:	df 93       	push	r29
     cbe:	82 30       	cpi	r24, 0x02	; 2
     cc0:	91 05       	cpc	r25, r1
     cc2:	10 f4       	brcc	.+4      	; 0xcc8 <malloc+0xe>
     cc4:	82 e0       	ldi	r24, 0x02	; 2
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	e0 91 6c 02 	lds	r30, 0x026C
     ccc:	f0 91 6d 02 	lds	r31, 0x026D
     cd0:	20 e0       	ldi	r18, 0x00	; 0
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	a0 e0       	ldi	r26, 0x00	; 0
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	30 97       	sbiw	r30, 0x00	; 0
     cda:	39 f1       	breq	.+78     	; 0xd2a <malloc+0x70>
     cdc:	40 81       	ld	r20, Z
     cde:	51 81       	ldd	r21, Z+1	; 0x01
     ce0:	48 17       	cp	r20, r24
     ce2:	59 07       	cpc	r21, r25
     ce4:	b8 f0       	brcs	.+46     	; 0xd14 <malloc+0x5a>
     ce6:	48 17       	cp	r20, r24
     ce8:	59 07       	cpc	r21, r25
     cea:	71 f4       	brne	.+28     	; 0xd08 <malloc+0x4e>
     cec:	82 81       	ldd	r24, Z+2	; 0x02
     cee:	93 81       	ldd	r25, Z+3	; 0x03
     cf0:	10 97       	sbiw	r26, 0x00	; 0
     cf2:	29 f0       	breq	.+10     	; 0xcfe <malloc+0x44>
     cf4:	13 96       	adiw	r26, 0x03	; 3
     cf6:	9c 93       	st	X, r25
     cf8:	8e 93       	st	-X, r24
     cfa:	12 97       	sbiw	r26, 0x02	; 2
     cfc:	2c c0       	rjmp	.+88     	; 0xd56 <malloc+0x9c>
     cfe:	90 93 6d 02 	sts	0x026D, r25
     d02:	80 93 6c 02 	sts	0x026C, r24
     d06:	27 c0       	rjmp	.+78     	; 0xd56 <malloc+0x9c>
     d08:	21 15       	cp	r18, r1
     d0a:	31 05       	cpc	r19, r1
     d0c:	31 f0       	breq	.+12     	; 0xd1a <malloc+0x60>
     d0e:	42 17       	cp	r20, r18
     d10:	53 07       	cpc	r21, r19
     d12:	18 f0       	brcs	.+6      	; 0xd1a <malloc+0x60>
     d14:	a9 01       	movw	r20, r18
     d16:	db 01       	movw	r26, r22
     d18:	01 c0       	rjmp	.+2      	; 0xd1c <malloc+0x62>
     d1a:	ef 01       	movw	r28, r30
     d1c:	9a 01       	movw	r18, r20
     d1e:	bd 01       	movw	r22, r26
     d20:	df 01       	movw	r26, r30
     d22:	02 80       	ldd	r0, Z+2	; 0x02
     d24:	f3 81       	ldd	r31, Z+3	; 0x03
     d26:	e0 2d       	mov	r30, r0
     d28:	d7 cf       	rjmp	.-82     	; 0xcd8 <malloc+0x1e>
     d2a:	21 15       	cp	r18, r1
     d2c:	31 05       	cpc	r19, r1
     d2e:	f9 f0       	breq	.+62     	; 0xd6e <malloc+0xb4>
     d30:	28 1b       	sub	r18, r24
     d32:	39 0b       	sbc	r19, r25
     d34:	24 30       	cpi	r18, 0x04	; 4
     d36:	31 05       	cpc	r19, r1
     d38:	80 f4       	brcc	.+32     	; 0xd5a <malloc+0xa0>
     d3a:	8a 81       	ldd	r24, Y+2	; 0x02
     d3c:	9b 81       	ldd	r25, Y+3	; 0x03
     d3e:	61 15       	cp	r22, r1
     d40:	71 05       	cpc	r23, r1
     d42:	21 f0       	breq	.+8      	; 0xd4c <malloc+0x92>
     d44:	fb 01       	movw	r30, r22
     d46:	93 83       	std	Z+3, r25	; 0x03
     d48:	82 83       	std	Z+2, r24	; 0x02
     d4a:	04 c0       	rjmp	.+8      	; 0xd54 <malloc+0x9a>
     d4c:	90 93 6d 02 	sts	0x026D, r25
     d50:	80 93 6c 02 	sts	0x026C, r24
     d54:	fe 01       	movw	r30, r28
     d56:	32 96       	adiw	r30, 0x02	; 2
     d58:	44 c0       	rjmp	.+136    	; 0xde2 <malloc+0x128>
     d5a:	fe 01       	movw	r30, r28
     d5c:	e2 0f       	add	r30, r18
     d5e:	f3 1f       	adc	r31, r19
     d60:	81 93       	st	Z+, r24
     d62:	91 93       	st	Z+, r25
     d64:	22 50       	subi	r18, 0x02	; 2
     d66:	31 09       	sbc	r19, r1
     d68:	39 83       	std	Y+1, r19	; 0x01
     d6a:	28 83       	st	Y, r18
     d6c:	3a c0       	rjmp	.+116    	; 0xde2 <malloc+0x128>
     d6e:	20 91 6a 02 	lds	r18, 0x026A
     d72:	30 91 6b 02 	lds	r19, 0x026B
     d76:	23 2b       	or	r18, r19
     d78:	41 f4       	brne	.+16     	; 0xd8a <malloc+0xd0>
     d7a:	20 91 02 01 	lds	r18, 0x0102
     d7e:	30 91 03 01 	lds	r19, 0x0103
     d82:	30 93 6b 02 	sts	0x026B, r19
     d86:	20 93 6a 02 	sts	0x026A, r18
     d8a:	20 91 00 01 	lds	r18, 0x0100
     d8e:	30 91 01 01 	lds	r19, 0x0101
     d92:	21 15       	cp	r18, r1
     d94:	31 05       	cpc	r19, r1
     d96:	41 f4       	brne	.+16     	; 0xda8 <malloc+0xee>
     d98:	2d b7       	in	r18, 0x3d	; 61
     d9a:	3e b7       	in	r19, 0x3e	; 62
     d9c:	40 91 04 01 	lds	r20, 0x0104
     da0:	50 91 05 01 	lds	r21, 0x0105
     da4:	24 1b       	sub	r18, r20
     da6:	35 0b       	sbc	r19, r21
     da8:	e0 91 6a 02 	lds	r30, 0x026A
     dac:	f0 91 6b 02 	lds	r31, 0x026B
     db0:	e2 17       	cp	r30, r18
     db2:	f3 07       	cpc	r31, r19
     db4:	a0 f4       	brcc	.+40     	; 0xdde <malloc+0x124>
     db6:	2e 1b       	sub	r18, r30
     db8:	3f 0b       	sbc	r19, r31
     dba:	28 17       	cp	r18, r24
     dbc:	39 07       	cpc	r19, r25
     dbe:	78 f0       	brcs	.+30     	; 0xdde <malloc+0x124>
     dc0:	ac 01       	movw	r20, r24
     dc2:	4e 5f       	subi	r20, 0xFE	; 254
     dc4:	5f 4f       	sbci	r21, 0xFF	; 255
     dc6:	24 17       	cp	r18, r20
     dc8:	35 07       	cpc	r19, r21
     dca:	48 f0       	brcs	.+18     	; 0xdde <malloc+0x124>
     dcc:	4e 0f       	add	r20, r30
     dce:	5f 1f       	adc	r21, r31
     dd0:	50 93 6b 02 	sts	0x026B, r21
     dd4:	40 93 6a 02 	sts	0x026A, r20
     dd8:	81 93       	st	Z+, r24
     dda:	91 93       	st	Z+, r25
     ddc:	02 c0       	rjmp	.+4      	; 0xde2 <malloc+0x128>
     dde:	e0 e0       	ldi	r30, 0x00	; 0
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	cf 01       	movw	r24, r30
     de4:	df 91       	pop	r29
     de6:	cf 91       	pop	r28
     de8:	08 95       	ret

00000dea <free>:
     dea:	cf 93       	push	r28
     dec:	df 93       	push	r29
     dee:	00 97       	sbiw	r24, 0x00	; 0
     df0:	09 f4       	brne	.+2      	; 0xdf4 <free+0xa>
     df2:	87 c0       	rjmp	.+270    	; 0xf02 <free+0x118>
     df4:	fc 01       	movw	r30, r24
     df6:	32 97       	sbiw	r30, 0x02	; 2
     df8:	13 82       	std	Z+3, r1	; 0x03
     dfa:	12 82       	std	Z+2, r1	; 0x02
     dfc:	c0 91 6c 02 	lds	r28, 0x026C
     e00:	d0 91 6d 02 	lds	r29, 0x026D
     e04:	20 97       	sbiw	r28, 0x00	; 0
     e06:	81 f4       	brne	.+32     	; 0xe28 <free+0x3e>
     e08:	20 81       	ld	r18, Z
     e0a:	31 81       	ldd	r19, Z+1	; 0x01
     e0c:	28 0f       	add	r18, r24
     e0e:	39 1f       	adc	r19, r25
     e10:	80 91 6a 02 	lds	r24, 0x026A
     e14:	90 91 6b 02 	lds	r25, 0x026B
     e18:	82 17       	cp	r24, r18
     e1a:	93 07       	cpc	r25, r19
     e1c:	79 f5       	brne	.+94     	; 0xe7c <free+0x92>
     e1e:	f0 93 6b 02 	sts	0x026B, r31
     e22:	e0 93 6a 02 	sts	0x026A, r30
     e26:	6d c0       	rjmp	.+218    	; 0xf02 <free+0x118>
     e28:	de 01       	movw	r26, r28
     e2a:	20 e0       	ldi	r18, 0x00	; 0
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	ae 17       	cp	r26, r30
     e30:	bf 07       	cpc	r27, r31
     e32:	50 f4       	brcc	.+20     	; 0xe48 <free+0x5e>
     e34:	12 96       	adiw	r26, 0x02	; 2
     e36:	4d 91       	ld	r20, X+
     e38:	5c 91       	ld	r21, X
     e3a:	13 97       	sbiw	r26, 0x03	; 3
     e3c:	9d 01       	movw	r18, r26
     e3e:	41 15       	cp	r20, r1
     e40:	51 05       	cpc	r21, r1
     e42:	09 f1       	breq	.+66     	; 0xe86 <free+0x9c>
     e44:	da 01       	movw	r26, r20
     e46:	f3 cf       	rjmp	.-26     	; 0xe2e <free+0x44>
     e48:	b3 83       	std	Z+3, r27	; 0x03
     e4a:	a2 83       	std	Z+2, r26	; 0x02
     e4c:	40 81       	ld	r20, Z
     e4e:	51 81       	ldd	r21, Z+1	; 0x01
     e50:	84 0f       	add	r24, r20
     e52:	95 1f       	adc	r25, r21
     e54:	8a 17       	cp	r24, r26
     e56:	9b 07       	cpc	r25, r27
     e58:	71 f4       	brne	.+28     	; 0xe76 <free+0x8c>
     e5a:	8d 91       	ld	r24, X+
     e5c:	9c 91       	ld	r25, X
     e5e:	11 97       	sbiw	r26, 0x01	; 1
     e60:	84 0f       	add	r24, r20
     e62:	95 1f       	adc	r25, r21
     e64:	02 96       	adiw	r24, 0x02	; 2
     e66:	91 83       	std	Z+1, r25	; 0x01
     e68:	80 83       	st	Z, r24
     e6a:	12 96       	adiw	r26, 0x02	; 2
     e6c:	8d 91       	ld	r24, X+
     e6e:	9c 91       	ld	r25, X
     e70:	13 97       	sbiw	r26, 0x03	; 3
     e72:	93 83       	std	Z+3, r25	; 0x03
     e74:	82 83       	std	Z+2, r24	; 0x02
     e76:	21 15       	cp	r18, r1
     e78:	31 05       	cpc	r19, r1
     e7a:	29 f4       	brne	.+10     	; 0xe86 <free+0x9c>
     e7c:	f0 93 6d 02 	sts	0x026D, r31
     e80:	e0 93 6c 02 	sts	0x026C, r30
     e84:	3e c0       	rjmp	.+124    	; 0xf02 <free+0x118>
     e86:	d9 01       	movw	r26, r18
     e88:	13 96       	adiw	r26, 0x03	; 3
     e8a:	fc 93       	st	X, r31
     e8c:	ee 93       	st	-X, r30
     e8e:	12 97       	sbiw	r26, 0x02	; 2
     e90:	4d 91       	ld	r20, X+
     e92:	5d 91       	ld	r21, X+
     e94:	a4 0f       	add	r26, r20
     e96:	b5 1f       	adc	r27, r21
     e98:	ea 17       	cp	r30, r26
     e9a:	fb 07       	cpc	r31, r27
     e9c:	79 f4       	brne	.+30     	; 0xebc <free+0xd2>
     e9e:	80 81       	ld	r24, Z
     ea0:	91 81       	ldd	r25, Z+1	; 0x01
     ea2:	84 0f       	add	r24, r20
     ea4:	95 1f       	adc	r25, r21
     ea6:	02 96       	adiw	r24, 0x02	; 2
     ea8:	d9 01       	movw	r26, r18
     eaa:	11 96       	adiw	r26, 0x01	; 1
     eac:	9c 93       	st	X, r25
     eae:	8e 93       	st	-X, r24
     eb0:	82 81       	ldd	r24, Z+2	; 0x02
     eb2:	93 81       	ldd	r25, Z+3	; 0x03
     eb4:	13 96       	adiw	r26, 0x03	; 3
     eb6:	9c 93       	st	X, r25
     eb8:	8e 93       	st	-X, r24
     eba:	12 97       	sbiw	r26, 0x02	; 2
     ebc:	e0 e0       	ldi	r30, 0x00	; 0
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	8a 81       	ldd	r24, Y+2	; 0x02
     ec2:	9b 81       	ldd	r25, Y+3	; 0x03
     ec4:	00 97       	sbiw	r24, 0x00	; 0
     ec6:	19 f0       	breq	.+6      	; 0xece <free+0xe4>
     ec8:	fe 01       	movw	r30, r28
     eca:	ec 01       	movw	r28, r24
     ecc:	f9 cf       	rjmp	.-14     	; 0xec0 <free+0xd6>
     ece:	ce 01       	movw	r24, r28
     ed0:	02 96       	adiw	r24, 0x02	; 2
     ed2:	28 81       	ld	r18, Y
     ed4:	39 81       	ldd	r19, Y+1	; 0x01
     ed6:	82 0f       	add	r24, r18
     ed8:	93 1f       	adc	r25, r19
     eda:	20 91 6a 02 	lds	r18, 0x026A
     ede:	30 91 6b 02 	lds	r19, 0x026B
     ee2:	28 17       	cp	r18, r24
     ee4:	39 07       	cpc	r19, r25
     ee6:	69 f4       	brne	.+26     	; 0xf02 <free+0x118>
     ee8:	30 97       	sbiw	r30, 0x00	; 0
     eea:	29 f4       	brne	.+10     	; 0xef6 <free+0x10c>
     eec:	10 92 6d 02 	sts	0x026D, r1
     ef0:	10 92 6c 02 	sts	0x026C, r1
     ef4:	02 c0       	rjmp	.+4      	; 0xefa <free+0x110>
     ef6:	13 82       	std	Z+3, r1	; 0x03
     ef8:	12 82       	std	Z+2, r1	; 0x02
     efa:	d0 93 6b 02 	sts	0x026B, r29
     efe:	c0 93 6a 02 	sts	0x026A, r28
     f02:	df 91       	pop	r29
     f04:	cf 91       	pop	r28
     f06:	08 95       	ret

00000f08 <fdevopen>:
     f08:	0f 93       	push	r16
     f0a:	1f 93       	push	r17
     f0c:	cf 93       	push	r28
     f0e:	df 93       	push	r29
     f10:	ec 01       	movw	r28, r24
     f12:	8b 01       	movw	r16, r22
     f14:	00 97       	sbiw	r24, 0x00	; 0
     f16:	31 f4       	brne	.+12     	; 0xf24 <fdevopen+0x1c>
     f18:	61 15       	cp	r22, r1
     f1a:	71 05       	cpc	r23, r1
     f1c:	19 f4       	brne	.+6      	; 0xf24 <fdevopen+0x1c>
     f1e:	80 e0       	ldi	r24, 0x00	; 0
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	38 c0       	rjmp	.+112    	; 0xf94 <fdevopen+0x8c>
     f24:	6e e0       	ldi	r22, 0x0E	; 14
     f26:	70 e0       	ldi	r23, 0x00	; 0
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	0e 94 bc 09 	call	0x1378	; 0x1378 <calloc>
     f30:	fc 01       	movw	r30, r24
     f32:	00 97       	sbiw	r24, 0x00	; 0
     f34:	a1 f3       	breq	.-24     	; 0xf1e <fdevopen+0x16>
     f36:	80 e8       	ldi	r24, 0x80	; 128
     f38:	83 83       	std	Z+3, r24	; 0x03
     f3a:	01 15       	cp	r16, r1
     f3c:	11 05       	cpc	r17, r1
     f3e:	71 f0       	breq	.+28     	; 0xf5c <fdevopen+0x54>
     f40:	13 87       	std	Z+11, r17	; 0x0b
     f42:	02 87       	std	Z+10, r16	; 0x0a
     f44:	81 e8       	ldi	r24, 0x81	; 129
     f46:	83 83       	std	Z+3, r24	; 0x03
     f48:	80 91 6e 02 	lds	r24, 0x026E
     f4c:	90 91 6f 02 	lds	r25, 0x026F
     f50:	89 2b       	or	r24, r25
     f52:	21 f4       	brne	.+8      	; 0xf5c <fdevopen+0x54>
     f54:	f0 93 6f 02 	sts	0x026F, r31
     f58:	e0 93 6e 02 	sts	0x026E, r30
     f5c:	20 97       	sbiw	r28, 0x00	; 0
     f5e:	c9 f0       	breq	.+50     	; 0xf92 <fdevopen+0x8a>
     f60:	d1 87       	std	Z+9, r29	; 0x09
     f62:	c0 87       	std	Z+8, r28	; 0x08
     f64:	83 81       	ldd	r24, Z+3	; 0x03
     f66:	82 60       	ori	r24, 0x02	; 2
     f68:	83 83       	std	Z+3, r24	; 0x03
     f6a:	80 91 70 02 	lds	r24, 0x0270
     f6e:	90 91 71 02 	lds	r25, 0x0271
     f72:	89 2b       	or	r24, r25
     f74:	71 f4       	brne	.+28     	; 0xf92 <fdevopen+0x8a>
     f76:	f0 93 71 02 	sts	0x0271, r31
     f7a:	e0 93 70 02 	sts	0x0270, r30
     f7e:	80 91 72 02 	lds	r24, 0x0272
     f82:	90 91 73 02 	lds	r25, 0x0273
     f86:	89 2b       	or	r24, r25
     f88:	21 f4       	brne	.+8      	; 0xf92 <fdevopen+0x8a>
     f8a:	f0 93 73 02 	sts	0x0273, r31
     f8e:	e0 93 72 02 	sts	0x0272, r30
     f92:	cf 01       	movw	r24, r30
     f94:	df 91       	pop	r29
     f96:	cf 91       	pop	r28
     f98:	1f 91       	pop	r17
     f9a:	0f 91       	pop	r16
     f9c:	08 95       	ret

00000f9e <printf>:
     f9e:	a0 e0       	ldi	r26, 0x00	; 0
     fa0:	b0 e0       	ldi	r27, 0x00	; 0
     fa2:	e5 ed       	ldi	r30, 0xD5	; 213
     fa4:	f7 e0       	ldi	r31, 0x07	; 7
     fa6:	0c 94 95 0a 	jmp	0x152a	; 0x152a <__prologue_saves__+0x20>
     faa:	fe 01       	movw	r30, r28
     fac:	35 96       	adiw	r30, 0x05	; 5
     fae:	61 91       	ld	r22, Z+
     fb0:	71 91       	ld	r23, Z+
     fb2:	af 01       	movw	r20, r30
     fb4:	80 91 70 02 	lds	r24, 0x0270
     fb8:	90 91 71 02 	lds	r25, 0x0271
     fbc:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <vfprintf>
     fc0:	e2 e0       	ldi	r30, 0x02	; 2
     fc2:	0c 94 b1 0a 	jmp	0x1562	; 0x1562 <__epilogue_restores__+0x20>

00000fc6 <putchar>:
     fc6:	60 91 70 02 	lds	r22, 0x0270
     fca:	70 91 71 02 	lds	r23, 0x0271
     fce:	0e 94 f5 09 	call	0x13ea	; 0x13ea <fputc>
     fd2:	08 95       	ret

00000fd4 <vfprintf>:
     fd4:	ac e0       	ldi	r26, 0x0C	; 12
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	e0 ef       	ldi	r30, 0xF0	; 240
     fda:	f7 e0       	ldi	r31, 0x07	; 7
     fdc:	0c 94 85 0a 	jmp	0x150a	; 0x150a <__prologue_saves__>
     fe0:	7c 01       	movw	r14, r24
     fe2:	6b 01       	movw	r12, r22
     fe4:	8a 01       	movw	r16, r20
     fe6:	fc 01       	movw	r30, r24
     fe8:	17 82       	std	Z+7, r1	; 0x07
     fea:	16 82       	std	Z+6, r1	; 0x06
     fec:	83 81       	ldd	r24, Z+3	; 0x03
     fee:	81 ff       	sbrs	r24, 1
     ff0:	bd c1       	rjmp	.+890    	; 0x136c <vfprintf+0x398>
     ff2:	ce 01       	movw	r24, r28
     ff4:	01 96       	adiw	r24, 0x01	; 1
     ff6:	4c 01       	movw	r8, r24
     ff8:	f7 01       	movw	r30, r14
     ffa:	93 81       	ldd	r25, Z+3	; 0x03
     ffc:	f6 01       	movw	r30, r12
     ffe:	93 fd       	sbrc	r25, 3
    1000:	85 91       	lpm	r24, Z+
    1002:	93 ff       	sbrs	r25, 3
    1004:	81 91       	ld	r24, Z+
    1006:	6f 01       	movw	r12, r30
    1008:	88 23       	and	r24, r24
    100a:	09 f4       	brne	.+2      	; 0x100e <vfprintf+0x3a>
    100c:	ab c1       	rjmp	.+854    	; 0x1364 <vfprintf+0x390>
    100e:	85 32       	cpi	r24, 0x25	; 37
    1010:	39 f4       	brne	.+14     	; 0x1020 <vfprintf+0x4c>
    1012:	93 fd       	sbrc	r25, 3
    1014:	85 91       	lpm	r24, Z+
    1016:	93 ff       	sbrs	r25, 3
    1018:	81 91       	ld	r24, Z+
    101a:	6f 01       	movw	r12, r30
    101c:	85 32       	cpi	r24, 0x25	; 37
    101e:	29 f4       	brne	.+10     	; 0x102a <vfprintf+0x56>
    1020:	b7 01       	movw	r22, r14
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	0e 94 f5 09 	call	0x13ea	; 0x13ea <fputc>
    1028:	e7 cf       	rjmp	.-50     	; 0xff8 <vfprintf+0x24>
    102a:	51 2c       	mov	r5, r1
    102c:	31 2c       	mov	r3, r1
    102e:	20 e0       	ldi	r18, 0x00	; 0
    1030:	20 32       	cpi	r18, 0x20	; 32
    1032:	a0 f4       	brcc	.+40     	; 0x105c <vfprintf+0x88>
    1034:	8b 32       	cpi	r24, 0x2B	; 43
    1036:	69 f0       	breq	.+26     	; 0x1052 <vfprintf+0x7e>
    1038:	30 f4       	brcc	.+12     	; 0x1046 <vfprintf+0x72>
    103a:	80 32       	cpi	r24, 0x20	; 32
    103c:	59 f0       	breq	.+22     	; 0x1054 <vfprintf+0x80>
    103e:	83 32       	cpi	r24, 0x23	; 35
    1040:	69 f4       	brne	.+26     	; 0x105c <vfprintf+0x88>
    1042:	20 61       	ori	r18, 0x10	; 16
    1044:	2c c0       	rjmp	.+88     	; 0x109e <vfprintf+0xca>
    1046:	8d 32       	cpi	r24, 0x2D	; 45
    1048:	39 f0       	breq	.+14     	; 0x1058 <vfprintf+0x84>
    104a:	80 33       	cpi	r24, 0x30	; 48
    104c:	39 f4       	brne	.+14     	; 0x105c <vfprintf+0x88>
    104e:	21 60       	ori	r18, 0x01	; 1
    1050:	26 c0       	rjmp	.+76     	; 0x109e <vfprintf+0xca>
    1052:	22 60       	ori	r18, 0x02	; 2
    1054:	24 60       	ori	r18, 0x04	; 4
    1056:	23 c0       	rjmp	.+70     	; 0x109e <vfprintf+0xca>
    1058:	28 60       	ori	r18, 0x08	; 8
    105a:	21 c0       	rjmp	.+66     	; 0x109e <vfprintf+0xca>
    105c:	27 fd       	sbrc	r18, 7
    105e:	27 c0       	rjmp	.+78     	; 0x10ae <vfprintf+0xda>
    1060:	30 ed       	ldi	r19, 0xD0	; 208
    1062:	38 0f       	add	r19, r24
    1064:	3a 30       	cpi	r19, 0x0A	; 10
    1066:	78 f4       	brcc	.+30     	; 0x1086 <vfprintf+0xb2>
    1068:	26 ff       	sbrs	r18, 6
    106a:	06 c0       	rjmp	.+12     	; 0x1078 <vfprintf+0xa4>
    106c:	fa e0       	ldi	r31, 0x0A	; 10
    106e:	5f 9e       	mul	r5, r31
    1070:	30 0d       	add	r19, r0
    1072:	11 24       	eor	r1, r1
    1074:	53 2e       	mov	r5, r19
    1076:	13 c0       	rjmp	.+38     	; 0x109e <vfprintf+0xca>
    1078:	8a e0       	ldi	r24, 0x0A	; 10
    107a:	38 9e       	mul	r3, r24
    107c:	30 0d       	add	r19, r0
    107e:	11 24       	eor	r1, r1
    1080:	33 2e       	mov	r3, r19
    1082:	20 62       	ori	r18, 0x20	; 32
    1084:	0c c0       	rjmp	.+24     	; 0x109e <vfprintf+0xca>
    1086:	8e 32       	cpi	r24, 0x2E	; 46
    1088:	21 f4       	brne	.+8      	; 0x1092 <vfprintf+0xbe>
    108a:	26 fd       	sbrc	r18, 6
    108c:	6b c1       	rjmp	.+726    	; 0x1364 <vfprintf+0x390>
    108e:	20 64       	ori	r18, 0x40	; 64
    1090:	06 c0       	rjmp	.+12     	; 0x109e <vfprintf+0xca>
    1092:	8c 36       	cpi	r24, 0x6C	; 108
    1094:	11 f4       	brne	.+4      	; 0x109a <vfprintf+0xc6>
    1096:	20 68       	ori	r18, 0x80	; 128
    1098:	02 c0       	rjmp	.+4      	; 0x109e <vfprintf+0xca>
    109a:	88 36       	cpi	r24, 0x68	; 104
    109c:	41 f4       	brne	.+16     	; 0x10ae <vfprintf+0xda>
    109e:	f6 01       	movw	r30, r12
    10a0:	93 fd       	sbrc	r25, 3
    10a2:	85 91       	lpm	r24, Z+
    10a4:	93 ff       	sbrs	r25, 3
    10a6:	81 91       	ld	r24, Z+
    10a8:	6f 01       	movw	r12, r30
    10aa:	81 11       	cpse	r24, r1
    10ac:	c1 cf       	rjmp	.-126    	; 0x1030 <vfprintf+0x5c>
    10ae:	98 2f       	mov	r25, r24
    10b0:	9f 7d       	andi	r25, 0xDF	; 223
    10b2:	95 54       	subi	r25, 0x45	; 69
    10b4:	93 30       	cpi	r25, 0x03	; 3
    10b6:	28 f4       	brcc	.+10     	; 0x10c2 <vfprintf+0xee>
    10b8:	0c 5f       	subi	r16, 0xFC	; 252
    10ba:	1f 4f       	sbci	r17, 0xFF	; 255
    10bc:	ff e3       	ldi	r31, 0x3F	; 63
    10be:	f9 83       	std	Y+1, r31	; 0x01
    10c0:	0d c0       	rjmp	.+26     	; 0x10dc <vfprintf+0x108>
    10c2:	83 36       	cpi	r24, 0x63	; 99
    10c4:	31 f0       	breq	.+12     	; 0x10d2 <vfprintf+0xfe>
    10c6:	83 37       	cpi	r24, 0x73	; 115
    10c8:	71 f0       	breq	.+28     	; 0x10e6 <vfprintf+0x112>
    10ca:	83 35       	cpi	r24, 0x53	; 83
    10cc:	09 f0       	breq	.+2      	; 0x10d0 <vfprintf+0xfc>
    10ce:	5b c0       	rjmp	.+182    	; 0x1186 <vfprintf+0x1b2>
    10d0:	22 c0       	rjmp	.+68     	; 0x1116 <vfprintf+0x142>
    10d2:	f8 01       	movw	r30, r16
    10d4:	80 81       	ld	r24, Z
    10d6:	89 83       	std	Y+1, r24	; 0x01
    10d8:	0e 5f       	subi	r16, 0xFE	; 254
    10da:	1f 4f       	sbci	r17, 0xFF	; 255
    10dc:	44 24       	eor	r4, r4
    10de:	43 94       	inc	r4
    10e0:	51 2c       	mov	r5, r1
    10e2:	54 01       	movw	r10, r8
    10e4:	15 c0       	rjmp	.+42     	; 0x1110 <vfprintf+0x13c>
    10e6:	38 01       	movw	r6, r16
    10e8:	f2 e0       	ldi	r31, 0x02	; 2
    10ea:	6f 0e       	add	r6, r31
    10ec:	71 1c       	adc	r7, r1
    10ee:	f8 01       	movw	r30, r16
    10f0:	a0 80       	ld	r10, Z
    10f2:	b1 80       	ldd	r11, Z+1	; 0x01
    10f4:	26 ff       	sbrs	r18, 6
    10f6:	03 c0       	rjmp	.+6      	; 0x10fe <vfprintf+0x12a>
    10f8:	65 2d       	mov	r22, r5
    10fa:	70 e0       	ldi	r23, 0x00	; 0
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <vfprintf+0x12e>
    10fe:	6f ef       	ldi	r22, 0xFF	; 255
    1100:	7f ef       	ldi	r23, 0xFF	; 255
    1102:	c5 01       	movw	r24, r10
    1104:	2c 87       	std	Y+12, r18	; 0x0c
    1106:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <strnlen>
    110a:	2c 01       	movw	r4, r24
    110c:	83 01       	movw	r16, r6
    110e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1110:	2f 77       	andi	r18, 0x7F	; 127
    1112:	22 2e       	mov	r2, r18
    1114:	17 c0       	rjmp	.+46     	; 0x1144 <vfprintf+0x170>
    1116:	38 01       	movw	r6, r16
    1118:	f2 e0       	ldi	r31, 0x02	; 2
    111a:	6f 0e       	add	r6, r31
    111c:	71 1c       	adc	r7, r1
    111e:	f8 01       	movw	r30, r16
    1120:	a0 80       	ld	r10, Z
    1122:	b1 80       	ldd	r11, Z+1	; 0x01
    1124:	26 ff       	sbrs	r18, 6
    1126:	03 c0       	rjmp	.+6      	; 0x112e <vfprintf+0x15a>
    1128:	65 2d       	mov	r22, r5
    112a:	70 e0       	ldi	r23, 0x00	; 0
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <vfprintf+0x15e>
    112e:	6f ef       	ldi	r22, 0xFF	; 255
    1130:	7f ef       	ldi	r23, 0xFF	; 255
    1132:	c5 01       	movw	r24, r10
    1134:	2c 87       	std	Y+12, r18	; 0x0c
    1136:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <strnlen_P>
    113a:	2c 01       	movw	r4, r24
    113c:	2c 85       	ldd	r18, Y+12	; 0x0c
    113e:	20 68       	ori	r18, 0x80	; 128
    1140:	22 2e       	mov	r2, r18
    1142:	83 01       	movw	r16, r6
    1144:	23 fc       	sbrc	r2, 3
    1146:	1b c0       	rjmp	.+54     	; 0x117e <vfprintf+0x1aa>
    1148:	83 2d       	mov	r24, r3
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	48 16       	cp	r4, r24
    114e:	59 06       	cpc	r5, r25
    1150:	b0 f4       	brcc	.+44     	; 0x117e <vfprintf+0x1aa>
    1152:	b7 01       	movw	r22, r14
    1154:	80 e2       	ldi	r24, 0x20	; 32
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	0e 94 f5 09 	call	0x13ea	; 0x13ea <fputc>
    115c:	3a 94       	dec	r3
    115e:	f4 cf       	rjmp	.-24     	; 0x1148 <vfprintf+0x174>
    1160:	f5 01       	movw	r30, r10
    1162:	27 fc       	sbrc	r2, 7
    1164:	85 91       	lpm	r24, Z+
    1166:	27 fe       	sbrs	r2, 7
    1168:	81 91       	ld	r24, Z+
    116a:	5f 01       	movw	r10, r30
    116c:	b7 01       	movw	r22, r14
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	0e 94 f5 09 	call	0x13ea	; 0x13ea <fputc>
    1174:	31 10       	cpse	r3, r1
    1176:	3a 94       	dec	r3
    1178:	f1 e0       	ldi	r31, 0x01	; 1
    117a:	4f 1a       	sub	r4, r31
    117c:	51 08       	sbc	r5, r1
    117e:	41 14       	cp	r4, r1
    1180:	51 04       	cpc	r5, r1
    1182:	71 f7       	brne	.-36     	; 0x1160 <vfprintf+0x18c>
    1184:	e5 c0       	rjmp	.+458    	; 0x1350 <vfprintf+0x37c>
    1186:	84 36       	cpi	r24, 0x64	; 100
    1188:	11 f0       	breq	.+4      	; 0x118e <vfprintf+0x1ba>
    118a:	89 36       	cpi	r24, 0x69	; 105
    118c:	39 f5       	brne	.+78     	; 0x11dc <vfprintf+0x208>
    118e:	f8 01       	movw	r30, r16
    1190:	27 ff       	sbrs	r18, 7
    1192:	07 c0       	rjmp	.+14     	; 0x11a2 <vfprintf+0x1ce>
    1194:	60 81       	ld	r22, Z
    1196:	71 81       	ldd	r23, Z+1	; 0x01
    1198:	82 81       	ldd	r24, Z+2	; 0x02
    119a:	93 81       	ldd	r25, Z+3	; 0x03
    119c:	0c 5f       	subi	r16, 0xFC	; 252
    119e:	1f 4f       	sbci	r17, 0xFF	; 255
    11a0:	08 c0       	rjmp	.+16     	; 0x11b2 <vfprintf+0x1de>
    11a2:	60 81       	ld	r22, Z
    11a4:	71 81       	ldd	r23, Z+1	; 0x01
    11a6:	88 27       	eor	r24, r24
    11a8:	77 fd       	sbrc	r23, 7
    11aa:	80 95       	com	r24
    11ac:	98 2f       	mov	r25, r24
    11ae:	0e 5f       	subi	r16, 0xFE	; 254
    11b0:	1f 4f       	sbci	r17, 0xFF	; 255
    11b2:	2f 76       	andi	r18, 0x6F	; 111
    11b4:	b2 2e       	mov	r11, r18
    11b6:	97 ff       	sbrs	r25, 7
    11b8:	09 c0       	rjmp	.+18     	; 0x11cc <vfprintf+0x1f8>
    11ba:	90 95       	com	r25
    11bc:	80 95       	com	r24
    11be:	70 95       	com	r23
    11c0:	61 95       	neg	r22
    11c2:	7f 4f       	sbci	r23, 0xFF	; 255
    11c4:	8f 4f       	sbci	r24, 0xFF	; 255
    11c6:	9f 4f       	sbci	r25, 0xFF	; 255
    11c8:	20 68       	ori	r18, 0x80	; 128
    11ca:	b2 2e       	mov	r11, r18
    11cc:	2a e0       	ldi	r18, 0x0A	; 10
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	a4 01       	movw	r20, r8
    11d2:	0e 94 27 0a 	call	0x144e	; 0x144e <__ultoa_invert>
    11d6:	a8 2e       	mov	r10, r24
    11d8:	a8 18       	sub	r10, r8
    11da:	44 c0       	rjmp	.+136    	; 0x1264 <vfprintf+0x290>
    11dc:	85 37       	cpi	r24, 0x75	; 117
    11de:	29 f4       	brne	.+10     	; 0x11ea <vfprintf+0x216>
    11e0:	2f 7e       	andi	r18, 0xEF	; 239
    11e2:	b2 2e       	mov	r11, r18
    11e4:	2a e0       	ldi	r18, 0x0A	; 10
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	25 c0       	rjmp	.+74     	; 0x1234 <vfprintf+0x260>
    11ea:	f2 2f       	mov	r31, r18
    11ec:	f9 7f       	andi	r31, 0xF9	; 249
    11ee:	bf 2e       	mov	r11, r31
    11f0:	8f 36       	cpi	r24, 0x6F	; 111
    11f2:	c1 f0       	breq	.+48     	; 0x1224 <vfprintf+0x250>
    11f4:	18 f4       	brcc	.+6      	; 0x11fc <vfprintf+0x228>
    11f6:	88 35       	cpi	r24, 0x58	; 88
    11f8:	79 f0       	breq	.+30     	; 0x1218 <vfprintf+0x244>
    11fa:	b4 c0       	rjmp	.+360    	; 0x1364 <vfprintf+0x390>
    11fc:	80 37       	cpi	r24, 0x70	; 112
    11fe:	19 f0       	breq	.+6      	; 0x1206 <vfprintf+0x232>
    1200:	88 37       	cpi	r24, 0x78	; 120
    1202:	21 f0       	breq	.+8      	; 0x120c <vfprintf+0x238>
    1204:	af c0       	rjmp	.+350    	; 0x1364 <vfprintf+0x390>
    1206:	2f 2f       	mov	r18, r31
    1208:	20 61       	ori	r18, 0x10	; 16
    120a:	b2 2e       	mov	r11, r18
    120c:	b4 fe       	sbrs	r11, 4
    120e:	0d c0       	rjmp	.+26     	; 0x122a <vfprintf+0x256>
    1210:	8b 2d       	mov	r24, r11
    1212:	84 60       	ori	r24, 0x04	; 4
    1214:	b8 2e       	mov	r11, r24
    1216:	09 c0       	rjmp	.+18     	; 0x122a <vfprintf+0x256>
    1218:	24 ff       	sbrs	r18, 4
    121a:	0a c0       	rjmp	.+20     	; 0x1230 <vfprintf+0x25c>
    121c:	9f 2f       	mov	r25, r31
    121e:	96 60       	ori	r25, 0x06	; 6
    1220:	b9 2e       	mov	r11, r25
    1222:	06 c0       	rjmp	.+12     	; 0x1230 <vfprintf+0x25c>
    1224:	28 e0       	ldi	r18, 0x08	; 8
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	05 c0       	rjmp	.+10     	; 0x1234 <vfprintf+0x260>
    122a:	20 e1       	ldi	r18, 0x10	; 16
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <vfprintf+0x260>
    1230:	20 e1       	ldi	r18, 0x10	; 16
    1232:	32 e0       	ldi	r19, 0x02	; 2
    1234:	f8 01       	movw	r30, r16
    1236:	b7 fe       	sbrs	r11, 7
    1238:	07 c0       	rjmp	.+14     	; 0x1248 <vfprintf+0x274>
    123a:	60 81       	ld	r22, Z
    123c:	71 81       	ldd	r23, Z+1	; 0x01
    123e:	82 81       	ldd	r24, Z+2	; 0x02
    1240:	93 81       	ldd	r25, Z+3	; 0x03
    1242:	0c 5f       	subi	r16, 0xFC	; 252
    1244:	1f 4f       	sbci	r17, 0xFF	; 255
    1246:	06 c0       	rjmp	.+12     	; 0x1254 <vfprintf+0x280>
    1248:	60 81       	ld	r22, Z
    124a:	71 81       	ldd	r23, Z+1	; 0x01
    124c:	80 e0       	ldi	r24, 0x00	; 0
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	0e 5f       	subi	r16, 0xFE	; 254
    1252:	1f 4f       	sbci	r17, 0xFF	; 255
    1254:	a4 01       	movw	r20, r8
    1256:	0e 94 27 0a 	call	0x144e	; 0x144e <__ultoa_invert>
    125a:	a8 2e       	mov	r10, r24
    125c:	a8 18       	sub	r10, r8
    125e:	fb 2d       	mov	r31, r11
    1260:	ff 77       	andi	r31, 0x7F	; 127
    1262:	bf 2e       	mov	r11, r31
    1264:	b6 fe       	sbrs	r11, 6
    1266:	0b c0       	rjmp	.+22     	; 0x127e <vfprintf+0x2aa>
    1268:	2b 2d       	mov	r18, r11
    126a:	2e 7f       	andi	r18, 0xFE	; 254
    126c:	a5 14       	cp	r10, r5
    126e:	50 f4       	brcc	.+20     	; 0x1284 <vfprintf+0x2b0>
    1270:	b4 fe       	sbrs	r11, 4
    1272:	0a c0       	rjmp	.+20     	; 0x1288 <vfprintf+0x2b4>
    1274:	b2 fc       	sbrc	r11, 2
    1276:	08 c0       	rjmp	.+16     	; 0x1288 <vfprintf+0x2b4>
    1278:	2b 2d       	mov	r18, r11
    127a:	2e 7e       	andi	r18, 0xEE	; 238
    127c:	05 c0       	rjmp	.+10     	; 0x1288 <vfprintf+0x2b4>
    127e:	7a 2c       	mov	r7, r10
    1280:	2b 2d       	mov	r18, r11
    1282:	03 c0       	rjmp	.+6      	; 0x128a <vfprintf+0x2b6>
    1284:	7a 2c       	mov	r7, r10
    1286:	01 c0       	rjmp	.+2      	; 0x128a <vfprintf+0x2b6>
    1288:	75 2c       	mov	r7, r5
    128a:	24 ff       	sbrs	r18, 4
    128c:	0d c0       	rjmp	.+26     	; 0x12a8 <vfprintf+0x2d4>
    128e:	fe 01       	movw	r30, r28
    1290:	ea 0d       	add	r30, r10
    1292:	f1 1d       	adc	r31, r1
    1294:	80 81       	ld	r24, Z
    1296:	80 33       	cpi	r24, 0x30	; 48
    1298:	11 f4       	brne	.+4      	; 0x129e <vfprintf+0x2ca>
    129a:	29 7e       	andi	r18, 0xE9	; 233
    129c:	09 c0       	rjmp	.+18     	; 0x12b0 <vfprintf+0x2dc>
    129e:	22 ff       	sbrs	r18, 2
    12a0:	06 c0       	rjmp	.+12     	; 0x12ae <vfprintf+0x2da>
    12a2:	73 94       	inc	r7
    12a4:	73 94       	inc	r7
    12a6:	04 c0       	rjmp	.+8      	; 0x12b0 <vfprintf+0x2dc>
    12a8:	82 2f       	mov	r24, r18
    12aa:	86 78       	andi	r24, 0x86	; 134
    12ac:	09 f0       	breq	.+2      	; 0x12b0 <vfprintf+0x2dc>
    12ae:	73 94       	inc	r7
    12b0:	23 fd       	sbrc	r18, 3
    12b2:	13 c0       	rjmp	.+38     	; 0x12da <vfprintf+0x306>
    12b4:	20 ff       	sbrs	r18, 0
    12b6:	06 c0       	rjmp	.+12     	; 0x12c4 <vfprintf+0x2f0>
    12b8:	5a 2c       	mov	r5, r10
    12ba:	73 14       	cp	r7, r3
    12bc:	18 f4       	brcc	.+6      	; 0x12c4 <vfprintf+0x2f0>
    12be:	53 0c       	add	r5, r3
    12c0:	57 18       	sub	r5, r7
    12c2:	73 2c       	mov	r7, r3
    12c4:	73 14       	cp	r7, r3
    12c6:	68 f4       	brcc	.+26     	; 0x12e2 <vfprintf+0x30e>
    12c8:	b7 01       	movw	r22, r14
    12ca:	80 e2       	ldi	r24, 0x20	; 32
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	2c 87       	std	Y+12, r18	; 0x0c
    12d0:	0e 94 f5 09 	call	0x13ea	; 0x13ea <fputc>
    12d4:	73 94       	inc	r7
    12d6:	2c 85       	ldd	r18, Y+12	; 0x0c
    12d8:	f5 cf       	rjmp	.-22     	; 0x12c4 <vfprintf+0x2f0>
    12da:	73 14       	cp	r7, r3
    12dc:	10 f4       	brcc	.+4      	; 0x12e2 <vfprintf+0x30e>
    12de:	37 18       	sub	r3, r7
    12e0:	01 c0       	rjmp	.+2      	; 0x12e4 <vfprintf+0x310>
    12e2:	31 2c       	mov	r3, r1
    12e4:	24 ff       	sbrs	r18, 4
    12e6:	12 c0       	rjmp	.+36     	; 0x130c <vfprintf+0x338>
    12e8:	b7 01       	movw	r22, r14
    12ea:	80 e3       	ldi	r24, 0x30	; 48
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	2c 87       	std	Y+12, r18	; 0x0c
    12f0:	0e 94 f5 09 	call	0x13ea	; 0x13ea <fputc>
    12f4:	2c 85       	ldd	r18, Y+12	; 0x0c
    12f6:	22 ff       	sbrs	r18, 2
    12f8:	17 c0       	rjmp	.+46     	; 0x1328 <vfprintf+0x354>
    12fa:	21 ff       	sbrs	r18, 1
    12fc:	03 c0       	rjmp	.+6      	; 0x1304 <vfprintf+0x330>
    12fe:	88 e5       	ldi	r24, 0x58	; 88
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <vfprintf+0x334>
    1304:	88 e7       	ldi	r24, 0x78	; 120
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	b7 01       	movw	r22, r14
    130a:	0c c0       	rjmp	.+24     	; 0x1324 <vfprintf+0x350>
    130c:	82 2f       	mov	r24, r18
    130e:	86 78       	andi	r24, 0x86	; 134
    1310:	59 f0       	breq	.+22     	; 0x1328 <vfprintf+0x354>
    1312:	21 fd       	sbrc	r18, 1
    1314:	02 c0       	rjmp	.+4      	; 0x131a <vfprintf+0x346>
    1316:	80 e2       	ldi	r24, 0x20	; 32
    1318:	01 c0       	rjmp	.+2      	; 0x131c <vfprintf+0x348>
    131a:	8b e2       	ldi	r24, 0x2B	; 43
    131c:	27 fd       	sbrc	r18, 7
    131e:	8d e2       	ldi	r24, 0x2D	; 45
    1320:	b7 01       	movw	r22, r14
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	0e 94 f5 09 	call	0x13ea	; 0x13ea <fputc>
    1328:	a5 14       	cp	r10, r5
    132a:	38 f4       	brcc	.+14     	; 0x133a <vfprintf+0x366>
    132c:	b7 01       	movw	r22, r14
    132e:	80 e3       	ldi	r24, 0x30	; 48
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	0e 94 f5 09 	call	0x13ea	; 0x13ea <fputc>
    1336:	5a 94       	dec	r5
    1338:	f7 cf       	rjmp	.-18     	; 0x1328 <vfprintf+0x354>
    133a:	aa 94       	dec	r10
    133c:	f4 01       	movw	r30, r8
    133e:	ea 0d       	add	r30, r10
    1340:	f1 1d       	adc	r31, r1
    1342:	80 81       	ld	r24, Z
    1344:	b7 01       	movw	r22, r14
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	0e 94 f5 09 	call	0x13ea	; 0x13ea <fputc>
    134c:	a1 10       	cpse	r10, r1
    134e:	f5 cf       	rjmp	.-22     	; 0x133a <vfprintf+0x366>
    1350:	33 20       	and	r3, r3
    1352:	09 f4       	brne	.+2      	; 0x1356 <vfprintf+0x382>
    1354:	51 ce       	rjmp	.-862    	; 0xff8 <vfprintf+0x24>
    1356:	b7 01       	movw	r22, r14
    1358:	80 e2       	ldi	r24, 0x20	; 32
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	0e 94 f5 09 	call	0x13ea	; 0x13ea <fputc>
    1360:	3a 94       	dec	r3
    1362:	f6 cf       	rjmp	.-20     	; 0x1350 <vfprintf+0x37c>
    1364:	f7 01       	movw	r30, r14
    1366:	86 81       	ldd	r24, Z+6	; 0x06
    1368:	97 81       	ldd	r25, Z+7	; 0x07
    136a:	02 c0       	rjmp	.+4      	; 0x1370 <vfprintf+0x39c>
    136c:	8f ef       	ldi	r24, 0xFF	; 255
    136e:	9f ef       	ldi	r25, 0xFF	; 255
    1370:	2c 96       	adiw	r28, 0x0c	; 12
    1372:	e2 e1       	ldi	r30, 0x12	; 18
    1374:	0c 94 a1 0a 	jmp	0x1542	; 0x1542 <__epilogue_restores__>

00001378 <calloc>:
    1378:	0f 93       	push	r16
    137a:	1f 93       	push	r17
    137c:	cf 93       	push	r28
    137e:	df 93       	push	r29
    1380:	86 9f       	mul	r24, r22
    1382:	80 01       	movw	r16, r0
    1384:	87 9f       	mul	r24, r23
    1386:	10 0d       	add	r17, r0
    1388:	96 9f       	mul	r25, r22
    138a:	10 0d       	add	r17, r0
    138c:	11 24       	eor	r1, r1
    138e:	c8 01       	movw	r24, r16
    1390:	0e 94 5d 06 	call	0xcba	; 0xcba <malloc>
    1394:	ec 01       	movw	r28, r24
    1396:	00 97       	sbiw	r24, 0x00	; 0
    1398:	29 f0       	breq	.+10     	; 0x13a4 <calloc+0x2c>
    139a:	a8 01       	movw	r20, r16
    139c:	60 e0       	ldi	r22, 0x00	; 0
    139e:	70 e0       	ldi	r23, 0x00	; 0
    13a0:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <memset>
    13a4:	ce 01       	movw	r24, r28
    13a6:	df 91       	pop	r29
    13a8:	cf 91       	pop	r28
    13aa:	1f 91       	pop	r17
    13ac:	0f 91       	pop	r16
    13ae:	08 95       	ret

000013b0 <strnlen_P>:
    13b0:	fc 01       	movw	r30, r24
    13b2:	05 90       	lpm	r0, Z+
    13b4:	61 50       	subi	r22, 0x01	; 1
    13b6:	70 40       	sbci	r23, 0x00	; 0
    13b8:	01 10       	cpse	r0, r1
    13ba:	d8 f7       	brcc	.-10     	; 0x13b2 <strnlen_P+0x2>
    13bc:	80 95       	com	r24
    13be:	90 95       	com	r25
    13c0:	8e 0f       	add	r24, r30
    13c2:	9f 1f       	adc	r25, r31
    13c4:	08 95       	ret

000013c6 <memset>:
    13c6:	dc 01       	movw	r26, r24
    13c8:	01 c0       	rjmp	.+2      	; 0x13cc <memset+0x6>
    13ca:	6d 93       	st	X+, r22
    13cc:	41 50       	subi	r20, 0x01	; 1
    13ce:	50 40       	sbci	r21, 0x00	; 0
    13d0:	e0 f7       	brcc	.-8      	; 0x13ca <memset+0x4>
    13d2:	08 95       	ret

000013d4 <strnlen>:
    13d4:	fc 01       	movw	r30, r24
    13d6:	61 50       	subi	r22, 0x01	; 1
    13d8:	70 40       	sbci	r23, 0x00	; 0
    13da:	01 90       	ld	r0, Z+
    13dc:	01 10       	cpse	r0, r1
    13de:	d8 f7       	brcc	.-10     	; 0x13d6 <strnlen+0x2>
    13e0:	80 95       	com	r24
    13e2:	90 95       	com	r25
    13e4:	8e 0f       	add	r24, r30
    13e6:	9f 1f       	adc	r25, r31
    13e8:	08 95       	ret

000013ea <fputc>:
    13ea:	0f 93       	push	r16
    13ec:	1f 93       	push	r17
    13ee:	cf 93       	push	r28
    13f0:	df 93       	push	r29
    13f2:	18 2f       	mov	r17, r24
    13f4:	09 2f       	mov	r16, r25
    13f6:	eb 01       	movw	r28, r22
    13f8:	8b 81       	ldd	r24, Y+3	; 0x03
    13fa:	81 fd       	sbrc	r24, 1
    13fc:	03 c0       	rjmp	.+6      	; 0x1404 <fputc+0x1a>
    13fe:	8f ef       	ldi	r24, 0xFF	; 255
    1400:	9f ef       	ldi	r25, 0xFF	; 255
    1402:	20 c0       	rjmp	.+64     	; 0x1444 <fputc+0x5a>
    1404:	82 ff       	sbrs	r24, 2
    1406:	10 c0       	rjmp	.+32     	; 0x1428 <fputc+0x3e>
    1408:	4e 81       	ldd	r20, Y+6	; 0x06
    140a:	5f 81       	ldd	r21, Y+7	; 0x07
    140c:	2c 81       	ldd	r18, Y+4	; 0x04
    140e:	3d 81       	ldd	r19, Y+5	; 0x05
    1410:	42 17       	cp	r20, r18
    1412:	53 07       	cpc	r21, r19
    1414:	7c f4       	brge	.+30     	; 0x1434 <fputc+0x4a>
    1416:	e8 81       	ld	r30, Y
    1418:	f9 81       	ldd	r31, Y+1	; 0x01
    141a:	9f 01       	movw	r18, r30
    141c:	2f 5f       	subi	r18, 0xFF	; 255
    141e:	3f 4f       	sbci	r19, 0xFF	; 255
    1420:	39 83       	std	Y+1, r19	; 0x01
    1422:	28 83       	st	Y, r18
    1424:	10 83       	st	Z, r17
    1426:	06 c0       	rjmp	.+12     	; 0x1434 <fputc+0x4a>
    1428:	e8 85       	ldd	r30, Y+8	; 0x08
    142a:	f9 85       	ldd	r31, Y+9	; 0x09
    142c:	81 2f       	mov	r24, r17
    142e:	09 95       	icall
    1430:	89 2b       	or	r24, r25
    1432:	29 f7       	brne	.-54     	; 0x13fe <fputc+0x14>
    1434:	2e 81       	ldd	r18, Y+6	; 0x06
    1436:	3f 81       	ldd	r19, Y+7	; 0x07
    1438:	2f 5f       	subi	r18, 0xFF	; 255
    143a:	3f 4f       	sbci	r19, 0xFF	; 255
    143c:	3f 83       	std	Y+7, r19	; 0x07
    143e:	2e 83       	std	Y+6, r18	; 0x06
    1440:	81 2f       	mov	r24, r17
    1442:	90 2f       	mov	r25, r16
    1444:	df 91       	pop	r29
    1446:	cf 91       	pop	r28
    1448:	1f 91       	pop	r17
    144a:	0f 91       	pop	r16
    144c:	08 95       	ret

0000144e <__ultoa_invert>:
    144e:	fa 01       	movw	r30, r20
    1450:	aa 27       	eor	r26, r26
    1452:	28 30       	cpi	r18, 0x08	; 8
    1454:	51 f1       	breq	.+84     	; 0x14aa <__ultoa_invert+0x5c>
    1456:	20 31       	cpi	r18, 0x10	; 16
    1458:	81 f1       	breq	.+96     	; 0x14ba <__ultoa_invert+0x6c>
    145a:	e8 94       	clt
    145c:	6f 93       	push	r22
    145e:	6e 7f       	andi	r22, 0xFE	; 254
    1460:	6e 5f       	subi	r22, 0xFE	; 254
    1462:	7f 4f       	sbci	r23, 0xFF	; 255
    1464:	8f 4f       	sbci	r24, 0xFF	; 255
    1466:	9f 4f       	sbci	r25, 0xFF	; 255
    1468:	af 4f       	sbci	r26, 0xFF	; 255
    146a:	b1 e0       	ldi	r27, 0x01	; 1
    146c:	3e d0       	rcall	.+124    	; 0x14ea <__ultoa_invert+0x9c>
    146e:	b4 e0       	ldi	r27, 0x04	; 4
    1470:	3c d0       	rcall	.+120    	; 0x14ea <__ultoa_invert+0x9c>
    1472:	67 0f       	add	r22, r23
    1474:	78 1f       	adc	r23, r24
    1476:	89 1f       	adc	r24, r25
    1478:	9a 1f       	adc	r25, r26
    147a:	a1 1d       	adc	r26, r1
    147c:	68 0f       	add	r22, r24
    147e:	79 1f       	adc	r23, r25
    1480:	8a 1f       	adc	r24, r26
    1482:	91 1d       	adc	r25, r1
    1484:	a1 1d       	adc	r26, r1
    1486:	6a 0f       	add	r22, r26
    1488:	71 1d       	adc	r23, r1
    148a:	81 1d       	adc	r24, r1
    148c:	91 1d       	adc	r25, r1
    148e:	a1 1d       	adc	r26, r1
    1490:	20 d0       	rcall	.+64     	; 0x14d2 <__ultoa_invert+0x84>
    1492:	09 f4       	brne	.+2      	; 0x1496 <__ultoa_invert+0x48>
    1494:	68 94       	set
    1496:	3f 91       	pop	r19
    1498:	2a e0       	ldi	r18, 0x0A	; 10
    149a:	26 9f       	mul	r18, r22
    149c:	11 24       	eor	r1, r1
    149e:	30 19       	sub	r19, r0
    14a0:	30 5d       	subi	r19, 0xD0	; 208
    14a2:	31 93       	st	Z+, r19
    14a4:	de f6       	brtc	.-74     	; 0x145c <__ultoa_invert+0xe>
    14a6:	cf 01       	movw	r24, r30
    14a8:	08 95       	ret
    14aa:	46 2f       	mov	r20, r22
    14ac:	47 70       	andi	r20, 0x07	; 7
    14ae:	40 5d       	subi	r20, 0xD0	; 208
    14b0:	41 93       	st	Z+, r20
    14b2:	b3 e0       	ldi	r27, 0x03	; 3
    14b4:	0f d0       	rcall	.+30     	; 0x14d4 <__ultoa_invert+0x86>
    14b6:	c9 f7       	brne	.-14     	; 0x14aa <__ultoa_invert+0x5c>
    14b8:	f6 cf       	rjmp	.-20     	; 0x14a6 <__ultoa_invert+0x58>
    14ba:	46 2f       	mov	r20, r22
    14bc:	4f 70       	andi	r20, 0x0F	; 15
    14be:	40 5d       	subi	r20, 0xD0	; 208
    14c0:	4a 33       	cpi	r20, 0x3A	; 58
    14c2:	18 f0       	brcs	.+6      	; 0x14ca <__ultoa_invert+0x7c>
    14c4:	49 5d       	subi	r20, 0xD9	; 217
    14c6:	31 fd       	sbrc	r19, 1
    14c8:	40 52       	subi	r20, 0x20	; 32
    14ca:	41 93       	st	Z+, r20
    14cc:	02 d0       	rcall	.+4      	; 0x14d2 <__ultoa_invert+0x84>
    14ce:	a9 f7       	brne	.-22     	; 0x14ba <__ultoa_invert+0x6c>
    14d0:	ea cf       	rjmp	.-44     	; 0x14a6 <__ultoa_invert+0x58>
    14d2:	b4 e0       	ldi	r27, 0x04	; 4
    14d4:	a6 95       	lsr	r26
    14d6:	97 95       	ror	r25
    14d8:	87 95       	ror	r24
    14da:	77 95       	ror	r23
    14dc:	67 95       	ror	r22
    14de:	ba 95       	dec	r27
    14e0:	c9 f7       	brne	.-14     	; 0x14d4 <__ultoa_invert+0x86>
    14e2:	00 97       	sbiw	r24, 0x00	; 0
    14e4:	61 05       	cpc	r22, r1
    14e6:	71 05       	cpc	r23, r1
    14e8:	08 95       	ret
    14ea:	9b 01       	movw	r18, r22
    14ec:	ac 01       	movw	r20, r24
    14ee:	0a 2e       	mov	r0, r26
    14f0:	06 94       	lsr	r0
    14f2:	57 95       	ror	r21
    14f4:	47 95       	ror	r20
    14f6:	37 95       	ror	r19
    14f8:	27 95       	ror	r18
    14fa:	ba 95       	dec	r27
    14fc:	c9 f7       	brne	.-14     	; 0x14f0 <__ultoa_invert+0xa2>
    14fe:	62 0f       	add	r22, r18
    1500:	73 1f       	adc	r23, r19
    1502:	84 1f       	adc	r24, r20
    1504:	95 1f       	adc	r25, r21
    1506:	a0 1d       	adc	r26, r0
    1508:	08 95       	ret

0000150a <__prologue_saves__>:
    150a:	2f 92       	push	r2
    150c:	3f 92       	push	r3
    150e:	4f 92       	push	r4
    1510:	5f 92       	push	r5
    1512:	6f 92       	push	r6
    1514:	7f 92       	push	r7
    1516:	8f 92       	push	r8
    1518:	9f 92       	push	r9
    151a:	af 92       	push	r10
    151c:	bf 92       	push	r11
    151e:	cf 92       	push	r12
    1520:	df 92       	push	r13
    1522:	ef 92       	push	r14
    1524:	ff 92       	push	r15
    1526:	0f 93       	push	r16
    1528:	1f 93       	push	r17
    152a:	cf 93       	push	r28
    152c:	df 93       	push	r29
    152e:	cd b7       	in	r28, 0x3d	; 61
    1530:	de b7       	in	r29, 0x3e	; 62
    1532:	ca 1b       	sub	r28, r26
    1534:	db 0b       	sbc	r29, r27
    1536:	0f b6       	in	r0, 0x3f	; 63
    1538:	f8 94       	cli
    153a:	de bf       	out	0x3e, r29	; 62
    153c:	0f be       	out	0x3f, r0	; 63
    153e:	cd bf       	out	0x3d, r28	; 61
    1540:	09 94       	ijmp

00001542 <__epilogue_restores__>:
    1542:	2a 88       	ldd	r2, Y+18	; 0x12
    1544:	39 88       	ldd	r3, Y+17	; 0x11
    1546:	48 88       	ldd	r4, Y+16	; 0x10
    1548:	5f 84       	ldd	r5, Y+15	; 0x0f
    154a:	6e 84       	ldd	r6, Y+14	; 0x0e
    154c:	7d 84       	ldd	r7, Y+13	; 0x0d
    154e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1550:	9b 84       	ldd	r9, Y+11	; 0x0b
    1552:	aa 84       	ldd	r10, Y+10	; 0x0a
    1554:	b9 84       	ldd	r11, Y+9	; 0x09
    1556:	c8 84       	ldd	r12, Y+8	; 0x08
    1558:	df 80       	ldd	r13, Y+7	; 0x07
    155a:	ee 80       	ldd	r14, Y+6	; 0x06
    155c:	fd 80       	ldd	r15, Y+5	; 0x05
    155e:	0c 81       	ldd	r16, Y+4	; 0x04
    1560:	1b 81       	ldd	r17, Y+3	; 0x03
    1562:	aa 81       	ldd	r26, Y+2	; 0x02
    1564:	b9 81       	ldd	r27, Y+1	; 0x01
    1566:	ce 0f       	add	r28, r30
    1568:	d1 1d       	adc	r29, r1
    156a:	0f b6       	in	r0, 0x3f	; 63
    156c:	f8 94       	cli
    156e:	de bf       	out	0x3e, r29	; 62
    1570:	0f be       	out	0x3f, r0	; 63
    1572:	cd bf       	out	0x3d, r28	; 61
    1574:	ed 01       	movw	r28, r26
    1576:	08 95       	ret

00001578 <_exit>:
    1578:	f8 94       	cli

0000157a <__stop_program>:
    157a:	ff cf       	rjmp	.-2      	; 0x157a <__stop_program>
