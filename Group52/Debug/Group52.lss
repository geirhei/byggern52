
Group52.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000142  00800100  0000146c  00001500  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000146c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800242  00800242  00001642  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001642  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000218  00000000  00000000  0000169e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000022e2  00000000  00000000  000018b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ada  00000000  00000000  00003b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b06  00000000  00000000  00004672  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004f4  00000000  00000000  00005178  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000067c  00000000  00000000  0000566c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001203  00000000  00000000  00005ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001f0  00000000  00000000  00006eeb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__ctors_end>
       4:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
       8:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
       c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      10:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      14:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      18:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      1c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      20:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      24:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      28:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      2c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      30:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      34:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      38:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      3c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      40:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      44:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      48:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      4c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      50:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      54:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      58:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      5c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      60:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      64:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      68:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      6c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	00 00       	nop
      72:	00 00       	nop
      74:	00 5c       	subi	r16, 0xC0	; 192
      76:	00 00       	nop
      78:	0c 00       	.word	0x000c	; ????
      7a:	0c 00       	.word	0x000c	; ????
      7c:	7c 28       	or	r7, r12
      7e:	7c 28       	or	r7, r12
      80:	58 dc       	rcall	.-1872   	; 0xfffff932 <__eeprom_end+0xff7ef932>
      82:	68 00       	.word	0x0068	; ????
      84:	24 10       	cpse	r2, r4
      86:	48 00       	.word	0x0048	; ????
      88:	28 54       	subi	r18, 0x48	; 72
      8a:	28 40       	sbci	r18, 0x08	; 8
      8c:	00 0c       	add	r0, r0
      8e:	00 00       	nop
      90:	00 78       	andi	r16, 0x80	; 128
      92:	84 00       	.word	0x0084	; ????
      94:	84 78       	andi	r24, 0x84	; 132
      96:	00 00       	nop
      98:	54 38       	cpi	r21, 0x84	; 132
      9a:	54 00       	.word	0x0054	; ????
      9c:	10 7c       	andi	r17, 0xC0	; 192
      9e:	10 00       	.word	0x0010	; ????
      a0:	80 40       	sbci	r24, 0x00	; 0
      a2:	00 00       	nop
      a4:	10 10       	cpse	r1, r0
      a6:	10 00       	.word	0x0010	; ????
      a8:	00 40       	sbci	r16, 0x00	; 0
      aa:	00 00       	nop
      ac:	60 10       	cpse	r6, r0
      ae:	0c 00       	.word	0x000c	; ????
      b0:	38 54       	subi	r19, 0x48	; 72
      b2:	38 00       	.word	0x0038	; ????
      b4:	48 7c       	andi	r20, 0xC8	; 200
      b6:	40 00       	.word	0x0040	; ????
      b8:	48 64       	ori	r20, 0x48	; 72
      ba:	58 00       	.word	0x0058	; ????
      bc:	44 54       	subi	r20, 0x44	; 68
      be:	2c 00       	.word	0x002c	; ????
      c0:	1c 10       	cpse	r1, r12
      c2:	7c 00       	.word	0x007c	; ????
      c4:	5c 54       	subi	r21, 0x4C	; 76
      c6:	24 00       	.word	0x0024	; ????
      c8:	38 54       	subi	r19, 0x48	; 72
      ca:	24 00       	.word	0x0024	; ????
      cc:	64 14       	cp	r6, r4
      ce:	0c 00       	.word	0x000c	; ????
      d0:	68 54       	subi	r22, 0x48	; 72
      d2:	2c 00       	.word	0x002c	; ????
      d4:	48 54       	subi	r20, 0x48	; 72
      d6:	38 00       	.word	0x0038	; ????
      d8:	00 48       	sbci	r16, 0x80	; 128
      da:	00 00       	nop
      dc:	80 48       	sbci	r24, 0x80	; 128
      de:	00 00       	nop
      e0:	10 28       	or	r1, r0
      e2:	44 00       	.word	0x0044	; ????
      e4:	28 28       	or	r2, r8
      e6:	28 00       	.word	0x0028	; ????
      e8:	44 28       	or	r4, r4
      ea:	10 00       	.word	0x0010	; ????
      ec:	04 54       	subi	r16, 0x44	; 68
      ee:	08 00       	.word	0x0008	; ????
      f0:	38 44       	sbci	r19, 0x48	; 72
      f2:	5c 00       	.word	0x005c	; ????
      f4:	78 14       	cp	r7, r8
      f6:	78 00       	.word	0x0078	; ????
      f8:	7c 54       	subi	r23, 0x4C	; 76
      fa:	28 00       	.word	0x0028	; ????
      fc:	38 44       	sbci	r19, 0x48	; 72
      fe:	28 00       	.word	0x0028	; ????
     100:	7c 44       	sbci	r23, 0x4C	; 76
     102:	38 00       	.word	0x0038	; ????
     104:	7c 54       	subi	r23, 0x4C	; 76
     106:	44 00       	.word	0x0044	; ????
     108:	7c 14       	cp	r7, r12
     10a:	04 00       	.word	0x0004	; ????
     10c:	38 44       	sbci	r19, 0x48	; 72
     10e:	74 00       	.word	0x0074	; ????
     110:	7c 10       	cpse	r7, r12
     112:	7c 00       	.word	0x007c	; ????
     114:	44 7c       	andi	r20, 0xC4	; 196
     116:	44 00       	.word	0x0044	; ????
     118:	20 40       	sbci	r18, 0x00	; 0
     11a:	3c 00       	.word	0x003c	; ????
     11c:	7c 10       	cpse	r7, r12
     11e:	6c 00       	.word	0x006c	; ????
     120:	7c 40       	sbci	r23, 0x0C	; 12
     122:	40 00       	.word	0x0040	; ????
     124:	7c 18       	sub	r7, r12
     126:	7c 00       	.word	0x007c	; ????
     128:	78 10       	cpse	r7, r8
     12a:	3c 00       	.word	0x003c	; ????
     12c:	38 44       	sbci	r19, 0x48	; 72
     12e:	38 00       	.word	0x0038	; ????
     130:	7c 14       	cp	r7, r12
     132:	08 00       	.word	0x0008	; ????
     134:	38 44       	sbci	r19, 0x48	; 72
     136:	b8 00       	.word	0x00b8	; ????
     138:	7c 14       	cp	r7, r12
     13a:	68 00       	.word	0x0068	; ????
     13c:	48 54       	subi	r20, 0x48	; 72
     13e:	24 00       	.word	0x0024	; ????
     140:	04 7c       	andi	r16, 0xC4	; 196
     142:	04 00       	.word	0x0004	; ????
     144:	7c 40       	sbci	r23, 0x0C	; 12
     146:	7c 00       	.word	0x007c	; ????
     148:	3c 60       	ori	r19, 0x0C	; 12
     14a:	3c 00       	.word	0x003c	; ????
     14c:	7c 30       	cpi	r23, 0x0C	; 12
     14e:	7c 00       	.word	0x007c	; ????
     150:	6c 10       	cpse	r6, r12
     152:	6c 00       	.word	0x006c	; ????
     154:	0c 70       	andi	r16, 0x0C	; 12
     156:	0c 00       	.word	0x000c	; ????
     158:	64 54       	subi	r22, 0x44	; 68
     15a:	4c 00       	.word	0x004c	; ????
     15c:	00 7c       	andi	r16, 0xC0	; 192
     15e:	44 00       	.word	0x0044	; ????
     160:	0c 10       	cpse	r0, r12
     162:	60 00       	.word	0x0060	; ????
     164:	44 7c       	andi	r20, 0xC4	; 196
     166:	00 00       	nop
     168:	08 04       	cpc	r0, r8
     16a:	08 00       	.word	0x0008	; ????
     16c:	80 80       	ld	r8, Z
     16e:	80 00       	.word	0x0080	; ????
     170:	00 04       	cpc	r0, r0
     172:	08 00       	.word	0x0008	; ????
     174:	30 48       	sbci	r19, 0x80	; 128
     176:	78 00       	.word	0x0078	; ????
     178:	7c 48       	sbci	r23, 0x8C	; 140
     17a:	30 00       	.word	0x0030	; ????
     17c:	30 48       	sbci	r19, 0x80	; 128
     17e:	48 00       	.word	0x0048	; ????
     180:	30 48       	sbci	r19, 0x80	; 128
     182:	7c 00       	.word	0x007c	; ????
     184:	30 68       	ori	r19, 0x80	; 128
     186:	50 00       	.word	0x0050	; ????
     188:	10 78       	andi	r17, 0x80	; 128
     18a:	14 00       	.word	0x0014	; ????
     18c:	90 a8       	ldd	r9, Z+48	; 0x30
     18e:	78 00       	.word	0x0078	; ????
     190:	7c 08       	sbc	r7, r12
     192:	70 00       	.word	0x0070	; ????
     194:	50 74       	andi	r21, 0x40	; 64
     196:	40 00       	.word	0x0040	; ????
     198:	80 80       	ld	r8, Z
     19a:	74 00       	.word	0x0074	; ????
     19c:	7c 10       	cpse	r7, r12
     19e:	68 00       	.word	0x0068	; ????
     1a0:	44 7c       	andi	r20, 0xC4	; 196
     1a2:	40 00       	.word	0x0040	; ????
     1a4:	78 10       	cpse	r7, r8
     1a6:	78 00       	.word	0x0078	; ????
     1a8:	78 08       	sbc	r7, r8
     1aa:	70 00       	.word	0x0070	; ????
     1ac:	30 48       	sbci	r19, 0x80	; 128
     1ae:	30 00       	.word	0x0030	; ????
     1b0:	f8 28       	or	r15, r8
     1b2:	10 00       	.word	0x0010	; ????
     1b4:	30 48       	sbci	r19, 0x80	; 128
     1b6:	f8 00       	.word	0x00f8	; ????
     1b8:	78 10       	cpse	r7, r8
     1ba:	08 00       	.word	0x0008	; ????
     1bc:	50 58       	subi	r21, 0x80	; 128
     1be:	28 00       	.word	0x0028	; ????
     1c0:	08 3c       	cpi	r16, 0xC8	; 200
     1c2:	48 00       	.word	0x0048	; ????
     1c4:	38 40       	sbci	r19, 0x08	; 8
     1c6:	78 00       	.word	0x0078	; ????
     1c8:	38 40       	sbci	r19, 0x08	; 8
     1ca:	38 00       	.word	0x0038	; ????
     1cc:	78 20       	and	r7, r8
     1ce:	78 00       	.word	0x0078	; ????
     1d0:	48 30       	cpi	r20, 0x08	; 8
     1d2:	48 00       	.word	0x0048	; ????
     1d4:	98 a0       	ldd	r9, Y+32	; 0x20
     1d6:	78 00       	.word	0x0078	; ????
     1d8:	48 68       	ori	r20, 0x88	; 136
     1da:	58 00       	.word	0x0058	; ????
     1dc:	10 78       	andi	r17, 0x80	; 128
     1de:	84 00       	.word	0x0084	; ????
     1e0:	00 7c       	andi	r16, 0xC0	; 192
     1e2:	00 00       	nop
     1e4:	84 78       	andi	r24, 0x84	; 132
     1e6:	10 00       	.word	0x0010	; ????
     1e8:	08 04       	cpc	r0, r8
     1ea:	08 04       	cpc	r0, r8

000001ec <__ctors_end>:
     1ec:	11 24       	eor	r1, r1
     1ee:	1f be       	out	0x3f, r1	; 63
     1f0:	cf ef       	ldi	r28, 0xFF	; 255
     1f2:	d4 e0       	ldi	r29, 0x04	; 4
     1f4:	de bf       	out	0x3e, r29	; 62
     1f6:	cd bf       	out	0x3d, r28	; 61

000001f8 <__do_copy_data>:
     1f8:	12 e0       	ldi	r17, 0x02	; 2
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b1 e0       	ldi	r27, 0x01	; 1
     1fe:	ec e6       	ldi	r30, 0x6C	; 108
     200:	f4 e1       	ldi	r31, 0x14	; 20
     202:	02 c0       	rjmp	.+4      	; 0x208 <__do_copy_data+0x10>
     204:	05 90       	lpm	r0, Z+
     206:	0d 92       	st	X+, r0
     208:	a2 34       	cpi	r26, 0x42	; 66
     20a:	b1 07       	cpc	r27, r17
     20c:	d9 f7       	brne	.-10     	; 0x204 <__do_copy_data+0xc>

0000020e <__do_clear_bss>:
     20e:	22 e0       	ldi	r18, 0x02	; 2
     210:	a2 e4       	ldi	r26, 0x42	; 66
     212:	b2 e0       	ldi	r27, 0x02	; 2
     214:	01 c0       	rjmp	.+2      	; 0x218 <.do_clear_bss_start>

00000216 <.do_clear_bss_loop>:
     216:	1d 92       	st	X+, r1

00000218 <.do_clear_bss_start>:
     218:	ac 34       	cpi	r26, 0x4C	; 76
     21a:	b2 07       	cpc	r27, r18
     21c:	e1 f7       	brne	.-8      	; 0x216 <.do_clear_bss_loop>
     21e:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <main>
     222:	0c 94 34 0a 	jmp	0x1468	; 0x1468 <_exit>

00000226 <__bad_interrupt>:
     226:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000022a <adc_read>:
#include <util/delay.h>
#include "adc.h"

uint8_t adc_read(DeviceType device){
	volatile char *adc = (char *) 0x1400;
	switch (device) {
     22a:	82 30       	cpi	r24, 0x02	; 2
     22c:	69 f0       	breq	.+26     	; 0x248 <adc_read+0x1e>
     22e:	18 f4       	brcc	.+6      	; 0x236 <adc_read+0xc>
     230:	81 30       	cpi	r24, 0x01	; 1
     232:	31 f0       	breq	.+12     	; 0x240 <adc_read+0x16>
     234:	14 c0       	rjmp	.+40     	; 0x25e <adc_read+0x34>
     236:	83 30       	cpi	r24, 0x03	; 3
     238:	59 f0       	breq	.+22     	; 0x250 <adc_read+0x26>
     23a:	84 30       	cpi	r24, 0x04	; 4
     23c:	69 f0       	breq	.+26     	; 0x258 <adc_read+0x2e>
     23e:	0f c0       	rjmp	.+30     	; 0x25e <adc_read+0x34>
		case JOYAXIS1:
		/* Select CH1 */
		adc[0] = 0b00000100;
     240:	84 e0       	ldi	r24, 0x04	; 4
     242:	80 93 00 14 	sts	0x1400, r24
		break;
     246:	0b c0       	rjmp	.+22     	; 0x25e <adc_read+0x34>
		
		case JOYAXIS2:
		/* Select CH2 */
		adc[0] = 0b00000101;
     248:	85 e0       	ldi	r24, 0x05	; 5
     24a:	80 93 00 14 	sts	0x1400, r24
		break;
     24e:	07 c0       	rjmp	.+14     	; 0x25e <adc_read+0x34>
		
		case LSLIDER:
		/* Select CH3 */
		adc[0] = 0b00000110;
     250:	86 e0       	ldi	r24, 0x06	; 6
     252:	80 93 00 14 	sts	0x1400, r24
		break;
     256:	03 c0       	rjmp	.+6      	; 0x25e <adc_read+0x34>
		
		case RSLIDER:
		/* Select CH1 */
		adc[0] = 0b00000111;
     258:	87 e0       	ldi	r24, 0x07	; 7
     25a:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     25e:	2c ec       	ldi	r18, 0xCC	; 204
     260:	8c e0       	ldi	r24, 0x0C	; 12
     262:	91 e0       	ldi	r25, 0x01	; 1
     264:	21 50       	subi	r18, 0x01	; 1
     266:	80 40       	sbci	r24, 0x00	; 0
     268:	90 40       	sbci	r25, 0x00	; 0
     26a:	e1 f7       	brne	.-8      	; 0x264 <adc_read+0x3a>
     26c:	00 c0       	rjmp	.+0      	; 0x26e <adc_read+0x44>
		break;
		default:
		break;
	}
	_delay_ms(70);
	return adc[0];
     26e:	80 91 00 14 	lds	r24, 0x1400
     272:	08 95       	ret

00000274 <JOYSTICK_init>:
#include "math.h"

void JOYSTICK_init(void)
{
	/* Set PB2 as input for button*/
	DDRB &= ~(1 << PB2);
     274:	ba 98       	cbi	0x17, 2	; 23
	PORTB &= (1 << PB2);
     276:	88 b3       	in	r24, 0x18	; 24
     278:	84 70       	andi	r24, 0x04	; 4
     27a:	88 bb       	out	0x18, r24	; 24
     27c:	08 95       	ret

0000027e <toPositionPercent>:
	return NEUTRAL;
}

int16_t toPositionPercent(int16_t value)
{
	value -= 127;
     27e:	8f 57       	subi	r24, 0x7F	; 127
     280:	91 09       	sbc	r25, r1
	int16_t percentValue = round((float)value / 127 * 100);
     282:	bc 01       	movw	r22, r24
     284:	88 27       	eor	r24, r24
     286:	77 fd       	sbrc	r23, 7
     288:	80 95       	com	r24
     28a:	98 2f       	mov	r25, r24
     28c:	0e 94 a4 04 	call	0x948	; 0x948 <__floatsisf>
     290:	20 e0       	ldi	r18, 0x00	; 0
     292:	30 e0       	ldi	r19, 0x00	; 0
     294:	4e ef       	ldi	r20, 0xFE	; 254
     296:	52 e4       	ldi	r21, 0x42	; 66
     298:	0e 94 09 04 	call	0x812	; 0x812 <__divsf3>
     29c:	20 e0       	ldi	r18, 0x00	; 0
     29e:	30 e0       	ldi	r19, 0x00	; 0
     2a0:	48 ec       	ldi	r20, 0xC8	; 200
     2a2:	52 e4       	ldi	r21, 0x42	; 66
     2a4:	0e 94 30 05 	call	0xa60	; 0xa60 <__mulsf3>
     2a8:	0e 94 93 05 	call	0xb26	; 0xb26 <round>
     2ac:	0e 94 71 04 	call	0x8e2	; 0x8e2 <__fixsfsi>
	return percentValue;
}
     2b0:	cb 01       	movw	r24, r22
     2b2:	08 95       	ret

000002b4 <JOYSTICK_get_position>:
{
	
}

struct positions JOYSTICK_get_position(void)
{
     2b4:	ff 92       	push	r15
     2b6:	0f 93       	push	r16
     2b8:	1f 93       	push	r17
     2ba:	cf 93       	push	r28
     2bc:	df 93       	push	r29
     2be:	cd b7       	in	r28, 0x3d	; 61
     2c0:	de b7       	in	r29, 0x3e	; 62
     2c2:	28 97       	sbiw	r28, 0x08	; 8
     2c4:	0f b6       	in	r0, 0x3f	; 63
     2c6:	f8 94       	cli
     2c8:	de bf       	out	0x3e, r29	; 62
     2ca:	0f be       	out	0x3f, r0	; 63
     2cc:	cd bf       	out	0x3d, r28	; 61
	int16_t yValue = (int16_t) adc_read(JOYAXIS1);
     2ce:	81 e0       	ldi	r24, 0x01	; 1
     2d0:	0e 94 15 01 	call	0x22a	; 0x22a <adc_read>
     2d4:	f8 2e       	mov	r15, r24
	int16_t xValue = (int16_t) adc_read(JOYAXIS2);
     2d6:	82 e0       	ldi	r24, 0x02	; 2
     2d8:	0e 94 15 01 	call	0x22a	; 0x22a <adc_read>
	
	int16_t xPosition = toPositionPercent(xValue);
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	0e 94 3f 01 	call	0x27e	; 0x27e <toPositionPercent>
     2e2:	18 2f       	mov	r17, r24
     2e4:	09 2f       	mov	r16, r25
	int16_t yPosition = toPositionPercent(yValue);
     2e6:	8f 2d       	mov	r24, r15
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	0e 94 3f 01 	call	0x27e	; 0x27e <toPositionPercent>
	
	struct positions pos;
	pos.x = xPosition;
	pos.y = yPosition;
	
	return pos;
     2ee:	19 83       	std	Y+1, r17	; 0x01
     2f0:	0a 83       	std	Y+2, r16	; 0x02
     2f2:	8b 83       	std	Y+3, r24	; 0x03
     2f4:	9c 83       	std	Y+4, r25	; 0x04
     2f6:	21 2f       	mov	r18, r17
     2f8:	30 2f       	mov	r19, r16
     2fa:	48 2f       	mov	r20, r24
     2fc:	59 2f       	mov	r21, r25
     2fe:	6d 81       	ldd	r22, Y+5	; 0x05
     300:	7e 81       	ldd	r23, Y+6	; 0x06
}
     302:	8f 81       	ldd	r24, Y+7	; 0x07
     304:	98 85       	ldd	r25, Y+8	; 0x08
     306:	28 96       	adiw	r28, 0x08	; 8
     308:	0f b6       	in	r0, 0x3f	; 63
     30a:	f8 94       	cli
     30c:	de bf       	out	0x3e, r29	; 62
     30e:	0f be       	out	0x3f, r0	; 63
     310:	cd bf       	out	0x3d, r28	; 61
     312:	df 91       	pop	r29
     314:	cf 91       	pop	r28
     316:	1f 91       	pop	r17
     318:	0f 91       	pop	r16
     31a:	ff 90       	pop	r15
     31c:	08 95       	ret

0000031e <JOYSTICK_get_direction>:


DirectionType JOYSTICK_get_direction(void)
{
     31e:	cf 93       	push	r28
     320:	df 93       	push	r29
     322:	cd b7       	in	r28, 0x3d	; 61
     324:	de b7       	in	r29, 0x3e	; 62
     326:	28 97       	sbiw	r28, 0x08	; 8
     328:	0f b6       	in	r0, 0x3f	; 63
     32a:	f8 94       	cli
     32c:	de bf       	out	0x3e, r29	; 62
     32e:	0f be       	out	0x3f, r0	; 63
     330:	cd bf       	out	0x3d, r28	; 61
	struct positions pos = JOYSTICK_get_position();
     332:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <JOYSTICK_get_position>
     336:	29 83       	std	Y+1, r18	; 0x01
     338:	3a 83       	std	Y+2, r19	; 0x02
     33a:	4b 83       	std	Y+3, r20	; 0x03
     33c:	5c 83       	std	Y+4, r21	; 0x04
     33e:	29 81       	ldd	r18, Y+1	; 0x01
     340:	3a 81       	ldd	r19, Y+2	; 0x02
     342:	8b 81       	ldd	r24, Y+3	; 0x03
     344:	9c 81       	ldd	r25, Y+4	; 0x04
	int8_t THRESHOLD = 25;
	
	if (pos.y < THRESHOLD && pos.y > -THRESHOLD) {
     346:	ac 01       	movw	r20, r24
     348:	48 5e       	subi	r20, 0xE8	; 232
     34a:	5f 4f       	sbci	r21, 0xFF	; 255
     34c:	41 33       	cpi	r20, 0x31	; 49
     34e:	51 05       	cpc	r21, r1
     350:	48 f4       	brcc	.+18     	; 0x364 <JOYSTICK_get_direction+0x46>
		
		if (pos.x < -THRESHOLD) {
     352:	27 3e       	cpi	r18, 0xE7	; 231
     354:	8f ef       	ldi	r24, 0xFF	; 255
     356:	38 07       	cpc	r19, r24
     358:	94 f0       	brlt	.+36     	; 0x37e <JOYSTICK_get_direction+0x60>
			return LEFT;
		} else if (pos.x > THRESHOLD) {
     35a:	2a 31       	cpi	r18, 0x1A	; 26
     35c:	31 05       	cpc	r19, r1
     35e:	8c f4       	brge	.+34     	; 0x382 <JOYSTICK_get_direction+0x64>
			return UP;
		}
		
	}
	
	return NEUTRAL;
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	16 c0       	rjmp	.+44     	; 0x390 <JOYSTICK_get_direction+0x72>
			return LEFT;
		} else if (pos.x > THRESHOLD) {
			return RIGHT;
		}
		
	} else if (pos.x < THRESHOLD && pos.x > -THRESHOLD) {
     364:	28 5e       	subi	r18, 0xE8	; 232
     366:	3f 4f       	sbci	r19, 0xFF	; 255
     368:	21 33       	cpi	r18, 0x31	; 49
     36a:	31 05       	cpc	r19, r1
     36c:	60 f4       	brcc	.+24     	; 0x386 <JOYSTICK_get_direction+0x68>
		
		if (pos.y < -THRESHOLD) {
     36e:	87 3e       	cpi	r24, 0xE7	; 231
     370:	2f ef       	ldi	r18, 0xFF	; 255
     372:	92 07       	cpc	r25, r18
     374:	54 f0       	brlt	.+20     	; 0x38a <JOYSTICK_get_direction+0x6c>
			return DOWN;
		} else if (pos.y > THRESHOLD) {
     376:	4a 97       	sbiw	r24, 0x1a	; 26
     378:	54 f4       	brge	.+20     	; 0x38e <JOYSTICK_get_direction+0x70>
			return UP;
		}
		
	}
	
	return NEUTRAL;
     37a:	80 e0       	ldi	r24, 0x00	; 0
     37c:	09 c0       	rjmp	.+18     	; 0x390 <JOYSTICK_get_direction+0x72>
	int8_t THRESHOLD = 25;
	
	if (pos.y < THRESHOLD && pos.y > -THRESHOLD) {
		
		if (pos.x < -THRESHOLD) {
			return LEFT;
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	07 c0       	rjmp	.+14     	; 0x390 <JOYSTICK_get_direction+0x72>
		} else if (pos.x > THRESHOLD) {
			return RIGHT;
     382:	82 e0       	ldi	r24, 0x02	; 2
     384:	05 c0       	rjmp	.+10     	; 0x390 <JOYSTICK_get_direction+0x72>
			return UP;
		}
		
	}
	
	return NEUTRAL;
     386:	80 e0       	ldi	r24, 0x00	; 0
     388:	03 c0       	rjmp	.+6      	; 0x390 <JOYSTICK_get_direction+0x72>
		}
		
	} else if (pos.x < THRESHOLD && pos.x > -THRESHOLD) {
		
		if (pos.y < -THRESHOLD) {
			return DOWN;
     38a:	84 e0       	ldi	r24, 0x04	; 4
     38c:	01 c0       	rjmp	.+2      	; 0x390 <JOYSTICK_get_direction+0x72>
		} else if (pos.y > THRESHOLD) {
			return UP;
     38e:	83 e0       	ldi	r24, 0x03	; 3
		}
		
	}
	
	return NEUTRAL;
}
     390:	28 96       	adiw	r28, 0x08	; 8
     392:	0f b6       	in	r0, 0x3f	; 63
     394:	f8 94       	cli
     396:	de bf       	out	0x3e, r29	; 62
     398:	0f be       	out	0x3f, r0	; 63
     39a:	cd bf       	out	0x3d, r28	; 61
     39c:	df 91       	pop	r29
     39e:	cf 91       	pop	r28
     3a0:	08 95       	ret

000003a2 <JOYSTICK_read_button>:
	return pos;
}

uint8_t JOYSTICK_read_button(void)
{
	return (PINB & (1 << PB2)) == 0;
     3a2:	86 b3       	in	r24, 0x16	; 22
     3a4:	82 fb       	bst	r24, 2
     3a6:	88 27       	eor	r24, r24
     3a8:	80 f9       	bld	r24, 0
     3aa:	91 e0       	ldi	r25, 0x01	; 1
     3ac:	89 27       	eor	r24, r25
     3ae:	08 95       	ret

000003b0 <main>:


int main(void)
{
	/* Needs to be set when using external memory */
	MCUCR |= (1 << SRE);
     3b0:	85 b7       	in	r24, 0x35	; 53
     3b2:	80 68       	ori	r24, 0x80	; 128
     3b4:	85 bf       	out	0x35, r24	; 53

	fdevopen(USART_transmit, USART_receive);
     3b6:	65 e0       	ldi	r22, 0x05	; 5
     3b8:	74 e0       	ldi	r23, 0x04	; 4
     3ba:	81 e0       	ldi	r24, 0x01	; 1
     3bc:	94 e0       	ldi	r25, 0x04	; 4
     3be:	0e 94 03 07 	call	0xe06	; 0xe06 <fdevopen>
	USART_init(MYUBBR);
     3c2:	8f e1       	ldi	r24, 0x1F	; 31
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <USART_init>
	OLED_init();
     3ca:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <OLED_init>
	JOYSTICK_init();
     3ce:	0e 94 3a 01 	call	0x274	; 0x274 <JOYSTICK_init>
	SPI_master_init();
     3d2:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <SPI_master_init>
	MCP_init();
     3d6:	0e 94 98 02 	call	0x530	; 0x530 <MCP_init>
	
	OLED_reset();
     3da:	0e 94 ca 02 	call	0x594	; 0x594 <OLED_reset>
	OLED_pos(2,20);
     3de:	64 e1       	ldi	r22, 0x14	; 20
     3e0:	82 e0       	ldi	r24, 0x02	; 2
     3e2:	0e 94 bd 02 	call	0x57a	; 0x57a <OLED_pos>
	
	menuNode *menu = OLED_generate_menu();
     3e6:	0e 94 6d 03 	call	0x6da	; 0x6da <OLED_generate_menu>
	OLED_print_menu(menu);
     3ea:	0e 94 b1 03 	call	0x762	; 0x762 <OLED_print_menu>
	uint8_t buttonPressed = 0;
	
	/* MCP TEST */
	
	//MCP_write(MCP_CANCTRL, 0b01000001);
	char status = MCP_read(MCP_RXB0CTRL);
     3ee:	80 e6       	ldi	r24, 0x60	; 96
     3f0:	0e 94 45 02 	call	0x48a	; 0x48a <MCP_read>
	printf("RXB0CTRL: %d\n", status);
     3f4:	1f 92       	push	r1
     3f6:	8f 93       	push	r24
     3f8:	86 e0       	ldi	r24, 0x06	; 6
     3fa:	91 e0       	ldi	r25, 0x01	; 1
     3fc:	9f 93       	push	r25
     3fe:	8f 93       	push	r24
     400:	0e 94 4e 07 	call	0xe9c	; 0xe9c <printf>
	
	MCP_load_tx_buffer(MCP_LOAD_TX0, 0xFF);
     404:	6f ef       	ldi	r22, 0xFF	; 255
     406:	80 e4       	ldi	r24, 0x40	; 64
     408:	0e 94 63 02 	call	0x4c6	; 0x4c6 <MCP_load_tx_buffer>
	MCP_request_to_send(MCP_RTS_TX0);
     40c:	81 e8       	ldi	r24, 0x81	; 129
     40e:	0e 94 70 02 	call	0x4e0	; 0x4e0 <MCP_request_to_send>
	char data = MCP_read_rx_buffer(MCP_READ_RX0);
     412:	80 e9       	ldi	r24, 0x90	; 144
     414:	0e 94 58 02 	call	0x4b0	; 0x4b0 <MCP_read_rx_buffer>
	printf("RX0: %d\n", data);
     418:	1f 92       	push	r1
     41a:	8f 93       	push	r24
     41c:	84 e1       	ldi	r24, 0x14	; 20
     41e:	91 e0       	ldi	r25, 0x01	; 1
     420:	9f 93       	push	r25
     422:	8f 93       	push	r24
     424:	0e 94 4e 07 	call	0xe9c	; 0xe9c <printf>
     428:	8d b7       	in	r24, 0x3d	; 61
     42a:	9e b7       	in	r25, 0x3e	; 62
     42c:	08 96       	adiw	r24, 0x08	; 8
     42e:	0f b6       	in	r0, 0x3f	; 63
     430:	f8 94       	cli
     432:	9e bf       	out	0x3e, r25	; 62
     434:	0f be       	out	0x3f, r0	; 63
     436:	8d bf       	out	0x3d, r24	; 61
	OLED_pos(2,20);
	
	menuNode *menu = OLED_generate_menu();
	OLED_print_menu(menu);
	
	uint8_t currentRow = 1;
     438:	c1 e0       	ldi	r28, 0x01	; 1
				currentRow -= 1;
			}
			
		} else if (joydir == DOWN) {
			if (currentRow == 7) {
				currentRow = 1;
     43a:	01 e0       	ldi	r16, 0x01	; 1
	{	
		joydir = JOYSTICK_get_direction();
		lastRow = currentRow;
		if (joydir == UP) {
			if (currentRow == 1) {
				currentRow = 7;
     43c:	17 e0       	ldi	r17, 0x07	; 7
	
	/* MCP TEST END */
	
	while(1)
	{	
		joydir = JOYSTICK_get_direction();
     43e:	0e 94 8f 01 	call	0x31e	; 0x31e <JOYSTICK_get_direction>
		lastRow = currentRow;
		if (joydir == UP) {
     442:	83 30       	cpi	r24, 0x03	; 3
     444:	29 f4       	brne	.+10     	; 0x450 <main+0xa0>
			if (currentRow == 1) {
     446:	c1 30       	cpi	r28, 0x01	; 1
     448:	51 f0       	breq	.+20     	; 0x45e <main+0xae>
				currentRow = 7;
			} else {
				currentRow -= 1;
     44a:	df ef       	ldi	r29, 0xFF	; 255
     44c:	dc 0f       	add	r29, r28
     44e:	0c c0       	rjmp	.+24     	; 0x468 <main+0xb8>
			}
			
		} else if (joydir == DOWN) {
     450:	84 30       	cpi	r24, 0x04	; 4
     452:	39 f4       	brne	.+14     	; 0x462 <main+0xb2>
			if (currentRow == 7) {
     454:	c7 30       	cpi	r28, 0x07	; 7
     456:	39 f0       	breq	.+14     	; 0x466 <main+0xb6>
				currentRow = 1;
			} else {
				currentRow += 1;
     458:	d1 e0       	ldi	r29, 0x01	; 1
     45a:	dc 0f       	add	r29, r28
     45c:	05 c0       	rjmp	.+10     	; 0x468 <main+0xb8>
	{	
		joydir = JOYSTICK_get_direction();
		lastRow = currentRow;
		if (joydir == UP) {
			if (currentRow == 1) {
				currentRow = 7;
     45e:	d1 2f       	mov	r29, r17
     460:	03 c0       	rjmp	.+6      	; 0x468 <main+0xb8>
     462:	dc 2f       	mov	r29, r28
     464:	01 c0       	rjmp	.+2      	; 0x468 <main+0xb8>
				currentRow -= 1;
			}
			
		} else if (joydir == DOWN) {
			if (currentRow == 7) {
				currentRow = 1;
     466:	d0 2f       	mov	r29, r16
			} else {
				currentRow += 1;
			}
		}
		
		OLED_move_arrow(currentRow, 20, lastRow, 20);
     468:	24 e1       	ldi	r18, 0x14	; 20
     46a:	4c 2f       	mov	r20, r28
     46c:	64 e1       	ldi	r22, 0x14	; 20
     46e:	8d 2f       	mov	r24, r29
     470:	0e 94 48 03 	call	0x690	; 0x690 <OLED_move_arrow>
		buttonPressed = JOYSTICK_read_button();
     474:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <JOYSTICK_read_button>
     478:	cd 2f       	mov	r28, r29
     47a:	e1 cf       	rjmp	.-62     	; 0x43e <main+0x8e>

0000047c <MCP_reset>:
	MCP_modify_bit(MCP_RXB0CTRL, 0b01100000, 0xFF); // Turns masks/filters off
}

void MCP_reset(void)
{
	PORTB &= ~(1 << PB4);
     47c:	c4 98       	cbi	0x18, 4	; 24
	SPI_master_transmit(MCP_RESET);
     47e:	80 ec       	ldi	r24, 0xC0	; 192
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	0e 94 f6 03 	call	0x7ec	; 0x7ec <SPI_master_transmit>
	PORTB |= (1 << PB4);
     486:	c4 9a       	sbi	0x18, 4	; 24
     488:	08 95       	ret

0000048a <MCP_read>:
}

char MCP_read(char addr)
{
     48a:	cf 93       	push	r28
     48c:	c8 2f       	mov	r28, r24
	PORTB &= ~(1 << PB4);
     48e:	c4 98       	cbi	0x18, 4	; 24
	SPI_master_transmit(MCP_READ);
     490:	83 e0       	ldi	r24, 0x03	; 3
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	0e 94 f6 03 	call	0x7ec	; 0x7ec <SPI_master_transmit>
	SPI_master_transmit(addr);
     498:	8c 2f       	mov	r24, r28
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	0e 94 f6 03 	call	0x7ec	; 0x7ec <SPI_master_transmit>
	SPI_master_transmit(0x00);
     4a0:	80 e0       	ldi	r24, 0x00	; 0
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	0e 94 f6 03 	call	0x7ec	; 0x7ec <SPI_master_transmit>
	char data = SPDR;
     4a8:	8f b1       	in	r24, 0x0f	; 15
	PORTB |= (1 << PB4);
     4aa:	c4 9a       	sbi	0x18, 4	; 24
	return data;
}
     4ac:	cf 91       	pop	r28
     4ae:	08 95       	ret

000004b0 <MCP_read_rx_buffer>:
}

/* Returns the content of the specified buffer. Reduces overhead of MCP_read */
char MCP_read_rx_buffer(char buffer)
{
	PORTB &= ~(1 << PB4);
     4b0:	c4 98       	cbi	0x18, 4	; 24
	SPI_master_transmit(buffer);
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	0e 94 f6 03 	call	0x7ec	; 0x7ec <SPI_master_transmit>
	SPI_master_transmit(0x00);
     4b8:	80 e0       	ldi	r24, 0x00	; 0
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	0e 94 f6 03 	call	0x7ec	; 0x7ec <SPI_master_transmit>
	char data = SPDR;
     4c0:	8f b1       	in	r24, 0x0f	; 15
	PORTB |= (1 << PB4);
     4c2:	c4 9a       	sbi	0x18, 4	; 24
	return data;
}
     4c4:	08 95       	ret

000004c6 <MCP_load_tx_buffer>:

/* Loads the specified transmit buffer with data. Reduces overhead of MCP_write */
void MCP_load_tx_buffer(char buffer, char data)
{
     4c6:	cf 93       	push	r28
     4c8:	c6 2f       	mov	r28, r22
	PORTB &= ~(1 << PB4);
     4ca:	c4 98       	cbi	0x18, 4	; 24
	SPI_master_transmit(buffer);
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	0e 94 f6 03 	call	0x7ec	; 0x7ec <SPI_master_transmit>
	SPI_master_transmit(data);
     4d2:	8c 2f       	mov	r24, r28
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	0e 94 f6 03 	call	0x7ec	; 0x7ec <SPI_master_transmit>
	PORTB |= (1 << PB4);
     4da:	c4 9a       	sbi	0x18, 4	; 24
}
     4dc:	cf 91       	pop	r28
     4de:	08 95       	ret

000004e0 <MCP_request_to_send>:

/* Instructs controller to begin message transmission for the selected buffers */
void MCP_request_to_send(char buffer)
{
	PORTB &= ~(1 << PB4);
     4e0:	c4 98       	cbi	0x18, 4	; 24
	SPI_master_transmit(buffer);
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	0e 94 f6 03 	call	0x7ec	; 0x7ec <SPI_master_transmit>
	PORTB |= (1 << PB4);
     4e8:	c4 9a       	sbi	0x18, 4	; 24
     4ea:	08 95       	ret

000004ec <MCP_modify_bit>:
	MCP_modify_bit(MCP_CANCTRL, mask, mode);
}

/* Changes the value of the register bits specified by the mask */
void MCP_modify_bit(char addr, char mask, char data)
{
     4ec:	1f 93       	push	r17
     4ee:	cf 93       	push	r28
     4f0:	df 93       	push	r29
     4f2:	18 2f       	mov	r17, r24
     4f4:	d6 2f       	mov	r29, r22
     4f6:	c4 2f       	mov	r28, r20
	PORTB &= ~(1 << PB4);
     4f8:	c4 98       	cbi	0x18, 4	; 24
	SPI_master_transmit(MCP_BITMOD);
     4fa:	85 e0       	ldi	r24, 0x05	; 5
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	0e 94 f6 03 	call	0x7ec	; 0x7ec <SPI_master_transmit>
	SPI_master_transmit(addr);
     502:	81 2f       	mov	r24, r17
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	0e 94 f6 03 	call	0x7ec	; 0x7ec <SPI_master_transmit>
	SPI_master_transmit(mask);
     50a:	8d 2f       	mov	r24, r29
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	0e 94 f6 03 	call	0x7ec	; 0x7ec <SPI_master_transmit>
	SPI_master_transmit(data);
     512:	8c 2f       	mov	r24, r28
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	0e 94 f6 03 	call	0x7ec	; 0x7ec <SPI_master_transmit>
	PORTB |= (1 << PB4);
     51a:	c4 9a       	sbi	0x18, 4	; 24
     51c:	df 91       	pop	r29
     51e:	cf 91       	pop	r28
     520:	1f 91       	pop	r17
     522:	08 95       	ret

00000524 <MCP_set_mode>:
			break;
		default:
			break;
	}
	*/
	MCP_modify_bit(MCP_CANCTRL, mask, mode);
     524:	48 2f       	mov	r20, r24
     526:	60 ee       	ldi	r22, 0xE0	; 224
     528:	8f e0       	ldi	r24, 0x0F	; 15
     52a:	0e 94 76 02 	call	0x4ec	; 0x4ec <MCP_modify_bit>
     52e:	08 95       	ret

00000530 <MCP_init>:
#include "MCP2515.h"
#include "mcp.h"

void MCP_init(void)
{
	MCP_reset();
     530:	0e 94 3e 02 	call	0x47c	; 0x47c <MCP_reset>
	MCP_set_mode(MODE_LOOPBACK); // Sets loopback operation mode for testing
     534:	80 e4       	ldi	r24, 0x40	; 64
     536:	0e 94 92 02 	call	0x524	; 0x524 <MCP_set_mode>
	MCP_modify_bit(MCP_RXB0CTRL, 0b01100000, 0xFF); // Turns masks/filters off
     53a:	4f ef       	ldi	r20, 0xFF	; 255
     53c:	60 e6       	ldi	r22, 0x60	; 96
     53e:	80 e6       	ldi	r24, 0x60	; 96
     540:	0e 94 76 02 	call	0x4ec	; 0x4ec <MCP_modify_bit>
     544:	08 95       	ret

00000546 <OLED_goto_line>:
}

void OLED_write_c(char chr)
{
	volatile char *oled = (char *) 0x1000;
	oled[0] = chr;
     546:	e0 e0       	ldi	r30, 0x00	; 0
     548:	f0 e1       	ldi	r31, 0x10	; 16
     54a:	92 e2       	ldi	r25, 0x22	; 34
     54c:	90 83       	st	Z, r25
     54e:	80 83       	st	Z, r24
     550:	87 e0       	ldi	r24, 0x07	; 7
     552:	80 83       	st	Z, r24
     554:	08 95       	ret

00000556 <OLED_clear_line>:
	OLED_write_c(0x07);
}

void OLED_clear_line(uint8_t line)
{
	OLED_goto_line(line);
     556:	0e 94 a3 02 	call	0x546	; 0x546 <OLED_goto_line>
}

void OLED_write_c(char chr)
{
	volatile char *oled = (char *) 0x1000;
	oled[0] = chr;
     55a:	e0 e0       	ldi	r30, 0x00	; 0
     55c:	f0 e1       	ldi	r31, 0x10	; 16
     55e:	81 e2       	ldi	r24, 0x21	; 33
     560:	80 83       	st	Z, r24
     562:	10 82       	st	Z, r1
     564:	8f e7       	ldi	r24, 0x7F	; 127
     566:	80 83       	st	Z, r24
     568:	80 e8       	ldi	r24, 0x80	; 128
     56a:	90 e0       	ldi	r25, 0x00	; 0
}

void OLED_write_d(char chr)
{
	volatile char *oled = (char *) 0x1200;
	oled[0] = chr;
     56c:	e0 e0       	ldi	r30, 0x00	; 0
     56e:	f2 e1       	ldi	r31, 0x12	; 18
     570:	10 82       	st	Z, r1
     572:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_c(0x21);
	OLED_write_c(0x00);
	OLED_write_c(0x7F);

	/* Write zeros to line */
	for (int i = 0; i < 128; i++) {
     574:	00 97       	sbiw	r24, 0x00	; 0
     576:	e1 f7       	brne	.-8      	; 0x570 <OLED_clear_line+0x1a>
		OLED_write_d(0x00);
	}
}
     578:	08 95       	ret

0000057a <OLED_pos>:
}

void OLED_write_c(char chr)
{
	volatile char *oled = (char *) 0x1000;
	oled[0] = chr;
     57a:	e0 e0       	ldi	r30, 0x00	; 0
     57c:	f0 e1       	ldi	r31, 0x10	; 16
     57e:	92 e2       	ldi	r25, 0x22	; 34
     580:	90 83       	st	Z, r25
     582:	80 83       	st	Z, r24
     584:	87 e0       	ldi	r24, 0x07	; 7
     586:	80 83       	st	Z, r24
     588:	81 e2       	ldi	r24, 0x21	; 33
     58a:	80 83       	st	Z, r24
     58c:	60 83       	st	Z, r22
     58e:	8f e7       	ldi	r24, 0x7F	; 127
     590:	80 83       	st	Z, r24
     592:	08 95       	ret

00000594 <OLED_reset>:
	OLED_write_c(column);
	OLED_write_c(0x7F);
}

void OLED_reset(void)
{
     594:	cf 93       	push	r28
	for (uint8_t i = 0; i < 8; i++) {
     596:	c0 e0       	ldi	r28, 0x00	; 0
		OLED_clear_line(i);
     598:	8c 2f       	mov	r24, r28
     59a:	0e 94 ab 02 	call	0x556	; 0x556 <OLED_clear_line>
	OLED_write_c(0x7F);
}

void OLED_reset(void)
{
	for (uint8_t i = 0; i < 8; i++) {
     59e:	cf 5f       	subi	r28, 0xFF	; 255
     5a0:	c8 30       	cpi	r28, 0x08	; 8
     5a2:	d1 f7       	brne	.-12     	; 0x598 <OLED_reset+0x4>
		OLED_clear_line(i);
	}
	OLED_pos(0,0);
     5a4:	60 e0       	ldi	r22, 0x00	; 0
     5a6:	80 e0       	ldi	r24, 0x00	; 0
     5a8:	0e 94 bd 02 	call	0x57a	; 0x57a <OLED_pos>

	// Redraw from SRAM?
}
     5ac:	cf 91       	pop	r28
     5ae:	08 95       	ret

000005b0 <OLED_init>:
}

void OLED_write_c(char chr)
{
	volatile char *oled = (char *) 0x1000;
	oled[0] = chr;
     5b0:	e0 e0       	ldi	r30, 0x00	; 0
     5b2:	f0 e1       	ldi	r31, 0x10	; 16
     5b4:	8e ea       	ldi	r24, 0xAE	; 174
     5b6:	80 83       	st	Z, r24
     5b8:	81 ea       	ldi	r24, 0xA1	; 161
     5ba:	80 83       	st	Z, r24
     5bc:	8a ed       	ldi	r24, 0xDA	; 218
     5be:	80 83       	st	Z, r24
     5c0:	82 e1       	ldi	r24, 0x12	; 18
     5c2:	80 83       	st	Z, r24
     5c4:	88 ec       	ldi	r24, 0xC8	; 200
     5c6:	80 83       	st	Z, r24
     5c8:	88 ea       	ldi	r24, 0xA8	; 168
     5ca:	80 83       	st	Z, r24
     5cc:	8f e3       	ldi	r24, 0x3F	; 63
     5ce:	80 83       	st	Z, r24
     5d0:	85 ed       	ldi	r24, 0xD5	; 213
     5d2:	80 83       	st	Z, r24
     5d4:	80 e8       	ldi	r24, 0x80	; 128
     5d6:	80 83       	st	Z, r24
     5d8:	81 e8       	ldi	r24, 0x81	; 129
     5da:	80 83       	st	Z, r24
     5dc:	80 e5       	ldi	r24, 0x50	; 80
     5de:	80 83       	st	Z, r24
     5e0:	89 ed       	ldi	r24, 0xD9	; 217
     5e2:	80 83       	st	Z, r24
     5e4:	81 e2       	ldi	r24, 0x21	; 33
     5e6:	80 83       	st	Z, r24
     5e8:	80 e2       	ldi	r24, 0x20	; 32
     5ea:	80 83       	st	Z, r24
     5ec:	10 82       	st	Z, r1
     5ee:	8b ed       	ldi	r24, 0xDB	; 219
     5f0:	80 83       	st	Z, r24
     5f2:	80 e3       	ldi	r24, 0x30	; 48
     5f4:	80 83       	st	Z, r24
     5f6:	8d ea       	ldi	r24, 0xAD	; 173
     5f8:	80 83       	st	Z, r24
     5fa:	10 82       	st	Z, r1
     5fc:	84 ea       	ldi	r24, 0xA4	; 164
     5fe:	80 83       	st	Z, r24
     600:	86 ea       	ldi	r24, 0xA6	; 166
     602:	80 83       	st	Z, r24
     604:	8f ea       	ldi	r24, 0xAF	; 175
     606:	80 83       	st	Z, r24
     608:	80 e0       	ldi	r24, 0x00	; 0
     60a:	92 e0       	ldi	r25, 0x02	; 2
}

void OLED_write_d(char chr)
{
	volatile char *oled = (char *) 0x1200;
	oled[0] = chr;
     60c:	e0 e0       	ldi	r30, 0x00	; 0
     60e:	f2 e1       	ldi	r31, 0x12	; 18
     610:	2f ef       	ldi	r18, 0xFF	; 255
     612:	20 83       	st	Z, r18
     614:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_c(0x00);
	OLED_write_c(0xa4); //out follows RAM content
	OLED_write_c(0xa6); //set normal display
	OLED_write_c(0xaf); // display on
	
	for (int i = 0; i < 512; i++)
     616:	00 97       	sbiw	r24, 0x00	; 0
     618:	e1 f7       	brne	.-8      	; 0x612 <OLED_init+0x62>
	{
		OLED_write_d(0xFF);
	}
	
	OLED_reset();
     61a:	0e 94 ca 02 	call	0x594	; 0x594 <OLED_reset>
     61e:	08 95       	ret

00000620 <OLED_print_string>:

	// Redraw from SRAM?
}

void OLED_print_string(char* str)
{
     620:	cf 93       	push	r28
     622:	df 93       	push	r29
	uint8_t c;
	uint8_t font_width = 4; // Use sizeof array here
	uint8_t i = 0;
	while (str[i] != '\0') {
     624:	fc 01       	movw	r30, r24
     626:	20 81       	ld	r18, Z
     628:	22 23       	and	r18, r18
     62a:	11 f1       	breq	.+68     	; 0x670 <OLED_print_string+0x50>
     62c:	dc 01       	movw	r26, r24

void OLED_print_string(char* str)
{
	uint8_t c;
	uint8_t font_width = 4; // Use sizeof array here
	uint8_t i = 0;
     62e:	40 e0       	ldi	r20, 0x00	; 0

	// Redraw from SRAM?
}

void OLED_print_string(char* str)
{
     630:	60 e0       	ldi	r22, 0x00	; 0
     632:	50 e0       	ldi	r21, 0x00	; 0
}

void OLED_write_d(char chr)
{
	volatile char *oled = (char *) 0x1200;
	oled[0] = chr;
     634:	c0 e0       	ldi	r28, 0x00	; 0
     636:	d2 e1       	ldi	r29, 0x12	; 18
     638:	18 c0       	rjmp	.+48     	; 0x66a <OLED_print_string+0x4a>
	uint8_t c;
	uint8_t font_width = 4; // Use sizeof array here
	uint8_t i = 0;
	while (str[i] != '\0') {
		for (uint8_t j = 0; j < font_width; j++) {
			c = pgm_read_byte_near(font[str[i]-32] + j);
     63a:	ec 91       	ld	r30, X
     63c:	f0 e0       	ldi	r31, 0x00	; 0
     63e:	ee 0f       	add	r30, r30
     640:	ff 1f       	adc	r31, r31
     642:	ee 0f       	add	r30, r30
     644:	ff 1f       	adc	r31, r31
     646:	e0 51       	subi	r30, 0x10	; 16
     648:	f0 40       	sbci	r31, 0x00	; 0
     64a:	e2 0f       	add	r30, r18
     64c:	f3 1f       	adc	r31, r19
     64e:	e4 91       	lpm	r30, Z
}

void OLED_write_d(char chr)
{
	volatile char *oled = (char *) 0x1200;
	oled[0] = chr;
     650:	e8 83       	st	Y, r30
     652:	2f 5f       	subi	r18, 0xFF	; 255
     654:	3f 4f       	sbci	r19, 0xFF	; 255
{
	uint8_t c;
	uint8_t font_width = 4; // Use sizeof array here
	uint8_t i = 0;
	while (str[i] != '\0') {
		for (uint8_t j = 0; j < font_width; j++) {
     656:	24 30       	cpi	r18, 0x04	; 4
     658:	31 05       	cpc	r19, r1
     65a:	79 f7       	brne	.-34     	; 0x63a <OLED_print_string+0x1a>
			c = pgm_read_byte_near(font[str[i]-32] + j);
			OLED_write_d(c);
		}
		i++;
     65c:	4f 5f       	subi	r20, 0xFF	; 255
void OLED_print_string(char* str)
{
	uint8_t c;
	uint8_t font_width = 4; // Use sizeof array here
	uint8_t i = 0;
	while (str[i] != '\0') {
     65e:	dc 01       	movw	r26, r24
     660:	a4 0f       	add	r26, r20
     662:	b1 1d       	adc	r27, r1
     664:	2c 91       	ld	r18, X
     666:	22 23       	and	r18, r18
     668:	19 f0       	breq	.+6      	; 0x670 <OLED_print_string+0x50>

	// Redraw from SRAM?
}

void OLED_print_string(char* str)
{
     66a:	26 2f       	mov	r18, r22
     66c:	35 2f       	mov	r19, r21
     66e:	e5 cf       	rjmp	.-54     	; 0x63a <OLED_print_string+0x1a>
			c = pgm_read_byte_near(font[str[i]-32] + j);
			OLED_write_d(c);
		}
		i++;
	}
}
     670:	df 91       	pop	r29
     672:	cf 91       	pop	r28
     674:	08 95       	ret

00000676 <OLED_print_arrow>:

void OLED_print_arrow(uint8_t row, uint8_t col)
{
	OLED_pos(row, col);
     676:	0e 94 bd 02 	call	0x57a	; 0x57a <OLED_pos>
}

void OLED_write_d(char chr)
{
	volatile char *oled = (char *) 0x1200;
	oled[0] = chr;
     67a:	e0 e0       	ldi	r30, 0x00	; 0
     67c:	f2 e1       	ldi	r31, 0x12	; 18
     67e:	88 e1       	ldi	r24, 0x18	; 24
     680:	80 83       	st	Z, r24
     682:	80 83       	st	Z, r24
     684:	9e e7       	ldi	r25, 0x7E	; 126
     686:	90 83       	st	Z, r25
     688:	9c e3       	ldi	r25, 0x3C	; 60
     68a:	90 83       	st	Z, r25
     68c:	80 83       	st	Z, r24
     68e:	08 95       	ret

00000690 <OLED_move_arrow>:
	OLED_write_d(0b00111100);
	OLED_write_d(0b00011000);
}

void OLED_move_arrow(uint8_t newRow, uint8_t newCol, uint8_t currentRow, uint8_t currentCol)
{
     690:	cf 93       	push	r28
     692:	df 93       	push	r29
     694:	c8 2f       	mov	r28, r24
     696:	d6 2f       	mov	r29, r22
     698:	84 2f       	mov	r24, r20
	OLED_pos(currentRow, currentCol);
     69a:	62 2f       	mov	r22, r18
     69c:	0e 94 bd 02 	call	0x57a	; 0x57a <OLED_pos>
}

void OLED_write_d(char chr)
{
	volatile char *oled = (char *) 0x1200;
	oled[0] = chr;
     6a0:	e0 e0       	ldi	r30, 0x00	; 0
     6a2:	f2 e1       	ldi	r31, 0x12	; 18
     6a4:	10 82       	st	Z, r1
     6a6:	10 82       	st	Z, r1
     6a8:	10 82       	st	Z, r1
     6aa:	10 82       	st	Z, r1
     6ac:	10 82       	st	Z, r1
	OLED_write_d(0b00000000);
	OLED_write_d(0b00000000);
	OLED_write_d(0b00000000);
	OLED_write_d(0b00000000);
	
	OLED_print_arrow(newRow, newCol);
     6ae:	6d 2f       	mov	r22, r29
     6b0:	8c 2f       	mov	r24, r28
     6b2:	0e 94 3b 03 	call	0x676	; 0x676 <OLED_print_arrow>
}
     6b6:	df 91       	pop	r29
     6b8:	cf 91       	pop	r28
     6ba:	08 95       	ret

000006bc <OLED_create_node>:


menuNode *OLED_create_node(char* name, menuNode* parent)
{
     6bc:	cf 93       	push	r28
     6be:	df 93       	push	r29
     6c0:	ec 01       	movw	r28, r24
	menuNode* ret = (menuNode*) malloc(sizeof(menuNode));
     6c2:	84 e1       	ldi	r24, 0x14	; 20
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <malloc>
	ret->name = name;
     6ca:	fc 01       	movw	r30, r24
     6cc:	d1 83       	std	Z+1, r29	; 0x01
     6ce:	c0 83       	st	Z, r28
	ret->parent = NULL;
     6d0:	13 82       	std	Z+3, r1	; 0x03
     6d2:	12 82       	std	Z+2, r1	; 0x02
	return ret;
}
     6d4:	df 91       	pop	r29
     6d6:	cf 91       	pop	r28
     6d8:	08 95       	ret

000006da <OLED_generate_menu>:

// Implement function for freeing memory

menuNode *OLED_generate_menu(void)
{	
     6da:	af 92       	push	r10
     6dc:	bf 92       	push	r11
     6de:	cf 92       	push	r12
     6e0:	df 92       	push	r13
     6e2:	ef 92       	push	r14
     6e4:	ff 92       	push	r15
     6e6:	0f 93       	push	r16
     6e8:	1f 93       	push	r17
     6ea:	cf 93       	push	r28
     6ec:	df 93       	push	r29
	menuNode *mainmenu = OLED_create_node("MAIN MENU", NULL);
     6ee:	60 e0       	ldi	r22, 0x00	; 0
     6f0:	70 e0       	ldi	r23, 0x00	; 0
     6f2:	8f ef       	ldi	r24, 0xFF	; 255
     6f4:	91 e0       	ldi	r25, 0x01	; 1
     6f6:	0e 94 5e 03 	call	0x6bc	; 0x6bc <OLED_create_node>
     6fa:	ec 01       	movw	r28, r24
	menuNode *highscores = OLED_create_node("Highscores", mainmenu);
     6fc:	bc 01       	movw	r22, r24
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	92 e0       	ldi	r25, 0x02	; 2
     702:	0e 94 5e 03 	call	0x6bc	; 0x6bc <OLED_create_node>
     706:	6c 01       	movw	r12, r24
	menuNode *playgame = OLED_create_node("Start new game", mainmenu);
     708:	be 01       	movw	r22, r28
     70a:	84 e1       	ldi	r24, 0x14	; 20
     70c:	92 e0       	ldi	r25, 0x02	; 2
     70e:	0e 94 5e 03 	call	0x6bc	; 0x6bc <OLED_create_node>
     712:	5c 01       	movw	r10, r24
	menuNode *debugging = OLED_create_node("Debugging", mainmenu);
     714:	be 01       	movw	r22, r28
     716:	83 e2       	ldi	r24, 0x23	; 35
     718:	92 e0       	ldi	r25, 0x02	; 2
     71a:	0e 94 5e 03 	call	0x6bc	; 0x6bc <OLED_create_node>
     71e:	8c 01       	movw	r16, r24
	menuNode *calibrate = OLED_create_node("Calibrate", mainmenu);
     720:	be 01       	movw	r22, r28
     722:	8d e2       	ldi	r24, 0x2D	; 45
     724:	92 e0       	ldi	r25, 0x02	; 2
     726:	0e 94 5e 03 	call	0x6bc	; 0x6bc <OLED_create_node>
     72a:	7c 01       	movw	r14, r24
	menuNode *difficulty = OLED_create_node("Difficulty", mainmenu);
     72c:	be 01       	movw	r22, r28
     72e:	87 e3       	ldi	r24, 0x37	; 55
     730:	92 e0       	ldi	r25, 0x02	; 2
     732:	0e 94 5e 03 	call	0x6bc	; 0x6bc <OLED_create_node>
	calibrate->parent = mainmenu;
	difficulty->parent = mainmenu;
	debugging->parent = mainmenu;
	*/
	
	mainmenu->children[1] = playgame;
     736:	bf 82       	std	Y+7, r11	; 0x07
     738:	ae 82       	std	Y+6, r10	; 0x06
	mainmenu->children[2] = highscores;
     73a:	d9 86       	std	Y+9, r13	; 0x09
     73c:	c8 86       	std	Y+8, r12	; 0x08
	mainmenu->children[3] = difficulty;
     73e:	9b 87       	std	Y+11, r25	; 0x0b
     740:	8a 87       	std	Y+10, r24	; 0x0a
	mainmenu->children[4] = calibrate;
     742:	fd 86       	std	Y+13, r15	; 0x0d
     744:	ec 86       	std	Y+12, r14	; 0x0c
	mainmenu->children[5] = debugging;
     746:	1f 87       	std	Y+15, r17	; 0x0f
     748:	0e 87       	std	Y+14, r16	; 0x0e
	
	return mainmenu;
}
     74a:	ce 01       	movw	r24, r28
     74c:	df 91       	pop	r29
     74e:	cf 91       	pop	r28
     750:	1f 91       	pop	r17
     752:	0f 91       	pop	r16
     754:	ff 90       	pop	r15
     756:	ef 90       	pop	r14
     758:	df 90       	pop	r13
     75a:	cf 90       	pop	r12
     75c:	bf 90       	pop	r11
     75e:	af 90       	pop	r10
     760:	08 95       	ret

00000762 <OLED_print_menu>:

void OLED_print_menu(menuNode *node)
{
     762:	cf 93       	push	r28
     764:	df 93       	push	r29
     766:	ec 01       	movw	r28, r24
	OLED_pos(0,50);
     768:	62 e3       	ldi	r22, 0x32	; 50
     76a:	80 e0       	ldi	r24, 0x00	; 0
     76c:	0e 94 bd 02 	call	0x57a	; 0x57a <OLED_pos>
	OLED_print_string(node->name);
     770:	88 81       	ld	r24, Y
     772:	99 81       	ldd	r25, Y+1	; 0x01
     774:	0e 94 10 03 	call	0x620	; 0x620 <OLED_print_string>
	//printf("%s\n", node->name);
	OLED_pos(1,50);
     778:	62 e3       	ldi	r22, 0x32	; 50
     77a:	81 e0       	ldi	r24, 0x01	; 1
     77c:	0e 94 bd 02 	call	0x57a	; 0x57a <OLED_pos>
	OLED_print_string(node->children[1]->name);
     780:	ee 81       	ldd	r30, Y+6	; 0x06
     782:	ff 81       	ldd	r31, Y+7	; 0x07
     784:	80 81       	ld	r24, Z
     786:	91 81       	ldd	r25, Z+1	; 0x01
     788:	0e 94 10 03 	call	0x620	; 0x620 <OLED_print_string>
	OLED_pos(2,50);
     78c:	62 e3       	ldi	r22, 0x32	; 50
     78e:	82 e0       	ldi	r24, 0x02	; 2
     790:	0e 94 bd 02 	call	0x57a	; 0x57a <OLED_pos>
	OLED_print_string(node->children[2]->name);
     794:	e8 85       	ldd	r30, Y+8	; 0x08
     796:	f9 85       	ldd	r31, Y+9	; 0x09
     798:	80 81       	ld	r24, Z
     79a:	91 81       	ldd	r25, Z+1	; 0x01
     79c:	0e 94 10 03 	call	0x620	; 0x620 <OLED_print_string>
	OLED_pos(3,50);
     7a0:	62 e3       	ldi	r22, 0x32	; 50
     7a2:	83 e0       	ldi	r24, 0x03	; 3
     7a4:	0e 94 bd 02 	call	0x57a	; 0x57a <OLED_pos>
	OLED_print_string(node->children[3]->name);
     7a8:	ea 85       	ldd	r30, Y+10	; 0x0a
     7aa:	fb 85       	ldd	r31, Y+11	; 0x0b
     7ac:	80 81       	ld	r24, Z
     7ae:	91 81       	ldd	r25, Z+1	; 0x01
     7b0:	0e 94 10 03 	call	0x620	; 0x620 <OLED_print_string>
	OLED_pos(4,50);
     7b4:	62 e3       	ldi	r22, 0x32	; 50
     7b6:	84 e0       	ldi	r24, 0x04	; 4
     7b8:	0e 94 bd 02 	call	0x57a	; 0x57a <OLED_pos>
	OLED_print_string(node->children[4]->name);
     7bc:	ec 85       	ldd	r30, Y+12	; 0x0c
     7be:	fd 85       	ldd	r31, Y+13	; 0x0d
     7c0:	80 81       	ld	r24, Z
     7c2:	91 81       	ldd	r25, Z+1	; 0x01
     7c4:	0e 94 10 03 	call	0x620	; 0x620 <OLED_print_string>
	OLED_pos(5,50);
     7c8:	62 e3       	ldi	r22, 0x32	; 50
     7ca:	85 e0       	ldi	r24, 0x05	; 5
     7cc:	0e 94 bd 02 	call	0x57a	; 0x57a <OLED_pos>
	OLED_print_string(node->children[5]->name);
     7d0:	ee 85       	ldd	r30, Y+14	; 0x0e
     7d2:	ff 85       	ldd	r31, Y+15	; 0x0f
     7d4:	80 81       	ld	r24, Z
     7d6:	91 81       	ldd	r25, Z+1	; 0x01
     7d8:	0e 94 10 03 	call	0x620	; 0x620 <OLED_print_string>
     7dc:	df 91       	pop	r29
     7de:	cf 91       	pop	r28
     7e0:	08 95       	ret

000007e2 <SPI_master_init>:
#include <avr/delay.h>

void SPI_master_init(void)
{
	/* Set ~SS, MOSI and SCK output, all others input */
	DDRB = (1 << PB4)|(1 << PB5)|(1 << PB7);
     7e2:	80 eb       	ldi	r24, 0xB0	; 176
     7e4:	87 bb       	out	0x17, r24	; 23
	
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1 << SPE)|(1 << MSTR)|(1 << SPR0);
     7e6:	81 e5       	ldi	r24, 0x51	; 81
     7e8:	8d b9       	out	0x0d, r24	; 13
     7ea:	08 95       	ret

000007ec <SPI_master_transmit>:
}

void SPI_master_transmit(char cData)
{
	/* Start transmission */
	SPDR = cData;
     7ec:	8f b9       	out	0x0f, r24	; 15
	
	/* Wait for transmission to complete */
	while (!(SPSR & (1 << SPIF))) {
     7ee:	77 9b       	sbis	0x0e, 7	; 14
     7f0:	fe cf       	rjmp	.-4      	; 0x7ee <SPI_master_transmit+0x2>
		;
	}
	
	// Interrupt here?
}
     7f2:	08 95       	ret

000007f4 <USART_init>:
#include <avr/io.h>

void USART_init(unsigned int ubrr)
{
	/* Set baud rate*/
	UBRR0H = (unsigned char)(ubrr >> 8 );
     7f4:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
     7f6:	89 b9       	out	0x09, r24	; 9
	/*Enable receiver and transmitter*/
	UCSR0B = (1 << RXEN0)|(1 << TXEN0);
     7f8:	88 e1       	ldi	r24, 0x18	; 24
     7fa:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1 << URSEL0)|(1 << USBS0)|(3 << UCSZ10);
     7fc:	8e e8       	ldi	r24, 0x8E	; 142
     7fe:	80 bd       	out	0x20, r24	; 32
     800:	08 95       	ret

00000802 <USART_transmit>:
}

void USART_transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while (!( UCSR0A & (1 << UDRE0)))
     802:	5d 9b       	sbis	0x0b, 5	; 11
     804:	fe cf       	rjmp	.-4      	; 0x802 <USART_transmit>
		;
	/* Put data into buffer, sends the data */
	UDR0 = data;
     806:	8c b9       	out	0x0c, r24	; 12
     808:	08 95       	ret

0000080a <USART_receive>:
}

unsigned char USART_receive(void)
{
	/* Wait for data to be received */
	while ( !(UCSR0A & ( 1 << RXC0)) )
     80a:	5f 9b       	sbis	0x0b, 7	; 11
     80c:	fe cf       	rjmp	.-4      	; 0x80a <USART_receive>
		;
	/* Get and return received data from buffer */
	return UDR0;
     80e:	8c b1       	in	r24, 0x0c	; 12
}
     810:	08 95       	ret

00000812 <__divsf3>:
     812:	0c d0       	rcall	.+24     	; 0x82c <__divsf3x>
     814:	eb c0       	rjmp	.+470    	; 0x9ec <__fp_round>
     816:	e3 d0       	rcall	.+454    	; 0x9de <__fp_pscB>
     818:	40 f0       	brcs	.+16     	; 0x82a <__divsf3+0x18>
     81a:	da d0       	rcall	.+436    	; 0x9d0 <__fp_pscA>
     81c:	30 f0       	brcs	.+12     	; 0x82a <__divsf3+0x18>
     81e:	21 f4       	brne	.+8      	; 0x828 <__divsf3+0x16>
     820:	5f 3f       	cpi	r21, 0xFF	; 255
     822:	19 f0       	breq	.+6      	; 0x82a <__divsf3+0x18>
     824:	cc c0       	rjmp	.+408    	; 0x9be <__fp_inf>
     826:	51 11       	cpse	r21, r1
     828:	15 c1       	rjmp	.+554    	; 0xa54 <__fp_szero>
     82a:	cf c0       	rjmp	.+414    	; 0x9ca <__fp_nan>

0000082c <__divsf3x>:
     82c:	f0 d0       	rcall	.+480    	; 0xa0e <__fp_split3>
     82e:	98 f3       	brcs	.-26     	; 0x816 <__divsf3+0x4>

00000830 <__divsf3_pse>:
     830:	99 23       	and	r25, r25
     832:	c9 f3       	breq	.-14     	; 0x826 <__divsf3+0x14>
     834:	55 23       	and	r21, r21
     836:	b1 f3       	breq	.-20     	; 0x824 <__divsf3+0x12>
     838:	95 1b       	sub	r25, r21
     83a:	55 0b       	sbc	r21, r21
     83c:	bb 27       	eor	r27, r27
     83e:	aa 27       	eor	r26, r26
     840:	62 17       	cp	r22, r18
     842:	73 07       	cpc	r23, r19
     844:	84 07       	cpc	r24, r20
     846:	38 f0       	brcs	.+14     	; 0x856 <__divsf3_pse+0x26>
     848:	9f 5f       	subi	r25, 0xFF	; 255
     84a:	5f 4f       	sbci	r21, 0xFF	; 255
     84c:	22 0f       	add	r18, r18
     84e:	33 1f       	adc	r19, r19
     850:	44 1f       	adc	r20, r20
     852:	aa 1f       	adc	r26, r26
     854:	a9 f3       	breq	.-22     	; 0x840 <__divsf3_pse+0x10>
     856:	33 d0       	rcall	.+102    	; 0x8be <__divsf3_pse+0x8e>
     858:	0e 2e       	mov	r0, r30
     85a:	3a f0       	brmi	.+14     	; 0x86a <__divsf3_pse+0x3a>
     85c:	e0 e8       	ldi	r30, 0x80	; 128
     85e:	30 d0       	rcall	.+96     	; 0x8c0 <__divsf3_pse+0x90>
     860:	91 50       	subi	r25, 0x01	; 1
     862:	50 40       	sbci	r21, 0x00	; 0
     864:	e6 95       	lsr	r30
     866:	00 1c       	adc	r0, r0
     868:	ca f7       	brpl	.-14     	; 0x85c <__divsf3_pse+0x2c>
     86a:	29 d0       	rcall	.+82     	; 0x8be <__divsf3_pse+0x8e>
     86c:	fe 2f       	mov	r31, r30
     86e:	27 d0       	rcall	.+78     	; 0x8be <__divsf3_pse+0x8e>
     870:	66 0f       	add	r22, r22
     872:	77 1f       	adc	r23, r23
     874:	88 1f       	adc	r24, r24
     876:	bb 1f       	adc	r27, r27
     878:	26 17       	cp	r18, r22
     87a:	37 07       	cpc	r19, r23
     87c:	48 07       	cpc	r20, r24
     87e:	ab 07       	cpc	r26, r27
     880:	b0 e8       	ldi	r27, 0x80	; 128
     882:	09 f0       	breq	.+2      	; 0x886 <__divsf3_pse+0x56>
     884:	bb 0b       	sbc	r27, r27
     886:	80 2d       	mov	r24, r0
     888:	bf 01       	movw	r22, r30
     88a:	ff 27       	eor	r31, r31
     88c:	93 58       	subi	r25, 0x83	; 131
     88e:	5f 4f       	sbci	r21, 0xFF	; 255
     890:	2a f0       	brmi	.+10     	; 0x89c <__divsf3_pse+0x6c>
     892:	9e 3f       	cpi	r25, 0xFE	; 254
     894:	51 05       	cpc	r21, r1
     896:	68 f0       	brcs	.+26     	; 0x8b2 <__divsf3_pse+0x82>
     898:	92 c0       	rjmp	.+292    	; 0x9be <__fp_inf>
     89a:	dc c0       	rjmp	.+440    	; 0xa54 <__fp_szero>
     89c:	5f 3f       	cpi	r21, 0xFF	; 255
     89e:	ec f3       	brlt	.-6      	; 0x89a <__divsf3_pse+0x6a>
     8a0:	98 3e       	cpi	r25, 0xE8	; 232
     8a2:	dc f3       	brlt	.-10     	; 0x89a <__divsf3_pse+0x6a>
     8a4:	86 95       	lsr	r24
     8a6:	77 95       	ror	r23
     8a8:	67 95       	ror	r22
     8aa:	b7 95       	ror	r27
     8ac:	f7 95       	ror	r31
     8ae:	9f 5f       	subi	r25, 0xFF	; 255
     8b0:	c9 f7       	brne	.-14     	; 0x8a4 <__divsf3_pse+0x74>
     8b2:	88 0f       	add	r24, r24
     8b4:	91 1d       	adc	r25, r1
     8b6:	96 95       	lsr	r25
     8b8:	87 95       	ror	r24
     8ba:	97 f9       	bld	r25, 7
     8bc:	08 95       	ret
     8be:	e1 e0       	ldi	r30, 0x01	; 1
     8c0:	66 0f       	add	r22, r22
     8c2:	77 1f       	adc	r23, r23
     8c4:	88 1f       	adc	r24, r24
     8c6:	bb 1f       	adc	r27, r27
     8c8:	62 17       	cp	r22, r18
     8ca:	73 07       	cpc	r23, r19
     8cc:	84 07       	cpc	r24, r20
     8ce:	ba 07       	cpc	r27, r26
     8d0:	20 f0       	brcs	.+8      	; 0x8da <__divsf3_pse+0xaa>
     8d2:	62 1b       	sub	r22, r18
     8d4:	73 0b       	sbc	r23, r19
     8d6:	84 0b       	sbc	r24, r20
     8d8:	ba 0b       	sbc	r27, r26
     8da:	ee 1f       	adc	r30, r30
     8dc:	88 f7       	brcc	.-30     	; 0x8c0 <__divsf3_pse+0x90>
     8de:	e0 95       	com	r30
     8e0:	08 95       	ret

000008e2 <__fixsfsi>:
     8e2:	04 d0       	rcall	.+8      	; 0x8ec <__fixunssfsi>
     8e4:	68 94       	set
     8e6:	b1 11       	cpse	r27, r1
     8e8:	b5 c0       	rjmp	.+362    	; 0xa54 <__fp_szero>
     8ea:	08 95       	ret

000008ec <__fixunssfsi>:
     8ec:	98 d0       	rcall	.+304    	; 0xa1e <__fp_splitA>
     8ee:	88 f0       	brcs	.+34     	; 0x912 <__fixunssfsi+0x26>
     8f0:	9f 57       	subi	r25, 0x7F	; 127
     8f2:	90 f0       	brcs	.+36     	; 0x918 <__fixunssfsi+0x2c>
     8f4:	b9 2f       	mov	r27, r25
     8f6:	99 27       	eor	r25, r25
     8f8:	b7 51       	subi	r27, 0x17	; 23
     8fa:	a0 f0       	brcs	.+40     	; 0x924 <__fixunssfsi+0x38>
     8fc:	d1 f0       	breq	.+52     	; 0x932 <__fixunssfsi+0x46>
     8fe:	66 0f       	add	r22, r22
     900:	77 1f       	adc	r23, r23
     902:	88 1f       	adc	r24, r24
     904:	99 1f       	adc	r25, r25
     906:	1a f0       	brmi	.+6      	; 0x90e <__fixunssfsi+0x22>
     908:	ba 95       	dec	r27
     90a:	c9 f7       	brne	.-14     	; 0x8fe <__fixunssfsi+0x12>
     90c:	12 c0       	rjmp	.+36     	; 0x932 <__fixunssfsi+0x46>
     90e:	b1 30       	cpi	r27, 0x01	; 1
     910:	81 f0       	breq	.+32     	; 0x932 <__fixunssfsi+0x46>
     912:	9f d0       	rcall	.+318    	; 0xa52 <__fp_zero>
     914:	b1 e0       	ldi	r27, 0x01	; 1
     916:	08 95       	ret
     918:	9c c0       	rjmp	.+312    	; 0xa52 <__fp_zero>
     91a:	67 2f       	mov	r22, r23
     91c:	78 2f       	mov	r23, r24
     91e:	88 27       	eor	r24, r24
     920:	b8 5f       	subi	r27, 0xF8	; 248
     922:	39 f0       	breq	.+14     	; 0x932 <__fixunssfsi+0x46>
     924:	b9 3f       	cpi	r27, 0xF9	; 249
     926:	cc f3       	brlt	.-14     	; 0x91a <__fixunssfsi+0x2e>
     928:	86 95       	lsr	r24
     92a:	77 95       	ror	r23
     92c:	67 95       	ror	r22
     92e:	b3 95       	inc	r27
     930:	d9 f7       	brne	.-10     	; 0x928 <__fixunssfsi+0x3c>
     932:	3e f4       	brtc	.+14     	; 0x942 <__fixunssfsi+0x56>
     934:	90 95       	com	r25
     936:	80 95       	com	r24
     938:	70 95       	com	r23
     93a:	61 95       	neg	r22
     93c:	7f 4f       	sbci	r23, 0xFF	; 255
     93e:	8f 4f       	sbci	r24, 0xFF	; 255
     940:	9f 4f       	sbci	r25, 0xFF	; 255
     942:	08 95       	ret

00000944 <__floatunsisf>:
     944:	e8 94       	clt
     946:	09 c0       	rjmp	.+18     	; 0x95a <__floatsisf+0x12>

00000948 <__floatsisf>:
     948:	97 fb       	bst	r25, 7
     94a:	3e f4       	brtc	.+14     	; 0x95a <__floatsisf+0x12>
     94c:	90 95       	com	r25
     94e:	80 95       	com	r24
     950:	70 95       	com	r23
     952:	61 95       	neg	r22
     954:	7f 4f       	sbci	r23, 0xFF	; 255
     956:	8f 4f       	sbci	r24, 0xFF	; 255
     958:	9f 4f       	sbci	r25, 0xFF	; 255
     95a:	99 23       	and	r25, r25
     95c:	a9 f0       	breq	.+42     	; 0x988 <__floatsisf+0x40>
     95e:	f9 2f       	mov	r31, r25
     960:	96 e9       	ldi	r25, 0x96	; 150
     962:	bb 27       	eor	r27, r27
     964:	93 95       	inc	r25
     966:	f6 95       	lsr	r31
     968:	87 95       	ror	r24
     96a:	77 95       	ror	r23
     96c:	67 95       	ror	r22
     96e:	b7 95       	ror	r27
     970:	f1 11       	cpse	r31, r1
     972:	f8 cf       	rjmp	.-16     	; 0x964 <__floatsisf+0x1c>
     974:	fa f4       	brpl	.+62     	; 0x9b4 <__floatsisf+0x6c>
     976:	bb 0f       	add	r27, r27
     978:	11 f4       	brne	.+4      	; 0x97e <__floatsisf+0x36>
     97a:	60 ff       	sbrs	r22, 0
     97c:	1b c0       	rjmp	.+54     	; 0x9b4 <__floatsisf+0x6c>
     97e:	6f 5f       	subi	r22, 0xFF	; 255
     980:	7f 4f       	sbci	r23, 0xFF	; 255
     982:	8f 4f       	sbci	r24, 0xFF	; 255
     984:	9f 4f       	sbci	r25, 0xFF	; 255
     986:	16 c0       	rjmp	.+44     	; 0x9b4 <__floatsisf+0x6c>
     988:	88 23       	and	r24, r24
     98a:	11 f0       	breq	.+4      	; 0x990 <__floatsisf+0x48>
     98c:	96 e9       	ldi	r25, 0x96	; 150
     98e:	11 c0       	rjmp	.+34     	; 0x9b2 <__floatsisf+0x6a>
     990:	77 23       	and	r23, r23
     992:	21 f0       	breq	.+8      	; 0x99c <__floatsisf+0x54>
     994:	9e e8       	ldi	r25, 0x8E	; 142
     996:	87 2f       	mov	r24, r23
     998:	76 2f       	mov	r23, r22
     99a:	05 c0       	rjmp	.+10     	; 0x9a6 <__floatsisf+0x5e>
     99c:	66 23       	and	r22, r22
     99e:	71 f0       	breq	.+28     	; 0x9bc <__floatsisf+0x74>
     9a0:	96 e8       	ldi	r25, 0x86	; 134
     9a2:	86 2f       	mov	r24, r22
     9a4:	70 e0       	ldi	r23, 0x00	; 0
     9a6:	60 e0       	ldi	r22, 0x00	; 0
     9a8:	2a f0       	brmi	.+10     	; 0x9b4 <__floatsisf+0x6c>
     9aa:	9a 95       	dec	r25
     9ac:	66 0f       	add	r22, r22
     9ae:	77 1f       	adc	r23, r23
     9b0:	88 1f       	adc	r24, r24
     9b2:	da f7       	brpl	.-10     	; 0x9aa <__floatsisf+0x62>
     9b4:	88 0f       	add	r24, r24
     9b6:	96 95       	lsr	r25
     9b8:	87 95       	ror	r24
     9ba:	97 f9       	bld	r25, 7
     9bc:	08 95       	ret

000009be <__fp_inf>:
     9be:	97 f9       	bld	r25, 7
     9c0:	9f 67       	ori	r25, 0x7F	; 127
     9c2:	80 e8       	ldi	r24, 0x80	; 128
     9c4:	70 e0       	ldi	r23, 0x00	; 0
     9c6:	60 e0       	ldi	r22, 0x00	; 0
     9c8:	08 95       	ret

000009ca <__fp_nan>:
     9ca:	9f ef       	ldi	r25, 0xFF	; 255
     9cc:	80 ec       	ldi	r24, 0xC0	; 192
     9ce:	08 95       	ret

000009d0 <__fp_pscA>:
     9d0:	00 24       	eor	r0, r0
     9d2:	0a 94       	dec	r0
     9d4:	16 16       	cp	r1, r22
     9d6:	17 06       	cpc	r1, r23
     9d8:	18 06       	cpc	r1, r24
     9da:	09 06       	cpc	r0, r25
     9dc:	08 95       	ret

000009de <__fp_pscB>:
     9de:	00 24       	eor	r0, r0
     9e0:	0a 94       	dec	r0
     9e2:	12 16       	cp	r1, r18
     9e4:	13 06       	cpc	r1, r19
     9e6:	14 06       	cpc	r1, r20
     9e8:	05 06       	cpc	r0, r21
     9ea:	08 95       	ret

000009ec <__fp_round>:
     9ec:	09 2e       	mov	r0, r25
     9ee:	03 94       	inc	r0
     9f0:	00 0c       	add	r0, r0
     9f2:	11 f4       	brne	.+4      	; 0x9f8 <__fp_round+0xc>
     9f4:	88 23       	and	r24, r24
     9f6:	52 f0       	brmi	.+20     	; 0xa0c <__fp_round+0x20>
     9f8:	bb 0f       	add	r27, r27
     9fa:	40 f4       	brcc	.+16     	; 0xa0c <__fp_round+0x20>
     9fc:	bf 2b       	or	r27, r31
     9fe:	11 f4       	brne	.+4      	; 0xa04 <__fp_round+0x18>
     a00:	60 ff       	sbrs	r22, 0
     a02:	04 c0       	rjmp	.+8      	; 0xa0c <__fp_round+0x20>
     a04:	6f 5f       	subi	r22, 0xFF	; 255
     a06:	7f 4f       	sbci	r23, 0xFF	; 255
     a08:	8f 4f       	sbci	r24, 0xFF	; 255
     a0a:	9f 4f       	sbci	r25, 0xFF	; 255
     a0c:	08 95       	ret

00000a0e <__fp_split3>:
     a0e:	57 fd       	sbrc	r21, 7
     a10:	90 58       	subi	r25, 0x80	; 128
     a12:	44 0f       	add	r20, r20
     a14:	55 1f       	adc	r21, r21
     a16:	59 f0       	breq	.+22     	; 0xa2e <__fp_splitA+0x10>
     a18:	5f 3f       	cpi	r21, 0xFF	; 255
     a1a:	71 f0       	breq	.+28     	; 0xa38 <__fp_splitA+0x1a>
     a1c:	47 95       	ror	r20

00000a1e <__fp_splitA>:
     a1e:	88 0f       	add	r24, r24
     a20:	97 fb       	bst	r25, 7
     a22:	99 1f       	adc	r25, r25
     a24:	61 f0       	breq	.+24     	; 0xa3e <__fp_splitA+0x20>
     a26:	9f 3f       	cpi	r25, 0xFF	; 255
     a28:	79 f0       	breq	.+30     	; 0xa48 <__fp_splitA+0x2a>
     a2a:	87 95       	ror	r24
     a2c:	08 95       	ret
     a2e:	12 16       	cp	r1, r18
     a30:	13 06       	cpc	r1, r19
     a32:	14 06       	cpc	r1, r20
     a34:	55 1f       	adc	r21, r21
     a36:	f2 cf       	rjmp	.-28     	; 0xa1c <__fp_split3+0xe>
     a38:	46 95       	lsr	r20
     a3a:	f1 df       	rcall	.-30     	; 0xa1e <__fp_splitA>
     a3c:	08 c0       	rjmp	.+16     	; 0xa4e <__fp_splitA+0x30>
     a3e:	16 16       	cp	r1, r22
     a40:	17 06       	cpc	r1, r23
     a42:	18 06       	cpc	r1, r24
     a44:	99 1f       	adc	r25, r25
     a46:	f1 cf       	rjmp	.-30     	; 0xa2a <__fp_splitA+0xc>
     a48:	86 95       	lsr	r24
     a4a:	71 05       	cpc	r23, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	08 94       	sec
     a50:	08 95       	ret

00000a52 <__fp_zero>:
     a52:	e8 94       	clt

00000a54 <__fp_szero>:
     a54:	bb 27       	eor	r27, r27
     a56:	66 27       	eor	r22, r22
     a58:	77 27       	eor	r23, r23
     a5a:	cb 01       	movw	r24, r22
     a5c:	97 f9       	bld	r25, 7
     a5e:	08 95       	ret

00000a60 <__mulsf3>:
     a60:	0b d0       	rcall	.+22     	; 0xa78 <__mulsf3x>
     a62:	c4 cf       	rjmp	.-120    	; 0x9ec <__fp_round>
     a64:	b5 df       	rcall	.-150    	; 0x9d0 <__fp_pscA>
     a66:	28 f0       	brcs	.+10     	; 0xa72 <__mulsf3+0x12>
     a68:	ba df       	rcall	.-140    	; 0x9de <__fp_pscB>
     a6a:	18 f0       	brcs	.+6      	; 0xa72 <__mulsf3+0x12>
     a6c:	95 23       	and	r25, r21
     a6e:	09 f0       	breq	.+2      	; 0xa72 <__mulsf3+0x12>
     a70:	a6 cf       	rjmp	.-180    	; 0x9be <__fp_inf>
     a72:	ab cf       	rjmp	.-170    	; 0x9ca <__fp_nan>
     a74:	11 24       	eor	r1, r1
     a76:	ee cf       	rjmp	.-36     	; 0xa54 <__fp_szero>

00000a78 <__mulsf3x>:
     a78:	ca df       	rcall	.-108    	; 0xa0e <__fp_split3>
     a7a:	a0 f3       	brcs	.-24     	; 0xa64 <__mulsf3+0x4>

00000a7c <__mulsf3_pse>:
     a7c:	95 9f       	mul	r25, r21
     a7e:	d1 f3       	breq	.-12     	; 0xa74 <__mulsf3+0x14>
     a80:	95 0f       	add	r25, r21
     a82:	50 e0       	ldi	r21, 0x00	; 0
     a84:	55 1f       	adc	r21, r21
     a86:	62 9f       	mul	r22, r18
     a88:	f0 01       	movw	r30, r0
     a8a:	72 9f       	mul	r23, r18
     a8c:	bb 27       	eor	r27, r27
     a8e:	f0 0d       	add	r31, r0
     a90:	b1 1d       	adc	r27, r1
     a92:	63 9f       	mul	r22, r19
     a94:	aa 27       	eor	r26, r26
     a96:	f0 0d       	add	r31, r0
     a98:	b1 1d       	adc	r27, r1
     a9a:	aa 1f       	adc	r26, r26
     a9c:	64 9f       	mul	r22, r20
     a9e:	66 27       	eor	r22, r22
     aa0:	b0 0d       	add	r27, r0
     aa2:	a1 1d       	adc	r26, r1
     aa4:	66 1f       	adc	r22, r22
     aa6:	82 9f       	mul	r24, r18
     aa8:	22 27       	eor	r18, r18
     aaa:	b0 0d       	add	r27, r0
     aac:	a1 1d       	adc	r26, r1
     aae:	62 1f       	adc	r22, r18
     ab0:	73 9f       	mul	r23, r19
     ab2:	b0 0d       	add	r27, r0
     ab4:	a1 1d       	adc	r26, r1
     ab6:	62 1f       	adc	r22, r18
     ab8:	83 9f       	mul	r24, r19
     aba:	a0 0d       	add	r26, r0
     abc:	61 1d       	adc	r22, r1
     abe:	22 1f       	adc	r18, r18
     ac0:	74 9f       	mul	r23, r20
     ac2:	33 27       	eor	r19, r19
     ac4:	a0 0d       	add	r26, r0
     ac6:	61 1d       	adc	r22, r1
     ac8:	23 1f       	adc	r18, r19
     aca:	84 9f       	mul	r24, r20
     acc:	60 0d       	add	r22, r0
     ace:	21 1d       	adc	r18, r1
     ad0:	82 2f       	mov	r24, r18
     ad2:	76 2f       	mov	r23, r22
     ad4:	6a 2f       	mov	r22, r26
     ad6:	11 24       	eor	r1, r1
     ad8:	9f 57       	subi	r25, 0x7F	; 127
     ada:	50 40       	sbci	r21, 0x00	; 0
     adc:	8a f0       	brmi	.+34     	; 0xb00 <__mulsf3_pse+0x84>
     ade:	e1 f0       	breq	.+56     	; 0xb18 <__mulsf3_pse+0x9c>
     ae0:	88 23       	and	r24, r24
     ae2:	4a f0       	brmi	.+18     	; 0xaf6 <__mulsf3_pse+0x7a>
     ae4:	ee 0f       	add	r30, r30
     ae6:	ff 1f       	adc	r31, r31
     ae8:	bb 1f       	adc	r27, r27
     aea:	66 1f       	adc	r22, r22
     aec:	77 1f       	adc	r23, r23
     aee:	88 1f       	adc	r24, r24
     af0:	91 50       	subi	r25, 0x01	; 1
     af2:	50 40       	sbci	r21, 0x00	; 0
     af4:	a9 f7       	brne	.-22     	; 0xae0 <__mulsf3_pse+0x64>
     af6:	9e 3f       	cpi	r25, 0xFE	; 254
     af8:	51 05       	cpc	r21, r1
     afa:	70 f0       	brcs	.+28     	; 0xb18 <__mulsf3_pse+0x9c>
     afc:	60 cf       	rjmp	.-320    	; 0x9be <__fp_inf>
     afe:	aa cf       	rjmp	.-172    	; 0xa54 <__fp_szero>
     b00:	5f 3f       	cpi	r21, 0xFF	; 255
     b02:	ec f3       	brlt	.-6      	; 0xafe <__mulsf3_pse+0x82>
     b04:	98 3e       	cpi	r25, 0xE8	; 232
     b06:	dc f3       	brlt	.-10     	; 0xafe <__mulsf3_pse+0x82>
     b08:	86 95       	lsr	r24
     b0a:	77 95       	ror	r23
     b0c:	67 95       	ror	r22
     b0e:	b7 95       	ror	r27
     b10:	f7 95       	ror	r31
     b12:	e7 95       	ror	r30
     b14:	9f 5f       	subi	r25, 0xFF	; 255
     b16:	c1 f7       	brne	.-16     	; 0xb08 <__mulsf3_pse+0x8c>
     b18:	fe 2b       	or	r31, r30
     b1a:	88 0f       	add	r24, r24
     b1c:	91 1d       	adc	r25, r1
     b1e:	96 95       	lsr	r25
     b20:	87 95       	ror	r24
     b22:	97 f9       	bld	r25, 7
     b24:	08 95       	ret

00000b26 <round>:
     b26:	7b df       	rcall	.-266    	; 0xa1e <__fp_splitA>
     b28:	e0 f0       	brcs	.+56     	; 0xb62 <round+0x3c>
     b2a:	9e 37       	cpi	r25, 0x7E	; 126
     b2c:	d8 f0       	brcs	.+54     	; 0xb64 <round+0x3e>
     b2e:	96 39       	cpi	r25, 0x96	; 150
     b30:	b8 f4       	brcc	.+46     	; 0xb60 <round+0x3a>
     b32:	9e 38       	cpi	r25, 0x8E	; 142
     b34:	48 f4       	brcc	.+18     	; 0xb48 <round+0x22>
     b36:	67 2f       	mov	r22, r23
     b38:	78 2f       	mov	r23, r24
     b3a:	88 27       	eor	r24, r24
     b3c:	98 5f       	subi	r25, 0xF8	; 248
     b3e:	f9 cf       	rjmp	.-14     	; 0xb32 <round+0xc>
     b40:	86 95       	lsr	r24
     b42:	77 95       	ror	r23
     b44:	67 95       	ror	r22
     b46:	93 95       	inc	r25
     b48:	95 39       	cpi	r25, 0x95	; 149
     b4a:	d0 f3       	brcs	.-12     	; 0xb40 <round+0x1a>
     b4c:	b6 2f       	mov	r27, r22
     b4e:	b1 70       	andi	r27, 0x01	; 1
     b50:	6b 0f       	add	r22, r27
     b52:	71 1d       	adc	r23, r1
     b54:	81 1d       	adc	r24, r1
     b56:	20 f4       	brcc	.+8      	; 0xb60 <round+0x3a>
     b58:	87 95       	ror	r24
     b5a:	77 95       	ror	r23
     b5c:	67 95       	ror	r22
     b5e:	93 95       	inc	r25
     b60:	02 c0       	rjmp	.+4      	; 0xb66 <__fp_mintl>
     b62:	1c c0       	rjmp	.+56     	; 0xb9c <__fp_mpack>
     b64:	77 cf       	rjmp	.-274    	; 0xa54 <__fp_szero>

00000b66 <__fp_mintl>:
     b66:	88 23       	and	r24, r24
     b68:	71 f4       	brne	.+28     	; 0xb86 <__fp_mintl+0x20>
     b6a:	77 23       	and	r23, r23
     b6c:	21 f0       	breq	.+8      	; 0xb76 <__fp_mintl+0x10>
     b6e:	98 50       	subi	r25, 0x08	; 8
     b70:	87 2b       	or	r24, r23
     b72:	76 2f       	mov	r23, r22
     b74:	07 c0       	rjmp	.+14     	; 0xb84 <__fp_mintl+0x1e>
     b76:	66 23       	and	r22, r22
     b78:	11 f4       	brne	.+4      	; 0xb7e <__fp_mintl+0x18>
     b7a:	99 27       	eor	r25, r25
     b7c:	0d c0       	rjmp	.+26     	; 0xb98 <__fp_mintl+0x32>
     b7e:	90 51       	subi	r25, 0x10	; 16
     b80:	86 2b       	or	r24, r22
     b82:	70 e0       	ldi	r23, 0x00	; 0
     b84:	60 e0       	ldi	r22, 0x00	; 0
     b86:	2a f0       	brmi	.+10     	; 0xb92 <__fp_mintl+0x2c>
     b88:	9a 95       	dec	r25
     b8a:	66 0f       	add	r22, r22
     b8c:	77 1f       	adc	r23, r23
     b8e:	88 1f       	adc	r24, r24
     b90:	da f7       	brpl	.-10     	; 0xb88 <__fp_mintl+0x22>
     b92:	88 0f       	add	r24, r24
     b94:	96 95       	lsr	r25
     b96:	87 95       	ror	r24
     b98:	97 f9       	bld	r25, 7
     b9a:	08 95       	ret

00000b9c <__fp_mpack>:
     b9c:	9f 3f       	cpi	r25, 0xFF	; 255
     b9e:	31 f0       	breq	.+12     	; 0xbac <__fp_mpack_finite+0xc>

00000ba0 <__fp_mpack_finite>:
     ba0:	91 50       	subi	r25, 0x01	; 1
     ba2:	20 f4       	brcc	.+8      	; 0xbac <__fp_mpack_finite+0xc>
     ba4:	87 95       	ror	r24
     ba6:	77 95       	ror	r23
     ba8:	67 95       	ror	r22
     baa:	b7 95       	ror	r27
     bac:	88 0f       	add	r24, r24
     bae:	91 1d       	adc	r25, r1
     bb0:	96 95       	lsr	r25
     bb2:	87 95       	ror	r24
     bb4:	97 f9       	bld	r25, 7
     bb6:	08 95       	ret

00000bb8 <malloc>:
     bb8:	cf 93       	push	r28
     bba:	df 93       	push	r29
     bbc:	82 30       	cpi	r24, 0x02	; 2
     bbe:	91 05       	cpc	r25, r1
     bc0:	10 f4       	brcc	.+4      	; 0xbc6 <malloc+0xe>
     bc2:	82 e0       	ldi	r24, 0x02	; 2
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	e0 91 44 02 	lds	r30, 0x0244
     bca:	f0 91 45 02 	lds	r31, 0x0245
     bce:	20 e0       	ldi	r18, 0x00	; 0
     bd0:	30 e0       	ldi	r19, 0x00	; 0
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	b0 e0       	ldi	r27, 0x00	; 0
     bd6:	30 97       	sbiw	r30, 0x00	; 0
     bd8:	39 f1       	breq	.+78     	; 0xc28 <malloc+0x70>
     bda:	40 81       	ld	r20, Z
     bdc:	51 81       	ldd	r21, Z+1	; 0x01
     bde:	48 17       	cp	r20, r24
     be0:	59 07       	cpc	r21, r25
     be2:	b8 f0       	brcs	.+46     	; 0xc12 <malloc+0x5a>
     be4:	48 17       	cp	r20, r24
     be6:	59 07       	cpc	r21, r25
     be8:	71 f4       	brne	.+28     	; 0xc06 <malloc+0x4e>
     bea:	82 81       	ldd	r24, Z+2	; 0x02
     bec:	93 81       	ldd	r25, Z+3	; 0x03
     bee:	10 97       	sbiw	r26, 0x00	; 0
     bf0:	29 f0       	breq	.+10     	; 0xbfc <malloc+0x44>
     bf2:	13 96       	adiw	r26, 0x03	; 3
     bf4:	9c 93       	st	X, r25
     bf6:	8e 93       	st	-X, r24
     bf8:	12 97       	sbiw	r26, 0x02	; 2
     bfa:	2c c0       	rjmp	.+88     	; 0xc54 <malloc+0x9c>
     bfc:	90 93 45 02 	sts	0x0245, r25
     c00:	80 93 44 02 	sts	0x0244, r24
     c04:	27 c0       	rjmp	.+78     	; 0xc54 <malloc+0x9c>
     c06:	21 15       	cp	r18, r1
     c08:	31 05       	cpc	r19, r1
     c0a:	31 f0       	breq	.+12     	; 0xc18 <malloc+0x60>
     c0c:	42 17       	cp	r20, r18
     c0e:	53 07       	cpc	r21, r19
     c10:	18 f0       	brcs	.+6      	; 0xc18 <malloc+0x60>
     c12:	a9 01       	movw	r20, r18
     c14:	db 01       	movw	r26, r22
     c16:	01 c0       	rjmp	.+2      	; 0xc1a <malloc+0x62>
     c18:	ef 01       	movw	r28, r30
     c1a:	9a 01       	movw	r18, r20
     c1c:	bd 01       	movw	r22, r26
     c1e:	df 01       	movw	r26, r30
     c20:	02 80       	ldd	r0, Z+2	; 0x02
     c22:	f3 81       	ldd	r31, Z+3	; 0x03
     c24:	e0 2d       	mov	r30, r0
     c26:	d7 cf       	rjmp	.-82     	; 0xbd6 <malloc+0x1e>
     c28:	21 15       	cp	r18, r1
     c2a:	31 05       	cpc	r19, r1
     c2c:	f9 f0       	breq	.+62     	; 0xc6c <malloc+0xb4>
     c2e:	28 1b       	sub	r18, r24
     c30:	39 0b       	sbc	r19, r25
     c32:	24 30       	cpi	r18, 0x04	; 4
     c34:	31 05       	cpc	r19, r1
     c36:	80 f4       	brcc	.+32     	; 0xc58 <malloc+0xa0>
     c38:	8a 81       	ldd	r24, Y+2	; 0x02
     c3a:	9b 81       	ldd	r25, Y+3	; 0x03
     c3c:	61 15       	cp	r22, r1
     c3e:	71 05       	cpc	r23, r1
     c40:	21 f0       	breq	.+8      	; 0xc4a <malloc+0x92>
     c42:	fb 01       	movw	r30, r22
     c44:	93 83       	std	Z+3, r25	; 0x03
     c46:	82 83       	std	Z+2, r24	; 0x02
     c48:	04 c0       	rjmp	.+8      	; 0xc52 <malloc+0x9a>
     c4a:	90 93 45 02 	sts	0x0245, r25
     c4e:	80 93 44 02 	sts	0x0244, r24
     c52:	fe 01       	movw	r30, r28
     c54:	32 96       	adiw	r30, 0x02	; 2
     c56:	44 c0       	rjmp	.+136    	; 0xce0 <malloc+0x128>
     c58:	fe 01       	movw	r30, r28
     c5a:	e2 0f       	add	r30, r18
     c5c:	f3 1f       	adc	r31, r19
     c5e:	81 93       	st	Z+, r24
     c60:	91 93       	st	Z+, r25
     c62:	22 50       	subi	r18, 0x02	; 2
     c64:	31 09       	sbc	r19, r1
     c66:	39 83       	std	Y+1, r19	; 0x01
     c68:	28 83       	st	Y, r18
     c6a:	3a c0       	rjmp	.+116    	; 0xce0 <malloc+0x128>
     c6c:	20 91 42 02 	lds	r18, 0x0242
     c70:	30 91 43 02 	lds	r19, 0x0243
     c74:	23 2b       	or	r18, r19
     c76:	41 f4       	brne	.+16     	; 0xc88 <malloc+0xd0>
     c78:	20 91 02 01 	lds	r18, 0x0102
     c7c:	30 91 03 01 	lds	r19, 0x0103
     c80:	30 93 43 02 	sts	0x0243, r19
     c84:	20 93 42 02 	sts	0x0242, r18
     c88:	20 91 00 01 	lds	r18, 0x0100
     c8c:	30 91 01 01 	lds	r19, 0x0101
     c90:	21 15       	cp	r18, r1
     c92:	31 05       	cpc	r19, r1
     c94:	41 f4       	brne	.+16     	; 0xca6 <malloc+0xee>
     c96:	2d b7       	in	r18, 0x3d	; 61
     c98:	3e b7       	in	r19, 0x3e	; 62
     c9a:	40 91 04 01 	lds	r20, 0x0104
     c9e:	50 91 05 01 	lds	r21, 0x0105
     ca2:	24 1b       	sub	r18, r20
     ca4:	35 0b       	sbc	r19, r21
     ca6:	e0 91 42 02 	lds	r30, 0x0242
     caa:	f0 91 43 02 	lds	r31, 0x0243
     cae:	e2 17       	cp	r30, r18
     cb0:	f3 07       	cpc	r31, r19
     cb2:	a0 f4       	brcc	.+40     	; 0xcdc <malloc+0x124>
     cb4:	2e 1b       	sub	r18, r30
     cb6:	3f 0b       	sbc	r19, r31
     cb8:	28 17       	cp	r18, r24
     cba:	39 07       	cpc	r19, r25
     cbc:	78 f0       	brcs	.+30     	; 0xcdc <malloc+0x124>
     cbe:	ac 01       	movw	r20, r24
     cc0:	4e 5f       	subi	r20, 0xFE	; 254
     cc2:	5f 4f       	sbci	r21, 0xFF	; 255
     cc4:	24 17       	cp	r18, r20
     cc6:	35 07       	cpc	r19, r21
     cc8:	48 f0       	brcs	.+18     	; 0xcdc <malloc+0x124>
     cca:	4e 0f       	add	r20, r30
     ccc:	5f 1f       	adc	r21, r31
     cce:	50 93 43 02 	sts	0x0243, r21
     cd2:	40 93 42 02 	sts	0x0242, r20
     cd6:	81 93       	st	Z+, r24
     cd8:	91 93       	st	Z+, r25
     cda:	02 c0       	rjmp	.+4      	; 0xce0 <malloc+0x128>
     cdc:	e0 e0       	ldi	r30, 0x00	; 0
     cde:	f0 e0       	ldi	r31, 0x00	; 0
     ce0:	cf 01       	movw	r24, r30
     ce2:	df 91       	pop	r29
     ce4:	cf 91       	pop	r28
     ce6:	08 95       	ret

00000ce8 <free>:
     ce8:	cf 93       	push	r28
     cea:	df 93       	push	r29
     cec:	00 97       	sbiw	r24, 0x00	; 0
     cee:	09 f4       	brne	.+2      	; 0xcf2 <free+0xa>
     cf0:	87 c0       	rjmp	.+270    	; 0xe00 <free+0x118>
     cf2:	fc 01       	movw	r30, r24
     cf4:	32 97       	sbiw	r30, 0x02	; 2
     cf6:	13 82       	std	Z+3, r1	; 0x03
     cf8:	12 82       	std	Z+2, r1	; 0x02
     cfa:	c0 91 44 02 	lds	r28, 0x0244
     cfe:	d0 91 45 02 	lds	r29, 0x0245
     d02:	20 97       	sbiw	r28, 0x00	; 0
     d04:	81 f4       	brne	.+32     	; 0xd26 <free+0x3e>
     d06:	20 81       	ld	r18, Z
     d08:	31 81       	ldd	r19, Z+1	; 0x01
     d0a:	28 0f       	add	r18, r24
     d0c:	39 1f       	adc	r19, r25
     d0e:	80 91 42 02 	lds	r24, 0x0242
     d12:	90 91 43 02 	lds	r25, 0x0243
     d16:	82 17       	cp	r24, r18
     d18:	93 07       	cpc	r25, r19
     d1a:	79 f5       	brne	.+94     	; 0xd7a <free+0x92>
     d1c:	f0 93 43 02 	sts	0x0243, r31
     d20:	e0 93 42 02 	sts	0x0242, r30
     d24:	6d c0       	rjmp	.+218    	; 0xe00 <free+0x118>
     d26:	de 01       	movw	r26, r28
     d28:	20 e0       	ldi	r18, 0x00	; 0
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	ae 17       	cp	r26, r30
     d2e:	bf 07       	cpc	r27, r31
     d30:	50 f4       	brcc	.+20     	; 0xd46 <free+0x5e>
     d32:	12 96       	adiw	r26, 0x02	; 2
     d34:	4d 91       	ld	r20, X+
     d36:	5c 91       	ld	r21, X
     d38:	13 97       	sbiw	r26, 0x03	; 3
     d3a:	9d 01       	movw	r18, r26
     d3c:	41 15       	cp	r20, r1
     d3e:	51 05       	cpc	r21, r1
     d40:	09 f1       	breq	.+66     	; 0xd84 <free+0x9c>
     d42:	da 01       	movw	r26, r20
     d44:	f3 cf       	rjmp	.-26     	; 0xd2c <free+0x44>
     d46:	b3 83       	std	Z+3, r27	; 0x03
     d48:	a2 83       	std	Z+2, r26	; 0x02
     d4a:	40 81       	ld	r20, Z
     d4c:	51 81       	ldd	r21, Z+1	; 0x01
     d4e:	84 0f       	add	r24, r20
     d50:	95 1f       	adc	r25, r21
     d52:	8a 17       	cp	r24, r26
     d54:	9b 07       	cpc	r25, r27
     d56:	71 f4       	brne	.+28     	; 0xd74 <free+0x8c>
     d58:	8d 91       	ld	r24, X+
     d5a:	9c 91       	ld	r25, X
     d5c:	11 97       	sbiw	r26, 0x01	; 1
     d5e:	84 0f       	add	r24, r20
     d60:	95 1f       	adc	r25, r21
     d62:	02 96       	adiw	r24, 0x02	; 2
     d64:	91 83       	std	Z+1, r25	; 0x01
     d66:	80 83       	st	Z, r24
     d68:	12 96       	adiw	r26, 0x02	; 2
     d6a:	8d 91       	ld	r24, X+
     d6c:	9c 91       	ld	r25, X
     d6e:	13 97       	sbiw	r26, 0x03	; 3
     d70:	93 83       	std	Z+3, r25	; 0x03
     d72:	82 83       	std	Z+2, r24	; 0x02
     d74:	21 15       	cp	r18, r1
     d76:	31 05       	cpc	r19, r1
     d78:	29 f4       	brne	.+10     	; 0xd84 <free+0x9c>
     d7a:	f0 93 45 02 	sts	0x0245, r31
     d7e:	e0 93 44 02 	sts	0x0244, r30
     d82:	3e c0       	rjmp	.+124    	; 0xe00 <free+0x118>
     d84:	d9 01       	movw	r26, r18
     d86:	13 96       	adiw	r26, 0x03	; 3
     d88:	fc 93       	st	X, r31
     d8a:	ee 93       	st	-X, r30
     d8c:	12 97       	sbiw	r26, 0x02	; 2
     d8e:	4d 91       	ld	r20, X+
     d90:	5d 91       	ld	r21, X+
     d92:	a4 0f       	add	r26, r20
     d94:	b5 1f       	adc	r27, r21
     d96:	ea 17       	cp	r30, r26
     d98:	fb 07       	cpc	r31, r27
     d9a:	79 f4       	brne	.+30     	; 0xdba <free+0xd2>
     d9c:	80 81       	ld	r24, Z
     d9e:	91 81       	ldd	r25, Z+1	; 0x01
     da0:	84 0f       	add	r24, r20
     da2:	95 1f       	adc	r25, r21
     da4:	02 96       	adiw	r24, 0x02	; 2
     da6:	d9 01       	movw	r26, r18
     da8:	11 96       	adiw	r26, 0x01	; 1
     daa:	9c 93       	st	X, r25
     dac:	8e 93       	st	-X, r24
     dae:	82 81       	ldd	r24, Z+2	; 0x02
     db0:	93 81       	ldd	r25, Z+3	; 0x03
     db2:	13 96       	adiw	r26, 0x03	; 3
     db4:	9c 93       	st	X, r25
     db6:	8e 93       	st	-X, r24
     db8:	12 97       	sbiw	r26, 0x02	; 2
     dba:	e0 e0       	ldi	r30, 0x00	; 0
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	9b 81       	ldd	r25, Y+3	; 0x03
     dc2:	00 97       	sbiw	r24, 0x00	; 0
     dc4:	19 f0       	breq	.+6      	; 0xdcc <free+0xe4>
     dc6:	fe 01       	movw	r30, r28
     dc8:	ec 01       	movw	r28, r24
     dca:	f9 cf       	rjmp	.-14     	; 0xdbe <free+0xd6>
     dcc:	ce 01       	movw	r24, r28
     dce:	02 96       	adiw	r24, 0x02	; 2
     dd0:	28 81       	ld	r18, Y
     dd2:	39 81       	ldd	r19, Y+1	; 0x01
     dd4:	82 0f       	add	r24, r18
     dd6:	93 1f       	adc	r25, r19
     dd8:	20 91 42 02 	lds	r18, 0x0242
     ddc:	30 91 43 02 	lds	r19, 0x0243
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	69 f4       	brne	.+26     	; 0xe00 <free+0x118>
     de6:	30 97       	sbiw	r30, 0x00	; 0
     de8:	29 f4       	brne	.+10     	; 0xdf4 <free+0x10c>
     dea:	10 92 45 02 	sts	0x0245, r1
     dee:	10 92 44 02 	sts	0x0244, r1
     df2:	02 c0       	rjmp	.+4      	; 0xdf8 <free+0x110>
     df4:	13 82       	std	Z+3, r1	; 0x03
     df6:	12 82       	std	Z+2, r1	; 0x02
     df8:	d0 93 43 02 	sts	0x0243, r29
     dfc:	c0 93 42 02 	sts	0x0242, r28
     e00:	df 91       	pop	r29
     e02:	cf 91       	pop	r28
     e04:	08 95       	ret

00000e06 <fdevopen>:
     e06:	0f 93       	push	r16
     e08:	1f 93       	push	r17
     e0a:	cf 93       	push	r28
     e0c:	df 93       	push	r29
     e0e:	ec 01       	movw	r28, r24
     e10:	8b 01       	movw	r16, r22
     e12:	00 97       	sbiw	r24, 0x00	; 0
     e14:	31 f4       	brne	.+12     	; 0xe22 <fdevopen+0x1c>
     e16:	61 15       	cp	r22, r1
     e18:	71 05       	cpc	r23, r1
     e1a:	19 f4       	brne	.+6      	; 0xe22 <fdevopen+0x1c>
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	38 c0       	rjmp	.+112    	; 0xe92 <fdevopen+0x8c>
     e22:	6e e0       	ldi	r22, 0x0E	; 14
     e24:	70 e0       	ldi	r23, 0x00	; 0
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	0e 94 34 09 	call	0x1268	; 0x1268 <calloc>
     e2e:	fc 01       	movw	r30, r24
     e30:	00 97       	sbiw	r24, 0x00	; 0
     e32:	a1 f3       	breq	.-24     	; 0xe1c <fdevopen+0x16>
     e34:	80 e8       	ldi	r24, 0x80	; 128
     e36:	83 83       	std	Z+3, r24	; 0x03
     e38:	01 15       	cp	r16, r1
     e3a:	11 05       	cpc	r17, r1
     e3c:	71 f0       	breq	.+28     	; 0xe5a <fdevopen+0x54>
     e3e:	13 87       	std	Z+11, r17	; 0x0b
     e40:	02 87       	std	Z+10, r16	; 0x0a
     e42:	81 e8       	ldi	r24, 0x81	; 129
     e44:	83 83       	std	Z+3, r24	; 0x03
     e46:	80 91 46 02 	lds	r24, 0x0246
     e4a:	90 91 47 02 	lds	r25, 0x0247
     e4e:	89 2b       	or	r24, r25
     e50:	21 f4       	brne	.+8      	; 0xe5a <fdevopen+0x54>
     e52:	f0 93 47 02 	sts	0x0247, r31
     e56:	e0 93 46 02 	sts	0x0246, r30
     e5a:	20 97       	sbiw	r28, 0x00	; 0
     e5c:	c9 f0       	breq	.+50     	; 0xe90 <fdevopen+0x8a>
     e5e:	d1 87       	std	Z+9, r29	; 0x09
     e60:	c0 87       	std	Z+8, r28	; 0x08
     e62:	83 81       	ldd	r24, Z+3	; 0x03
     e64:	82 60       	ori	r24, 0x02	; 2
     e66:	83 83       	std	Z+3, r24	; 0x03
     e68:	80 91 48 02 	lds	r24, 0x0248
     e6c:	90 91 49 02 	lds	r25, 0x0249
     e70:	89 2b       	or	r24, r25
     e72:	71 f4       	brne	.+28     	; 0xe90 <fdevopen+0x8a>
     e74:	f0 93 49 02 	sts	0x0249, r31
     e78:	e0 93 48 02 	sts	0x0248, r30
     e7c:	80 91 4a 02 	lds	r24, 0x024A
     e80:	90 91 4b 02 	lds	r25, 0x024B
     e84:	89 2b       	or	r24, r25
     e86:	21 f4       	brne	.+8      	; 0xe90 <fdevopen+0x8a>
     e88:	f0 93 4b 02 	sts	0x024B, r31
     e8c:	e0 93 4a 02 	sts	0x024A, r30
     e90:	cf 01       	movw	r24, r30
     e92:	df 91       	pop	r29
     e94:	cf 91       	pop	r28
     e96:	1f 91       	pop	r17
     e98:	0f 91       	pop	r16
     e9a:	08 95       	ret

00000e9c <printf>:
     e9c:	a0 e0       	ldi	r26, 0x00	; 0
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	e4 e5       	ldi	r30, 0x54	; 84
     ea2:	f7 e0       	ldi	r31, 0x07	; 7
     ea4:	0c 94 0d 0a 	jmp	0x141a	; 0x141a <__prologue_saves__+0x20>
     ea8:	fe 01       	movw	r30, r28
     eaa:	35 96       	adiw	r30, 0x05	; 5
     eac:	61 91       	ld	r22, Z+
     eae:	71 91       	ld	r23, Z+
     eb0:	af 01       	movw	r20, r30
     eb2:	80 91 48 02 	lds	r24, 0x0248
     eb6:	90 91 49 02 	lds	r25, 0x0249
     eba:	0e 94 62 07 	call	0xec4	; 0xec4 <vfprintf>
     ebe:	e2 e0       	ldi	r30, 0x02	; 2
     ec0:	0c 94 29 0a 	jmp	0x1452	; 0x1452 <__epilogue_restores__+0x20>

00000ec4 <vfprintf>:
     ec4:	ac e0       	ldi	r26, 0x0C	; 12
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	e8 e6       	ldi	r30, 0x68	; 104
     eca:	f7 e0       	ldi	r31, 0x07	; 7
     ecc:	0c 94 fd 09 	jmp	0x13fa	; 0x13fa <__prologue_saves__>
     ed0:	7c 01       	movw	r14, r24
     ed2:	6b 01       	movw	r12, r22
     ed4:	8a 01       	movw	r16, r20
     ed6:	fc 01       	movw	r30, r24
     ed8:	17 82       	std	Z+7, r1	; 0x07
     eda:	16 82       	std	Z+6, r1	; 0x06
     edc:	83 81       	ldd	r24, Z+3	; 0x03
     ede:	81 ff       	sbrs	r24, 1
     ee0:	bd c1       	rjmp	.+890    	; 0x125c <vfprintf+0x398>
     ee2:	ce 01       	movw	r24, r28
     ee4:	01 96       	adiw	r24, 0x01	; 1
     ee6:	4c 01       	movw	r8, r24
     ee8:	f7 01       	movw	r30, r14
     eea:	93 81       	ldd	r25, Z+3	; 0x03
     eec:	f6 01       	movw	r30, r12
     eee:	93 fd       	sbrc	r25, 3
     ef0:	85 91       	lpm	r24, Z+
     ef2:	93 ff       	sbrs	r25, 3
     ef4:	81 91       	ld	r24, Z+
     ef6:	6f 01       	movw	r12, r30
     ef8:	88 23       	and	r24, r24
     efa:	09 f4       	brne	.+2      	; 0xefe <vfprintf+0x3a>
     efc:	ab c1       	rjmp	.+854    	; 0x1254 <vfprintf+0x390>
     efe:	85 32       	cpi	r24, 0x25	; 37
     f00:	39 f4       	brne	.+14     	; 0xf10 <vfprintf+0x4c>
     f02:	93 fd       	sbrc	r25, 3
     f04:	85 91       	lpm	r24, Z+
     f06:	93 ff       	sbrs	r25, 3
     f08:	81 91       	ld	r24, Z+
     f0a:	6f 01       	movw	r12, r30
     f0c:	85 32       	cpi	r24, 0x25	; 37
     f0e:	29 f4       	brne	.+10     	; 0xf1a <vfprintf+0x56>
     f10:	b7 01       	movw	r22, r14
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	0e 94 6d 09 	call	0x12da	; 0x12da <fputc>
     f18:	e7 cf       	rjmp	.-50     	; 0xee8 <vfprintf+0x24>
     f1a:	51 2c       	mov	r5, r1
     f1c:	31 2c       	mov	r3, r1
     f1e:	20 e0       	ldi	r18, 0x00	; 0
     f20:	20 32       	cpi	r18, 0x20	; 32
     f22:	a0 f4       	brcc	.+40     	; 0xf4c <vfprintf+0x88>
     f24:	8b 32       	cpi	r24, 0x2B	; 43
     f26:	69 f0       	breq	.+26     	; 0xf42 <vfprintf+0x7e>
     f28:	30 f4       	brcc	.+12     	; 0xf36 <vfprintf+0x72>
     f2a:	80 32       	cpi	r24, 0x20	; 32
     f2c:	59 f0       	breq	.+22     	; 0xf44 <vfprintf+0x80>
     f2e:	83 32       	cpi	r24, 0x23	; 35
     f30:	69 f4       	brne	.+26     	; 0xf4c <vfprintf+0x88>
     f32:	20 61       	ori	r18, 0x10	; 16
     f34:	2c c0       	rjmp	.+88     	; 0xf8e <vfprintf+0xca>
     f36:	8d 32       	cpi	r24, 0x2D	; 45
     f38:	39 f0       	breq	.+14     	; 0xf48 <vfprintf+0x84>
     f3a:	80 33       	cpi	r24, 0x30	; 48
     f3c:	39 f4       	brne	.+14     	; 0xf4c <vfprintf+0x88>
     f3e:	21 60       	ori	r18, 0x01	; 1
     f40:	26 c0       	rjmp	.+76     	; 0xf8e <vfprintf+0xca>
     f42:	22 60       	ori	r18, 0x02	; 2
     f44:	24 60       	ori	r18, 0x04	; 4
     f46:	23 c0       	rjmp	.+70     	; 0xf8e <vfprintf+0xca>
     f48:	28 60       	ori	r18, 0x08	; 8
     f4a:	21 c0       	rjmp	.+66     	; 0xf8e <vfprintf+0xca>
     f4c:	27 fd       	sbrc	r18, 7
     f4e:	27 c0       	rjmp	.+78     	; 0xf9e <vfprintf+0xda>
     f50:	30 ed       	ldi	r19, 0xD0	; 208
     f52:	38 0f       	add	r19, r24
     f54:	3a 30       	cpi	r19, 0x0A	; 10
     f56:	78 f4       	brcc	.+30     	; 0xf76 <vfprintf+0xb2>
     f58:	26 ff       	sbrs	r18, 6
     f5a:	06 c0       	rjmp	.+12     	; 0xf68 <vfprintf+0xa4>
     f5c:	fa e0       	ldi	r31, 0x0A	; 10
     f5e:	5f 9e       	mul	r5, r31
     f60:	30 0d       	add	r19, r0
     f62:	11 24       	eor	r1, r1
     f64:	53 2e       	mov	r5, r19
     f66:	13 c0       	rjmp	.+38     	; 0xf8e <vfprintf+0xca>
     f68:	8a e0       	ldi	r24, 0x0A	; 10
     f6a:	38 9e       	mul	r3, r24
     f6c:	30 0d       	add	r19, r0
     f6e:	11 24       	eor	r1, r1
     f70:	33 2e       	mov	r3, r19
     f72:	20 62       	ori	r18, 0x20	; 32
     f74:	0c c0       	rjmp	.+24     	; 0xf8e <vfprintf+0xca>
     f76:	8e 32       	cpi	r24, 0x2E	; 46
     f78:	21 f4       	brne	.+8      	; 0xf82 <vfprintf+0xbe>
     f7a:	26 fd       	sbrc	r18, 6
     f7c:	6b c1       	rjmp	.+726    	; 0x1254 <vfprintf+0x390>
     f7e:	20 64       	ori	r18, 0x40	; 64
     f80:	06 c0       	rjmp	.+12     	; 0xf8e <vfprintf+0xca>
     f82:	8c 36       	cpi	r24, 0x6C	; 108
     f84:	11 f4       	brne	.+4      	; 0xf8a <vfprintf+0xc6>
     f86:	20 68       	ori	r18, 0x80	; 128
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <vfprintf+0xca>
     f8a:	88 36       	cpi	r24, 0x68	; 104
     f8c:	41 f4       	brne	.+16     	; 0xf9e <vfprintf+0xda>
     f8e:	f6 01       	movw	r30, r12
     f90:	93 fd       	sbrc	r25, 3
     f92:	85 91       	lpm	r24, Z+
     f94:	93 ff       	sbrs	r25, 3
     f96:	81 91       	ld	r24, Z+
     f98:	6f 01       	movw	r12, r30
     f9a:	81 11       	cpse	r24, r1
     f9c:	c1 cf       	rjmp	.-126    	; 0xf20 <vfprintf+0x5c>
     f9e:	98 2f       	mov	r25, r24
     fa0:	9f 7d       	andi	r25, 0xDF	; 223
     fa2:	95 54       	subi	r25, 0x45	; 69
     fa4:	93 30       	cpi	r25, 0x03	; 3
     fa6:	28 f4       	brcc	.+10     	; 0xfb2 <vfprintf+0xee>
     fa8:	0c 5f       	subi	r16, 0xFC	; 252
     faa:	1f 4f       	sbci	r17, 0xFF	; 255
     fac:	ff e3       	ldi	r31, 0x3F	; 63
     fae:	f9 83       	std	Y+1, r31	; 0x01
     fb0:	0d c0       	rjmp	.+26     	; 0xfcc <vfprintf+0x108>
     fb2:	83 36       	cpi	r24, 0x63	; 99
     fb4:	31 f0       	breq	.+12     	; 0xfc2 <vfprintf+0xfe>
     fb6:	83 37       	cpi	r24, 0x73	; 115
     fb8:	71 f0       	breq	.+28     	; 0xfd6 <vfprintf+0x112>
     fba:	83 35       	cpi	r24, 0x53	; 83
     fbc:	09 f0       	breq	.+2      	; 0xfc0 <vfprintf+0xfc>
     fbe:	5b c0       	rjmp	.+182    	; 0x1076 <vfprintf+0x1b2>
     fc0:	22 c0       	rjmp	.+68     	; 0x1006 <vfprintf+0x142>
     fc2:	f8 01       	movw	r30, r16
     fc4:	80 81       	ld	r24, Z
     fc6:	89 83       	std	Y+1, r24	; 0x01
     fc8:	0e 5f       	subi	r16, 0xFE	; 254
     fca:	1f 4f       	sbci	r17, 0xFF	; 255
     fcc:	44 24       	eor	r4, r4
     fce:	43 94       	inc	r4
     fd0:	51 2c       	mov	r5, r1
     fd2:	54 01       	movw	r10, r8
     fd4:	15 c0       	rjmp	.+42     	; 0x1000 <vfprintf+0x13c>
     fd6:	38 01       	movw	r6, r16
     fd8:	f2 e0       	ldi	r31, 0x02	; 2
     fda:	6f 0e       	add	r6, r31
     fdc:	71 1c       	adc	r7, r1
     fde:	f8 01       	movw	r30, r16
     fe0:	a0 80       	ld	r10, Z
     fe2:	b1 80       	ldd	r11, Z+1	; 0x01
     fe4:	26 ff       	sbrs	r18, 6
     fe6:	03 c0       	rjmp	.+6      	; 0xfee <vfprintf+0x12a>
     fe8:	65 2d       	mov	r22, r5
     fea:	70 e0       	ldi	r23, 0x00	; 0
     fec:	02 c0       	rjmp	.+4      	; 0xff2 <vfprintf+0x12e>
     fee:	6f ef       	ldi	r22, 0xFF	; 255
     ff0:	7f ef       	ldi	r23, 0xFF	; 255
     ff2:	c5 01       	movw	r24, r10
     ff4:	2c 87       	std	Y+12, r18	; 0x0c
     ff6:	0e 94 62 09 	call	0x12c4	; 0x12c4 <strnlen>
     ffa:	2c 01       	movw	r4, r24
     ffc:	83 01       	movw	r16, r6
     ffe:	2c 85       	ldd	r18, Y+12	; 0x0c
    1000:	2f 77       	andi	r18, 0x7F	; 127
    1002:	22 2e       	mov	r2, r18
    1004:	17 c0       	rjmp	.+46     	; 0x1034 <vfprintf+0x170>
    1006:	38 01       	movw	r6, r16
    1008:	f2 e0       	ldi	r31, 0x02	; 2
    100a:	6f 0e       	add	r6, r31
    100c:	71 1c       	adc	r7, r1
    100e:	f8 01       	movw	r30, r16
    1010:	a0 80       	ld	r10, Z
    1012:	b1 80       	ldd	r11, Z+1	; 0x01
    1014:	26 ff       	sbrs	r18, 6
    1016:	03 c0       	rjmp	.+6      	; 0x101e <vfprintf+0x15a>
    1018:	65 2d       	mov	r22, r5
    101a:	70 e0       	ldi	r23, 0x00	; 0
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <vfprintf+0x15e>
    101e:	6f ef       	ldi	r22, 0xFF	; 255
    1020:	7f ef       	ldi	r23, 0xFF	; 255
    1022:	c5 01       	movw	r24, r10
    1024:	2c 87       	std	Y+12, r18	; 0x0c
    1026:	0e 94 50 09 	call	0x12a0	; 0x12a0 <strnlen_P>
    102a:	2c 01       	movw	r4, r24
    102c:	2c 85       	ldd	r18, Y+12	; 0x0c
    102e:	20 68       	ori	r18, 0x80	; 128
    1030:	22 2e       	mov	r2, r18
    1032:	83 01       	movw	r16, r6
    1034:	23 fc       	sbrc	r2, 3
    1036:	1b c0       	rjmp	.+54     	; 0x106e <vfprintf+0x1aa>
    1038:	83 2d       	mov	r24, r3
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	48 16       	cp	r4, r24
    103e:	59 06       	cpc	r5, r25
    1040:	b0 f4       	brcc	.+44     	; 0x106e <vfprintf+0x1aa>
    1042:	b7 01       	movw	r22, r14
    1044:	80 e2       	ldi	r24, 0x20	; 32
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	0e 94 6d 09 	call	0x12da	; 0x12da <fputc>
    104c:	3a 94       	dec	r3
    104e:	f4 cf       	rjmp	.-24     	; 0x1038 <vfprintf+0x174>
    1050:	f5 01       	movw	r30, r10
    1052:	27 fc       	sbrc	r2, 7
    1054:	85 91       	lpm	r24, Z+
    1056:	27 fe       	sbrs	r2, 7
    1058:	81 91       	ld	r24, Z+
    105a:	5f 01       	movw	r10, r30
    105c:	b7 01       	movw	r22, r14
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	0e 94 6d 09 	call	0x12da	; 0x12da <fputc>
    1064:	31 10       	cpse	r3, r1
    1066:	3a 94       	dec	r3
    1068:	f1 e0       	ldi	r31, 0x01	; 1
    106a:	4f 1a       	sub	r4, r31
    106c:	51 08       	sbc	r5, r1
    106e:	41 14       	cp	r4, r1
    1070:	51 04       	cpc	r5, r1
    1072:	71 f7       	brne	.-36     	; 0x1050 <vfprintf+0x18c>
    1074:	e5 c0       	rjmp	.+458    	; 0x1240 <vfprintf+0x37c>
    1076:	84 36       	cpi	r24, 0x64	; 100
    1078:	11 f0       	breq	.+4      	; 0x107e <vfprintf+0x1ba>
    107a:	89 36       	cpi	r24, 0x69	; 105
    107c:	39 f5       	brne	.+78     	; 0x10cc <vfprintf+0x208>
    107e:	f8 01       	movw	r30, r16
    1080:	27 ff       	sbrs	r18, 7
    1082:	07 c0       	rjmp	.+14     	; 0x1092 <vfprintf+0x1ce>
    1084:	60 81       	ld	r22, Z
    1086:	71 81       	ldd	r23, Z+1	; 0x01
    1088:	82 81       	ldd	r24, Z+2	; 0x02
    108a:	93 81       	ldd	r25, Z+3	; 0x03
    108c:	0c 5f       	subi	r16, 0xFC	; 252
    108e:	1f 4f       	sbci	r17, 0xFF	; 255
    1090:	08 c0       	rjmp	.+16     	; 0x10a2 <vfprintf+0x1de>
    1092:	60 81       	ld	r22, Z
    1094:	71 81       	ldd	r23, Z+1	; 0x01
    1096:	88 27       	eor	r24, r24
    1098:	77 fd       	sbrc	r23, 7
    109a:	80 95       	com	r24
    109c:	98 2f       	mov	r25, r24
    109e:	0e 5f       	subi	r16, 0xFE	; 254
    10a0:	1f 4f       	sbci	r17, 0xFF	; 255
    10a2:	2f 76       	andi	r18, 0x6F	; 111
    10a4:	b2 2e       	mov	r11, r18
    10a6:	97 ff       	sbrs	r25, 7
    10a8:	09 c0       	rjmp	.+18     	; 0x10bc <vfprintf+0x1f8>
    10aa:	90 95       	com	r25
    10ac:	80 95       	com	r24
    10ae:	70 95       	com	r23
    10b0:	61 95       	neg	r22
    10b2:	7f 4f       	sbci	r23, 0xFF	; 255
    10b4:	8f 4f       	sbci	r24, 0xFF	; 255
    10b6:	9f 4f       	sbci	r25, 0xFF	; 255
    10b8:	20 68       	ori	r18, 0x80	; 128
    10ba:	b2 2e       	mov	r11, r18
    10bc:	2a e0       	ldi	r18, 0x0A	; 10
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	a4 01       	movw	r20, r8
    10c2:	0e 94 9f 09 	call	0x133e	; 0x133e <__ultoa_invert>
    10c6:	a8 2e       	mov	r10, r24
    10c8:	a8 18       	sub	r10, r8
    10ca:	44 c0       	rjmp	.+136    	; 0x1154 <vfprintf+0x290>
    10cc:	85 37       	cpi	r24, 0x75	; 117
    10ce:	29 f4       	brne	.+10     	; 0x10da <vfprintf+0x216>
    10d0:	2f 7e       	andi	r18, 0xEF	; 239
    10d2:	b2 2e       	mov	r11, r18
    10d4:	2a e0       	ldi	r18, 0x0A	; 10
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	25 c0       	rjmp	.+74     	; 0x1124 <vfprintf+0x260>
    10da:	f2 2f       	mov	r31, r18
    10dc:	f9 7f       	andi	r31, 0xF9	; 249
    10de:	bf 2e       	mov	r11, r31
    10e0:	8f 36       	cpi	r24, 0x6F	; 111
    10e2:	c1 f0       	breq	.+48     	; 0x1114 <vfprintf+0x250>
    10e4:	18 f4       	brcc	.+6      	; 0x10ec <vfprintf+0x228>
    10e6:	88 35       	cpi	r24, 0x58	; 88
    10e8:	79 f0       	breq	.+30     	; 0x1108 <vfprintf+0x244>
    10ea:	b4 c0       	rjmp	.+360    	; 0x1254 <vfprintf+0x390>
    10ec:	80 37       	cpi	r24, 0x70	; 112
    10ee:	19 f0       	breq	.+6      	; 0x10f6 <vfprintf+0x232>
    10f0:	88 37       	cpi	r24, 0x78	; 120
    10f2:	21 f0       	breq	.+8      	; 0x10fc <vfprintf+0x238>
    10f4:	af c0       	rjmp	.+350    	; 0x1254 <vfprintf+0x390>
    10f6:	2f 2f       	mov	r18, r31
    10f8:	20 61       	ori	r18, 0x10	; 16
    10fa:	b2 2e       	mov	r11, r18
    10fc:	b4 fe       	sbrs	r11, 4
    10fe:	0d c0       	rjmp	.+26     	; 0x111a <vfprintf+0x256>
    1100:	8b 2d       	mov	r24, r11
    1102:	84 60       	ori	r24, 0x04	; 4
    1104:	b8 2e       	mov	r11, r24
    1106:	09 c0       	rjmp	.+18     	; 0x111a <vfprintf+0x256>
    1108:	24 ff       	sbrs	r18, 4
    110a:	0a c0       	rjmp	.+20     	; 0x1120 <vfprintf+0x25c>
    110c:	9f 2f       	mov	r25, r31
    110e:	96 60       	ori	r25, 0x06	; 6
    1110:	b9 2e       	mov	r11, r25
    1112:	06 c0       	rjmp	.+12     	; 0x1120 <vfprintf+0x25c>
    1114:	28 e0       	ldi	r18, 0x08	; 8
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	05 c0       	rjmp	.+10     	; 0x1124 <vfprintf+0x260>
    111a:	20 e1       	ldi	r18, 0x10	; 16
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	02 c0       	rjmp	.+4      	; 0x1124 <vfprintf+0x260>
    1120:	20 e1       	ldi	r18, 0x10	; 16
    1122:	32 e0       	ldi	r19, 0x02	; 2
    1124:	f8 01       	movw	r30, r16
    1126:	b7 fe       	sbrs	r11, 7
    1128:	07 c0       	rjmp	.+14     	; 0x1138 <vfprintf+0x274>
    112a:	60 81       	ld	r22, Z
    112c:	71 81       	ldd	r23, Z+1	; 0x01
    112e:	82 81       	ldd	r24, Z+2	; 0x02
    1130:	93 81       	ldd	r25, Z+3	; 0x03
    1132:	0c 5f       	subi	r16, 0xFC	; 252
    1134:	1f 4f       	sbci	r17, 0xFF	; 255
    1136:	06 c0       	rjmp	.+12     	; 0x1144 <vfprintf+0x280>
    1138:	60 81       	ld	r22, Z
    113a:	71 81       	ldd	r23, Z+1	; 0x01
    113c:	80 e0       	ldi	r24, 0x00	; 0
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	0e 5f       	subi	r16, 0xFE	; 254
    1142:	1f 4f       	sbci	r17, 0xFF	; 255
    1144:	a4 01       	movw	r20, r8
    1146:	0e 94 9f 09 	call	0x133e	; 0x133e <__ultoa_invert>
    114a:	a8 2e       	mov	r10, r24
    114c:	a8 18       	sub	r10, r8
    114e:	fb 2d       	mov	r31, r11
    1150:	ff 77       	andi	r31, 0x7F	; 127
    1152:	bf 2e       	mov	r11, r31
    1154:	b6 fe       	sbrs	r11, 6
    1156:	0b c0       	rjmp	.+22     	; 0x116e <vfprintf+0x2aa>
    1158:	2b 2d       	mov	r18, r11
    115a:	2e 7f       	andi	r18, 0xFE	; 254
    115c:	a5 14       	cp	r10, r5
    115e:	50 f4       	brcc	.+20     	; 0x1174 <vfprintf+0x2b0>
    1160:	b4 fe       	sbrs	r11, 4
    1162:	0a c0       	rjmp	.+20     	; 0x1178 <vfprintf+0x2b4>
    1164:	b2 fc       	sbrc	r11, 2
    1166:	08 c0       	rjmp	.+16     	; 0x1178 <vfprintf+0x2b4>
    1168:	2b 2d       	mov	r18, r11
    116a:	2e 7e       	andi	r18, 0xEE	; 238
    116c:	05 c0       	rjmp	.+10     	; 0x1178 <vfprintf+0x2b4>
    116e:	7a 2c       	mov	r7, r10
    1170:	2b 2d       	mov	r18, r11
    1172:	03 c0       	rjmp	.+6      	; 0x117a <vfprintf+0x2b6>
    1174:	7a 2c       	mov	r7, r10
    1176:	01 c0       	rjmp	.+2      	; 0x117a <vfprintf+0x2b6>
    1178:	75 2c       	mov	r7, r5
    117a:	24 ff       	sbrs	r18, 4
    117c:	0d c0       	rjmp	.+26     	; 0x1198 <vfprintf+0x2d4>
    117e:	fe 01       	movw	r30, r28
    1180:	ea 0d       	add	r30, r10
    1182:	f1 1d       	adc	r31, r1
    1184:	80 81       	ld	r24, Z
    1186:	80 33       	cpi	r24, 0x30	; 48
    1188:	11 f4       	brne	.+4      	; 0x118e <vfprintf+0x2ca>
    118a:	29 7e       	andi	r18, 0xE9	; 233
    118c:	09 c0       	rjmp	.+18     	; 0x11a0 <vfprintf+0x2dc>
    118e:	22 ff       	sbrs	r18, 2
    1190:	06 c0       	rjmp	.+12     	; 0x119e <vfprintf+0x2da>
    1192:	73 94       	inc	r7
    1194:	73 94       	inc	r7
    1196:	04 c0       	rjmp	.+8      	; 0x11a0 <vfprintf+0x2dc>
    1198:	82 2f       	mov	r24, r18
    119a:	86 78       	andi	r24, 0x86	; 134
    119c:	09 f0       	breq	.+2      	; 0x11a0 <vfprintf+0x2dc>
    119e:	73 94       	inc	r7
    11a0:	23 fd       	sbrc	r18, 3
    11a2:	13 c0       	rjmp	.+38     	; 0x11ca <vfprintf+0x306>
    11a4:	20 ff       	sbrs	r18, 0
    11a6:	06 c0       	rjmp	.+12     	; 0x11b4 <vfprintf+0x2f0>
    11a8:	5a 2c       	mov	r5, r10
    11aa:	73 14       	cp	r7, r3
    11ac:	18 f4       	brcc	.+6      	; 0x11b4 <vfprintf+0x2f0>
    11ae:	53 0c       	add	r5, r3
    11b0:	57 18       	sub	r5, r7
    11b2:	73 2c       	mov	r7, r3
    11b4:	73 14       	cp	r7, r3
    11b6:	68 f4       	brcc	.+26     	; 0x11d2 <vfprintf+0x30e>
    11b8:	b7 01       	movw	r22, r14
    11ba:	80 e2       	ldi	r24, 0x20	; 32
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	2c 87       	std	Y+12, r18	; 0x0c
    11c0:	0e 94 6d 09 	call	0x12da	; 0x12da <fputc>
    11c4:	73 94       	inc	r7
    11c6:	2c 85       	ldd	r18, Y+12	; 0x0c
    11c8:	f5 cf       	rjmp	.-22     	; 0x11b4 <vfprintf+0x2f0>
    11ca:	73 14       	cp	r7, r3
    11cc:	10 f4       	brcc	.+4      	; 0x11d2 <vfprintf+0x30e>
    11ce:	37 18       	sub	r3, r7
    11d0:	01 c0       	rjmp	.+2      	; 0x11d4 <vfprintf+0x310>
    11d2:	31 2c       	mov	r3, r1
    11d4:	24 ff       	sbrs	r18, 4
    11d6:	12 c0       	rjmp	.+36     	; 0x11fc <vfprintf+0x338>
    11d8:	b7 01       	movw	r22, r14
    11da:	80 e3       	ldi	r24, 0x30	; 48
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	2c 87       	std	Y+12, r18	; 0x0c
    11e0:	0e 94 6d 09 	call	0x12da	; 0x12da <fputc>
    11e4:	2c 85       	ldd	r18, Y+12	; 0x0c
    11e6:	22 ff       	sbrs	r18, 2
    11e8:	17 c0       	rjmp	.+46     	; 0x1218 <vfprintf+0x354>
    11ea:	21 ff       	sbrs	r18, 1
    11ec:	03 c0       	rjmp	.+6      	; 0x11f4 <vfprintf+0x330>
    11ee:	88 e5       	ldi	r24, 0x58	; 88
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	02 c0       	rjmp	.+4      	; 0x11f8 <vfprintf+0x334>
    11f4:	88 e7       	ldi	r24, 0x78	; 120
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	b7 01       	movw	r22, r14
    11fa:	0c c0       	rjmp	.+24     	; 0x1214 <vfprintf+0x350>
    11fc:	82 2f       	mov	r24, r18
    11fe:	86 78       	andi	r24, 0x86	; 134
    1200:	59 f0       	breq	.+22     	; 0x1218 <vfprintf+0x354>
    1202:	21 fd       	sbrc	r18, 1
    1204:	02 c0       	rjmp	.+4      	; 0x120a <vfprintf+0x346>
    1206:	80 e2       	ldi	r24, 0x20	; 32
    1208:	01 c0       	rjmp	.+2      	; 0x120c <vfprintf+0x348>
    120a:	8b e2       	ldi	r24, 0x2B	; 43
    120c:	27 fd       	sbrc	r18, 7
    120e:	8d e2       	ldi	r24, 0x2D	; 45
    1210:	b7 01       	movw	r22, r14
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	0e 94 6d 09 	call	0x12da	; 0x12da <fputc>
    1218:	a5 14       	cp	r10, r5
    121a:	38 f4       	brcc	.+14     	; 0x122a <vfprintf+0x366>
    121c:	b7 01       	movw	r22, r14
    121e:	80 e3       	ldi	r24, 0x30	; 48
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	0e 94 6d 09 	call	0x12da	; 0x12da <fputc>
    1226:	5a 94       	dec	r5
    1228:	f7 cf       	rjmp	.-18     	; 0x1218 <vfprintf+0x354>
    122a:	aa 94       	dec	r10
    122c:	f4 01       	movw	r30, r8
    122e:	ea 0d       	add	r30, r10
    1230:	f1 1d       	adc	r31, r1
    1232:	80 81       	ld	r24, Z
    1234:	b7 01       	movw	r22, r14
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	0e 94 6d 09 	call	0x12da	; 0x12da <fputc>
    123c:	a1 10       	cpse	r10, r1
    123e:	f5 cf       	rjmp	.-22     	; 0x122a <vfprintf+0x366>
    1240:	33 20       	and	r3, r3
    1242:	09 f4       	brne	.+2      	; 0x1246 <vfprintf+0x382>
    1244:	51 ce       	rjmp	.-862    	; 0xee8 <vfprintf+0x24>
    1246:	b7 01       	movw	r22, r14
    1248:	80 e2       	ldi	r24, 0x20	; 32
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	0e 94 6d 09 	call	0x12da	; 0x12da <fputc>
    1250:	3a 94       	dec	r3
    1252:	f6 cf       	rjmp	.-20     	; 0x1240 <vfprintf+0x37c>
    1254:	f7 01       	movw	r30, r14
    1256:	86 81       	ldd	r24, Z+6	; 0x06
    1258:	97 81       	ldd	r25, Z+7	; 0x07
    125a:	02 c0       	rjmp	.+4      	; 0x1260 <vfprintf+0x39c>
    125c:	8f ef       	ldi	r24, 0xFF	; 255
    125e:	9f ef       	ldi	r25, 0xFF	; 255
    1260:	2c 96       	adiw	r28, 0x0c	; 12
    1262:	e2 e1       	ldi	r30, 0x12	; 18
    1264:	0c 94 19 0a 	jmp	0x1432	; 0x1432 <__epilogue_restores__>

00001268 <calloc>:
    1268:	0f 93       	push	r16
    126a:	1f 93       	push	r17
    126c:	cf 93       	push	r28
    126e:	df 93       	push	r29
    1270:	86 9f       	mul	r24, r22
    1272:	80 01       	movw	r16, r0
    1274:	87 9f       	mul	r24, r23
    1276:	10 0d       	add	r17, r0
    1278:	96 9f       	mul	r25, r22
    127a:	10 0d       	add	r17, r0
    127c:	11 24       	eor	r1, r1
    127e:	c8 01       	movw	r24, r16
    1280:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <malloc>
    1284:	ec 01       	movw	r28, r24
    1286:	00 97       	sbiw	r24, 0x00	; 0
    1288:	29 f0       	breq	.+10     	; 0x1294 <calloc+0x2c>
    128a:	a8 01       	movw	r20, r16
    128c:	60 e0       	ldi	r22, 0x00	; 0
    128e:	70 e0       	ldi	r23, 0x00	; 0
    1290:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <memset>
    1294:	ce 01       	movw	r24, r28
    1296:	df 91       	pop	r29
    1298:	cf 91       	pop	r28
    129a:	1f 91       	pop	r17
    129c:	0f 91       	pop	r16
    129e:	08 95       	ret

000012a0 <strnlen_P>:
    12a0:	fc 01       	movw	r30, r24
    12a2:	05 90       	lpm	r0, Z+
    12a4:	61 50       	subi	r22, 0x01	; 1
    12a6:	70 40       	sbci	r23, 0x00	; 0
    12a8:	01 10       	cpse	r0, r1
    12aa:	d8 f7       	brcc	.-10     	; 0x12a2 <strnlen_P+0x2>
    12ac:	80 95       	com	r24
    12ae:	90 95       	com	r25
    12b0:	8e 0f       	add	r24, r30
    12b2:	9f 1f       	adc	r25, r31
    12b4:	08 95       	ret

000012b6 <memset>:
    12b6:	dc 01       	movw	r26, r24
    12b8:	01 c0       	rjmp	.+2      	; 0x12bc <memset+0x6>
    12ba:	6d 93       	st	X+, r22
    12bc:	41 50       	subi	r20, 0x01	; 1
    12be:	50 40       	sbci	r21, 0x00	; 0
    12c0:	e0 f7       	brcc	.-8      	; 0x12ba <memset+0x4>
    12c2:	08 95       	ret

000012c4 <strnlen>:
    12c4:	fc 01       	movw	r30, r24
    12c6:	61 50       	subi	r22, 0x01	; 1
    12c8:	70 40       	sbci	r23, 0x00	; 0
    12ca:	01 90       	ld	r0, Z+
    12cc:	01 10       	cpse	r0, r1
    12ce:	d8 f7       	brcc	.-10     	; 0x12c6 <strnlen+0x2>
    12d0:	80 95       	com	r24
    12d2:	90 95       	com	r25
    12d4:	8e 0f       	add	r24, r30
    12d6:	9f 1f       	adc	r25, r31
    12d8:	08 95       	ret

000012da <fputc>:
    12da:	0f 93       	push	r16
    12dc:	1f 93       	push	r17
    12de:	cf 93       	push	r28
    12e0:	df 93       	push	r29
    12e2:	18 2f       	mov	r17, r24
    12e4:	09 2f       	mov	r16, r25
    12e6:	eb 01       	movw	r28, r22
    12e8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ea:	81 fd       	sbrc	r24, 1
    12ec:	03 c0       	rjmp	.+6      	; 0x12f4 <fputc+0x1a>
    12ee:	8f ef       	ldi	r24, 0xFF	; 255
    12f0:	9f ef       	ldi	r25, 0xFF	; 255
    12f2:	20 c0       	rjmp	.+64     	; 0x1334 <fputc+0x5a>
    12f4:	82 ff       	sbrs	r24, 2
    12f6:	10 c0       	rjmp	.+32     	; 0x1318 <fputc+0x3e>
    12f8:	4e 81       	ldd	r20, Y+6	; 0x06
    12fa:	5f 81       	ldd	r21, Y+7	; 0x07
    12fc:	2c 81       	ldd	r18, Y+4	; 0x04
    12fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1300:	42 17       	cp	r20, r18
    1302:	53 07       	cpc	r21, r19
    1304:	7c f4       	brge	.+30     	; 0x1324 <fputc+0x4a>
    1306:	e8 81       	ld	r30, Y
    1308:	f9 81       	ldd	r31, Y+1	; 0x01
    130a:	9f 01       	movw	r18, r30
    130c:	2f 5f       	subi	r18, 0xFF	; 255
    130e:	3f 4f       	sbci	r19, 0xFF	; 255
    1310:	39 83       	std	Y+1, r19	; 0x01
    1312:	28 83       	st	Y, r18
    1314:	10 83       	st	Z, r17
    1316:	06 c0       	rjmp	.+12     	; 0x1324 <fputc+0x4a>
    1318:	e8 85       	ldd	r30, Y+8	; 0x08
    131a:	f9 85       	ldd	r31, Y+9	; 0x09
    131c:	81 2f       	mov	r24, r17
    131e:	09 95       	icall
    1320:	89 2b       	or	r24, r25
    1322:	29 f7       	brne	.-54     	; 0x12ee <fputc+0x14>
    1324:	2e 81       	ldd	r18, Y+6	; 0x06
    1326:	3f 81       	ldd	r19, Y+7	; 0x07
    1328:	2f 5f       	subi	r18, 0xFF	; 255
    132a:	3f 4f       	sbci	r19, 0xFF	; 255
    132c:	3f 83       	std	Y+7, r19	; 0x07
    132e:	2e 83       	std	Y+6, r18	; 0x06
    1330:	81 2f       	mov	r24, r17
    1332:	90 2f       	mov	r25, r16
    1334:	df 91       	pop	r29
    1336:	cf 91       	pop	r28
    1338:	1f 91       	pop	r17
    133a:	0f 91       	pop	r16
    133c:	08 95       	ret

0000133e <__ultoa_invert>:
    133e:	fa 01       	movw	r30, r20
    1340:	aa 27       	eor	r26, r26
    1342:	28 30       	cpi	r18, 0x08	; 8
    1344:	51 f1       	breq	.+84     	; 0x139a <__ultoa_invert+0x5c>
    1346:	20 31       	cpi	r18, 0x10	; 16
    1348:	81 f1       	breq	.+96     	; 0x13aa <__ultoa_invert+0x6c>
    134a:	e8 94       	clt
    134c:	6f 93       	push	r22
    134e:	6e 7f       	andi	r22, 0xFE	; 254
    1350:	6e 5f       	subi	r22, 0xFE	; 254
    1352:	7f 4f       	sbci	r23, 0xFF	; 255
    1354:	8f 4f       	sbci	r24, 0xFF	; 255
    1356:	9f 4f       	sbci	r25, 0xFF	; 255
    1358:	af 4f       	sbci	r26, 0xFF	; 255
    135a:	b1 e0       	ldi	r27, 0x01	; 1
    135c:	3e d0       	rcall	.+124    	; 0x13da <__ultoa_invert+0x9c>
    135e:	b4 e0       	ldi	r27, 0x04	; 4
    1360:	3c d0       	rcall	.+120    	; 0x13da <__ultoa_invert+0x9c>
    1362:	67 0f       	add	r22, r23
    1364:	78 1f       	adc	r23, r24
    1366:	89 1f       	adc	r24, r25
    1368:	9a 1f       	adc	r25, r26
    136a:	a1 1d       	adc	r26, r1
    136c:	68 0f       	add	r22, r24
    136e:	79 1f       	adc	r23, r25
    1370:	8a 1f       	adc	r24, r26
    1372:	91 1d       	adc	r25, r1
    1374:	a1 1d       	adc	r26, r1
    1376:	6a 0f       	add	r22, r26
    1378:	71 1d       	adc	r23, r1
    137a:	81 1d       	adc	r24, r1
    137c:	91 1d       	adc	r25, r1
    137e:	a1 1d       	adc	r26, r1
    1380:	20 d0       	rcall	.+64     	; 0x13c2 <__ultoa_invert+0x84>
    1382:	09 f4       	brne	.+2      	; 0x1386 <__ultoa_invert+0x48>
    1384:	68 94       	set
    1386:	3f 91       	pop	r19
    1388:	2a e0       	ldi	r18, 0x0A	; 10
    138a:	26 9f       	mul	r18, r22
    138c:	11 24       	eor	r1, r1
    138e:	30 19       	sub	r19, r0
    1390:	30 5d       	subi	r19, 0xD0	; 208
    1392:	31 93       	st	Z+, r19
    1394:	de f6       	brtc	.-74     	; 0x134c <__ultoa_invert+0xe>
    1396:	cf 01       	movw	r24, r30
    1398:	08 95       	ret
    139a:	46 2f       	mov	r20, r22
    139c:	47 70       	andi	r20, 0x07	; 7
    139e:	40 5d       	subi	r20, 0xD0	; 208
    13a0:	41 93       	st	Z+, r20
    13a2:	b3 e0       	ldi	r27, 0x03	; 3
    13a4:	0f d0       	rcall	.+30     	; 0x13c4 <__ultoa_invert+0x86>
    13a6:	c9 f7       	brne	.-14     	; 0x139a <__ultoa_invert+0x5c>
    13a8:	f6 cf       	rjmp	.-20     	; 0x1396 <__ultoa_invert+0x58>
    13aa:	46 2f       	mov	r20, r22
    13ac:	4f 70       	andi	r20, 0x0F	; 15
    13ae:	40 5d       	subi	r20, 0xD0	; 208
    13b0:	4a 33       	cpi	r20, 0x3A	; 58
    13b2:	18 f0       	brcs	.+6      	; 0x13ba <__ultoa_invert+0x7c>
    13b4:	49 5d       	subi	r20, 0xD9	; 217
    13b6:	31 fd       	sbrc	r19, 1
    13b8:	40 52       	subi	r20, 0x20	; 32
    13ba:	41 93       	st	Z+, r20
    13bc:	02 d0       	rcall	.+4      	; 0x13c2 <__ultoa_invert+0x84>
    13be:	a9 f7       	brne	.-22     	; 0x13aa <__ultoa_invert+0x6c>
    13c0:	ea cf       	rjmp	.-44     	; 0x1396 <__ultoa_invert+0x58>
    13c2:	b4 e0       	ldi	r27, 0x04	; 4
    13c4:	a6 95       	lsr	r26
    13c6:	97 95       	ror	r25
    13c8:	87 95       	ror	r24
    13ca:	77 95       	ror	r23
    13cc:	67 95       	ror	r22
    13ce:	ba 95       	dec	r27
    13d0:	c9 f7       	brne	.-14     	; 0x13c4 <__ultoa_invert+0x86>
    13d2:	00 97       	sbiw	r24, 0x00	; 0
    13d4:	61 05       	cpc	r22, r1
    13d6:	71 05       	cpc	r23, r1
    13d8:	08 95       	ret
    13da:	9b 01       	movw	r18, r22
    13dc:	ac 01       	movw	r20, r24
    13de:	0a 2e       	mov	r0, r26
    13e0:	06 94       	lsr	r0
    13e2:	57 95       	ror	r21
    13e4:	47 95       	ror	r20
    13e6:	37 95       	ror	r19
    13e8:	27 95       	ror	r18
    13ea:	ba 95       	dec	r27
    13ec:	c9 f7       	brne	.-14     	; 0x13e0 <__ultoa_invert+0xa2>
    13ee:	62 0f       	add	r22, r18
    13f0:	73 1f       	adc	r23, r19
    13f2:	84 1f       	adc	r24, r20
    13f4:	95 1f       	adc	r25, r21
    13f6:	a0 1d       	adc	r26, r0
    13f8:	08 95       	ret

000013fa <__prologue_saves__>:
    13fa:	2f 92       	push	r2
    13fc:	3f 92       	push	r3
    13fe:	4f 92       	push	r4
    1400:	5f 92       	push	r5
    1402:	6f 92       	push	r6
    1404:	7f 92       	push	r7
    1406:	8f 92       	push	r8
    1408:	9f 92       	push	r9
    140a:	af 92       	push	r10
    140c:	bf 92       	push	r11
    140e:	cf 92       	push	r12
    1410:	df 92       	push	r13
    1412:	ef 92       	push	r14
    1414:	ff 92       	push	r15
    1416:	0f 93       	push	r16
    1418:	1f 93       	push	r17
    141a:	cf 93       	push	r28
    141c:	df 93       	push	r29
    141e:	cd b7       	in	r28, 0x3d	; 61
    1420:	de b7       	in	r29, 0x3e	; 62
    1422:	ca 1b       	sub	r28, r26
    1424:	db 0b       	sbc	r29, r27
    1426:	0f b6       	in	r0, 0x3f	; 63
    1428:	f8 94       	cli
    142a:	de bf       	out	0x3e, r29	; 62
    142c:	0f be       	out	0x3f, r0	; 63
    142e:	cd bf       	out	0x3d, r28	; 61
    1430:	09 94       	ijmp

00001432 <__epilogue_restores__>:
    1432:	2a 88       	ldd	r2, Y+18	; 0x12
    1434:	39 88       	ldd	r3, Y+17	; 0x11
    1436:	48 88       	ldd	r4, Y+16	; 0x10
    1438:	5f 84       	ldd	r5, Y+15	; 0x0f
    143a:	6e 84       	ldd	r6, Y+14	; 0x0e
    143c:	7d 84       	ldd	r7, Y+13	; 0x0d
    143e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1440:	9b 84       	ldd	r9, Y+11	; 0x0b
    1442:	aa 84       	ldd	r10, Y+10	; 0x0a
    1444:	b9 84       	ldd	r11, Y+9	; 0x09
    1446:	c8 84       	ldd	r12, Y+8	; 0x08
    1448:	df 80       	ldd	r13, Y+7	; 0x07
    144a:	ee 80       	ldd	r14, Y+6	; 0x06
    144c:	fd 80       	ldd	r15, Y+5	; 0x05
    144e:	0c 81       	ldd	r16, Y+4	; 0x04
    1450:	1b 81       	ldd	r17, Y+3	; 0x03
    1452:	aa 81       	ldd	r26, Y+2	; 0x02
    1454:	b9 81       	ldd	r27, Y+1	; 0x01
    1456:	ce 0f       	add	r28, r30
    1458:	d1 1d       	adc	r29, r1
    145a:	0f b6       	in	r0, 0x3f	; 63
    145c:	f8 94       	cli
    145e:	de bf       	out	0x3e, r29	; 62
    1460:	0f be       	out	0x3f, r0	; 63
    1462:	cd bf       	out	0x3d, r28	; 61
    1464:	ed 01       	movw	r28, r26
    1466:	08 95       	ret

00001468 <_exit>:
    1468:	f8 94       	cli

0000146a <__stop_program>:
    146a:	ff cf       	rjmp	.-2      	; 0x146a <__stop_program>
