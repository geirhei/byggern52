
Group52.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000068  00800100  00001522  000015b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001522  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800168  00800168  0000161e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000161e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000238  00000000  00000000  0000167a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002562  00000000  00000000  000018b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c4d  00000000  00000000  00003e14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bfd  00000000  00000000  00004a61  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004e8  00000000  00000000  00005660  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006bb  00000000  00000000  00005b48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001286  00000000  00000000  00006203  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001d0  00000000  00000000  00007489  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__ctors_end>
       4:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
       8:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
       c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      10:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      14:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      18:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      1c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      20:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      24:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      28:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      2c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      30:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      34:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      38:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      3c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      40:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      44:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      48:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      4c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      50:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      54:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      58:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      5c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      60:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      64:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      68:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
      6c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	00 00       	nop
      72:	00 00       	nop
      74:	00 5c       	subi	r16, 0xC0	; 192
      76:	00 00       	nop
      78:	0c 00       	.word	0x000c	; ????
      7a:	0c 00       	.word	0x000c	; ????
      7c:	7c 28       	or	r7, r12
      7e:	7c 28       	or	r7, r12
      80:	58 dc       	rcall	.-1872   	; 0xfffff932 <__eeprom_end+0xff7ef932>
      82:	68 00       	.word	0x0068	; ????
      84:	24 10       	cpse	r2, r4
      86:	48 00       	.word	0x0048	; ????
      88:	28 54       	subi	r18, 0x48	; 72
      8a:	28 40       	sbci	r18, 0x08	; 8
      8c:	00 0c       	add	r0, r0
      8e:	00 00       	nop
      90:	00 78       	andi	r16, 0x80	; 128
      92:	84 00       	.word	0x0084	; ????
      94:	84 78       	andi	r24, 0x84	; 132
      96:	00 00       	nop
      98:	54 38       	cpi	r21, 0x84	; 132
      9a:	54 00       	.word	0x0054	; ????
      9c:	10 7c       	andi	r17, 0xC0	; 192
      9e:	10 00       	.word	0x0010	; ????
      a0:	80 40       	sbci	r24, 0x00	; 0
      a2:	00 00       	nop
      a4:	10 10       	cpse	r1, r0
      a6:	10 00       	.word	0x0010	; ????
      a8:	00 40       	sbci	r16, 0x00	; 0
      aa:	00 00       	nop
      ac:	60 10       	cpse	r6, r0
      ae:	0c 00       	.word	0x000c	; ????
      b0:	38 54       	subi	r19, 0x48	; 72
      b2:	38 00       	.word	0x0038	; ????
      b4:	48 7c       	andi	r20, 0xC8	; 200
      b6:	40 00       	.word	0x0040	; ????
      b8:	48 64       	ori	r20, 0x48	; 72
      ba:	58 00       	.word	0x0058	; ????
      bc:	44 54       	subi	r20, 0x44	; 68
      be:	2c 00       	.word	0x002c	; ????
      c0:	1c 10       	cpse	r1, r12
      c2:	7c 00       	.word	0x007c	; ????
      c4:	5c 54       	subi	r21, 0x4C	; 76
      c6:	24 00       	.word	0x0024	; ????
      c8:	38 54       	subi	r19, 0x48	; 72
      ca:	24 00       	.word	0x0024	; ????
      cc:	64 14       	cp	r6, r4
      ce:	0c 00       	.word	0x000c	; ????
      d0:	68 54       	subi	r22, 0x48	; 72
      d2:	2c 00       	.word	0x002c	; ????
      d4:	48 54       	subi	r20, 0x48	; 72
      d6:	38 00       	.word	0x0038	; ????
      d8:	00 48       	sbci	r16, 0x80	; 128
      da:	00 00       	nop
      dc:	80 48       	sbci	r24, 0x80	; 128
      de:	00 00       	nop
      e0:	10 28       	or	r1, r0
      e2:	44 00       	.word	0x0044	; ????
      e4:	28 28       	or	r2, r8
      e6:	28 00       	.word	0x0028	; ????
      e8:	44 28       	or	r4, r4
      ea:	10 00       	.word	0x0010	; ????
      ec:	04 54       	subi	r16, 0x44	; 68
      ee:	08 00       	.word	0x0008	; ????
      f0:	38 44       	sbci	r19, 0x48	; 72
      f2:	5c 00       	.word	0x005c	; ????
      f4:	78 14       	cp	r7, r8
      f6:	78 00       	.word	0x0078	; ????
      f8:	7c 54       	subi	r23, 0x4C	; 76
      fa:	28 00       	.word	0x0028	; ????
      fc:	38 44       	sbci	r19, 0x48	; 72
      fe:	28 00       	.word	0x0028	; ????
     100:	7c 44       	sbci	r23, 0x4C	; 76
     102:	38 00       	.word	0x0038	; ????
     104:	7c 54       	subi	r23, 0x4C	; 76
     106:	44 00       	.word	0x0044	; ????
     108:	7c 14       	cp	r7, r12
     10a:	04 00       	.word	0x0004	; ????
     10c:	38 44       	sbci	r19, 0x48	; 72
     10e:	74 00       	.word	0x0074	; ????
     110:	7c 10       	cpse	r7, r12
     112:	7c 00       	.word	0x007c	; ????
     114:	44 7c       	andi	r20, 0xC4	; 196
     116:	44 00       	.word	0x0044	; ????
     118:	20 40       	sbci	r18, 0x00	; 0
     11a:	3c 00       	.word	0x003c	; ????
     11c:	7c 10       	cpse	r7, r12
     11e:	6c 00       	.word	0x006c	; ????
     120:	7c 40       	sbci	r23, 0x0C	; 12
     122:	40 00       	.word	0x0040	; ????
     124:	7c 18       	sub	r7, r12
     126:	7c 00       	.word	0x007c	; ????
     128:	78 10       	cpse	r7, r8
     12a:	3c 00       	.word	0x003c	; ????
     12c:	38 44       	sbci	r19, 0x48	; 72
     12e:	38 00       	.word	0x0038	; ????
     130:	7c 14       	cp	r7, r12
     132:	08 00       	.word	0x0008	; ????
     134:	38 44       	sbci	r19, 0x48	; 72
     136:	b8 00       	.word	0x00b8	; ????
     138:	7c 14       	cp	r7, r12
     13a:	68 00       	.word	0x0068	; ????
     13c:	48 54       	subi	r20, 0x48	; 72
     13e:	24 00       	.word	0x0024	; ????
     140:	04 7c       	andi	r16, 0xC4	; 196
     142:	04 00       	.word	0x0004	; ????
     144:	7c 40       	sbci	r23, 0x0C	; 12
     146:	7c 00       	.word	0x007c	; ????
     148:	3c 60       	ori	r19, 0x0C	; 12
     14a:	3c 00       	.word	0x003c	; ????
     14c:	7c 30       	cpi	r23, 0x0C	; 12
     14e:	7c 00       	.word	0x007c	; ????
     150:	6c 10       	cpse	r6, r12
     152:	6c 00       	.word	0x006c	; ????
     154:	0c 70       	andi	r16, 0x0C	; 12
     156:	0c 00       	.word	0x000c	; ????
     158:	64 54       	subi	r22, 0x44	; 68
     15a:	4c 00       	.word	0x004c	; ????
     15c:	00 7c       	andi	r16, 0xC0	; 192
     15e:	44 00       	.word	0x0044	; ????
     160:	0c 10       	cpse	r0, r12
     162:	60 00       	.word	0x0060	; ????
     164:	44 7c       	andi	r20, 0xC4	; 196
     166:	00 00       	nop
     168:	08 04       	cpc	r0, r8
     16a:	08 00       	.word	0x0008	; ????
     16c:	80 80       	ld	r8, Z
     16e:	80 00       	.word	0x0080	; ????
     170:	00 04       	cpc	r0, r0
     172:	08 00       	.word	0x0008	; ????
     174:	30 48       	sbci	r19, 0x80	; 128
     176:	78 00       	.word	0x0078	; ????
     178:	7c 48       	sbci	r23, 0x8C	; 140
     17a:	30 00       	.word	0x0030	; ????
     17c:	30 48       	sbci	r19, 0x80	; 128
     17e:	48 00       	.word	0x0048	; ????
     180:	30 48       	sbci	r19, 0x80	; 128
     182:	7c 00       	.word	0x007c	; ????
     184:	30 68       	ori	r19, 0x80	; 128
     186:	50 00       	.word	0x0050	; ????
     188:	10 78       	andi	r17, 0x80	; 128
     18a:	14 00       	.word	0x0014	; ????
     18c:	90 a8       	ldd	r9, Z+48	; 0x30
     18e:	78 00       	.word	0x0078	; ????
     190:	7c 08       	sbc	r7, r12
     192:	70 00       	.word	0x0070	; ????
     194:	50 74       	andi	r21, 0x40	; 64
     196:	40 00       	.word	0x0040	; ????
     198:	80 80       	ld	r8, Z
     19a:	74 00       	.word	0x0074	; ????
     19c:	7c 10       	cpse	r7, r12
     19e:	68 00       	.word	0x0068	; ????
     1a0:	44 7c       	andi	r20, 0xC4	; 196
     1a2:	40 00       	.word	0x0040	; ????
     1a4:	78 10       	cpse	r7, r8
     1a6:	78 00       	.word	0x0078	; ????
     1a8:	78 08       	sbc	r7, r8
     1aa:	70 00       	.word	0x0070	; ????
     1ac:	30 48       	sbci	r19, 0x80	; 128
     1ae:	30 00       	.word	0x0030	; ????
     1b0:	f8 28       	or	r15, r8
     1b2:	10 00       	.word	0x0010	; ????
     1b4:	30 48       	sbci	r19, 0x80	; 128
     1b6:	f8 00       	.word	0x00f8	; ????
     1b8:	78 10       	cpse	r7, r8
     1ba:	08 00       	.word	0x0008	; ????
     1bc:	50 58       	subi	r21, 0x80	; 128
     1be:	28 00       	.word	0x0028	; ????
     1c0:	08 3c       	cpi	r16, 0xC8	; 200
     1c2:	48 00       	.word	0x0048	; ????
     1c4:	38 40       	sbci	r19, 0x08	; 8
     1c6:	78 00       	.word	0x0078	; ????
     1c8:	38 40       	sbci	r19, 0x08	; 8
     1ca:	38 00       	.word	0x0038	; ????
     1cc:	78 20       	and	r7, r8
     1ce:	78 00       	.word	0x0078	; ????
     1d0:	48 30       	cpi	r20, 0x08	; 8
     1d2:	48 00       	.word	0x0048	; ????
     1d4:	98 a0       	ldd	r9, Y+32	; 0x20
     1d6:	78 00       	.word	0x0078	; ????
     1d8:	48 68       	ori	r20, 0x88	; 136
     1da:	58 00       	.word	0x0058	; ????
     1dc:	10 78       	andi	r17, 0x80	; 128
     1de:	84 00       	.word	0x0084	; ????
     1e0:	00 7c       	andi	r16, 0xC0	; 192
     1e2:	00 00       	nop
     1e4:	84 78       	andi	r24, 0x84	; 132
     1e6:	10 00       	.word	0x0010	; ????
     1e8:	08 04       	cpc	r0, r8
     1ea:	08 04       	cpc	r0, r8

000001ec <__ctors_end>:
     1ec:	11 24       	eor	r1, r1
     1ee:	1f be       	out	0x3f, r1	; 63
     1f0:	cf ef       	ldi	r28, 0xFF	; 255
     1f2:	d4 e0       	ldi	r29, 0x04	; 4
     1f4:	de bf       	out	0x3e, r29	; 62
     1f6:	cd bf       	out	0x3d, r28	; 61

000001f8 <__do_copy_data>:
     1f8:	11 e0       	ldi	r17, 0x01	; 1
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b1 e0       	ldi	r27, 0x01	; 1
     1fe:	e2 e2       	ldi	r30, 0x22	; 34
     200:	f5 e1       	ldi	r31, 0x15	; 21
     202:	02 c0       	rjmp	.+4      	; 0x208 <__do_copy_data+0x10>
     204:	05 90       	lpm	r0, Z+
     206:	0d 92       	st	X+, r0
     208:	a8 36       	cpi	r26, 0x68	; 104
     20a:	b1 07       	cpc	r27, r17
     20c:	d9 f7       	brne	.-10     	; 0x204 <__do_copy_data+0xc>

0000020e <__do_clear_bss>:
     20e:	21 e0       	ldi	r18, 0x01	; 1
     210:	a8 e6       	ldi	r26, 0x68	; 104
     212:	b1 e0       	ldi	r27, 0x01	; 1
     214:	01 c0       	rjmp	.+2      	; 0x218 <.do_clear_bss_start>

00000216 <.do_clear_bss_loop>:
     216:	1d 92       	st	X+, r1

00000218 <.do_clear_bss_start>:
     218:	a2 37       	cpi	r26, 0x72	; 114
     21a:	b2 07       	cpc	r27, r18
     21c:	e1 f7       	brne	.-8      	; 0x216 <.do_clear_bss_loop>
     21e:	0e 94 0e 02 	call	0x41c	; 0x41c <main>
     222:	0c 94 8f 0a 	jmp	0x151e	; 0x151e <_exit>

00000226 <__bad_interrupt>:
     226:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000022a <adc_read>:
#include <util/delay.h>
#include "adc.h"

uint8_t adc_read(DeviceType device){
	volatile char *adc = (char *) 0x1400;
	switch (device) {
     22a:	82 30       	cpi	r24, 0x02	; 2
     22c:	69 f0       	breq	.+26     	; 0x248 <adc_read+0x1e>
     22e:	18 f4       	brcc	.+6      	; 0x236 <adc_read+0xc>
     230:	81 30       	cpi	r24, 0x01	; 1
     232:	31 f0       	breq	.+12     	; 0x240 <adc_read+0x16>
     234:	14 c0       	rjmp	.+40     	; 0x25e <adc_read+0x34>
     236:	83 30       	cpi	r24, 0x03	; 3
     238:	59 f0       	breq	.+22     	; 0x250 <adc_read+0x26>
     23a:	84 30       	cpi	r24, 0x04	; 4
     23c:	69 f0       	breq	.+26     	; 0x258 <adc_read+0x2e>
     23e:	0f c0       	rjmp	.+30     	; 0x25e <adc_read+0x34>
		case JOYAXIS1:
		/* Select CH1 */
		adc[0] = 0b00000100;
     240:	84 e0       	ldi	r24, 0x04	; 4
     242:	80 93 00 14 	sts	0x1400, r24
		break;
     246:	0b c0       	rjmp	.+22     	; 0x25e <adc_read+0x34>
		
		case JOYAXIS2:
		/* Select CH2 */
		adc[0] = 0b00000101;
     248:	85 e0       	ldi	r24, 0x05	; 5
     24a:	80 93 00 14 	sts	0x1400, r24
		break;
     24e:	07 c0       	rjmp	.+14     	; 0x25e <adc_read+0x34>
		
		case LSLIDER:
		/* Select CH3 */
		adc[0] = 0b00000110;
     250:	86 e0       	ldi	r24, 0x06	; 6
     252:	80 93 00 14 	sts	0x1400, r24
		break;
     256:	03 c0       	rjmp	.+6      	; 0x25e <adc_read+0x34>
		
		case RSLIDER:
		/* Select CH1 */
		adc[0] = 0b00000111;
     258:	87 e0       	ldi	r24, 0x07	; 7
     25a:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     25e:	2c ec       	ldi	r18, 0xCC	; 204
     260:	8c e0       	ldi	r24, 0x0C	; 12
     262:	91 e0       	ldi	r25, 0x01	; 1
     264:	21 50       	subi	r18, 0x01	; 1
     266:	80 40       	sbci	r24, 0x00	; 0
     268:	90 40       	sbci	r25, 0x00	; 0
     26a:	e1 f7       	brne	.-8      	; 0x264 <adc_read+0x3a>
     26c:	00 c0       	rjmp	.+0      	; 0x26e <adc_read+0x44>
		break;
		default:
		break;
	}
	_delay_ms(70);
	return adc[0];
     26e:	80 91 00 14 	lds	r24, 0x1400
     272:	08 95       	ret

00000274 <CAN_init>:
#include "MCP2515.h"
#include "can.h"

void CAN_init(void)
{
	MCP_init();
     274:	0e 94 e5 02 	call	0x5ca	; 0x5ca <MCP_init>
     278:	08 95       	ret

0000027a <CAN_message_send>:
}

/* High level function for sending a message on the CAN bus */
void CAN_message_send(can_message_t* msg)
{
     27a:	1f 93       	push	r17
     27c:	cf 93       	push	r28
     27e:	df 93       	push	r29
     280:	ec 01       	movw	r28, r24
	/* Only transmit buffer TXB0 is used */
	
	/* Loop until TXREQ is cleared */
	uint8_t status = MCP_read_status();
     282:	0e 94 c0 02 	call	0x580	; 0x580 <MCP_read_status>
	uint8_t TXREQ = (status & (1 << 2));
	while (TXREQ) {
     286:	82 ff       	sbrs	r24, 2
     288:	04 c0       	rjmp	.+8      	; 0x292 <CAN_message_send+0x18>
		status = MCP_read_status();
     28a:	0e 94 c0 02 	call	0x580	; 0x580 <MCP_read_status>
	/* Only transmit buffer TXB0 is used */
	
	/* Loop until TXREQ is cleared */
	uint8_t status = MCP_read_status();
	uint8_t TXREQ = (status & (1 << 2));
	while (TXREQ) {
     28e:	82 fd       	sbrc	r24, 2
     290:	fc cf       	rjmp	.-8      	; 0x28a <CAN_message_send+0x10>
		status = MCP_read_status();
		TXREQ = (status & (1 << 2));
	}
	
	/* Set message ID, standard mode*/
	MCP_write(MCP_TXB0CTRL + 1, 0); // High level identifier
     292:	60 e0       	ldi	r22, 0x00	; 0
     294:	81 e3       	ldi	r24, 0x31	; 49
     296:	0e 94 a9 02 	call	0x552	; 0x552 <MCP_write>
	MCP_write(MCP_TXB0CTRL + 2, (msg->id << 5)); // Low level identifier
     29a:	68 81       	ld	r22, Y
     29c:	62 95       	swap	r22
     29e:	66 0f       	add	r22, r22
     2a0:	60 7e       	andi	r22, 0xE0	; 224
     2a2:	82 e3       	ldi	r24, 0x32	; 50
     2a4:	0e 94 a9 02 	call	0x552	; 0x552 <MCP_write>
	
	/* Set data length */
	MCP_write(MCP_TXB0CTRL + 5, msg->length & 0x0F);
     2a8:	6a 81       	ldd	r22, Y+2	; 0x02
     2aa:	6f 70       	andi	r22, 0x0F	; 15
     2ac:	85 e3       	ldi	r24, 0x35	; 53
     2ae:	0e 94 a9 02 	call	0x552	; 0x552 <MCP_write>
	
	/* Load message data */
	for (uint8_t i = 0; i < msg->length; i++) {
     2b2:	8a 81       	ldd	r24, Y+2	; 0x02
     2b4:	88 23       	and	r24, r24
     2b6:	69 f0       	breq	.+26     	; 0x2d2 <CAN_message_send+0x58>
     2b8:	10 e0       	ldi	r17, 0x00	; 0
		MCP_write(MCP_TXB0CTRL + 6 + i, msg->data[i]);
     2ba:	fe 01       	movw	r30, r28
     2bc:	e1 0f       	add	r30, r17
     2be:	f1 1d       	adc	r31, r1
     2c0:	63 81       	ldd	r22, Z+3	; 0x03
     2c2:	86 e3       	ldi	r24, 0x36	; 54
     2c4:	81 0f       	add	r24, r17
     2c6:	0e 94 a9 02 	call	0x552	; 0x552 <MCP_write>
	
	/* Set data length */
	MCP_write(MCP_TXB0CTRL + 5, msg->length & 0x0F);
	
	/* Load message data */
	for (uint8_t i = 0; i < msg->length; i++) {
     2ca:	1f 5f       	subi	r17, 0xFF	; 255
     2cc:	8a 81       	ldd	r24, Y+2	; 0x02
     2ce:	18 17       	cp	r17, r24
     2d0:	a0 f3       	brcs	.-24     	; 0x2ba <CAN_message_send+0x40>
		MCP_write(MCP_TXB0CTRL + 6 + i, msg->data[i]);
	}
	
	/* Request to send contents of TXB0 */
	MCP_request_to_send(MCP_RTS_TX0);
     2d2:	81 e8       	ldi	r24, 0x81	; 129
     2d4:	0e 94 bb 02 	call	0x576	; 0x576 <MCP_request_to_send>
}
     2d8:	df 91       	pop	r29
     2da:	cf 91       	pop	r28
     2dc:	1f 91       	pop	r17
     2de:	08 95       	ret

000002e0 <JOYSTICK_init>:
#include "math.h"

void JOYSTICK_init(void)
{
	/* Set PB2 as input for button*/
	DDRB &= ~(1 << PB2);
     2e0:	ba 98       	cbi	0x17, 2	; 23
	PORTB &= (1 << PB2);
     2e2:	88 b3       	in	r24, 0x18	; 24
     2e4:	84 70       	andi	r24, 0x04	; 4
     2e6:	88 bb       	out	0x18, r24	; 24
     2e8:	08 95       	ret

000002ea <toPositionPercent>:
	return NEUTRAL;
}

int16_t toPositionPercent(int16_t value)
{
	value -= 127;
     2ea:	8f 57       	subi	r24, 0x7F	; 127
     2ec:	91 09       	sbc	r25, r1
	int16_t percentValue = round((float)value / 127 * 100);
     2ee:	bc 01       	movw	r22, r24
     2f0:	88 27       	eor	r24, r24
     2f2:	77 fd       	sbrc	r23, 7
     2f4:	80 95       	com	r24
     2f6:	98 2f       	mov	r25, r24
     2f8:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <__floatsisf>
     2fc:	20 e0       	ldi	r18, 0x00	; 0
     2fe:	30 e0       	ldi	r19, 0x00	; 0
     300:	4e ef       	ldi	r20, 0xFE	; 254
     302:	52 e4       	ldi	r21, 0x42	; 66
     304:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__divsf3>
     308:	20 e0       	ldi	r18, 0x00	; 0
     30a:	30 e0       	ldi	r19, 0x00	; 0
     30c:	48 ec       	ldi	r20, 0xC8	; 200
     30e:	52 e4       	ldi	r21, 0x42	; 66
     310:	0e 94 84 05 	call	0xb08	; 0xb08 <__mulsf3>
     314:	0e 94 e7 05 	call	0xbce	; 0xbce <round>
     318:	0e 94 c5 04 	call	0x98a	; 0x98a <__fixsfsi>
	return percentValue;
}
     31c:	cb 01       	movw	r24, r22
     31e:	08 95       	ret

00000320 <JOYSTICK_get_position>:
{
	
}

struct positions JOYSTICK_get_position(void)
{
     320:	ff 92       	push	r15
     322:	0f 93       	push	r16
     324:	1f 93       	push	r17
     326:	cf 93       	push	r28
     328:	df 93       	push	r29
     32a:	cd b7       	in	r28, 0x3d	; 61
     32c:	de b7       	in	r29, 0x3e	; 62
     32e:	28 97       	sbiw	r28, 0x08	; 8
     330:	0f b6       	in	r0, 0x3f	; 63
     332:	f8 94       	cli
     334:	de bf       	out	0x3e, r29	; 62
     336:	0f be       	out	0x3f, r0	; 63
     338:	cd bf       	out	0x3d, r28	; 61
	int16_t yValue = (int16_t) adc_read(JOYAXIS1);
     33a:	81 e0       	ldi	r24, 0x01	; 1
     33c:	0e 94 15 01 	call	0x22a	; 0x22a <adc_read>
     340:	f8 2e       	mov	r15, r24
	int16_t xValue = (int16_t) adc_read(JOYAXIS2);
     342:	82 e0       	ldi	r24, 0x02	; 2
     344:	0e 94 15 01 	call	0x22a	; 0x22a <adc_read>
	
	int16_t xPosition = toPositionPercent(xValue);
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	0e 94 75 01 	call	0x2ea	; 0x2ea <toPositionPercent>
     34e:	18 2f       	mov	r17, r24
     350:	09 2f       	mov	r16, r25
	int16_t yPosition = toPositionPercent(yValue);
     352:	8f 2d       	mov	r24, r15
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	0e 94 75 01 	call	0x2ea	; 0x2ea <toPositionPercent>
	
	struct positions pos;
	pos.x = xPosition;
	pos.y = yPosition;
	
	return pos;
     35a:	19 83       	std	Y+1, r17	; 0x01
     35c:	0a 83       	std	Y+2, r16	; 0x02
     35e:	8b 83       	std	Y+3, r24	; 0x03
     360:	9c 83       	std	Y+4, r25	; 0x04
     362:	21 2f       	mov	r18, r17
     364:	30 2f       	mov	r19, r16
     366:	48 2f       	mov	r20, r24
     368:	59 2f       	mov	r21, r25
     36a:	6d 81       	ldd	r22, Y+5	; 0x05
     36c:	7e 81       	ldd	r23, Y+6	; 0x06
}
     36e:	8f 81       	ldd	r24, Y+7	; 0x07
     370:	98 85       	ldd	r25, Y+8	; 0x08
     372:	28 96       	adiw	r28, 0x08	; 8
     374:	0f b6       	in	r0, 0x3f	; 63
     376:	f8 94       	cli
     378:	de bf       	out	0x3e, r29	; 62
     37a:	0f be       	out	0x3f, r0	; 63
     37c:	cd bf       	out	0x3d, r28	; 61
     37e:	df 91       	pop	r29
     380:	cf 91       	pop	r28
     382:	1f 91       	pop	r17
     384:	0f 91       	pop	r16
     386:	ff 90       	pop	r15
     388:	08 95       	ret

0000038a <JOYSTICK_get_direction>:


DirectionType JOYSTICK_get_direction(void)
{
     38a:	cf 93       	push	r28
     38c:	df 93       	push	r29
     38e:	cd b7       	in	r28, 0x3d	; 61
     390:	de b7       	in	r29, 0x3e	; 62
     392:	28 97       	sbiw	r28, 0x08	; 8
     394:	0f b6       	in	r0, 0x3f	; 63
     396:	f8 94       	cli
     398:	de bf       	out	0x3e, r29	; 62
     39a:	0f be       	out	0x3f, r0	; 63
     39c:	cd bf       	out	0x3d, r28	; 61
	struct positions pos = JOYSTICK_get_position();
     39e:	0e 94 90 01 	call	0x320	; 0x320 <JOYSTICK_get_position>
     3a2:	29 83       	std	Y+1, r18	; 0x01
     3a4:	3a 83       	std	Y+2, r19	; 0x02
     3a6:	4b 83       	std	Y+3, r20	; 0x03
     3a8:	5c 83       	std	Y+4, r21	; 0x04
     3aa:	29 81       	ldd	r18, Y+1	; 0x01
     3ac:	3a 81       	ldd	r19, Y+2	; 0x02
     3ae:	8b 81       	ldd	r24, Y+3	; 0x03
     3b0:	9c 81       	ldd	r25, Y+4	; 0x04
	int8_t THRESHOLD = 25;
	
	if (pos.y < THRESHOLD && pos.y > -THRESHOLD) {
     3b2:	ac 01       	movw	r20, r24
     3b4:	48 5e       	subi	r20, 0xE8	; 232
     3b6:	5f 4f       	sbci	r21, 0xFF	; 255
     3b8:	41 33       	cpi	r20, 0x31	; 49
     3ba:	51 05       	cpc	r21, r1
     3bc:	48 f4       	brcc	.+18     	; 0x3d0 <JOYSTICK_get_direction+0x46>
		
		if (pos.x < -THRESHOLD) {
     3be:	27 3e       	cpi	r18, 0xE7	; 231
     3c0:	8f ef       	ldi	r24, 0xFF	; 255
     3c2:	38 07       	cpc	r19, r24
     3c4:	94 f0       	brlt	.+36     	; 0x3ea <JOYSTICK_get_direction+0x60>
			return LEFT;
		} else if (pos.x > THRESHOLD) {
     3c6:	2a 31       	cpi	r18, 0x1A	; 26
     3c8:	31 05       	cpc	r19, r1
     3ca:	8c f4       	brge	.+34     	; 0x3ee <JOYSTICK_get_direction+0x64>
			return UP;
		}
		
	}
	
	return NEUTRAL;
     3cc:	80 e0       	ldi	r24, 0x00	; 0
     3ce:	16 c0       	rjmp	.+44     	; 0x3fc <JOYSTICK_get_direction+0x72>
			return LEFT;
		} else if (pos.x > THRESHOLD) {
			return RIGHT;
		}
		
	} else if (pos.x < THRESHOLD && pos.x > -THRESHOLD) {
     3d0:	28 5e       	subi	r18, 0xE8	; 232
     3d2:	3f 4f       	sbci	r19, 0xFF	; 255
     3d4:	21 33       	cpi	r18, 0x31	; 49
     3d6:	31 05       	cpc	r19, r1
     3d8:	60 f4       	brcc	.+24     	; 0x3f2 <JOYSTICK_get_direction+0x68>
		
		if (pos.y < -THRESHOLD) {
     3da:	87 3e       	cpi	r24, 0xE7	; 231
     3dc:	2f ef       	ldi	r18, 0xFF	; 255
     3de:	92 07       	cpc	r25, r18
     3e0:	54 f0       	brlt	.+20     	; 0x3f6 <JOYSTICK_get_direction+0x6c>
			return DOWN;
		} else if (pos.y > THRESHOLD) {
     3e2:	4a 97       	sbiw	r24, 0x1a	; 26
     3e4:	54 f4       	brge	.+20     	; 0x3fa <JOYSTICK_get_direction+0x70>
			return UP;
		}
		
	}
	
	return NEUTRAL;
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	09 c0       	rjmp	.+18     	; 0x3fc <JOYSTICK_get_direction+0x72>
	int8_t THRESHOLD = 25;
	
	if (pos.y < THRESHOLD && pos.y > -THRESHOLD) {
		
		if (pos.x < -THRESHOLD) {
			return LEFT;
     3ea:	81 e0       	ldi	r24, 0x01	; 1
     3ec:	07 c0       	rjmp	.+14     	; 0x3fc <JOYSTICK_get_direction+0x72>
		} else if (pos.x > THRESHOLD) {
			return RIGHT;
     3ee:	82 e0       	ldi	r24, 0x02	; 2
     3f0:	05 c0       	rjmp	.+10     	; 0x3fc <JOYSTICK_get_direction+0x72>
			return UP;
		}
		
	}
	
	return NEUTRAL;
     3f2:	80 e0       	ldi	r24, 0x00	; 0
     3f4:	03 c0       	rjmp	.+6      	; 0x3fc <JOYSTICK_get_direction+0x72>
		}
		
	} else if (pos.x < THRESHOLD && pos.x > -THRESHOLD) {
		
		if (pos.y < -THRESHOLD) {
			return DOWN;
     3f6:	84 e0       	ldi	r24, 0x04	; 4
     3f8:	01 c0       	rjmp	.+2      	; 0x3fc <JOYSTICK_get_direction+0x72>
		} else if (pos.y > THRESHOLD) {
			return UP;
     3fa:	83 e0       	ldi	r24, 0x03	; 3
		}
		
	}
	
	return NEUTRAL;
}
     3fc:	28 96       	adiw	r28, 0x08	; 8
     3fe:	0f b6       	in	r0, 0x3f	; 63
     400:	f8 94       	cli
     402:	de bf       	out	0x3e, r29	; 62
     404:	0f be       	out	0x3f, r0	; 63
     406:	cd bf       	out	0x3d, r28	; 61
     408:	df 91       	pop	r29
     40a:	cf 91       	pop	r28
     40c:	08 95       	ret

0000040e <JOYSTICK_read_button>:
	return pos;
}

uint8_t JOYSTICK_read_button(void)
{
	return (PINB & (1 << PB2)) == 0;
     40e:	86 b3       	in	r24, 0x16	; 22
     410:	82 fb       	bst	r24, 2
     412:	88 27       	eor	r24, r24
     414:	80 f9       	bld	r24, 0
     416:	91 e0       	ldi	r25, 0x01	; 1
     418:	89 27       	eor	r24, r25
     41a:	08 95       	ret

0000041c <main>:

void blink();


int main(void)
{
     41c:	cf 93       	push	r28
     41e:	df 93       	push	r29
     420:	cd b7       	in	r28, 0x3d	; 61
     422:	de b7       	in	r29, 0x3e	; 62
     424:	2b 97       	sbiw	r28, 0x0b	; 11
     426:	0f b6       	in	r0, 0x3f	; 63
     428:	f8 94       	cli
     42a:	de bf       	out	0x3e, r29	; 62
     42c:	0f be       	out	0x3f, r0	; 63
     42e:	cd bf       	out	0x3d, r28	; 61
	/* Needs to be set when using external memory */
	MCUCR |= (1 << SRE);
     430:	85 b7       	in	r24, 0x35	; 53
     432:	80 68       	ori	r24, 0x80	; 128
     434:	85 bf       	out	0x35, r24	; 53

	fdevopen(USART_transmit, USART_receive);
     436:	69 e5       	ldi	r22, 0x59	; 89
     438:	74 e0       	ldi	r23, 0x04	; 4
     43a:	85 e5       	ldi	r24, 0x55	; 85
     43c:	94 e0       	ldi	r25, 0x04	; 4
     43e:	0e 94 57 07 	call	0xeae	; 0xeae <fdevopen>
	USART_init(MYUBBR);
     442:	8f e1       	ldi	r24, 0x1F	; 31
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	0e 94 4e 04 	call	0x89c	; 0x89c <USART_init>
	OLED_init();
     44a:	0e 94 2c 03 	call	0x658	; 0x658 <OLED_init>
	JOYSTICK_init();
     44e:	0e 94 70 01 	call	0x2e0	; 0x2e0 <JOYSTICK_init>
	CAN_init();
     452:	0e 94 3a 01 	call	0x274	; 0x274 <CAN_init>
	
	OLED_reset();
     456:	0e 94 1e 03 	call	0x63c	; 0x63c <OLED_reset>
	OLED_pos(2,20);
     45a:	64 e1       	ldi	r22, 0x14	; 20
     45c:	82 e0       	ldi	r24, 0x02	; 2
     45e:	0e 94 11 03 	call	0x622	; 0x622 <OLED_pos>
	
	menuNode *menu = OLED_generate_menu();
     462:	0e 94 c1 03 	call	0x782	; 0x782 <OLED_generate_menu>
	OLED_print_menu(menu);
     466:	0e 94 05 04 	call	0x80a	; 0x80a <OLED_print_menu>
	DirectionType joydir = NEUTRAL;
	uint8_t buttonPressed = 0;
	
	/* MCP TEST */
	
	char status = MCP_read(MCP_CANCTRL);
     46a:	8f e0       	ldi	r24, 0x0F	; 15
     46c:	0e 94 99 02 	call	0x532	; 0x532 <MCP_read>
	printf("CANCTRL: %02x\n", status);
     470:	1f 92       	push	r1
     472:	8f 93       	push	r24
     474:	86 e0       	ldi	r24, 0x06	; 6
     476:	91 e0       	ldi	r25, 0x01	; 1
     478:	9f 93       	push	r25
     47a:	8f 93       	push	r24
     47c:	0e 94 a2 07 	call	0xf44	; 0xf44 <printf>
	
	uint8_t RXB0CTRL = MCP_read(MCP_RXB0CTRL);
     480:	80 e6       	ldi	r24, 0x60	; 96
     482:	0e 94 99 02 	call	0x532	; 0x532 <MCP_read>
	printf("RXB0CTRL: %02x\n", RXB0CTRL);
     486:	1f 92       	push	r1
     488:	8f 93       	push	r24
     48a:	85 e1       	ldi	r24, 0x15	; 21
     48c:	91 e0       	ldi	r25, 0x01	; 1
     48e:	9f 93       	push	r25
     490:	8f 93       	push	r24
     492:	0e 94 a2 07 	call	0xf44	; 0xf44 <printf>
	for (uint8_t i = 0; i < received_message.length; i++) {
		printf("Received: %02x\n", received_message.data[i]);
	}
	*/
	
	printf("\n");
     496:	8a e0       	ldi	r24, 0x0A	; 10
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	0e 94 b6 07 	call	0xf6c	; 0xf6c <putchar>
	
	can_message_t joydata;
	can_message_t joydata_received;
	
	can_message_t can_message;
	can_message.data[0] = 0x01;
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	8c 83       	std	Y+4, r24	; 0x04
	can_message.data[1] = 0x02;
     4a2:	82 e0       	ldi	r24, 0x02	; 2
     4a4:	8d 83       	std	Y+5, r24	; 0x05
	can_message.data[2] = 0x03;
     4a6:	83 e0       	ldi	r24, 0x03	; 3
     4a8:	8e 83       	std	Y+6, r24	; 0x06
	can_message.data[3] = 0x04;
     4aa:	84 e0       	ldi	r24, 0x04	; 4
     4ac:	8f 83       	std	Y+7, r24	; 0x07
	can_message.data[4] = 0x05;
     4ae:	85 e0       	ldi	r24, 0x05	; 5
     4b0:	88 87       	std	Y+8, r24	; 0x08
	can_message.data[5] = 0x06;
     4b2:	86 e0       	ldi	r24, 0x06	; 6
     4b4:	89 87       	std	Y+9, r24	; 0x09
	can_message.data[6] = 0x07;
     4b6:	87 e0       	ldi	r24, 0x07	; 7
     4b8:	8a 87       	std	Y+10, r24	; 0x0a
	can_message.data[7] = 0x08;
     4ba:	88 e0       	ldi	r24, 0x08	; 8
     4bc:	8b 87       	std	Y+11, r24	; 0x0b
	can_message.length = 8;
     4be:	8b 83       	std	Y+3, r24	; 0x03
	can_message.id = 2;
     4c0:	82 e0       	ldi	r24, 0x02	; 2
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	9a 83       	std	Y+2, r25	; 0x02
     4c6:	89 83       	std	Y+1, r24	; 0x01
     4c8:	0f b6       	in	r0, 0x3f	; 63
     4ca:	f8 94       	cli
     4cc:	de bf       	out	0x3e, r29	; 62
     4ce:	0f be       	out	0x3f, r0	; 63
     4d0:	cd bf       	out	0x3d, r28	; 61
	OLED_pos(2,20);
	
	menuNode *menu = OLED_generate_menu();
	OLED_print_menu(menu);
	
	uint8_t currentRow = 1;
     4d2:	11 e0       	ldi	r17, 0x01	; 1
				currentRow -= 1;
			}
			
		} else if (joydir == DOWN) {
			if (currentRow == 7) {
				currentRow = 1;
     4d4:	ee 24       	eor	r14, r14
     4d6:	e3 94       	inc	r14
		joydir = JOYSTICK_get_direction();
		
		lastRow = currentRow;
		if (joydir == UP) {
			if (currentRow == 1) {
				currentRow = 7;
     4d8:	0f 2e       	mov	r0, r31
     4da:	f7 e0       	ldi	r31, 0x07	; 7
     4dc:	ff 2e       	mov	r15, r31
     4de:	f0 2d       	mov	r31, r0
	can_message.length = 8;
	can_message.id = 2;
	
	while(1)
	{	
		CAN_message_send(&can_message);
     4e0:	ce 01       	movw	r24, r28
     4e2:	01 96       	adiw	r24, 0x01	; 1
     4e4:	0e 94 3d 01 	call	0x27a	; 0x27a <CAN_message_send>
		
		/* Create seperate function for this */
		joydir = JOYSTICK_get_direction();
     4e8:	0e 94 c5 01 	call	0x38a	; 0x38a <JOYSTICK_get_direction>
		
		lastRow = currentRow;
		if (joydir == UP) {
     4ec:	83 30       	cpi	r24, 0x03	; 3
     4ee:	29 f4       	brne	.+10     	; 0x4fa <main+0xde>
			if (currentRow == 1) {
     4f0:	11 30       	cpi	r17, 0x01	; 1
     4f2:	51 f0       	breq	.+20     	; 0x508 <__stack+0x9>
				currentRow = 7;
			} else {
				currentRow -= 1;
     4f4:	0f ef       	ldi	r16, 0xFF	; 255
     4f6:	01 0f       	add	r16, r17
     4f8:	0c c0       	rjmp	.+24     	; 0x512 <__stack+0x13>
			}
			
		} else if (joydir == DOWN) {
     4fa:	84 30       	cpi	r24, 0x04	; 4
     4fc:	39 f4       	brne	.+14     	; 0x50c <__stack+0xd>
			if (currentRow == 7) {
     4fe:	17 30       	cpi	r17, 0x07	; 7
     500:	39 f0       	breq	.+14     	; 0x510 <__stack+0x11>
				currentRow = 1;
			} else {
				currentRow += 1;
     502:	01 e0       	ldi	r16, 0x01	; 1
     504:	01 0f       	add	r16, r17
     506:	05 c0       	rjmp	.+10     	; 0x512 <__stack+0x13>
		joydir = JOYSTICK_get_direction();
		
		lastRow = currentRow;
		if (joydir == UP) {
			if (currentRow == 1) {
				currentRow = 7;
     508:	0f 2d       	mov	r16, r15
     50a:	03 c0       	rjmp	.+6      	; 0x512 <__stack+0x13>
     50c:	01 2f       	mov	r16, r17
     50e:	01 c0       	rjmp	.+2      	; 0x512 <__stack+0x13>
				currentRow -= 1;
			}
			
		} else if (joydir == DOWN) {
			if (currentRow == 7) {
				currentRow = 1;
     510:	0e 2d       	mov	r16, r14
			} else {
				currentRow += 1;
			}
		}
		
		OLED_move_arrow(currentRow, 20, lastRow, 20);
     512:	24 e1       	ldi	r18, 0x14	; 20
     514:	41 2f       	mov	r20, r17
     516:	64 e1       	ldi	r22, 0x14	; 20
     518:	80 2f       	mov	r24, r16
     51a:	0e 94 9c 03 	call	0x738	; 0x738 <OLED_move_arrow>
		buttonPressed = JOYSTICK_read_button();
     51e:	0e 94 07 02 	call	0x40e	; 0x40e <JOYSTICK_read_button>
     522:	10 2f       	mov	r17, r16
     524:	dd cf       	rjmp	.-70     	; 0x4e0 <main+0xc4>

00000526 <MCP_reset>:
	MCP_set_mode(MODE_NORMAL); // Sets normal operation mode
}

void MCP_reset(void)
{
	PORTB &= ~(1 << PB4);
     526:	c4 98       	cbi	0x18, 4	; 24
	SPI_master_transmit(MCP_RESET);
     528:	80 ec       	ldi	r24, 0xC0	; 192
     52a:	0e 94 4a 04 	call	0x894	; 0x894 <SPI_master_transmit>
	PORTB |= (1 << PB4);
     52e:	c4 9a       	sbi	0x18, 4	; 24
     530:	08 95       	ret

00000532 <MCP_read>:
}

/* Returns the content of a register */
uint8_t MCP_read(uint8_t addr)
{
     532:	cf 93       	push	r28
     534:	c8 2f       	mov	r28, r24
	PORTB &= ~(1 << PB4);
     536:	c4 98       	cbi	0x18, 4	; 24
	SPI_master_transmit(MCP_READ);
     538:	83 e0       	ldi	r24, 0x03	; 3
     53a:	0e 94 4a 04 	call	0x894	; 0x894 <SPI_master_transmit>
	SPI_master_transmit(addr);
     53e:	8c 2f       	mov	r24, r28
     540:	0e 94 4a 04 	call	0x894	; 0x894 <SPI_master_transmit>
	SPI_master_transmit(0x00);
     544:	80 e0       	ldi	r24, 0x00	; 0
     546:	0e 94 4a 04 	call	0x894	; 0x894 <SPI_master_transmit>
	char data = SPDR;
     54a:	8f b1       	in	r24, 0x0f	; 15
	PORTB |= (1 << PB4);
     54c:	c4 9a       	sbi	0x18, 4	; 24
	return data;
}
     54e:	cf 91       	pop	r28
     550:	08 95       	ret

00000552 <MCP_write>:

void MCP_write(uint8_t addr, uint8_t data)
{
     552:	cf 93       	push	r28
     554:	df 93       	push	r29
     556:	d8 2f       	mov	r29, r24
     558:	c6 2f       	mov	r28, r22
	PORTB &= ~(1 << PB4);
     55a:	c4 98       	cbi	0x18, 4	; 24
	SPI_master_transmit(MCP_WRITE);
     55c:	82 e0       	ldi	r24, 0x02	; 2
     55e:	0e 94 4a 04 	call	0x894	; 0x894 <SPI_master_transmit>
	SPI_master_transmit(addr);
     562:	8d 2f       	mov	r24, r29
     564:	0e 94 4a 04 	call	0x894	; 0x894 <SPI_master_transmit>
	SPI_master_transmit(data);
     568:	8c 2f       	mov	r24, r28
     56a:	0e 94 4a 04 	call	0x894	; 0x894 <SPI_master_transmit>
	PORTB |= (1 << PB4);
     56e:	c4 9a       	sbi	0x18, 4	; 24
}
     570:	df 91       	pop	r29
     572:	cf 91       	pop	r28
     574:	08 95       	ret

00000576 <MCP_request_to_send>:
}

/* Instructs controller to begin message transmission for the selected buffers */
void MCP_request_to_send(uint8_t buffer)
{
	PORTB &= ~(1 << PB4);
     576:	c4 98       	cbi	0x18, 4	; 24
	SPI_master_transmit(buffer);
     578:	0e 94 4a 04 	call	0x894	; 0x894 <SPI_master_transmit>
	PORTB |= (1 << PB4);
     57c:	c4 9a       	sbi	0x18, 4	; 24
     57e:	08 95       	ret

00000580 <MCP_read_status>:
}

/* Returns some status bits for transmit and receive functions */
uint8_t MCP_read_status(void)
{
	PORTB &= ~(1 << PB4);
     580:	c4 98       	cbi	0x18, 4	; 24
	SPI_master_transmit(MCP_READ_STATUS);
     582:	80 ea       	ldi	r24, 0xA0	; 160
     584:	0e 94 4a 04 	call	0x894	; 0x894 <SPI_master_transmit>
	//SPI_master_transmit(0x00); // Unneccessary because of "repeat data out"?
	char status = SPDR;
     588:	8f b1       	in	r24, 0x0f	; 15
	PORTB |= (1 << PB4);
     58a:	c4 9a       	sbi	0x18, 4	; 24
	return status;
}
     58c:	08 95       	ret

0000058e <MCP_modify_bit>:
	MCP_modify_bit(MCP_CANCTRL, mask, mode);
}

/* Changes the value of the register bits specified by the mask */
void MCP_modify_bit(uint8_t addr, uint8_t mask, uint8_t data)
{
     58e:	1f 93       	push	r17
     590:	cf 93       	push	r28
     592:	df 93       	push	r29
     594:	18 2f       	mov	r17, r24
     596:	d6 2f       	mov	r29, r22
     598:	c4 2f       	mov	r28, r20
	PORTB &= ~(1 << PB4);
     59a:	c4 98       	cbi	0x18, 4	; 24
	SPI_master_transmit(MCP_BITMOD);
     59c:	85 e0       	ldi	r24, 0x05	; 5
     59e:	0e 94 4a 04 	call	0x894	; 0x894 <SPI_master_transmit>
	SPI_master_transmit(addr);
     5a2:	81 2f       	mov	r24, r17
     5a4:	0e 94 4a 04 	call	0x894	; 0x894 <SPI_master_transmit>
	SPI_master_transmit(mask);
     5a8:	8d 2f       	mov	r24, r29
     5aa:	0e 94 4a 04 	call	0x894	; 0x894 <SPI_master_transmit>
	SPI_master_transmit(data);
     5ae:	8c 2f       	mov	r24, r28
     5b0:	0e 94 4a 04 	call	0x894	; 0x894 <SPI_master_transmit>
	PORTB |= (1 << PB4);
     5b4:	c4 9a       	sbi	0x18, 4	; 24
     5b6:	df 91       	pop	r29
     5b8:	cf 91       	pop	r28
     5ba:	1f 91       	pop	r17
     5bc:	08 95       	ret

000005be <MCP_set_mode>:
			break;
		default:
			break;
	}
	
	MCP_modify_bit(MCP_CANCTRL, mask, mode);
     5be:	48 2f       	mov	r20, r24
     5c0:	60 ee       	ldi	r22, 0xE0	; 224
     5c2:	8f e0       	ldi	r24, 0x0F	; 15
     5c4:	0e 94 c7 02 	call	0x58e	; 0x58e <MCP_modify_bit>
     5c8:	08 95       	ret

000005ca <MCP_init>:
#include "MCP2515.h"
#include "mcp.h"

void MCP_init(void)
{
	SPI_master_init();
     5ca:	0e 94 45 04 	call	0x88a	; 0x88a <SPI_master_init>
	MCP_reset();
     5ce:	0e 94 93 02 	call	0x526	; 0x526 <MCP_reset>
	
	MCP_modify_bit(MCP_RXB0CTRL, 0b01100000, 0xFF); // Turns masks/filters off for RX0
     5d2:	4f ef       	ldi	r20, 0xFF	; 255
     5d4:	60 e6       	ldi	r22, 0x60	; 96
     5d6:	80 e6       	ldi	r24, 0x60	; 96
     5d8:	0e 94 c7 02 	call	0x58e	; 0x58e <MCP_modify_bit>
	MCP_modify_bit(MCP_RXB1CTRL, 0b01100000, 0xFF); // Turns masks/filters off for RX1
     5dc:	4f ef       	ldi	r20, 0xFF	; 255
     5de:	60 e6       	ldi	r22, 0x60	; 96
     5e0:	80 e7       	ldi	r24, 0x70	; 112
     5e2:	0e 94 c7 02 	call	0x58e	; 0x58e <MCP_modify_bit>
	//MCP_set_mode(MODE_LOOPBACK); // Sets loopback operation mode for testing
	MCP_set_mode(MODE_NORMAL); // Sets normal operation mode
     5e6:	80 e0       	ldi	r24, 0x00	; 0
     5e8:	0e 94 df 02 	call	0x5be	; 0x5be <MCP_set_mode>
     5ec:	08 95       	ret

000005ee <OLED_goto_line>:
}

void OLED_write_c(char chr)
{
	volatile char *oled = (char *) 0x1000;
	oled[0] = chr;
     5ee:	e0 e0       	ldi	r30, 0x00	; 0
     5f0:	f0 e1       	ldi	r31, 0x10	; 16
     5f2:	92 e2       	ldi	r25, 0x22	; 34
     5f4:	90 83       	st	Z, r25
     5f6:	80 83       	st	Z, r24
     5f8:	87 e0       	ldi	r24, 0x07	; 7
     5fa:	80 83       	st	Z, r24
     5fc:	08 95       	ret

000005fe <OLED_clear_line>:
	OLED_write_c(0x07);
}

void OLED_clear_line(uint8_t line)
{
	OLED_goto_line(line);
     5fe:	0e 94 f7 02 	call	0x5ee	; 0x5ee <OLED_goto_line>
}

void OLED_write_c(char chr)
{
	volatile char *oled = (char *) 0x1000;
	oled[0] = chr;
     602:	e0 e0       	ldi	r30, 0x00	; 0
     604:	f0 e1       	ldi	r31, 0x10	; 16
     606:	81 e2       	ldi	r24, 0x21	; 33
     608:	80 83       	st	Z, r24
     60a:	10 82       	st	Z, r1
     60c:	8f e7       	ldi	r24, 0x7F	; 127
     60e:	80 83       	st	Z, r24
     610:	80 e8       	ldi	r24, 0x80	; 128
     612:	90 e0       	ldi	r25, 0x00	; 0
}

void OLED_write_d(char chr)
{
	volatile char *oled = (char *) 0x1200;
	oled[0] = chr;
     614:	e0 e0       	ldi	r30, 0x00	; 0
     616:	f2 e1       	ldi	r31, 0x12	; 18
     618:	10 82       	st	Z, r1
     61a:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_c(0x21);
	OLED_write_c(0x00);
	OLED_write_c(0x7F);

	/* Write zeros to line */
	for (int i = 0; i < 128; i++) {
     61c:	00 97       	sbiw	r24, 0x00	; 0
     61e:	e1 f7       	brne	.-8      	; 0x618 <OLED_clear_line+0x1a>
		OLED_write_d(0x00);
	}
}
     620:	08 95       	ret

00000622 <OLED_pos>:
}

void OLED_write_c(char chr)
{
	volatile char *oled = (char *) 0x1000;
	oled[0] = chr;
     622:	e0 e0       	ldi	r30, 0x00	; 0
     624:	f0 e1       	ldi	r31, 0x10	; 16
     626:	92 e2       	ldi	r25, 0x22	; 34
     628:	90 83       	st	Z, r25
     62a:	80 83       	st	Z, r24
     62c:	87 e0       	ldi	r24, 0x07	; 7
     62e:	80 83       	st	Z, r24
     630:	81 e2       	ldi	r24, 0x21	; 33
     632:	80 83       	st	Z, r24
     634:	60 83       	st	Z, r22
     636:	8f e7       	ldi	r24, 0x7F	; 127
     638:	80 83       	st	Z, r24
     63a:	08 95       	ret

0000063c <OLED_reset>:
	OLED_write_c(column);
	OLED_write_c(0x7F);
}

void OLED_reset(void)
{
     63c:	cf 93       	push	r28
	for (uint8_t i = 0; i < 8; i++) {
     63e:	c0 e0       	ldi	r28, 0x00	; 0
		OLED_clear_line(i);
     640:	8c 2f       	mov	r24, r28
     642:	0e 94 ff 02 	call	0x5fe	; 0x5fe <OLED_clear_line>
	OLED_write_c(0x7F);
}

void OLED_reset(void)
{
	for (uint8_t i = 0; i < 8; i++) {
     646:	cf 5f       	subi	r28, 0xFF	; 255
     648:	c8 30       	cpi	r28, 0x08	; 8
     64a:	d1 f7       	brne	.-12     	; 0x640 <OLED_reset+0x4>
		OLED_clear_line(i);
	}
	OLED_pos(0,0);
     64c:	60 e0       	ldi	r22, 0x00	; 0
     64e:	80 e0       	ldi	r24, 0x00	; 0
     650:	0e 94 11 03 	call	0x622	; 0x622 <OLED_pos>

	// Redraw from SRAM?
}
     654:	cf 91       	pop	r28
     656:	08 95       	ret

00000658 <OLED_init>:
}

void OLED_write_c(char chr)
{
	volatile char *oled = (char *) 0x1000;
	oled[0] = chr;
     658:	e0 e0       	ldi	r30, 0x00	; 0
     65a:	f0 e1       	ldi	r31, 0x10	; 16
     65c:	8e ea       	ldi	r24, 0xAE	; 174
     65e:	80 83       	st	Z, r24
     660:	81 ea       	ldi	r24, 0xA1	; 161
     662:	80 83       	st	Z, r24
     664:	8a ed       	ldi	r24, 0xDA	; 218
     666:	80 83       	st	Z, r24
     668:	82 e1       	ldi	r24, 0x12	; 18
     66a:	80 83       	st	Z, r24
     66c:	88 ec       	ldi	r24, 0xC8	; 200
     66e:	80 83       	st	Z, r24
     670:	88 ea       	ldi	r24, 0xA8	; 168
     672:	80 83       	st	Z, r24
     674:	8f e3       	ldi	r24, 0x3F	; 63
     676:	80 83       	st	Z, r24
     678:	85 ed       	ldi	r24, 0xD5	; 213
     67a:	80 83       	st	Z, r24
     67c:	80 e8       	ldi	r24, 0x80	; 128
     67e:	80 83       	st	Z, r24
     680:	81 e8       	ldi	r24, 0x81	; 129
     682:	80 83       	st	Z, r24
     684:	80 e5       	ldi	r24, 0x50	; 80
     686:	80 83       	st	Z, r24
     688:	89 ed       	ldi	r24, 0xD9	; 217
     68a:	80 83       	st	Z, r24
     68c:	81 e2       	ldi	r24, 0x21	; 33
     68e:	80 83       	st	Z, r24
     690:	80 e2       	ldi	r24, 0x20	; 32
     692:	80 83       	st	Z, r24
     694:	10 82       	st	Z, r1
     696:	8b ed       	ldi	r24, 0xDB	; 219
     698:	80 83       	st	Z, r24
     69a:	80 e3       	ldi	r24, 0x30	; 48
     69c:	80 83       	st	Z, r24
     69e:	8d ea       	ldi	r24, 0xAD	; 173
     6a0:	80 83       	st	Z, r24
     6a2:	10 82       	st	Z, r1
     6a4:	84 ea       	ldi	r24, 0xA4	; 164
     6a6:	80 83       	st	Z, r24
     6a8:	86 ea       	ldi	r24, 0xA6	; 166
     6aa:	80 83       	st	Z, r24
     6ac:	8f ea       	ldi	r24, 0xAF	; 175
     6ae:	80 83       	st	Z, r24
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	92 e0       	ldi	r25, 0x02	; 2
}

void OLED_write_d(char chr)
{
	volatile char *oled = (char *) 0x1200;
	oled[0] = chr;
     6b4:	e0 e0       	ldi	r30, 0x00	; 0
     6b6:	f2 e1       	ldi	r31, 0x12	; 18
     6b8:	2f ef       	ldi	r18, 0xFF	; 255
     6ba:	20 83       	st	Z, r18
     6bc:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_c(0x00);
	OLED_write_c(0xa4); //out follows RAM content
	OLED_write_c(0xa6); //set normal display
	OLED_write_c(0xaf); // display on
	
	for (int i = 0; i < 512; i++)
     6be:	00 97       	sbiw	r24, 0x00	; 0
     6c0:	e1 f7       	brne	.-8      	; 0x6ba <OLED_init+0x62>
	{
		OLED_write_d(0xFF);
	}
	
	OLED_reset();
     6c2:	0e 94 1e 03 	call	0x63c	; 0x63c <OLED_reset>
     6c6:	08 95       	ret

000006c8 <OLED_print_string>:

	// Redraw from SRAM?
}

void OLED_print_string(char* str)
{
     6c8:	cf 93       	push	r28
     6ca:	df 93       	push	r29
	uint8_t c;
	uint8_t font_width = 4; // Use sizeof array here
	uint8_t i = 0;
	while (str[i] != '\0') {
     6cc:	fc 01       	movw	r30, r24
     6ce:	20 81       	ld	r18, Z
     6d0:	22 23       	and	r18, r18
     6d2:	11 f1       	breq	.+68     	; 0x718 <OLED_print_string+0x50>
     6d4:	dc 01       	movw	r26, r24

void OLED_print_string(char* str)
{
	uint8_t c;
	uint8_t font_width = 4; // Use sizeof array here
	uint8_t i = 0;
     6d6:	40 e0       	ldi	r20, 0x00	; 0

	// Redraw from SRAM?
}

void OLED_print_string(char* str)
{
     6d8:	60 e0       	ldi	r22, 0x00	; 0
     6da:	50 e0       	ldi	r21, 0x00	; 0
}

void OLED_write_d(char chr)
{
	volatile char *oled = (char *) 0x1200;
	oled[0] = chr;
     6dc:	c0 e0       	ldi	r28, 0x00	; 0
     6de:	d2 e1       	ldi	r29, 0x12	; 18
     6e0:	18 c0       	rjmp	.+48     	; 0x712 <OLED_print_string+0x4a>
	uint8_t c;
	uint8_t font_width = 4; // Use sizeof array here
	uint8_t i = 0;
	while (str[i] != '\0') {
		for (uint8_t j = 0; j < font_width; j++) {
			c = pgm_read_byte_near(font[str[i]-32] + j);
     6e2:	ec 91       	ld	r30, X
     6e4:	f0 e0       	ldi	r31, 0x00	; 0
     6e6:	ee 0f       	add	r30, r30
     6e8:	ff 1f       	adc	r31, r31
     6ea:	ee 0f       	add	r30, r30
     6ec:	ff 1f       	adc	r31, r31
     6ee:	e0 51       	subi	r30, 0x10	; 16
     6f0:	f0 40       	sbci	r31, 0x00	; 0
     6f2:	e2 0f       	add	r30, r18
     6f4:	f3 1f       	adc	r31, r19
     6f6:	e4 91       	lpm	r30, Z
}

void OLED_write_d(char chr)
{
	volatile char *oled = (char *) 0x1200;
	oled[0] = chr;
     6f8:	e8 83       	st	Y, r30
     6fa:	2f 5f       	subi	r18, 0xFF	; 255
     6fc:	3f 4f       	sbci	r19, 0xFF	; 255
{
	uint8_t c;
	uint8_t font_width = 4; // Use sizeof array here
	uint8_t i = 0;
	while (str[i] != '\0') {
		for (uint8_t j = 0; j < font_width; j++) {
     6fe:	24 30       	cpi	r18, 0x04	; 4
     700:	31 05       	cpc	r19, r1
     702:	79 f7       	brne	.-34     	; 0x6e2 <OLED_print_string+0x1a>
			c = pgm_read_byte_near(font[str[i]-32] + j);
			OLED_write_d(c);
		}
		i++;
     704:	4f 5f       	subi	r20, 0xFF	; 255
void OLED_print_string(char* str)
{
	uint8_t c;
	uint8_t font_width = 4; // Use sizeof array here
	uint8_t i = 0;
	while (str[i] != '\0') {
     706:	dc 01       	movw	r26, r24
     708:	a4 0f       	add	r26, r20
     70a:	b1 1d       	adc	r27, r1
     70c:	2c 91       	ld	r18, X
     70e:	22 23       	and	r18, r18
     710:	19 f0       	breq	.+6      	; 0x718 <OLED_print_string+0x50>

	// Redraw from SRAM?
}

void OLED_print_string(char* str)
{
     712:	26 2f       	mov	r18, r22
     714:	35 2f       	mov	r19, r21
     716:	e5 cf       	rjmp	.-54     	; 0x6e2 <OLED_print_string+0x1a>
			c = pgm_read_byte_near(font[str[i]-32] + j);
			OLED_write_d(c);
		}
		i++;
	}
}
     718:	df 91       	pop	r29
     71a:	cf 91       	pop	r28
     71c:	08 95       	ret

0000071e <OLED_print_arrow>:

void OLED_print_arrow(uint8_t row, uint8_t col)
{
	OLED_pos(row, col);
     71e:	0e 94 11 03 	call	0x622	; 0x622 <OLED_pos>
}

void OLED_write_d(char chr)
{
	volatile char *oled = (char *) 0x1200;
	oled[0] = chr;
     722:	e0 e0       	ldi	r30, 0x00	; 0
     724:	f2 e1       	ldi	r31, 0x12	; 18
     726:	88 e1       	ldi	r24, 0x18	; 24
     728:	80 83       	st	Z, r24
     72a:	80 83       	st	Z, r24
     72c:	9e e7       	ldi	r25, 0x7E	; 126
     72e:	90 83       	st	Z, r25
     730:	9c e3       	ldi	r25, 0x3C	; 60
     732:	90 83       	st	Z, r25
     734:	80 83       	st	Z, r24
     736:	08 95       	ret

00000738 <OLED_move_arrow>:
	OLED_write_d(0b00111100);
	OLED_write_d(0b00011000);
}

void OLED_move_arrow(uint8_t newRow, uint8_t newCol, uint8_t currentRow, uint8_t currentCol)
{
     738:	cf 93       	push	r28
     73a:	df 93       	push	r29
     73c:	c8 2f       	mov	r28, r24
     73e:	d6 2f       	mov	r29, r22
     740:	84 2f       	mov	r24, r20
	OLED_pos(currentRow, currentCol);
     742:	62 2f       	mov	r22, r18
     744:	0e 94 11 03 	call	0x622	; 0x622 <OLED_pos>
}

void OLED_write_d(char chr)
{
	volatile char *oled = (char *) 0x1200;
	oled[0] = chr;
     748:	e0 e0       	ldi	r30, 0x00	; 0
     74a:	f2 e1       	ldi	r31, 0x12	; 18
     74c:	10 82       	st	Z, r1
     74e:	10 82       	st	Z, r1
     750:	10 82       	st	Z, r1
     752:	10 82       	st	Z, r1
     754:	10 82       	st	Z, r1
	OLED_write_d(0b00000000);
	OLED_write_d(0b00000000);
	OLED_write_d(0b00000000);
	OLED_write_d(0b00000000);
	
	OLED_print_arrow(newRow, newCol);
     756:	6d 2f       	mov	r22, r29
     758:	8c 2f       	mov	r24, r28
     75a:	0e 94 8f 03 	call	0x71e	; 0x71e <OLED_print_arrow>
}
     75e:	df 91       	pop	r29
     760:	cf 91       	pop	r28
     762:	08 95       	ret

00000764 <OLED_create_node>:


menuNode *OLED_create_node(char* name, menuNode* parent)
{
     764:	cf 93       	push	r28
     766:	df 93       	push	r29
     768:	ec 01       	movw	r28, r24
	menuNode* ret = (menuNode*) malloc(sizeof(menuNode));
     76a:	84 e1       	ldi	r24, 0x14	; 20
     76c:	90 e0       	ldi	r25, 0x00	; 0
     76e:	0e 94 30 06 	call	0xc60	; 0xc60 <malloc>
	ret->name = name;
     772:	fc 01       	movw	r30, r24
     774:	d1 83       	std	Z+1, r29	; 0x01
     776:	c0 83       	st	Z, r28
	ret->parent = NULL;
     778:	13 82       	std	Z+3, r1	; 0x03
     77a:	12 82       	std	Z+2, r1	; 0x02
	return ret;
}
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	08 95       	ret

00000782 <OLED_generate_menu>:

// Implement function for freeing memory

menuNode *OLED_generate_menu(void)
{	
     782:	af 92       	push	r10
     784:	bf 92       	push	r11
     786:	cf 92       	push	r12
     788:	df 92       	push	r13
     78a:	ef 92       	push	r14
     78c:	ff 92       	push	r15
     78e:	0f 93       	push	r16
     790:	1f 93       	push	r17
     792:	cf 93       	push	r28
     794:	df 93       	push	r29
	menuNode *mainmenu = OLED_create_node("MAIN MENU", NULL);
     796:	60 e0       	ldi	r22, 0x00	; 0
     798:	70 e0       	ldi	r23, 0x00	; 0
     79a:	85 e2       	ldi	r24, 0x25	; 37
     79c:	91 e0       	ldi	r25, 0x01	; 1
     79e:	0e 94 b2 03 	call	0x764	; 0x764 <OLED_create_node>
     7a2:	ec 01       	movw	r28, r24
	menuNode *highscores = OLED_create_node("Highscores", mainmenu);
     7a4:	bc 01       	movw	r22, r24
     7a6:	8f e2       	ldi	r24, 0x2F	; 47
     7a8:	91 e0       	ldi	r25, 0x01	; 1
     7aa:	0e 94 b2 03 	call	0x764	; 0x764 <OLED_create_node>
     7ae:	6c 01       	movw	r12, r24
	menuNode *playgame = OLED_create_node("Start new game", mainmenu);
     7b0:	be 01       	movw	r22, r28
     7b2:	8a e3       	ldi	r24, 0x3A	; 58
     7b4:	91 e0       	ldi	r25, 0x01	; 1
     7b6:	0e 94 b2 03 	call	0x764	; 0x764 <OLED_create_node>
     7ba:	5c 01       	movw	r10, r24
	menuNode *debugging = OLED_create_node("Debugging", mainmenu);
     7bc:	be 01       	movw	r22, r28
     7be:	89 e4       	ldi	r24, 0x49	; 73
     7c0:	91 e0       	ldi	r25, 0x01	; 1
     7c2:	0e 94 b2 03 	call	0x764	; 0x764 <OLED_create_node>
     7c6:	8c 01       	movw	r16, r24
	menuNode *calibrate = OLED_create_node("Calibrate", mainmenu);
     7c8:	be 01       	movw	r22, r28
     7ca:	83 e5       	ldi	r24, 0x53	; 83
     7cc:	91 e0       	ldi	r25, 0x01	; 1
     7ce:	0e 94 b2 03 	call	0x764	; 0x764 <OLED_create_node>
     7d2:	7c 01       	movw	r14, r24
	menuNode *difficulty = OLED_create_node("Difficulty", mainmenu);
     7d4:	be 01       	movw	r22, r28
     7d6:	8d e5       	ldi	r24, 0x5D	; 93
     7d8:	91 e0       	ldi	r25, 0x01	; 1
     7da:	0e 94 b2 03 	call	0x764	; 0x764 <OLED_create_node>
	calibrate->parent = mainmenu;
	difficulty->parent = mainmenu;
	debugging->parent = mainmenu;
	*/
	
	mainmenu->children[1] = playgame;
     7de:	bf 82       	std	Y+7, r11	; 0x07
     7e0:	ae 82       	std	Y+6, r10	; 0x06
	mainmenu->children[2] = highscores;
     7e2:	d9 86       	std	Y+9, r13	; 0x09
     7e4:	c8 86       	std	Y+8, r12	; 0x08
	mainmenu->children[3] = difficulty;
     7e6:	9b 87       	std	Y+11, r25	; 0x0b
     7e8:	8a 87       	std	Y+10, r24	; 0x0a
	mainmenu->children[4] = calibrate;
     7ea:	fd 86       	std	Y+13, r15	; 0x0d
     7ec:	ec 86       	std	Y+12, r14	; 0x0c
	mainmenu->children[5] = debugging;
     7ee:	1f 87       	std	Y+15, r17	; 0x0f
     7f0:	0e 87       	std	Y+14, r16	; 0x0e
	
	return mainmenu;
}
     7f2:	ce 01       	movw	r24, r28
     7f4:	df 91       	pop	r29
     7f6:	cf 91       	pop	r28
     7f8:	1f 91       	pop	r17
     7fa:	0f 91       	pop	r16
     7fc:	ff 90       	pop	r15
     7fe:	ef 90       	pop	r14
     800:	df 90       	pop	r13
     802:	cf 90       	pop	r12
     804:	bf 90       	pop	r11
     806:	af 90       	pop	r10
     808:	08 95       	ret

0000080a <OLED_print_menu>:

void OLED_print_menu(menuNode *node)
{
     80a:	cf 93       	push	r28
     80c:	df 93       	push	r29
     80e:	ec 01       	movw	r28, r24
	OLED_pos(0,50);
     810:	62 e3       	ldi	r22, 0x32	; 50
     812:	80 e0       	ldi	r24, 0x00	; 0
     814:	0e 94 11 03 	call	0x622	; 0x622 <OLED_pos>
	OLED_print_string(node->name);
     818:	88 81       	ld	r24, Y
     81a:	99 81       	ldd	r25, Y+1	; 0x01
     81c:	0e 94 64 03 	call	0x6c8	; 0x6c8 <OLED_print_string>
	//printf("%s\n", node->name);
	OLED_pos(1,50);
     820:	62 e3       	ldi	r22, 0x32	; 50
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	0e 94 11 03 	call	0x622	; 0x622 <OLED_pos>
	OLED_print_string(node->children[1]->name);
     828:	ee 81       	ldd	r30, Y+6	; 0x06
     82a:	ff 81       	ldd	r31, Y+7	; 0x07
     82c:	80 81       	ld	r24, Z
     82e:	91 81       	ldd	r25, Z+1	; 0x01
     830:	0e 94 64 03 	call	0x6c8	; 0x6c8 <OLED_print_string>
	OLED_pos(2,50);
     834:	62 e3       	ldi	r22, 0x32	; 50
     836:	82 e0       	ldi	r24, 0x02	; 2
     838:	0e 94 11 03 	call	0x622	; 0x622 <OLED_pos>
	OLED_print_string(node->children[2]->name);
     83c:	e8 85       	ldd	r30, Y+8	; 0x08
     83e:	f9 85       	ldd	r31, Y+9	; 0x09
     840:	80 81       	ld	r24, Z
     842:	91 81       	ldd	r25, Z+1	; 0x01
     844:	0e 94 64 03 	call	0x6c8	; 0x6c8 <OLED_print_string>
	OLED_pos(3,50);
     848:	62 e3       	ldi	r22, 0x32	; 50
     84a:	83 e0       	ldi	r24, 0x03	; 3
     84c:	0e 94 11 03 	call	0x622	; 0x622 <OLED_pos>
	OLED_print_string(node->children[3]->name);
     850:	ea 85       	ldd	r30, Y+10	; 0x0a
     852:	fb 85       	ldd	r31, Y+11	; 0x0b
     854:	80 81       	ld	r24, Z
     856:	91 81       	ldd	r25, Z+1	; 0x01
     858:	0e 94 64 03 	call	0x6c8	; 0x6c8 <OLED_print_string>
	OLED_pos(4,50);
     85c:	62 e3       	ldi	r22, 0x32	; 50
     85e:	84 e0       	ldi	r24, 0x04	; 4
     860:	0e 94 11 03 	call	0x622	; 0x622 <OLED_pos>
	OLED_print_string(node->children[4]->name);
     864:	ec 85       	ldd	r30, Y+12	; 0x0c
     866:	fd 85       	ldd	r31, Y+13	; 0x0d
     868:	80 81       	ld	r24, Z
     86a:	91 81       	ldd	r25, Z+1	; 0x01
     86c:	0e 94 64 03 	call	0x6c8	; 0x6c8 <OLED_print_string>
	OLED_pos(5,50);
     870:	62 e3       	ldi	r22, 0x32	; 50
     872:	85 e0       	ldi	r24, 0x05	; 5
     874:	0e 94 11 03 	call	0x622	; 0x622 <OLED_pos>
	OLED_print_string(node->children[5]->name);
     878:	ee 85       	ldd	r30, Y+14	; 0x0e
     87a:	ff 85       	ldd	r31, Y+15	; 0x0f
     87c:	80 81       	ld	r24, Z
     87e:	91 81       	ldd	r25, Z+1	; 0x01
     880:	0e 94 64 03 	call	0x6c8	; 0x6c8 <OLED_print_string>
     884:	df 91       	pop	r29
     886:	cf 91       	pop	r28
     888:	08 95       	ret

0000088a <SPI_master_init>:
#include <avr/delay.h>

void SPI_master_init(void)
{
	/* Set ~SS, MOSI and SCK output, all others input */
	DDRB = (1 << PB4)|(1 << PB5)|(1 << PB7);
     88a:	80 eb       	ldi	r24, 0xB0	; 176
     88c:	87 bb       	out	0x17, r24	; 23
	
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1 << SPE)|(1 << MSTR)|(1 << SPR0);
     88e:	81 e5       	ldi	r24, 0x51	; 81
     890:	8d b9       	out	0x0d, r24	; 13
     892:	08 95       	ret

00000894 <SPI_master_transmit>:
}

void SPI_master_transmit(uint8_t cData)
{
	/* Start transmission */
	SPDR = cData;
     894:	8f b9       	out	0x0f, r24	; 15
	
	/* Wait for transmission to complete */
	while (!(SPSR & (1 << SPIF))) {
     896:	77 9b       	sbis	0x0e, 7	; 14
     898:	fe cf       	rjmp	.-4      	; 0x896 <SPI_master_transmit+0x2>
		;
	}
}
     89a:	08 95       	ret

0000089c <USART_init>:
#include <avr/io.h>

void USART_init(unsigned int ubrr)
{
	/* Set baud rate*/
	UBRR0H = (unsigned char)(ubrr >> 8 );
     89c:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
     89e:	89 b9       	out	0x09, r24	; 9
	/*Enable receiver and transmitter*/
	UCSR0B = (1 << RXEN0)|(1 << TXEN0);
     8a0:	88 e1       	ldi	r24, 0x18	; 24
     8a2:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1 << URSEL0)|(1 << USBS0)|(3 << UCSZ10);
     8a4:	8e e8       	ldi	r24, 0x8E	; 142
     8a6:	80 bd       	out	0x20, r24	; 32
     8a8:	08 95       	ret

000008aa <USART_transmit>:
}

void USART_transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while (!( UCSR0A & (1 << UDRE0)))
     8aa:	5d 9b       	sbis	0x0b, 5	; 11
     8ac:	fe cf       	rjmp	.-4      	; 0x8aa <USART_transmit>
		;
	/* Put data into buffer, sends the data */
	UDR0 = data;
     8ae:	8c b9       	out	0x0c, r24	; 12
     8b0:	08 95       	ret

000008b2 <USART_receive>:
}

unsigned char USART_receive(void)
{
	/* Wait for data to be received */
	while ( !(UCSR0A & ( 1 << RXC0)) )
     8b2:	5f 9b       	sbis	0x0b, 7	; 11
     8b4:	fe cf       	rjmp	.-4      	; 0x8b2 <USART_receive>
		;
	/* Get and return received data from buffer */
	return UDR0;
     8b6:	8c b1       	in	r24, 0x0c	; 12
}
     8b8:	08 95       	ret

000008ba <__divsf3>:
     8ba:	0c d0       	rcall	.+24     	; 0x8d4 <__divsf3x>
     8bc:	eb c0       	rjmp	.+470    	; 0xa94 <__fp_round>
     8be:	e3 d0       	rcall	.+454    	; 0xa86 <__fp_pscB>
     8c0:	40 f0       	brcs	.+16     	; 0x8d2 <__divsf3+0x18>
     8c2:	da d0       	rcall	.+436    	; 0xa78 <__fp_pscA>
     8c4:	30 f0       	brcs	.+12     	; 0x8d2 <__divsf3+0x18>
     8c6:	21 f4       	brne	.+8      	; 0x8d0 <__divsf3+0x16>
     8c8:	5f 3f       	cpi	r21, 0xFF	; 255
     8ca:	19 f0       	breq	.+6      	; 0x8d2 <__divsf3+0x18>
     8cc:	cc c0       	rjmp	.+408    	; 0xa66 <__fp_inf>
     8ce:	51 11       	cpse	r21, r1
     8d0:	15 c1       	rjmp	.+554    	; 0xafc <__fp_szero>
     8d2:	cf c0       	rjmp	.+414    	; 0xa72 <__fp_nan>

000008d4 <__divsf3x>:
     8d4:	f0 d0       	rcall	.+480    	; 0xab6 <__fp_split3>
     8d6:	98 f3       	brcs	.-26     	; 0x8be <__divsf3+0x4>

000008d8 <__divsf3_pse>:
     8d8:	99 23       	and	r25, r25
     8da:	c9 f3       	breq	.-14     	; 0x8ce <__divsf3+0x14>
     8dc:	55 23       	and	r21, r21
     8de:	b1 f3       	breq	.-20     	; 0x8cc <__divsf3+0x12>
     8e0:	95 1b       	sub	r25, r21
     8e2:	55 0b       	sbc	r21, r21
     8e4:	bb 27       	eor	r27, r27
     8e6:	aa 27       	eor	r26, r26
     8e8:	62 17       	cp	r22, r18
     8ea:	73 07       	cpc	r23, r19
     8ec:	84 07       	cpc	r24, r20
     8ee:	38 f0       	brcs	.+14     	; 0x8fe <__divsf3_pse+0x26>
     8f0:	9f 5f       	subi	r25, 0xFF	; 255
     8f2:	5f 4f       	sbci	r21, 0xFF	; 255
     8f4:	22 0f       	add	r18, r18
     8f6:	33 1f       	adc	r19, r19
     8f8:	44 1f       	adc	r20, r20
     8fa:	aa 1f       	adc	r26, r26
     8fc:	a9 f3       	breq	.-22     	; 0x8e8 <__divsf3_pse+0x10>
     8fe:	33 d0       	rcall	.+102    	; 0x966 <__divsf3_pse+0x8e>
     900:	0e 2e       	mov	r0, r30
     902:	3a f0       	brmi	.+14     	; 0x912 <__divsf3_pse+0x3a>
     904:	e0 e8       	ldi	r30, 0x80	; 128
     906:	30 d0       	rcall	.+96     	; 0x968 <__divsf3_pse+0x90>
     908:	91 50       	subi	r25, 0x01	; 1
     90a:	50 40       	sbci	r21, 0x00	; 0
     90c:	e6 95       	lsr	r30
     90e:	00 1c       	adc	r0, r0
     910:	ca f7       	brpl	.-14     	; 0x904 <__divsf3_pse+0x2c>
     912:	29 d0       	rcall	.+82     	; 0x966 <__divsf3_pse+0x8e>
     914:	fe 2f       	mov	r31, r30
     916:	27 d0       	rcall	.+78     	; 0x966 <__divsf3_pse+0x8e>
     918:	66 0f       	add	r22, r22
     91a:	77 1f       	adc	r23, r23
     91c:	88 1f       	adc	r24, r24
     91e:	bb 1f       	adc	r27, r27
     920:	26 17       	cp	r18, r22
     922:	37 07       	cpc	r19, r23
     924:	48 07       	cpc	r20, r24
     926:	ab 07       	cpc	r26, r27
     928:	b0 e8       	ldi	r27, 0x80	; 128
     92a:	09 f0       	breq	.+2      	; 0x92e <__divsf3_pse+0x56>
     92c:	bb 0b       	sbc	r27, r27
     92e:	80 2d       	mov	r24, r0
     930:	bf 01       	movw	r22, r30
     932:	ff 27       	eor	r31, r31
     934:	93 58       	subi	r25, 0x83	; 131
     936:	5f 4f       	sbci	r21, 0xFF	; 255
     938:	2a f0       	brmi	.+10     	; 0x944 <__divsf3_pse+0x6c>
     93a:	9e 3f       	cpi	r25, 0xFE	; 254
     93c:	51 05       	cpc	r21, r1
     93e:	68 f0       	brcs	.+26     	; 0x95a <__divsf3_pse+0x82>
     940:	92 c0       	rjmp	.+292    	; 0xa66 <__fp_inf>
     942:	dc c0       	rjmp	.+440    	; 0xafc <__fp_szero>
     944:	5f 3f       	cpi	r21, 0xFF	; 255
     946:	ec f3       	brlt	.-6      	; 0x942 <__divsf3_pse+0x6a>
     948:	98 3e       	cpi	r25, 0xE8	; 232
     94a:	dc f3       	brlt	.-10     	; 0x942 <__divsf3_pse+0x6a>
     94c:	86 95       	lsr	r24
     94e:	77 95       	ror	r23
     950:	67 95       	ror	r22
     952:	b7 95       	ror	r27
     954:	f7 95       	ror	r31
     956:	9f 5f       	subi	r25, 0xFF	; 255
     958:	c9 f7       	brne	.-14     	; 0x94c <__divsf3_pse+0x74>
     95a:	88 0f       	add	r24, r24
     95c:	91 1d       	adc	r25, r1
     95e:	96 95       	lsr	r25
     960:	87 95       	ror	r24
     962:	97 f9       	bld	r25, 7
     964:	08 95       	ret
     966:	e1 e0       	ldi	r30, 0x01	; 1
     968:	66 0f       	add	r22, r22
     96a:	77 1f       	adc	r23, r23
     96c:	88 1f       	adc	r24, r24
     96e:	bb 1f       	adc	r27, r27
     970:	62 17       	cp	r22, r18
     972:	73 07       	cpc	r23, r19
     974:	84 07       	cpc	r24, r20
     976:	ba 07       	cpc	r27, r26
     978:	20 f0       	brcs	.+8      	; 0x982 <__divsf3_pse+0xaa>
     97a:	62 1b       	sub	r22, r18
     97c:	73 0b       	sbc	r23, r19
     97e:	84 0b       	sbc	r24, r20
     980:	ba 0b       	sbc	r27, r26
     982:	ee 1f       	adc	r30, r30
     984:	88 f7       	brcc	.-30     	; 0x968 <__divsf3_pse+0x90>
     986:	e0 95       	com	r30
     988:	08 95       	ret

0000098a <__fixsfsi>:
     98a:	04 d0       	rcall	.+8      	; 0x994 <__fixunssfsi>
     98c:	68 94       	set
     98e:	b1 11       	cpse	r27, r1
     990:	b5 c0       	rjmp	.+362    	; 0xafc <__fp_szero>
     992:	08 95       	ret

00000994 <__fixunssfsi>:
     994:	98 d0       	rcall	.+304    	; 0xac6 <__fp_splitA>
     996:	88 f0       	brcs	.+34     	; 0x9ba <__fixunssfsi+0x26>
     998:	9f 57       	subi	r25, 0x7F	; 127
     99a:	90 f0       	brcs	.+36     	; 0x9c0 <__fixunssfsi+0x2c>
     99c:	b9 2f       	mov	r27, r25
     99e:	99 27       	eor	r25, r25
     9a0:	b7 51       	subi	r27, 0x17	; 23
     9a2:	a0 f0       	brcs	.+40     	; 0x9cc <__fixunssfsi+0x38>
     9a4:	d1 f0       	breq	.+52     	; 0x9da <__fixunssfsi+0x46>
     9a6:	66 0f       	add	r22, r22
     9a8:	77 1f       	adc	r23, r23
     9aa:	88 1f       	adc	r24, r24
     9ac:	99 1f       	adc	r25, r25
     9ae:	1a f0       	brmi	.+6      	; 0x9b6 <__fixunssfsi+0x22>
     9b0:	ba 95       	dec	r27
     9b2:	c9 f7       	brne	.-14     	; 0x9a6 <__fixunssfsi+0x12>
     9b4:	12 c0       	rjmp	.+36     	; 0x9da <__fixunssfsi+0x46>
     9b6:	b1 30       	cpi	r27, 0x01	; 1
     9b8:	81 f0       	breq	.+32     	; 0x9da <__fixunssfsi+0x46>
     9ba:	9f d0       	rcall	.+318    	; 0xafa <__fp_zero>
     9bc:	b1 e0       	ldi	r27, 0x01	; 1
     9be:	08 95       	ret
     9c0:	9c c0       	rjmp	.+312    	; 0xafa <__fp_zero>
     9c2:	67 2f       	mov	r22, r23
     9c4:	78 2f       	mov	r23, r24
     9c6:	88 27       	eor	r24, r24
     9c8:	b8 5f       	subi	r27, 0xF8	; 248
     9ca:	39 f0       	breq	.+14     	; 0x9da <__fixunssfsi+0x46>
     9cc:	b9 3f       	cpi	r27, 0xF9	; 249
     9ce:	cc f3       	brlt	.-14     	; 0x9c2 <__fixunssfsi+0x2e>
     9d0:	86 95       	lsr	r24
     9d2:	77 95       	ror	r23
     9d4:	67 95       	ror	r22
     9d6:	b3 95       	inc	r27
     9d8:	d9 f7       	brne	.-10     	; 0x9d0 <__fixunssfsi+0x3c>
     9da:	3e f4       	brtc	.+14     	; 0x9ea <__fixunssfsi+0x56>
     9dc:	90 95       	com	r25
     9de:	80 95       	com	r24
     9e0:	70 95       	com	r23
     9e2:	61 95       	neg	r22
     9e4:	7f 4f       	sbci	r23, 0xFF	; 255
     9e6:	8f 4f       	sbci	r24, 0xFF	; 255
     9e8:	9f 4f       	sbci	r25, 0xFF	; 255
     9ea:	08 95       	ret

000009ec <__floatunsisf>:
     9ec:	e8 94       	clt
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__floatsisf+0x12>

000009f0 <__floatsisf>:
     9f0:	97 fb       	bst	r25, 7
     9f2:	3e f4       	brtc	.+14     	; 0xa02 <__floatsisf+0x12>
     9f4:	90 95       	com	r25
     9f6:	80 95       	com	r24
     9f8:	70 95       	com	r23
     9fa:	61 95       	neg	r22
     9fc:	7f 4f       	sbci	r23, 0xFF	; 255
     9fe:	8f 4f       	sbci	r24, 0xFF	; 255
     a00:	9f 4f       	sbci	r25, 0xFF	; 255
     a02:	99 23       	and	r25, r25
     a04:	a9 f0       	breq	.+42     	; 0xa30 <__floatsisf+0x40>
     a06:	f9 2f       	mov	r31, r25
     a08:	96 e9       	ldi	r25, 0x96	; 150
     a0a:	bb 27       	eor	r27, r27
     a0c:	93 95       	inc	r25
     a0e:	f6 95       	lsr	r31
     a10:	87 95       	ror	r24
     a12:	77 95       	ror	r23
     a14:	67 95       	ror	r22
     a16:	b7 95       	ror	r27
     a18:	f1 11       	cpse	r31, r1
     a1a:	f8 cf       	rjmp	.-16     	; 0xa0c <__floatsisf+0x1c>
     a1c:	fa f4       	brpl	.+62     	; 0xa5c <__floatsisf+0x6c>
     a1e:	bb 0f       	add	r27, r27
     a20:	11 f4       	brne	.+4      	; 0xa26 <__floatsisf+0x36>
     a22:	60 ff       	sbrs	r22, 0
     a24:	1b c0       	rjmp	.+54     	; 0xa5c <__floatsisf+0x6c>
     a26:	6f 5f       	subi	r22, 0xFF	; 255
     a28:	7f 4f       	sbci	r23, 0xFF	; 255
     a2a:	8f 4f       	sbci	r24, 0xFF	; 255
     a2c:	9f 4f       	sbci	r25, 0xFF	; 255
     a2e:	16 c0       	rjmp	.+44     	; 0xa5c <__floatsisf+0x6c>
     a30:	88 23       	and	r24, r24
     a32:	11 f0       	breq	.+4      	; 0xa38 <__floatsisf+0x48>
     a34:	96 e9       	ldi	r25, 0x96	; 150
     a36:	11 c0       	rjmp	.+34     	; 0xa5a <__floatsisf+0x6a>
     a38:	77 23       	and	r23, r23
     a3a:	21 f0       	breq	.+8      	; 0xa44 <__floatsisf+0x54>
     a3c:	9e e8       	ldi	r25, 0x8E	; 142
     a3e:	87 2f       	mov	r24, r23
     a40:	76 2f       	mov	r23, r22
     a42:	05 c0       	rjmp	.+10     	; 0xa4e <__floatsisf+0x5e>
     a44:	66 23       	and	r22, r22
     a46:	71 f0       	breq	.+28     	; 0xa64 <__floatsisf+0x74>
     a48:	96 e8       	ldi	r25, 0x86	; 134
     a4a:	86 2f       	mov	r24, r22
     a4c:	70 e0       	ldi	r23, 0x00	; 0
     a4e:	60 e0       	ldi	r22, 0x00	; 0
     a50:	2a f0       	brmi	.+10     	; 0xa5c <__floatsisf+0x6c>
     a52:	9a 95       	dec	r25
     a54:	66 0f       	add	r22, r22
     a56:	77 1f       	adc	r23, r23
     a58:	88 1f       	adc	r24, r24
     a5a:	da f7       	brpl	.-10     	; 0xa52 <__floatsisf+0x62>
     a5c:	88 0f       	add	r24, r24
     a5e:	96 95       	lsr	r25
     a60:	87 95       	ror	r24
     a62:	97 f9       	bld	r25, 7
     a64:	08 95       	ret

00000a66 <__fp_inf>:
     a66:	97 f9       	bld	r25, 7
     a68:	9f 67       	ori	r25, 0x7F	; 127
     a6a:	80 e8       	ldi	r24, 0x80	; 128
     a6c:	70 e0       	ldi	r23, 0x00	; 0
     a6e:	60 e0       	ldi	r22, 0x00	; 0
     a70:	08 95       	ret

00000a72 <__fp_nan>:
     a72:	9f ef       	ldi	r25, 0xFF	; 255
     a74:	80 ec       	ldi	r24, 0xC0	; 192
     a76:	08 95       	ret

00000a78 <__fp_pscA>:
     a78:	00 24       	eor	r0, r0
     a7a:	0a 94       	dec	r0
     a7c:	16 16       	cp	r1, r22
     a7e:	17 06       	cpc	r1, r23
     a80:	18 06       	cpc	r1, r24
     a82:	09 06       	cpc	r0, r25
     a84:	08 95       	ret

00000a86 <__fp_pscB>:
     a86:	00 24       	eor	r0, r0
     a88:	0a 94       	dec	r0
     a8a:	12 16       	cp	r1, r18
     a8c:	13 06       	cpc	r1, r19
     a8e:	14 06       	cpc	r1, r20
     a90:	05 06       	cpc	r0, r21
     a92:	08 95       	ret

00000a94 <__fp_round>:
     a94:	09 2e       	mov	r0, r25
     a96:	03 94       	inc	r0
     a98:	00 0c       	add	r0, r0
     a9a:	11 f4       	brne	.+4      	; 0xaa0 <__fp_round+0xc>
     a9c:	88 23       	and	r24, r24
     a9e:	52 f0       	brmi	.+20     	; 0xab4 <__fp_round+0x20>
     aa0:	bb 0f       	add	r27, r27
     aa2:	40 f4       	brcc	.+16     	; 0xab4 <__fp_round+0x20>
     aa4:	bf 2b       	or	r27, r31
     aa6:	11 f4       	brne	.+4      	; 0xaac <__fp_round+0x18>
     aa8:	60 ff       	sbrs	r22, 0
     aaa:	04 c0       	rjmp	.+8      	; 0xab4 <__fp_round+0x20>
     aac:	6f 5f       	subi	r22, 0xFF	; 255
     aae:	7f 4f       	sbci	r23, 0xFF	; 255
     ab0:	8f 4f       	sbci	r24, 0xFF	; 255
     ab2:	9f 4f       	sbci	r25, 0xFF	; 255
     ab4:	08 95       	ret

00000ab6 <__fp_split3>:
     ab6:	57 fd       	sbrc	r21, 7
     ab8:	90 58       	subi	r25, 0x80	; 128
     aba:	44 0f       	add	r20, r20
     abc:	55 1f       	adc	r21, r21
     abe:	59 f0       	breq	.+22     	; 0xad6 <__fp_splitA+0x10>
     ac0:	5f 3f       	cpi	r21, 0xFF	; 255
     ac2:	71 f0       	breq	.+28     	; 0xae0 <__fp_splitA+0x1a>
     ac4:	47 95       	ror	r20

00000ac6 <__fp_splitA>:
     ac6:	88 0f       	add	r24, r24
     ac8:	97 fb       	bst	r25, 7
     aca:	99 1f       	adc	r25, r25
     acc:	61 f0       	breq	.+24     	; 0xae6 <__fp_splitA+0x20>
     ace:	9f 3f       	cpi	r25, 0xFF	; 255
     ad0:	79 f0       	breq	.+30     	; 0xaf0 <__fp_splitA+0x2a>
     ad2:	87 95       	ror	r24
     ad4:	08 95       	ret
     ad6:	12 16       	cp	r1, r18
     ad8:	13 06       	cpc	r1, r19
     ada:	14 06       	cpc	r1, r20
     adc:	55 1f       	adc	r21, r21
     ade:	f2 cf       	rjmp	.-28     	; 0xac4 <__fp_split3+0xe>
     ae0:	46 95       	lsr	r20
     ae2:	f1 df       	rcall	.-30     	; 0xac6 <__fp_splitA>
     ae4:	08 c0       	rjmp	.+16     	; 0xaf6 <__fp_splitA+0x30>
     ae6:	16 16       	cp	r1, r22
     ae8:	17 06       	cpc	r1, r23
     aea:	18 06       	cpc	r1, r24
     aec:	99 1f       	adc	r25, r25
     aee:	f1 cf       	rjmp	.-30     	; 0xad2 <__fp_splitA+0xc>
     af0:	86 95       	lsr	r24
     af2:	71 05       	cpc	r23, r1
     af4:	61 05       	cpc	r22, r1
     af6:	08 94       	sec
     af8:	08 95       	ret

00000afa <__fp_zero>:
     afa:	e8 94       	clt

00000afc <__fp_szero>:
     afc:	bb 27       	eor	r27, r27
     afe:	66 27       	eor	r22, r22
     b00:	77 27       	eor	r23, r23
     b02:	cb 01       	movw	r24, r22
     b04:	97 f9       	bld	r25, 7
     b06:	08 95       	ret

00000b08 <__mulsf3>:
     b08:	0b d0       	rcall	.+22     	; 0xb20 <__mulsf3x>
     b0a:	c4 cf       	rjmp	.-120    	; 0xa94 <__fp_round>
     b0c:	b5 df       	rcall	.-150    	; 0xa78 <__fp_pscA>
     b0e:	28 f0       	brcs	.+10     	; 0xb1a <__mulsf3+0x12>
     b10:	ba df       	rcall	.-140    	; 0xa86 <__fp_pscB>
     b12:	18 f0       	brcs	.+6      	; 0xb1a <__mulsf3+0x12>
     b14:	95 23       	and	r25, r21
     b16:	09 f0       	breq	.+2      	; 0xb1a <__mulsf3+0x12>
     b18:	a6 cf       	rjmp	.-180    	; 0xa66 <__fp_inf>
     b1a:	ab cf       	rjmp	.-170    	; 0xa72 <__fp_nan>
     b1c:	11 24       	eor	r1, r1
     b1e:	ee cf       	rjmp	.-36     	; 0xafc <__fp_szero>

00000b20 <__mulsf3x>:
     b20:	ca df       	rcall	.-108    	; 0xab6 <__fp_split3>
     b22:	a0 f3       	brcs	.-24     	; 0xb0c <__mulsf3+0x4>

00000b24 <__mulsf3_pse>:
     b24:	95 9f       	mul	r25, r21
     b26:	d1 f3       	breq	.-12     	; 0xb1c <__mulsf3+0x14>
     b28:	95 0f       	add	r25, r21
     b2a:	50 e0       	ldi	r21, 0x00	; 0
     b2c:	55 1f       	adc	r21, r21
     b2e:	62 9f       	mul	r22, r18
     b30:	f0 01       	movw	r30, r0
     b32:	72 9f       	mul	r23, r18
     b34:	bb 27       	eor	r27, r27
     b36:	f0 0d       	add	r31, r0
     b38:	b1 1d       	adc	r27, r1
     b3a:	63 9f       	mul	r22, r19
     b3c:	aa 27       	eor	r26, r26
     b3e:	f0 0d       	add	r31, r0
     b40:	b1 1d       	adc	r27, r1
     b42:	aa 1f       	adc	r26, r26
     b44:	64 9f       	mul	r22, r20
     b46:	66 27       	eor	r22, r22
     b48:	b0 0d       	add	r27, r0
     b4a:	a1 1d       	adc	r26, r1
     b4c:	66 1f       	adc	r22, r22
     b4e:	82 9f       	mul	r24, r18
     b50:	22 27       	eor	r18, r18
     b52:	b0 0d       	add	r27, r0
     b54:	a1 1d       	adc	r26, r1
     b56:	62 1f       	adc	r22, r18
     b58:	73 9f       	mul	r23, r19
     b5a:	b0 0d       	add	r27, r0
     b5c:	a1 1d       	adc	r26, r1
     b5e:	62 1f       	adc	r22, r18
     b60:	83 9f       	mul	r24, r19
     b62:	a0 0d       	add	r26, r0
     b64:	61 1d       	adc	r22, r1
     b66:	22 1f       	adc	r18, r18
     b68:	74 9f       	mul	r23, r20
     b6a:	33 27       	eor	r19, r19
     b6c:	a0 0d       	add	r26, r0
     b6e:	61 1d       	adc	r22, r1
     b70:	23 1f       	adc	r18, r19
     b72:	84 9f       	mul	r24, r20
     b74:	60 0d       	add	r22, r0
     b76:	21 1d       	adc	r18, r1
     b78:	82 2f       	mov	r24, r18
     b7a:	76 2f       	mov	r23, r22
     b7c:	6a 2f       	mov	r22, r26
     b7e:	11 24       	eor	r1, r1
     b80:	9f 57       	subi	r25, 0x7F	; 127
     b82:	50 40       	sbci	r21, 0x00	; 0
     b84:	8a f0       	brmi	.+34     	; 0xba8 <__mulsf3_pse+0x84>
     b86:	e1 f0       	breq	.+56     	; 0xbc0 <__mulsf3_pse+0x9c>
     b88:	88 23       	and	r24, r24
     b8a:	4a f0       	brmi	.+18     	; 0xb9e <__mulsf3_pse+0x7a>
     b8c:	ee 0f       	add	r30, r30
     b8e:	ff 1f       	adc	r31, r31
     b90:	bb 1f       	adc	r27, r27
     b92:	66 1f       	adc	r22, r22
     b94:	77 1f       	adc	r23, r23
     b96:	88 1f       	adc	r24, r24
     b98:	91 50       	subi	r25, 0x01	; 1
     b9a:	50 40       	sbci	r21, 0x00	; 0
     b9c:	a9 f7       	brne	.-22     	; 0xb88 <__mulsf3_pse+0x64>
     b9e:	9e 3f       	cpi	r25, 0xFE	; 254
     ba0:	51 05       	cpc	r21, r1
     ba2:	70 f0       	brcs	.+28     	; 0xbc0 <__mulsf3_pse+0x9c>
     ba4:	60 cf       	rjmp	.-320    	; 0xa66 <__fp_inf>
     ba6:	aa cf       	rjmp	.-172    	; 0xafc <__fp_szero>
     ba8:	5f 3f       	cpi	r21, 0xFF	; 255
     baa:	ec f3       	brlt	.-6      	; 0xba6 <__mulsf3_pse+0x82>
     bac:	98 3e       	cpi	r25, 0xE8	; 232
     bae:	dc f3       	brlt	.-10     	; 0xba6 <__mulsf3_pse+0x82>
     bb0:	86 95       	lsr	r24
     bb2:	77 95       	ror	r23
     bb4:	67 95       	ror	r22
     bb6:	b7 95       	ror	r27
     bb8:	f7 95       	ror	r31
     bba:	e7 95       	ror	r30
     bbc:	9f 5f       	subi	r25, 0xFF	; 255
     bbe:	c1 f7       	brne	.-16     	; 0xbb0 <__mulsf3_pse+0x8c>
     bc0:	fe 2b       	or	r31, r30
     bc2:	88 0f       	add	r24, r24
     bc4:	91 1d       	adc	r25, r1
     bc6:	96 95       	lsr	r25
     bc8:	87 95       	ror	r24
     bca:	97 f9       	bld	r25, 7
     bcc:	08 95       	ret

00000bce <round>:
     bce:	7b df       	rcall	.-266    	; 0xac6 <__fp_splitA>
     bd0:	e0 f0       	brcs	.+56     	; 0xc0a <round+0x3c>
     bd2:	9e 37       	cpi	r25, 0x7E	; 126
     bd4:	d8 f0       	brcs	.+54     	; 0xc0c <round+0x3e>
     bd6:	96 39       	cpi	r25, 0x96	; 150
     bd8:	b8 f4       	brcc	.+46     	; 0xc08 <round+0x3a>
     bda:	9e 38       	cpi	r25, 0x8E	; 142
     bdc:	48 f4       	brcc	.+18     	; 0xbf0 <round+0x22>
     bde:	67 2f       	mov	r22, r23
     be0:	78 2f       	mov	r23, r24
     be2:	88 27       	eor	r24, r24
     be4:	98 5f       	subi	r25, 0xF8	; 248
     be6:	f9 cf       	rjmp	.-14     	; 0xbda <round+0xc>
     be8:	86 95       	lsr	r24
     bea:	77 95       	ror	r23
     bec:	67 95       	ror	r22
     bee:	93 95       	inc	r25
     bf0:	95 39       	cpi	r25, 0x95	; 149
     bf2:	d0 f3       	brcs	.-12     	; 0xbe8 <round+0x1a>
     bf4:	b6 2f       	mov	r27, r22
     bf6:	b1 70       	andi	r27, 0x01	; 1
     bf8:	6b 0f       	add	r22, r27
     bfa:	71 1d       	adc	r23, r1
     bfc:	81 1d       	adc	r24, r1
     bfe:	20 f4       	brcc	.+8      	; 0xc08 <round+0x3a>
     c00:	87 95       	ror	r24
     c02:	77 95       	ror	r23
     c04:	67 95       	ror	r22
     c06:	93 95       	inc	r25
     c08:	02 c0       	rjmp	.+4      	; 0xc0e <__fp_mintl>
     c0a:	1c c0       	rjmp	.+56     	; 0xc44 <__fp_mpack>
     c0c:	77 cf       	rjmp	.-274    	; 0xafc <__fp_szero>

00000c0e <__fp_mintl>:
     c0e:	88 23       	and	r24, r24
     c10:	71 f4       	brne	.+28     	; 0xc2e <__fp_mintl+0x20>
     c12:	77 23       	and	r23, r23
     c14:	21 f0       	breq	.+8      	; 0xc1e <__fp_mintl+0x10>
     c16:	98 50       	subi	r25, 0x08	; 8
     c18:	87 2b       	or	r24, r23
     c1a:	76 2f       	mov	r23, r22
     c1c:	07 c0       	rjmp	.+14     	; 0xc2c <__fp_mintl+0x1e>
     c1e:	66 23       	and	r22, r22
     c20:	11 f4       	brne	.+4      	; 0xc26 <__fp_mintl+0x18>
     c22:	99 27       	eor	r25, r25
     c24:	0d c0       	rjmp	.+26     	; 0xc40 <__fp_mintl+0x32>
     c26:	90 51       	subi	r25, 0x10	; 16
     c28:	86 2b       	or	r24, r22
     c2a:	70 e0       	ldi	r23, 0x00	; 0
     c2c:	60 e0       	ldi	r22, 0x00	; 0
     c2e:	2a f0       	brmi	.+10     	; 0xc3a <__fp_mintl+0x2c>
     c30:	9a 95       	dec	r25
     c32:	66 0f       	add	r22, r22
     c34:	77 1f       	adc	r23, r23
     c36:	88 1f       	adc	r24, r24
     c38:	da f7       	brpl	.-10     	; 0xc30 <__fp_mintl+0x22>
     c3a:	88 0f       	add	r24, r24
     c3c:	96 95       	lsr	r25
     c3e:	87 95       	ror	r24
     c40:	97 f9       	bld	r25, 7
     c42:	08 95       	ret

00000c44 <__fp_mpack>:
     c44:	9f 3f       	cpi	r25, 0xFF	; 255
     c46:	31 f0       	breq	.+12     	; 0xc54 <__fp_mpack_finite+0xc>

00000c48 <__fp_mpack_finite>:
     c48:	91 50       	subi	r25, 0x01	; 1
     c4a:	20 f4       	brcc	.+8      	; 0xc54 <__fp_mpack_finite+0xc>
     c4c:	87 95       	ror	r24
     c4e:	77 95       	ror	r23
     c50:	67 95       	ror	r22
     c52:	b7 95       	ror	r27
     c54:	88 0f       	add	r24, r24
     c56:	91 1d       	adc	r25, r1
     c58:	96 95       	lsr	r25
     c5a:	87 95       	ror	r24
     c5c:	97 f9       	bld	r25, 7
     c5e:	08 95       	ret

00000c60 <malloc>:
     c60:	cf 93       	push	r28
     c62:	df 93       	push	r29
     c64:	82 30       	cpi	r24, 0x02	; 2
     c66:	91 05       	cpc	r25, r1
     c68:	10 f4       	brcc	.+4      	; 0xc6e <malloc+0xe>
     c6a:	82 e0       	ldi	r24, 0x02	; 2
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	e0 91 6a 01 	lds	r30, 0x016A
     c72:	f0 91 6b 01 	lds	r31, 0x016B
     c76:	20 e0       	ldi	r18, 0x00	; 0
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	a0 e0       	ldi	r26, 0x00	; 0
     c7c:	b0 e0       	ldi	r27, 0x00	; 0
     c7e:	30 97       	sbiw	r30, 0x00	; 0
     c80:	39 f1       	breq	.+78     	; 0xcd0 <malloc+0x70>
     c82:	40 81       	ld	r20, Z
     c84:	51 81       	ldd	r21, Z+1	; 0x01
     c86:	48 17       	cp	r20, r24
     c88:	59 07       	cpc	r21, r25
     c8a:	b8 f0       	brcs	.+46     	; 0xcba <malloc+0x5a>
     c8c:	48 17       	cp	r20, r24
     c8e:	59 07       	cpc	r21, r25
     c90:	71 f4       	brne	.+28     	; 0xcae <malloc+0x4e>
     c92:	82 81       	ldd	r24, Z+2	; 0x02
     c94:	93 81       	ldd	r25, Z+3	; 0x03
     c96:	10 97       	sbiw	r26, 0x00	; 0
     c98:	29 f0       	breq	.+10     	; 0xca4 <malloc+0x44>
     c9a:	13 96       	adiw	r26, 0x03	; 3
     c9c:	9c 93       	st	X, r25
     c9e:	8e 93       	st	-X, r24
     ca0:	12 97       	sbiw	r26, 0x02	; 2
     ca2:	2c c0       	rjmp	.+88     	; 0xcfc <malloc+0x9c>
     ca4:	90 93 6b 01 	sts	0x016B, r25
     ca8:	80 93 6a 01 	sts	0x016A, r24
     cac:	27 c0       	rjmp	.+78     	; 0xcfc <malloc+0x9c>
     cae:	21 15       	cp	r18, r1
     cb0:	31 05       	cpc	r19, r1
     cb2:	31 f0       	breq	.+12     	; 0xcc0 <malloc+0x60>
     cb4:	42 17       	cp	r20, r18
     cb6:	53 07       	cpc	r21, r19
     cb8:	18 f0       	brcs	.+6      	; 0xcc0 <malloc+0x60>
     cba:	a9 01       	movw	r20, r18
     cbc:	db 01       	movw	r26, r22
     cbe:	01 c0       	rjmp	.+2      	; 0xcc2 <malloc+0x62>
     cc0:	ef 01       	movw	r28, r30
     cc2:	9a 01       	movw	r18, r20
     cc4:	bd 01       	movw	r22, r26
     cc6:	df 01       	movw	r26, r30
     cc8:	02 80       	ldd	r0, Z+2	; 0x02
     cca:	f3 81       	ldd	r31, Z+3	; 0x03
     ccc:	e0 2d       	mov	r30, r0
     cce:	d7 cf       	rjmp	.-82     	; 0xc7e <malloc+0x1e>
     cd0:	21 15       	cp	r18, r1
     cd2:	31 05       	cpc	r19, r1
     cd4:	f9 f0       	breq	.+62     	; 0xd14 <malloc+0xb4>
     cd6:	28 1b       	sub	r18, r24
     cd8:	39 0b       	sbc	r19, r25
     cda:	24 30       	cpi	r18, 0x04	; 4
     cdc:	31 05       	cpc	r19, r1
     cde:	80 f4       	brcc	.+32     	; 0xd00 <malloc+0xa0>
     ce0:	8a 81       	ldd	r24, Y+2	; 0x02
     ce2:	9b 81       	ldd	r25, Y+3	; 0x03
     ce4:	61 15       	cp	r22, r1
     ce6:	71 05       	cpc	r23, r1
     ce8:	21 f0       	breq	.+8      	; 0xcf2 <malloc+0x92>
     cea:	fb 01       	movw	r30, r22
     cec:	93 83       	std	Z+3, r25	; 0x03
     cee:	82 83       	std	Z+2, r24	; 0x02
     cf0:	04 c0       	rjmp	.+8      	; 0xcfa <malloc+0x9a>
     cf2:	90 93 6b 01 	sts	0x016B, r25
     cf6:	80 93 6a 01 	sts	0x016A, r24
     cfa:	fe 01       	movw	r30, r28
     cfc:	32 96       	adiw	r30, 0x02	; 2
     cfe:	44 c0       	rjmp	.+136    	; 0xd88 <malloc+0x128>
     d00:	fe 01       	movw	r30, r28
     d02:	e2 0f       	add	r30, r18
     d04:	f3 1f       	adc	r31, r19
     d06:	81 93       	st	Z+, r24
     d08:	91 93       	st	Z+, r25
     d0a:	22 50       	subi	r18, 0x02	; 2
     d0c:	31 09       	sbc	r19, r1
     d0e:	39 83       	std	Y+1, r19	; 0x01
     d10:	28 83       	st	Y, r18
     d12:	3a c0       	rjmp	.+116    	; 0xd88 <malloc+0x128>
     d14:	20 91 68 01 	lds	r18, 0x0168
     d18:	30 91 69 01 	lds	r19, 0x0169
     d1c:	23 2b       	or	r18, r19
     d1e:	41 f4       	brne	.+16     	; 0xd30 <malloc+0xd0>
     d20:	20 91 02 01 	lds	r18, 0x0102
     d24:	30 91 03 01 	lds	r19, 0x0103
     d28:	30 93 69 01 	sts	0x0169, r19
     d2c:	20 93 68 01 	sts	0x0168, r18
     d30:	20 91 00 01 	lds	r18, 0x0100
     d34:	30 91 01 01 	lds	r19, 0x0101
     d38:	21 15       	cp	r18, r1
     d3a:	31 05       	cpc	r19, r1
     d3c:	41 f4       	brne	.+16     	; 0xd4e <malloc+0xee>
     d3e:	2d b7       	in	r18, 0x3d	; 61
     d40:	3e b7       	in	r19, 0x3e	; 62
     d42:	40 91 04 01 	lds	r20, 0x0104
     d46:	50 91 05 01 	lds	r21, 0x0105
     d4a:	24 1b       	sub	r18, r20
     d4c:	35 0b       	sbc	r19, r21
     d4e:	e0 91 68 01 	lds	r30, 0x0168
     d52:	f0 91 69 01 	lds	r31, 0x0169
     d56:	e2 17       	cp	r30, r18
     d58:	f3 07       	cpc	r31, r19
     d5a:	a0 f4       	brcc	.+40     	; 0xd84 <malloc+0x124>
     d5c:	2e 1b       	sub	r18, r30
     d5e:	3f 0b       	sbc	r19, r31
     d60:	28 17       	cp	r18, r24
     d62:	39 07       	cpc	r19, r25
     d64:	78 f0       	brcs	.+30     	; 0xd84 <malloc+0x124>
     d66:	ac 01       	movw	r20, r24
     d68:	4e 5f       	subi	r20, 0xFE	; 254
     d6a:	5f 4f       	sbci	r21, 0xFF	; 255
     d6c:	24 17       	cp	r18, r20
     d6e:	35 07       	cpc	r19, r21
     d70:	48 f0       	brcs	.+18     	; 0xd84 <malloc+0x124>
     d72:	4e 0f       	add	r20, r30
     d74:	5f 1f       	adc	r21, r31
     d76:	50 93 69 01 	sts	0x0169, r21
     d7a:	40 93 68 01 	sts	0x0168, r20
     d7e:	81 93       	st	Z+, r24
     d80:	91 93       	st	Z+, r25
     d82:	02 c0       	rjmp	.+4      	; 0xd88 <malloc+0x128>
     d84:	e0 e0       	ldi	r30, 0x00	; 0
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	cf 01       	movw	r24, r30
     d8a:	df 91       	pop	r29
     d8c:	cf 91       	pop	r28
     d8e:	08 95       	ret

00000d90 <free>:
     d90:	cf 93       	push	r28
     d92:	df 93       	push	r29
     d94:	00 97       	sbiw	r24, 0x00	; 0
     d96:	09 f4       	brne	.+2      	; 0xd9a <free+0xa>
     d98:	87 c0       	rjmp	.+270    	; 0xea8 <free+0x118>
     d9a:	fc 01       	movw	r30, r24
     d9c:	32 97       	sbiw	r30, 0x02	; 2
     d9e:	13 82       	std	Z+3, r1	; 0x03
     da0:	12 82       	std	Z+2, r1	; 0x02
     da2:	c0 91 6a 01 	lds	r28, 0x016A
     da6:	d0 91 6b 01 	lds	r29, 0x016B
     daa:	20 97       	sbiw	r28, 0x00	; 0
     dac:	81 f4       	brne	.+32     	; 0xdce <free+0x3e>
     dae:	20 81       	ld	r18, Z
     db0:	31 81       	ldd	r19, Z+1	; 0x01
     db2:	28 0f       	add	r18, r24
     db4:	39 1f       	adc	r19, r25
     db6:	80 91 68 01 	lds	r24, 0x0168
     dba:	90 91 69 01 	lds	r25, 0x0169
     dbe:	82 17       	cp	r24, r18
     dc0:	93 07       	cpc	r25, r19
     dc2:	79 f5       	brne	.+94     	; 0xe22 <free+0x92>
     dc4:	f0 93 69 01 	sts	0x0169, r31
     dc8:	e0 93 68 01 	sts	0x0168, r30
     dcc:	6d c0       	rjmp	.+218    	; 0xea8 <free+0x118>
     dce:	de 01       	movw	r26, r28
     dd0:	20 e0       	ldi	r18, 0x00	; 0
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	ae 17       	cp	r26, r30
     dd6:	bf 07       	cpc	r27, r31
     dd8:	50 f4       	brcc	.+20     	; 0xdee <free+0x5e>
     dda:	12 96       	adiw	r26, 0x02	; 2
     ddc:	4d 91       	ld	r20, X+
     dde:	5c 91       	ld	r21, X
     de0:	13 97       	sbiw	r26, 0x03	; 3
     de2:	9d 01       	movw	r18, r26
     de4:	41 15       	cp	r20, r1
     de6:	51 05       	cpc	r21, r1
     de8:	09 f1       	breq	.+66     	; 0xe2c <free+0x9c>
     dea:	da 01       	movw	r26, r20
     dec:	f3 cf       	rjmp	.-26     	; 0xdd4 <free+0x44>
     dee:	b3 83       	std	Z+3, r27	; 0x03
     df0:	a2 83       	std	Z+2, r26	; 0x02
     df2:	40 81       	ld	r20, Z
     df4:	51 81       	ldd	r21, Z+1	; 0x01
     df6:	84 0f       	add	r24, r20
     df8:	95 1f       	adc	r25, r21
     dfa:	8a 17       	cp	r24, r26
     dfc:	9b 07       	cpc	r25, r27
     dfe:	71 f4       	brne	.+28     	; 0xe1c <free+0x8c>
     e00:	8d 91       	ld	r24, X+
     e02:	9c 91       	ld	r25, X
     e04:	11 97       	sbiw	r26, 0x01	; 1
     e06:	84 0f       	add	r24, r20
     e08:	95 1f       	adc	r25, r21
     e0a:	02 96       	adiw	r24, 0x02	; 2
     e0c:	91 83       	std	Z+1, r25	; 0x01
     e0e:	80 83       	st	Z, r24
     e10:	12 96       	adiw	r26, 0x02	; 2
     e12:	8d 91       	ld	r24, X+
     e14:	9c 91       	ld	r25, X
     e16:	13 97       	sbiw	r26, 0x03	; 3
     e18:	93 83       	std	Z+3, r25	; 0x03
     e1a:	82 83       	std	Z+2, r24	; 0x02
     e1c:	21 15       	cp	r18, r1
     e1e:	31 05       	cpc	r19, r1
     e20:	29 f4       	brne	.+10     	; 0xe2c <free+0x9c>
     e22:	f0 93 6b 01 	sts	0x016B, r31
     e26:	e0 93 6a 01 	sts	0x016A, r30
     e2a:	3e c0       	rjmp	.+124    	; 0xea8 <free+0x118>
     e2c:	d9 01       	movw	r26, r18
     e2e:	13 96       	adiw	r26, 0x03	; 3
     e30:	fc 93       	st	X, r31
     e32:	ee 93       	st	-X, r30
     e34:	12 97       	sbiw	r26, 0x02	; 2
     e36:	4d 91       	ld	r20, X+
     e38:	5d 91       	ld	r21, X+
     e3a:	a4 0f       	add	r26, r20
     e3c:	b5 1f       	adc	r27, r21
     e3e:	ea 17       	cp	r30, r26
     e40:	fb 07       	cpc	r31, r27
     e42:	79 f4       	brne	.+30     	; 0xe62 <free+0xd2>
     e44:	80 81       	ld	r24, Z
     e46:	91 81       	ldd	r25, Z+1	; 0x01
     e48:	84 0f       	add	r24, r20
     e4a:	95 1f       	adc	r25, r21
     e4c:	02 96       	adiw	r24, 0x02	; 2
     e4e:	d9 01       	movw	r26, r18
     e50:	11 96       	adiw	r26, 0x01	; 1
     e52:	9c 93       	st	X, r25
     e54:	8e 93       	st	-X, r24
     e56:	82 81       	ldd	r24, Z+2	; 0x02
     e58:	93 81       	ldd	r25, Z+3	; 0x03
     e5a:	13 96       	adiw	r26, 0x03	; 3
     e5c:	9c 93       	st	X, r25
     e5e:	8e 93       	st	-X, r24
     e60:	12 97       	sbiw	r26, 0x02	; 2
     e62:	e0 e0       	ldi	r30, 0x00	; 0
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	8a 81       	ldd	r24, Y+2	; 0x02
     e68:	9b 81       	ldd	r25, Y+3	; 0x03
     e6a:	00 97       	sbiw	r24, 0x00	; 0
     e6c:	19 f0       	breq	.+6      	; 0xe74 <free+0xe4>
     e6e:	fe 01       	movw	r30, r28
     e70:	ec 01       	movw	r28, r24
     e72:	f9 cf       	rjmp	.-14     	; 0xe66 <free+0xd6>
     e74:	ce 01       	movw	r24, r28
     e76:	02 96       	adiw	r24, 0x02	; 2
     e78:	28 81       	ld	r18, Y
     e7a:	39 81       	ldd	r19, Y+1	; 0x01
     e7c:	82 0f       	add	r24, r18
     e7e:	93 1f       	adc	r25, r19
     e80:	20 91 68 01 	lds	r18, 0x0168
     e84:	30 91 69 01 	lds	r19, 0x0169
     e88:	28 17       	cp	r18, r24
     e8a:	39 07       	cpc	r19, r25
     e8c:	69 f4       	brne	.+26     	; 0xea8 <free+0x118>
     e8e:	30 97       	sbiw	r30, 0x00	; 0
     e90:	29 f4       	brne	.+10     	; 0xe9c <free+0x10c>
     e92:	10 92 6b 01 	sts	0x016B, r1
     e96:	10 92 6a 01 	sts	0x016A, r1
     e9a:	02 c0       	rjmp	.+4      	; 0xea0 <free+0x110>
     e9c:	13 82       	std	Z+3, r1	; 0x03
     e9e:	12 82       	std	Z+2, r1	; 0x02
     ea0:	d0 93 69 01 	sts	0x0169, r29
     ea4:	c0 93 68 01 	sts	0x0168, r28
     ea8:	df 91       	pop	r29
     eaa:	cf 91       	pop	r28
     eac:	08 95       	ret

00000eae <fdevopen>:
     eae:	0f 93       	push	r16
     eb0:	1f 93       	push	r17
     eb2:	cf 93       	push	r28
     eb4:	df 93       	push	r29
     eb6:	ec 01       	movw	r28, r24
     eb8:	8b 01       	movw	r16, r22
     eba:	00 97       	sbiw	r24, 0x00	; 0
     ebc:	31 f4       	brne	.+12     	; 0xeca <fdevopen+0x1c>
     ebe:	61 15       	cp	r22, r1
     ec0:	71 05       	cpc	r23, r1
     ec2:	19 f4       	brne	.+6      	; 0xeca <fdevopen+0x1c>
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	38 c0       	rjmp	.+112    	; 0xf3a <fdevopen+0x8c>
     eca:	6e e0       	ldi	r22, 0x0E	; 14
     ecc:	70 e0       	ldi	r23, 0x00	; 0
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	0e 94 8f 09 	call	0x131e	; 0x131e <calloc>
     ed6:	fc 01       	movw	r30, r24
     ed8:	00 97       	sbiw	r24, 0x00	; 0
     eda:	a1 f3       	breq	.-24     	; 0xec4 <fdevopen+0x16>
     edc:	80 e8       	ldi	r24, 0x80	; 128
     ede:	83 83       	std	Z+3, r24	; 0x03
     ee0:	01 15       	cp	r16, r1
     ee2:	11 05       	cpc	r17, r1
     ee4:	71 f0       	breq	.+28     	; 0xf02 <fdevopen+0x54>
     ee6:	13 87       	std	Z+11, r17	; 0x0b
     ee8:	02 87       	std	Z+10, r16	; 0x0a
     eea:	81 e8       	ldi	r24, 0x81	; 129
     eec:	83 83       	std	Z+3, r24	; 0x03
     eee:	80 91 6c 01 	lds	r24, 0x016C
     ef2:	90 91 6d 01 	lds	r25, 0x016D
     ef6:	89 2b       	or	r24, r25
     ef8:	21 f4       	brne	.+8      	; 0xf02 <fdevopen+0x54>
     efa:	f0 93 6d 01 	sts	0x016D, r31
     efe:	e0 93 6c 01 	sts	0x016C, r30
     f02:	20 97       	sbiw	r28, 0x00	; 0
     f04:	c9 f0       	breq	.+50     	; 0xf38 <fdevopen+0x8a>
     f06:	d1 87       	std	Z+9, r29	; 0x09
     f08:	c0 87       	std	Z+8, r28	; 0x08
     f0a:	83 81       	ldd	r24, Z+3	; 0x03
     f0c:	82 60       	ori	r24, 0x02	; 2
     f0e:	83 83       	std	Z+3, r24	; 0x03
     f10:	80 91 6e 01 	lds	r24, 0x016E
     f14:	90 91 6f 01 	lds	r25, 0x016F
     f18:	89 2b       	or	r24, r25
     f1a:	71 f4       	brne	.+28     	; 0xf38 <fdevopen+0x8a>
     f1c:	f0 93 6f 01 	sts	0x016F, r31
     f20:	e0 93 6e 01 	sts	0x016E, r30
     f24:	80 91 70 01 	lds	r24, 0x0170
     f28:	90 91 71 01 	lds	r25, 0x0171
     f2c:	89 2b       	or	r24, r25
     f2e:	21 f4       	brne	.+8      	; 0xf38 <fdevopen+0x8a>
     f30:	f0 93 71 01 	sts	0x0171, r31
     f34:	e0 93 70 01 	sts	0x0170, r30
     f38:	cf 01       	movw	r24, r30
     f3a:	df 91       	pop	r29
     f3c:	cf 91       	pop	r28
     f3e:	1f 91       	pop	r17
     f40:	0f 91       	pop	r16
     f42:	08 95       	ret

00000f44 <printf>:
     f44:	a0 e0       	ldi	r26, 0x00	; 0
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	e8 ea       	ldi	r30, 0xA8	; 168
     f4a:	f7 e0       	ldi	r31, 0x07	; 7
     f4c:	0c 94 68 0a 	jmp	0x14d0	; 0x14d0 <__prologue_saves__+0x20>
     f50:	fe 01       	movw	r30, r28
     f52:	35 96       	adiw	r30, 0x05	; 5
     f54:	61 91       	ld	r22, Z+
     f56:	71 91       	ld	r23, Z+
     f58:	af 01       	movw	r20, r30
     f5a:	80 91 6e 01 	lds	r24, 0x016E
     f5e:	90 91 6f 01 	lds	r25, 0x016F
     f62:	0e 94 bd 07 	call	0xf7a	; 0xf7a <vfprintf>
     f66:	e2 e0       	ldi	r30, 0x02	; 2
     f68:	0c 94 84 0a 	jmp	0x1508	; 0x1508 <__epilogue_restores__+0x20>

00000f6c <putchar>:
     f6c:	60 91 6e 01 	lds	r22, 0x016E
     f70:	70 91 6f 01 	lds	r23, 0x016F
     f74:	0e 94 c8 09 	call	0x1390	; 0x1390 <fputc>
     f78:	08 95       	ret

00000f7a <vfprintf>:
     f7a:	ac e0       	ldi	r26, 0x0C	; 12
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	e3 ec       	ldi	r30, 0xC3	; 195
     f80:	f7 e0       	ldi	r31, 0x07	; 7
     f82:	0c 94 58 0a 	jmp	0x14b0	; 0x14b0 <__prologue_saves__>
     f86:	7c 01       	movw	r14, r24
     f88:	6b 01       	movw	r12, r22
     f8a:	8a 01       	movw	r16, r20
     f8c:	fc 01       	movw	r30, r24
     f8e:	17 82       	std	Z+7, r1	; 0x07
     f90:	16 82       	std	Z+6, r1	; 0x06
     f92:	83 81       	ldd	r24, Z+3	; 0x03
     f94:	81 ff       	sbrs	r24, 1
     f96:	bd c1       	rjmp	.+890    	; 0x1312 <vfprintf+0x398>
     f98:	ce 01       	movw	r24, r28
     f9a:	01 96       	adiw	r24, 0x01	; 1
     f9c:	4c 01       	movw	r8, r24
     f9e:	f7 01       	movw	r30, r14
     fa0:	93 81       	ldd	r25, Z+3	; 0x03
     fa2:	f6 01       	movw	r30, r12
     fa4:	93 fd       	sbrc	r25, 3
     fa6:	85 91       	lpm	r24, Z+
     fa8:	93 ff       	sbrs	r25, 3
     faa:	81 91       	ld	r24, Z+
     fac:	6f 01       	movw	r12, r30
     fae:	88 23       	and	r24, r24
     fb0:	09 f4       	brne	.+2      	; 0xfb4 <vfprintf+0x3a>
     fb2:	ab c1       	rjmp	.+854    	; 0x130a <vfprintf+0x390>
     fb4:	85 32       	cpi	r24, 0x25	; 37
     fb6:	39 f4       	brne	.+14     	; 0xfc6 <vfprintf+0x4c>
     fb8:	93 fd       	sbrc	r25, 3
     fba:	85 91       	lpm	r24, Z+
     fbc:	93 ff       	sbrs	r25, 3
     fbe:	81 91       	ld	r24, Z+
     fc0:	6f 01       	movw	r12, r30
     fc2:	85 32       	cpi	r24, 0x25	; 37
     fc4:	29 f4       	brne	.+10     	; 0xfd0 <vfprintf+0x56>
     fc6:	b7 01       	movw	r22, r14
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	0e 94 c8 09 	call	0x1390	; 0x1390 <fputc>
     fce:	e7 cf       	rjmp	.-50     	; 0xf9e <vfprintf+0x24>
     fd0:	51 2c       	mov	r5, r1
     fd2:	31 2c       	mov	r3, r1
     fd4:	20 e0       	ldi	r18, 0x00	; 0
     fd6:	20 32       	cpi	r18, 0x20	; 32
     fd8:	a0 f4       	brcc	.+40     	; 0x1002 <vfprintf+0x88>
     fda:	8b 32       	cpi	r24, 0x2B	; 43
     fdc:	69 f0       	breq	.+26     	; 0xff8 <vfprintf+0x7e>
     fde:	30 f4       	brcc	.+12     	; 0xfec <vfprintf+0x72>
     fe0:	80 32       	cpi	r24, 0x20	; 32
     fe2:	59 f0       	breq	.+22     	; 0xffa <vfprintf+0x80>
     fe4:	83 32       	cpi	r24, 0x23	; 35
     fe6:	69 f4       	brne	.+26     	; 0x1002 <vfprintf+0x88>
     fe8:	20 61       	ori	r18, 0x10	; 16
     fea:	2c c0       	rjmp	.+88     	; 0x1044 <vfprintf+0xca>
     fec:	8d 32       	cpi	r24, 0x2D	; 45
     fee:	39 f0       	breq	.+14     	; 0xffe <vfprintf+0x84>
     ff0:	80 33       	cpi	r24, 0x30	; 48
     ff2:	39 f4       	brne	.+14     	; 0x1002 <vfprintf+0x88>
     ff4:	21 60       	ori	r18, 0x01	; 1
     ff6:	26 c0       	rjmp	.+76     	; 0x1044 <vfprintf+0xca>
     ff8:	22 60       	ori	r18, 0x02	; 2
     ffa:	24 60       	ori	r18, 0x04	; 4
     ffc:	23 c0       	rjmp	.+70     	; 0x1044 <vfprintf+0xca>
     ffe:	28 60       	ori	r18, 0x08	; 8
    1000:	21 c0       	rjmp	.+66     	; 0x1044 <vfprintf+0xca>
    1002:	27 fd       	sbrc	r18, 7
    1004:	27 c0       	rjmp	.+78     	; 0x1054 <vfprintf+0xda>
    1006:	30 ed       	ldi	r19, 0xD0	; 208
    1008:	38 0f       	add	r19, r24
    100a:	3a 30       	cpi	r19, 0x0A	; 10
    100c:	78 f4       	brcc	.+30     	; 0x102c <vfprintf+0xb2>
    100e:	26 ff       	sbrs	r18, 6
    1010:	06 c0       	rjmp	.+12     	; 0x101e <vfprintf+0xa4>
    1012:	fa e0       	ldi	r31, 0x0A	; 10
    1014:	5f 9e       	mul	r5, r31
    1016:	30 0d       	add	r19, r0
    1018:	11 24       	eor	r1, r1
    101a:	53 2e       	mov	r5, r19
    101c:	13 c0       	rjmp	.+38     	; 0x1044 <vfprintf+0xca>
    101e:	8a e0       	ldi	r24, 0x0A	; 10
    1020:	38 9e       	mul	r3, r24
    1022:	30 0d       	add	r19, r0
    1024:	11 24       	eor	r1, r1
    1026:	33 2e       	mov	r3, r19
    1028:	20 62       	ori	r18, 0x20	; 32
    102a:	0c c0       	rjmp	.+24     	; 0x1044 <vfprintf+0xca>
    102c:	8e 32       	cpi	r24, 0x2E	; 46
    102e:	21 f4       	brne	.+8      	; 0x1038 <vfprintf+0xbe>
    1030:	26 fd       	sbrc	r18, 6
    1032:	6b c1       	rjmp	.+726    	; 0x130a <vfprintf+0x390>
    1034:	20 64       	ori	r18, 0x40	; 64
    1036:	06 c0       	rjmp	.+12     	; 0x1044 <vfprintf+0xca>
    1038:	8c 36       	cpi	r24, 0x6C	; 108
    103a:	11 f4       	brne	.+4      	; 0x1040 <vfprintf+0xc6>
    103c:	20 68       	ori	r18, 0x80	; 128
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <vfprintf+0xca>
    1040:	88 36       	cpi	r24, 0x68	; 104
    1042:	41 f4       	brne	.+16     	; 0x1054 <vfprintf+0xda>
    1044:	f6 01       	movw	r30, r12
    1046:	93 fd       	sbrc	r25, 3
    1048:	85 91       	lpm	r24, Z+
    104a:	93 ff       	sbrs	r25, 3
    104c:	81 91       	ld	r24, Z+
    104e:	6f 01       	movw	r12, r30
    1050:	81 11       	cpse	r24, r1
    1052:	c1 cf       	rjmp	.-126    	; 0xfd6 <vfprintf+0x5c>
    1054:	98 2f       	mov	r25, r24
    1056:	9f 7d       	andi	r25, 0xDF	; 223
    1058:	95 54       	subi	r25, 0x45	; 69
    105a:	93 30       	cpi	r25, 0x03	; 3
    105c:	28 f4       	brcc	.+10     	; 0x1068 <vfprintf+0xee>
    105e:	0c 5f       	subi	r16, 0xFC	; 252
    1060:	1f 4f       	sbci	r17, 0xFF	; 255
    1062:	ff e3       	ldi	r31, 0x3F	; 63
    1064:	f9 83       	std	Y+1, r31	; 0x01
    1066:	0d c0       	rjmp	.+26     	; 0x1082 <vfprintf+0x108>
    1068:	83 36       	cpi	r24, 0x63	; 99
    106a:	31 f0       	breq	.+12     	; 0x1078 <vfprintf+0xfe>
    106c:	83 37       	cpi	r24, 0x73	; 115
    106e:	71 f0       	breq	.+28     	; 0x108c <vfprintf+0x112>
    1070:	83 35       	cpi	r24, 0x53	; 83
    1072:	09 f0       	breq	.+2      	; 0x1076 <vfprintf+0xfc>
    1074:	5b c0       	rjmp	.+182    	; 0x112c <vfprintf+0x1b2>
    1076:	22 c0       	rjmp	.+68     	; 0x10bc <vfprintf+0x142>
    1078:	f8 01       	movw	r30, r16
    107a:	80 81       	ld	r24, Z
    107c:	89 83       	std	Y+1, r24	; 0x01
    107e:	0e 5f       	subi	r16, 0xFE	; 254
    1080:	1f 4f       	sbci	r17, 0xFF	; 255
    1082:	44 24       	eor	r4, r4
    1084:	43 94       	inc	r4
    1086:	51 2c       	mov	r5, r1
    1088:	54 01       	movw	r10, r8
    108a:	15 c0       	rjmp	.+42     	; 0x10b6 <vfprintf+0x13c>
    108c:	38 01       	movw	r6, r16
    108e:	f2 e0       	ldi	r31, 0x02	; 2
    1090:	6f 0e       	add	r6, r31
    1092:	71 1c       	adc	r7, r1
    1094:	f8 01       	movw	r30, r16
    1096:	a0 80       	ld	r10, Z
    1098:	b1 80       	ldd	r11, Z+1	; 0x01
    109a:	26 ff       	sbrs	r18, 6
    109c:	03 c0       	rjmp	.+6      	; 0x10a4 <vfprintf+0x12a>
    109e:	65 2d       	mov	r22, r5
    10a0:	70 e0       	ldi	r23, 0x00	; 0
    10a2:	02 c0       	rjmp	.+4      	; 0x10a8 <vfprintf+0x12e>
    10a4:	6f ef       	ldi	r22, 0xFF	; 255
    10a6:	7f ef       	ldi	r23, 0xFF	; 255
    10a8:	c5 01       	movw	r24, r10
    10aa:	2c 87       	std	Y+12, r18	; 0x0c
    10ac:	0e 94 bd 09 	call	0x137a	; 0x137a <strnlen>
    10b0:	2c 01       	movw	r4, r24
    10b2:	83 01       	movw	r16, r6
    10b4:	2c 85       	ldd	r18, Y+12	; 0x0c
    10b6:	2f 77       	andi	r18, 0x7F	; 127
    10b8:	22 2e       	mov	r2, r18
    10ba:	17 c0       	rjmp	.+46     	; 0x10ea <vfprintf+0x170>
    10bc:	38 01       	movw	r6, r16
    10be:	f2 e0       	ldi	r31, 0x02	; 2
    10c0:	6f 0e       	add	r6, r31
    10c2:	71 1c       	adc	r7, r1
    10c4:	f8 01       	movw	r30, r16
    10c6:	a0 80       	ld	r10, Z
    10c8:	b1 80       	ldd	r11, Z+1	; 0x01
    10ca:	26 ff       	sbrs	r18, 6
    10cc:	03 c0       	rjmp	.+6      	; 0x10d4 <vfprintf+0x15a>
    10ce:	65 2d       	mov	r22, r5
    10d0:	70 e0       	ldi	r23, 0x00	; 0
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <vfprintf+0x15e>
    10d4:	6f ef       	ldi	r22, 0xFF	; 255
    10d6:	7f ef       	ldi	r23, 0xFF	; 255
    10d8:	c5 01       	movw	r24, r10
    10da:	2c 87       	std	Y+12, r18	; 0x0c
    10dc:	0e 94 ab 09 	call	0x1356	; 0x1356 <strnlen_P>
    10e0:	2c 01       	movw	r4, r24
    10e2:	2c 85       	ldd	r18, Y+12	; 0x0c
    10e4:	20 68       	ori	r18, 0x80	; 128
    10e6:	22 2e       	mov	r2, r18
    10e8:	83 01       	movw	r16, r6
    10ea:	23 fc       	sbrc	r2, 3
    10ec:	1b c0       	rjmp	.+54     	; 0x1124 <vfprintf+0x1aa>
    10ee:	83 2d       	mov	r24, r3
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	48 16       	cp	r4, r24
    10f4:	59 06       	cpc	r5, r25
    10f6:	b0 f4       	brcc	.+44     	; 0x1124 <vfprintf+0x1aa>
    10f8:	b7 01       	movw	r22, r14
    10fa:	80 e2       	ldi	r24, 0x20	; 32
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	0e 94 c8 09 	call	0x1390	; 0x1390 <fputc>
    1102:	3a 94       	dec	r3
    1104:	f4 cf       	rjmp	.-24     	; 0x10ee <vfprintf+0x174>
    1106:	f5 01       	movw	r30, r10
    1108:	27 fc       	sbrc	r2, 7
    110a:	85 91       	lpm	r24, Z+
    110c:	27 fe       	sbrs	r2, 7
    110e:	81 91       	ld	r24, Z+
    1110:	5f 01       	movw	r10, r30
    1112:	b7 01       	movw	r22, r14
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	0e 94 c8 09 	call	0x1390	; 0x1390 <fputc>
    111a:	31 10       	cpse	r3, r1
    111c:	3a 94       	dec	r3
    111e:	f1 e0       	ldi	r31, 0x01	; 1
    1120:	4f 1a       	sub	r4, r31
    1122:	51 08       	sbc	r5, r1
    1124:	41 14       	cp	r4, r1
    1126:	51 04       	cpc	r5, r1
    1128:	71 f7       	brne	.-36     	; 0x1106 <vfprintf+0x18c>
    112a:	e5 c0       	rjmp	.+458    	; 0x12f6 <vfprintf+0x37c>
    112c:	84 36       	cpi	r24, 0x64	; 100
    112e:	11 f0       	breq	.+4      	; 0x1134 <vfprintf+0x1ba>
    1130:	89 36       	cpi	r24, 0x69	; 105
    1132:	39 f5       	brne	.+78     	; 0x1182 <vfprintf+0x208>
    1134:	f8 01       	movw	r30, r16
    1136:	27 ff       	sbrs	r18, 7
    1138:	07 c0       	rjmp	.+14     	; 0x1148 <vfprintf+0x1ce>
    113a:	60 81       	ld	r22, Z
    113c:	71 81       	ldd	r23, Z+1	; 0x01
    113e:	82 81       	ldd	r24, Z+2	; 0x02
    1140:	93 81       	ldd	r25, Z+3	; 0x03
    1142:	0c 5f       	subi	r16, 0xFC	; 252
    1144:	1f 4f       	sbci	r17, 0xFF	; 255
    1146:	08 c0       	rjmp	.+16     	; 0x1158 <vfprintf+0x1de>
    1148:	60 81       	ld	r22, Z
    114a:	71 81       	ldd	r23, Z+1	; 0x01
    114c:	88 27       	eor	r24, r24
    114e:	77 fd       	sbrc	r23, 7
    1150:	80 95       	com	r24
    1152:	98 2f       	mov	r25, r24
    1154:	0e 5f       	subi	r16, 0xFE	; 254
    1156:	1f 4f       	sbci	r17, 0xFF	; 255
    1158:	2f 76       	andi	r18, 0x6F	; 111
    115a:	b2 2e       	mov	r11, r18
    115c:	97 ff       	sbrs	r25, 7
    115e:	09 c0       	rjmp	.+18     	; 0x1172 <vfprintf+0x1f8>
    1160:	90 95       	com	r25
    1162:	80 95       	com	r24
    1164:	70 95       	com	r23
    1166:	61 95       	neg	r22
    1168:	7f 4f       	sbci	r23, 0xFF	; 255
    116a:	8f 4f       	sbci	r24, 0xFF	; 255
    116c:	9f 4f       	sbci	r25, 0xFF	; 255
    116e:	20 68       	ori	r18, 0x80	; 128
    1170:	b2 2e       	mov	r11, r18
    1172:	2a e0       	ldi	r18, 0x0A	; 10
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	a4 01       	movw	r20, r8
    1178:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <__ultoa_invert>
    117c:	a8 2e       	mov	r10, r24
    117e:	a8 18       	sub	r10, r8
    1180:	44 c0       	rjmp	.+136    	; 0x120a <vfprintf+0x290>
    1182:	85 37       	cpi	r24, 0x75	; 117
    1184:	29 f4       	brne	.+10     	; 0x1190 <vfprintf+0x216>
    1186:	2f 7e       	andi	r18, 0xEF	; 239
    1188:	b2 2e       	mov	r11, r18
    118a:	2a e0       	ldi	r18, 0x0A	; 10
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	25 c0       	rjmp	.+74     	; 0x11da <vfprintf+0x260>
    1190:	f2 2f       	mov	r31, r18
    1192:	f9 7f       	andi	r31, 0xF9	; 249
    1194:	bf 2e       	mov	r11, r31
    1196:	8f 36       	cpi	r24, 0x6F	; 111
    1198:	c1 f0       	breq	.+48     	; 0x11ca <vfprintf+0x250>
    119a:	18 f4       	brcc	.+6      	; 0x11a2 <vfprintf+0x228>
    119c:	88 35       	cpi	r24, 0x58	; 88
    119e:	79 f0       	breq	.+30     	; 0x11be <vfprintf+0x244>
    11a0:	b4 c0       	rjmp	.+360    	; 0x130a <vfprintf+0x390>
    11a2:	80 37       	cpi	r24, 0x70	; 112
    11a4:	19 f0       	breq	.+6      	; 0x11ac <vfprintf+0x232>
    11a6:	88 37       	cpi	r24, 0x78	; 120
    11a8:	21 f0       	breq	.+8      	; 0x11b2 <vfprintf+0x238>
    11aa:	af c0       	rjmp	.+350    	; 0x130a <vfprintf+0x390>
    11ac:	2f 2f       	mov	r18, r31
    11ae:	20 61       	ori	r18, 0x10	; 16
    11b0:	b2 2e       	mov	r11, r18
    11b2:	b4 fe       	sbrs	r11, 4
    11b4:	0d c0       	rjmp	.+26     	; 0x11d0 <vfprintf+0x256>
    11b6:	8b 2d       	mov	r24, r11
    11b8:	84 60       	ori	r24, 0x04	; 4
    11ba:	b8 2e       	mov	r11, r24
    11bc:	09 c0       	rjmp	.+18     	; 0x11d0 <vfprintf+0x256>
    11be:	24 ff       	sbrs	r18, 4
    11c0:	0a c0       	rjmp	.+20     	; 0x11d6 <vfprintf+0x25c>
    11c2:	9f 2f       	mov	r25, r31
    11c4:	96 60       	ori	r25, 0x06	; 6
    11c6:	b9 2e       	mov	r11, r25
    11c8:	06 c0       	rjmp	.+12     	; 0x11d6 <vfprintf+0x25c>
    11ca:	28 e0       	ldi	r18, 0x08	; 8
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	05 c0       	rjmp	.+10     	; 0x11da <vfprintf+0x260>
    11d0:	20 e1       	ldi	r18, 0x10	; 16
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	02 c0       	rjmp	.+4      	; 0x11da <vfprintf+0x260>
    11d6:	20 e1       	ldi	r18, 0x10	; 16
    11d8:	32 e0       	ldi	r19, 0x02	; 2
    11da:	f8 01       	movw	r30, r16
    11dc:	b7 fe       	sbrs	r11, 7
    11de:	07 c0       	rjmp	.+14     	; 0x11ee <vfprintf+0x274>
    11e0:	60 81       	ld	r22, Z
    11e2:	71 81       	ldd	r23, Z+1	; 0x01
    11e4:	82 81       	ldd	r24, Z+2	; 0x02
    11e6:	93 81       	ldd	r25, Z+3	; 0x03
    11e8:	0c 5f       	subi	r16, 0xFC	; 252
    11ea:	1f 4f       	sbci	r17, 0xFF	; 255
    11ec:	06 c0       	rjmp	.+12     	; 0x11fa <vfprintf+0x280>
    11ee:	60 81       	ld	r22, Z
    11f0:	71 81       	ldd	r23, Z+1	; 0x01
    11f2:	80 e0       	ldi	r24, 0x00	; 0
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	0e 5f       	subi	r16, 0xFE	; 254
    11f8:	1f 4f       	sbci	r17, 0xFF	; 255
    11fa:	a4 01       	movw	r20, r8
    11fc:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <__ultoa_invert>
    1200:	a8 2e       	mov	r10, r24
    1202:	a8 18       	sub	r10, r8
    1204:	fb 2d       	mov	r31, r11
    1206:	ff 77       	andi	r31, 0x7F	; 127
    1208:	bf 2e       	mov	r11, r31
    120a:	b6 fe       	sbrs	r11, 6
    120c:	0b c0       	rjmp	.+22     	; 0x1224 <vfprintf+0x2aa>
    120e:	2b 2d       	mov	r18, r11
    1210:	2e 7f       	andi	r18, 0xFE	; 254
    1212:	a5 14       	cp	r10, r5
    1214:	50 f4       	brcc	.+20     	; 0x122a <vfprintf+0x2b0>
    1216:	b4 fe       	sbrs	r11, 4
    1218:	0a c0       	rjmp	.+20     	; 0x122e <vfprintf+0x2b4>
    121a:	b2 fc       	sbrc	r11, 2
    121c:	08 c0       	rjmp	.+16     	; 0x122e <vfprintf+0x2b4>
    121e:	2b 2d       	mov	r18, r11
    1220:	2e 7e       	andi	r18, 0xEE	; 238
    1222:	05 c0       	rjmp	.+10     	; 0x122e <vfprintf+0x2b4>
    1224:	7a 2c       	mov	r7, r10
    1226:	2b 2d       	mov	r18, r11
    1228:	03 c0       	rjmp	.+6      	; 0x1230 <vfprintf+0x2b6>
    122a:	7a 2c       	mov	r7, r10
    122c:	01 c0       	rjmp	.+2      	; 0x1230 <vfprintf+0x2b6>
    122e:	75 2c       	mov	r7, r5
    1230:	24 ff       	sbrs	r18, 4
    1232:	0d c0       	rjmp	.+26     	; 0x124e <vfprintf+0x2d4>
    1234:	fe 01       	movw	r30, r28
    1236:	ea 0d       	add	r30, r10
    1238:	f1 1d       	adc	r31, r1
    123a:	80 81       	ld	r24, Z
    123c:	80 33       	cpi	r24, 0x30	; 48
    123e:	11 f4       	brne	.+4      	; 0x1244 <vfprintf+0x2ca>
    1240:	29 7e       	andi	r18, 0xE9	; 233
    1242:	09 c0       	rjmp	.+18     	; 0x1256 <vfprintf+0x2dc>
    1244:	22 ff       	sbrs	r18, 2
    1246:	06 c0       	rjmp	.+12     	; 0x1254 <vfprintf+0x2da>
    1248:	73 94       	inc	r7
    124a:	73 94       	inc	r7
    124c:	04 c0       	rjmp	.+8      	; 0x1256 <vfprintf+0x2dc>
    124e:	82 2f       	mov	r24, r18
    1250:	86 78       	andi	r24, 0x86	; 134
    1252:	09 f0       	breq	.+2      	; 0x1256 <vfprintf+0x2dc>
    1254:	73 94       	inc	r7
    1256:	23 fd       	sbrc	r18, 3
    1258:	13 c0       	rjmp	.+38     	; 0x1280 <vfprintf+0x306>
    125a:	20 ff       	sbrs	r18, 0
    125c:	06 c0       	rjmp	.+12     	; 0x126a <vfprintf+0x2f0>
    125e:	5a 2c       	mov	r5, r10
    1260:	73 14       	cp	r7, r3
    1262:	18 f4       	brcc	.+6      	; 0x126a <vfprintf+0x2f0>
    1264:	53 0c       	add	r5, r3
    1266:	57 18       	sub	r5, r7
    1268:	73 2c       	mov	r7, r3
    126a:	73 14       	cp	r7, r3
    126c:	68 f4       	brcc	.+26     	; 0x1288 <vfprintf+0x30e>
    126e:	b7 01       	movw	r22, r14
    1270:	80 e2       	ldi	r24, 0x20	; 32
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	2c 87       	std	Y+12, r18	; 0x0c
    1276:	0e 94 c8 09 	call	0x1390	; 0x1390 <fputc>
    127a:	73 94       	inc	r7
    127c:	2c 85       	ldd	r18, Y+12	; 0x0c
    127e:	f5 cf       	rjmp	.-22     	; 0x126a <vfprintf+0x2f0>
    1280:	73 14       	cp	r7, r3
    1282:	10 f4       	brcc	.+4      	; 0x1288 <vfprintf+0x30e>
    1284:	37 18       	sub	r3, r7
    1286:	01 c0       	rjmp	.+2      	; 0x128a <vfprintf+0x310>
    1288:	31 2c       	mov	r3, r1
    128a:	24 ff       	sbrs	r18, 4
    128c:	12 c0       	rjmp	.+36     	; 0x12b2 <vfprintf+0x338>
    128e:	b7 01       	movw	r22, r14
    1290:	80 e3       	ldi	r24, 0x30	; 48
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	2c 87       	std	Y+12, r18	; 0x0c
    1296:	0e 94 c8 09 	call	0x1390	; 0x1390 <fputc>
    129a:	2c 85       	ldd	r18, Y+12	; 0x0c
    129c:	22 ff       	sbrs	r18, 2
    129e:	17 c0       	rjmp	.+46     	; 0x12ce <vfprintf+0x354>
    12a0:	21 ff       	sbrs	r18, 1
    12a2:	03 c0       	rjmp	.+6      	; 0x12aa <vfprintf+0x330>
    12a4:	88 e5       	ldi	r24, 0x58	; 88
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	02 c0       	rjmp	.+4      	; 0x12ae <vfprintf+0x334>
    12aa:	88 e7       	ldi	r24, 0x78	; 120
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	b7 01       	movw	r22, r14
    12b0:	0c c0       	rjmp	.+24     	; 0x12ca <vfprintf+0x350>
    12b2:	82 2f       	mov	r24, r18
    12b4:	86 78       	andi	r24, 0x86	; 134
    12b6:	59 f0       	breq	.+22     	; 0x12ce <vfprintf+0x354>
    12b8:	21 fd       	sbrc	r18, 1
    12ba:	02 c0       	rjmp	.+4      	; 0x12c0 <vfprintf+0x346>
    12bc:	80 e2       	ldi	r24, 0x20	; 32
    12be:	01 c0       	rjmp	.+2      	; 0x12c2 <vfprintf+0x348>
    12c0:	8b e2       	ldi	r24, 0x2B	; 43
    12c2:	27 fd       	sbrc	r18, 7
    12c4:	8d e2       	ldi	r24, 0x2D	; 45
    12c6:	b7 01       	movw	r22, r14
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	0e 94 c8 09 	call	0x1390	; 0x1390 <fputc>
    12ce:	a5 14       	cp	r10, r5
    12d0:	38 f4       	brcc	.+14     	; 0x12e0 <vfprintf+0x366>
    12d2:	b7 01       	movw	r22, r14
    12d4:	80 e3       	ldi	r24, 0x30	; 48
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	0e 94 c8 09 	call	0x1390	; 0x1390 <fputc>
    12dc:	5a 94       	dec	r5
    12de:	f7 cf       	rjmp	.-18     	; 0x12ce <vfprintf+0x354>
    12e0:	aa 94       	dec	r10
    12e2:	f4 01       	movw	r30, r8
    12e4:	ea 0d       	add	r30, r10
    12e6:	f1 1d       	adc	r31, r1
    12e8:	80 81       	ld	r24, Z
    12ea:	b7 01       	movw	r22, r14
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	0e 94 c8 09 	call	0x1390	; 0x1390 <fputc>
    12f2:	a1 10       	cpse	r10, r1
    12f4:	f5 cf       	rjmp	.-22     	; 0x12e0 <vfprintf+0x366>
    12f6:	33 20       	and	r3, r3
    12f8:	09 f4       	brne	.+2      	; 0x12fc <vfprintf+0x382>
    12fa:	51 ce       	rjmp	.-862    	; 0xf9e <vfprintf+0x24>
    12fc:	b7 01       	movw	r22, r14
    12fe:	80 e2       	ldi	r24, 0x20	; 32
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	0e 94 c8 09 	call	0x1390	; 0x1390 <fputc>
    1306:	3a 94       	dec	r3
    1308:	f6 cf       	rjmp	.-20     	; 0x12f6 <vfprintf+0x37c>
    130a:	f7 01       	movw	r30, r14
    130c:	86 81       	ldd	r24, Z+6	; 0x06
    130e:	97 81       	ldd	r25, Z+7	; 0x07
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <vfprintf+0x39c>
    1312:	8f ef       	ldi	r24, 0xFF	; 255
    1314:	9f ef       	ldi	r25, 0xFF	; 255
    1316:	2c 96       	adiw	r28, 0x0c	; 12
    1318:	e2 e1       	ldi	r30, 0x12	; 18
    131a:	0c 94 74 0a 	jmp	0x14e8	; 0x14e8 <__epilogue_restores__>

0000131e <calloc>:
    131e:	0f 93       	push	r16
    1320:	1f 93       	push	r17
    1322:	cf 93       	push	r28
    1324:	df 93       	push	r29
    1326:	86 9f       	mul	r24, r22
    1328:	80 01       	movw	r16, r0
    132a:	87 9f       	mul	r24, r23
    132c:	10 0d       	add	r17, r0
    132e:	96 9f       	mul	r25, r22
    1330:	10 0d       	add	r17, r0
    1332:	11 24       	eor	r1, r1
    1334:	c8 01       	movw	r24, r16
    1336:	0e 94 30 06 	call	0xc60	; 0xc60 <malloc>
    133a:	ec 01       	movw	r28, r24
    133c:	00 97       	sbiw	r24, 0x00	; 0
    133e:	29 f0       	breq	.+10     	; 0x134a <calloc+0x2c>
    1340:	a8 01       	movw	r20, r16
    1342:	60 e0       	ldi	r22, 0x00	; 0
    1344:	70 e0       	ldi	r23, 0x00	; 0
    1346:	0e 94 b6 09 	call	0x136c	; 0x136c <memset>
    134a:	ce 01       	movw	r24, r28
    134c:	df 91       	pop	r29
    134e:	cf 91       	pop	r28
    1350:	1f 91       	pop	r17
    1352:	0f 91       	pop	r16
    1354:	08 95       	ret

00001356 <strnlen_P>:
    1356:	fc 01       	movw	r30, r24
    1358:	05 90       	lpm	r0, Z+
    135a:	61 50       	subi	r22, 0x01	; 1
    135c:	70 40       	sbci	r23, 0x00	; 0
    135e:	01 10       	cpse	r0, r1
    1360:	d8 f7       	brcc	.-10     	; 0x1358 <strnlen_P+0x2>
    1362:	80 95       	com	r24
    1364:	90 95       	com	r25
    1366:	8e 0f       	add	r24, r30
    1368:	9f 1f       	adc	r25, r31
    136a:	08 95       	ret

0000136c <memset>:
    136c:	dc 01       	movw	r26, r24
    136e:	01 c0       	rjmp	.+2      	; 0x1372 <memset+0x6>
    1370:	6d 93       	st	X+, r22
    1372:	41 50       	subi	r20, 0x01	; 1
    1374:	50 40       	sbci	r21, 0x00	; 0
    1376:	e0 f7       	brcc	.-8      	; 0x1370 <memset+0x4>
    1378:	08 95       	ret

0000137a <strnlen>:
    137a:	fc 01       	movw	r30, r24
    137c:	61 50       	subi	r22, 0x01	; 1
    137e:	70 40       	sbci	r23, 0x00	; 0
    1380:	01 90       	ld	r0, Z+
    1382:	01 10       	cpse	r0, r1
    1384:	d8 f7       	brcc	.-10     	; 0x137c <strnlen+0x2>
    1386:	80 95       	com	r24
    1388:	90 95       	com	r25
    138a:	8e 0f       	add	r24, r30
    138c:	9f 1f       	adc	r25, r31
    138e:	08 95       	ret

00001390 <fputc>:
    1390:	0f 93       	push	r16
    1392:	1f 93       	push	r17
    1394:	cf 93       	push	r28
    1396:	df 93       	push	r29
    1398:	18 2f       	mov	r17, r24
    139a:	09 2f       	mov	r16, r25
    139c:	eb 01       	movw	r28, r22
    139e:	8b 81       	ldd	r24, Y+3	; 0x03
    13a0:	81 fd       	sbrc	r24, 1
    13a2:	03 c0       	rjmp	.+6      	; 0x13aa <fputc+0x1a>
    13a4:	8f ef       	ldi	r24, 0xFF	; 255
    13a6:	9f ef       	ldi	r25, 0xFF	; 255
    13a8:	20 c0       	rjmp	.+64     	; 0x13ea <fputc+0x5a>
    13aa:	82 ff       	sbrs	r24, 2
    13ac:	10 c0       	rjmp	.+32     	; 0x13ce <fputc+0x3e>
    13ae:	4e 81       	ldd	r20, Y+6	; 0x06
    13b0:	5f 81       	ldd	r21, Y+7	; 0x07
    13b2:	2c 81       	ldd	r18, Y+4	; 0x04
    13b4:	3d 81       	ldd	r19, Y+5	; 0x05
    13b6:	42 17       	cp	r20, r18
    13b8:	53 07       	cpc	r21, r19
    13ba:	7c f4       	brge	.+30     	; 0x13da <fputc+0x4a>
    13bc:	e8 81       	ld	r30, Y
    13be:	f9 81       	ldd	r31, Y+1	; 0x01
    13c0:	9f 01       	movw	r18, r30
    13c2:	2f 5f       	subi	r18, 0xFF	; 255
    13c4:	3f 4f       	sbci	r19, 0xFF	; 255
    13c6:	39 83       	std	Y+1, r19	; 0x01
    13c8:	28 83       	st	Y, r18
    13ca:	10 83       	st	Z, r17
    13cc:	06 c0       	rjmp	.+12     	; 0x13da <fputc+0x4a>
    13ce:	e8 85       	ldd	r30, Y+8	; 0x08
    13d0:	f9 85       	ldd	r31, Y+9	; 0x09
    13d2:	81 2f       	mov	r24, r17
    13d4:	09 95       	icall
    13d6:	89 2b       	or	r24, r25
    13d8:	29 f7       	brne	.-54     	; 0x13a4 <fputc+0x14>
    13da:	2e 81       	ldd	r18, Y+6	; 0x06
    13dc:	3f 81       	ldd	r19, Y+7	; 0x07
    13de:	2f 5f       	subi	r18, 0xFF	; 255
    13e0:	3f 4f       	sbci	r19, 0xFF	; 255
    13e2:	3f 83       	std	Y+7, r19	; 0x07
    13e4:	2e 83       	std	Y+6, r18	; 0x06
    13e6:	81 2f       	mov	r24, r17
    13e8:	90 2f       	mov	r25, r16
    13ea:	df 91       	pop	r29
    13ec:	cf 91       	pop	r28
    13ee:	1f 91       	pop	r17
    13f0:	0f 91       	pop	r16
    13f2:	08 95       	ret

000013f4 <__ultoa_invert>:
    13f4:	fa 01       	movw	r30, r20
    13f6:	aa 27       	eor	r26, r26
    13f8:	28 30       	cpi	r18, 0x08	; 8
    13fa:	51 f1       	breq	.+84     	; 0x1450 <__ultoa_invert+0x5c>
    13fc:	20 31       	cpi	r18, 0x10	; 16
    13fe:	81 f1       	breq	.+96     	; 0x1460 <__ultoa_invert+0x6c>
    1400:	e8 94       	clt
    1402:	6f 93       	push	r22
    1404:	6e 7f       	andi	r22, 0xFE	; 254
    1406:	6e 5f       	subi	r22, 0xFE	; 254
    1408:	7f 4f       	sbci	r23, 0xFF	; 255
    140a:	8f 4f       	sbci	r24, 0xFF	; 255
    140c:	9f 4f       	sbci	r25, 0xFF	; 255
    140e:	af 4f       	sbci	r26, 0xFF	; 255
    1410:	b1 e0       	ldi	r27, 0x01	; 1
    1412:	3e d0       	rcall	.+124    	; 0x1490 <__ultoa_invert+0x9c>
    1414:	b4 e0       	ldi	r27, 0x04	; 4
    1416:	3c d0       	rcall	.+120    	; 0x1490 <__ultoa_invert+0x9c>
    1418:	67 0f       	add	r22, r23
    141a:	78 1f       	adc	r23, r24
    141c:	89 1f       	adc	r24, r25
    141e:	9a 1f       	adc	r25, r26
    1420:	a1 1d       	adc	r26, r1
    1422:	68 0f       	add	r22, r24
    1424:	79 1f       	adc	r23, r25
    1426:	8a 1f       	adc	r24, r26
    1428:	91 1d       	adc	r25, r1
    142a:	a1 1d       	adc	r26, r1
    142c:	6a 0f       	add	r22, r26
    142e:	71 1d       	adc	r23, r1
    1430:	81 1d       	adc	r24, r1
    1432:	91 1d       	adc	r25, r1
    1434:	a1 1d       	adc	r26, r1
    1436:	20 d0       	rcall	.+64     	; 0x1478 <__ultoa_invert+0x84>
    1438:	09 f4       	brne	.+2      	; 0x143c <__ultoa_invert+0x48>
    143a:	68 94       	set
    143c:	3f 91       	pop	r19
    143e:	2a e0       	ldi	r18, 0x0A	; 10
    1440:	26 9f       	mul	r18, r22
    1442:	11 24       	eor	r1, r1
    1444:	30 19       	sub	r19, r0
    1446:	30 5d       	subi	r19, 0xD0	; 208
    1448:	31 93       	st	Z+, r19
    144a:	de f6       	brtc	.-74     	; 0x1402 <__ultoa_invert+0xe>
    144c:	cf 01       	movw	r24, r30
    144e:	08 95       	ret
    1450:	46 2f       	mov	r20, r22
    1452:	47 70       	andi	r20, 0x07	; 7
    1454:	40 5d       	subi	r20, 0xD0	; 208
    1456:	41 93       	st	Z+, r20
    1458:	b3 e0       	ldi	r27, 0x03	; 3
    145a:	0f d0       	rcall	.+30     	; 0x147a <__ultoa_invert+0x86>
    145c:	c9 f7       	brne	.-14     	; 0x1450 <__ultoa_invert+0x5c>
    145e:	f6 cf       	rjmp	.-20     	; 0x144c <__ultoa_invert+0x58>
    1460:	46 2f       	mov	r20, r22
    1462:	4f 70       	andi	r20, 0x0F	; 15
    1464:	40 5d       	subi	r20, 0xD0	; 208
    1466:	4a 33       	cpi	r20, 0x3A	; 58
    1468:	18 f0       	brcs	.+6      	; 0x1470 <__ultoa_invert+0x7c>
    146a:	49 5d       	subi	r20, 0xD9	; 217
    146c:	31 fd       	sbrc	r19, 1
    146e:	40 52       	subi	r20, 0x20	; 32
    1470:	41 93       	st	Z+, r20
    1472:	02 d0       	rcall	.+4      	; 0x1478 <__ultoa_invert+0x84>
    1474:	a9 f7       	brne	.-22     	; 0x1460 <__ultoa_invert+0x6c>
    1476:	ea cf       	rjmp	.-44     	; 0x144c <__ultoa_invert+0x58>
    1478:	b4 e0       	ldi	r27, 0x04	; 4
    147a:	a6 95       	lsr	r26
    147c:	97 95       	ror	r25
    147e:	87 95       	ror	r24
    1480:	77 95       	ror	r23
    1482:	67 95       	ror	r22
    1484:	ba 95       	dec	r27
    1486:	c9 f7       	brne	.-14     	; 0x147a <__ultoa_invert+0x86>
    1488:	00 97       	sbiw	r24, 0x00	; 0
    148a:	61 05       	cpc	r22, r1
    148c:	71 05       	cpc	r23, r1
    148e:	08 95       	ret
    1490:	9b 01       	movw	r18, r22
    1492:	ac 01       	movw	r20, r24
    1494:	0a 2e       	mov	r0, r26
    1496:	06 94       	lsr	r0
    1498:	57 95       	ror	r21
    149a:	47 95       	ror	r20
    149c:	37 95       	ror	r19
    149e:	27 95       	ror	r18
    14a0:	ba 95       	dec	r27
    14a2:	c9 f7       	brne	.-14     	; 0x1496 <__ultoa_invert+0xa2>
    14a4:	62 0f       	add	r22, r18
    14a6:	73 1f       	adc	r23, r19
    14a8:	84 1f       	adc	r24, r20
    14aa:	95 1f       	adc	r25, r21
    14ac:	a0 1d       	adc	r26, r0
    14ae:	08 95       	ret

000014b0 <__prologue_saves__>:
    14b0:	2f 92       	push	r2
    14b2:	3f 92       	push	r3
    14b4:	4f 92       	push	r4
    14b6:	5f 92       	push	r5
    14b8:	6f 92       	push	r6
    14ba:	7f 92       	push	r7
    14bc:	8f 92       	push	r8
    14be:	9f 92       	push	r9
    14c0:	af 92       	push	r10
    14c2:	bf 92       	push	r11
    14c4:	cf 92       	push	r12
    14c6:	df 92       	push	r13
    14c8:	ef 92       	push	r14
    14ca:	ff 92       	push	r15
    14cc:	0f 93       	push	r16
    14ce:	1f 93       	push	r17
    14d0:	cf 93       	push	r28
    14d2:	df 93       	push	r29
    14d4:	cd b7       	in	r28, 0x3d	; 61
    14d6:	de b7       	in	r29, 0x3e	; 62
    14d8:	ca 1b       	sub	r28, r26
    14da:	db 0b       	sbc	r29, r27
    14dc:	0f b6       	in	r0, 0x3f	; 63
    14de:	f8 94       	cli
    14e0:	de bf       	out	0x3e, r29	; 62
    14e2:	0f be       	out	0x3f, r0	; 63
    14e4:	cd bf       	out	0x3d, r28	; 61
    14e6:	09 94       	ijmp

000014e8 <__epilogue_restores__>:
    14e8:	2a 88       	ldd	r2, Y+18	; 0x12
    14ea:	39 88       	ldd	r3, Y+17	; 0x11
    14ec:	48 88       	ldd	r4, Y+16	; 0x10
    14ee:	5f 84       	ldd	r5, Y+15	; 0x0f
    14f0:	6e 84       	ldd	r6, Y+14	; 0x0e
    14f2:	7d 84       	ldd	r7, Y+13	; 0x0d
    14f4:	8c 84       	ldd	r8, Y+12	; 0x0c
    14f6:	9b 84       	ldd	r9, Y+11	; 0x0b
    14f8:	aa 84       	ldd	r10, Y+10	; 0x0a
    14fa:	b9 84       	ldd	r11, Y+9	; 0x09
    14fc:	c8 84       	ldd	r12, Y+8	; 0x08
    14fe:	df 80       	ldd	r13, Y+7	; 0x07
    1500:	ee 80       	ldd	r14, Y+6	; 0x06
    1502:	fd 80       	ldd	r15, Y+5	; 0x05
    1504:	0c 81       	ldd	r16, Y+4	; 0x04
    1506:	1b 81       	ldd	r17, Y+3	; 0x03
    1508:	aa 81       	ldd	r26, Y+2	; 0x02
    150a:	b9 81       	ldd	r27, Y+1	; 0x01
    150c:	ce 0f       	add	r28, r30
    150e:	d1 1d       	adc	r29, r1
    1510:	0f b6       	in	r0, 0x3f	; 63
    1512:	f8 94       	cli
    1514:	de bf       	out	0x3e, r29	; 62
    1516:	0f be       	out	0x3f, r0	; 63
    1518:	cd bf       	out	0x3d, r28	; 61
    151a:	ed 01       	movw	r28, r26
    151c:	08 95       	ret

0000151e <_exit>:
    151e:	f8 94       	cli

00001520 <__stop_program>:
    1520:	ff cf       	rjmp	.-2      	; 0x1520 <__stop_program>
