
Node1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  00000b10  00000ba4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b10  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080014a  0080014a  00000bee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bee  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000238  00000000  00000000  00000c1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000024e9  00000000  00000000  00000e56  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c96  00000000  00000000  0000333f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b55  00000000  00000000  00003fd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004c8  00000000  00000000  00004b2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006a9  00000000  00000000  00004ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001036  00000000  00000000  0000569d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001d0  00000000  00000000  000066d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__ctors_end>
   4:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
   8:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
   c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  10:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  14:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  18:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  1c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  20:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  24:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  28:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  2c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  30:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  34:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  38:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  3c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  40:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  44:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  48:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  4c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  50:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  54:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  58:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  5c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  60:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  64:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  68:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>
  6c:	0c 94 13 01 	jmp	0x226	; 0x226 <__bad_interrupt>

00000070 <__trampolines_end>:
  70:	00 00       	nop
  72:	00 00       	nop
  74:	00 5c       	subi	r16, 0xC0	; 192
  76:	00 00       	nop
  78:	0c 00       	.word	0x000c	; ????
  7a:	0c 00       	.word	0x000c	; ????
  7c:	7c 28       	or	r7, r12
  7e:	7c 28       	or	r7, r12
  80:	58 dc       	rcall	.-1872   	; 0xfffff932 <__eeprom_end+0xff7ef932>
  82:	68 00       	.word	0x0068	; ????
  84:	24 10       	cpse	r2, r4
  86:	48 00       	.word	0x0048	; ????
  88:	28 54       	subi	r18, 0x48	; 72
  8a:	28 40       	sbci	r18, 0x08	; 8
  8c:	00 0c       	add	r0, r0
  8e:	00 00       	nop
  90:	00 78       	andi	r16, 0x80	; 128
  92:	84 00       	.word	0x0084	; ????
  94:	84 78       	andi	r24, 0x84	; 132
  96:	00 00       	nop
  98:	54 38       	cpi	r21, 0x84	; 132
  9a:	54 00       	.word	0x0054	; ????
  9c:	10 7c       	andi	r17, 0xC0	; 192
  9e:	10 00       	.word	0x0010	; ????
  a0:	80 40       	sbci	r24, 0x00	; 0
  a2:	00 00       	nop
  a4:	10 10       	cpse	r1, r0
  a6:	10 00       	.word	0x0010	; ????
  a8:	00 40       	sbci	r16, 0x00	; 0
  aa:	00 00       	nop
  ac:	60 10       	cpse	r6, r0
  ae:	0c 00       	.word	0x000c	; ????
  b0:	38 54       	subi	r19, 0x48	; 72
  b2:	38 00       	.word	0x0038	; ????
  b4:	48 7c       	andi	r20, 0xC8	; 200
  b6:	40 00       	.word	0x0040	; ????
  b8:	48 64       	ori	r20, 0x48	; 72
  ba:	58 00       	.word	0x0058	; ????
  bc:	44 54       	subi	r20, 0x44	; 68
  be:	2c 00       	.word	0x002c	; ????
  c0:	1c 10       	cpse	r1, r12
  c2:	7c 00       	.word	0x007c	; ????
  c4:	5c 54       	subi	r21, 0x4C	; 76
  c6:	24 00       	.word	0x0024	; ????
  c8:	38 54       	subi	r19, 0x48	; 72
  ca:	24 00       	.word	0x0024	; ????
  cc:	64 14       	cp	r6, r4
  ce:	0c 00       	.word	0x000c	; ????
  d0:	68 54       	subi	r22, 0x48	; 72
  d2:	2c 00       	.word	0x002c	; ????
  d4:	48 54       	subi	r20, 0x48	; 72
  d6:	38 00       	.word	0x0038	; ????
  d8:	00 48       	sbci	r16, 0x80	; 128
  da:	00 00       	nop
  dc:	80 48       	sbci	r24, 0x80	; 128
  de:	00 00       	nop
  e0:	10 28       	or	r1, r0
  e2:	44 00       	.word	0x0044	; ????
  e4:	28 28       	or	r2, r8
  e6:	28 00       	.word	0x0028	; ????
  e8:	44 28       	or	r4, r4
  ea:	10 00       	.word	0x0010	; ????
  ec:	04 54       	subi	r16, 0x44	; 68
  ee:	08 00       	.word	0x0008	; ????
  f0:	38 44       	sbci	r19, 0x48	; 72
  f2:	5c 00       	.word	0x005c	; ????
  f4:	78 14       	cp	r7, r8
  f6:	78 00       	.word	0x0078	; ????
  f8:	7c 54       	subi	r23, 0x4C	; 76
  fa:	28 00       	.word	0x0028	; ????
  fc:	38 44       	sbci	r19, 0x48	; 72
  fe:	28 00       	.word	0x0028	; ????
 100:	7c 44       	sbci	r23, 0x4C	; 76
 102:	38 00       	.word	0x0038	; ????
 104:	7c 54       	subi	r23, 0x4C	; 76
 106:	44 00       	.word	0x0044	; ????
 108:	7c 14       	cp	r7, r12
 10a:	04 00       	.word	0x0004	; ????
 10c:	38 44       	sbci	r19, 0x48	; 72
 10e:	74 00       	.word	0x0074	; ????
 110:	7c 10       	cpse	r7, r12
 112:	7c 00       	.word	0x007c	; ????
 114:	44 7c       	andi	r20, 0xC4	; 196
 116:	44 00       	.word	0x0044	; ????
 118:	20 40       	sbci	r18, 0x00	; 0
 11a:	3c 00       	.word	0x003c	; ????
 11c:	7c 10       	cpse	r7, r12
 11e:	6c 00       	.word	0x006c	; ????
 120:	7c 40       	sbci	r23, 0x0C	; 12
 122:	40 00       	.word	0x0040	; ????
 124:	7c 18       	sub	r7, r12
 126:	7c 00       	.word	0x007c	; ????
 128:	78 10       	cpse	r7, r8
 12a:	3c 00       	.word	0x003c	; ????
 12c:	38 44       	sbci	r19, 0x48	; 72
 12e:	38 00       	.word	0x0038	; ????
 130:	7c 14       	cp	r7, r12
 132:	08 00       	.word	0x0008	; ????
 134:	38 44       	sbci	r19, 0x48	; 72
 136:	b8 00       	.word	0x00b8	; ????
 138:	7c 14       	cp	r7, r12
 13a:	68 00       	.word	0x0068	; ????
 13c:	48 54       	subi	r20, 0x48	; 72
 13e:	24 00       	.word	0x0024	; ????
 140:	04 7c       	andi	r16, 0xC4	; 196
 142:	04 00       	.word	0x0004	; ????
 144:	7c 40       	sbci	r23, 0x0C	; 12
 146:	7c 00       	.word	0x007c	; ????
 148:	3c 60       	ori	r19, 0x0C	; 12
 14a:	3c 00       	.word	0x003c	; ????
 14c:	7c 30       	cpi	r23, 0x0C	; 12
 14e:	7c 00       	.word	0x007c	; ????
 150:	6c 10       	cpse	r6, r12
 152:	6c 00       	.word	0x006c	; ????
 154:	0c 70       	andi	r16, 0x0C	; 12
 156:	0c 00       	.word	0x000c	; ????
 158:	64 54       	subi	r22, 0x44	; 68
 15a:	4c 00       	.word	0x004c	; ????
 15c:	00 7c       	andi	r16, 0xC0	; 192
 15e:	44 00       	.word	0x0044	; ????
 160:	0c 10       	cpse	r0, r12
 162:	60 00       	.word	0x0060	; ????
 164:	44 7c       	andi	r20, 0xC4	; 196
 166:	00 00       	nop
 168:	08 04       	cpc	r0, r8
 16a:	08 00       	.word	0x0008	; ????
 16c:	80 80       	ld	r8, Z
 16e:	80 00       	.word	0x0080	; ????
 170:	00 04       	cpc	r0, r0
 172:	08 00       	.word	0x0008	; ????
 174:	30 48       	sbci	r19, 0x80	; 128
 176:	78 00       	.word	0x0078	; ????
 178:	7c 48       	sbci	r23, 0x8C	; 140
 17a:	30 00       	.word	0x0030	; ????
 17c:	30 48       	sbci	r19, 0x80	; 128
 17e:	48 00       	.word	0x0048	; ????
 180:	30 48       	sbci	r19, 0x80	; 128
 182:	7c 00       	.word	0x007c	; ????
 184:	30 68       	ori	r19, 0x80	; 128
 186:	50 00       	.word	0x0050	; ????
 188:	10 78       	andi	r17, 0x80	; 128
 18a:	14 00       	.word	0x0014	; ????
 18c:	90 a8       	ldd	r9, Z+48	; 0x30
 18e:	78 00       	.word	0x0078	; ????
 190:	7c 08       	sbc	r7, r12
 192:	70 00       	.word	0x0070	; ????
 194:	50 74       	andi	r21, 0x40	; 64
 196:	40 00       	.word	0x0040	; ????
 198:	80 80       	ld	r8, Z
 19a:	74 00       	.word	0x0074	; ????
 19c:	7c 10       	cpse	r7, r12
 19e:	68 00       	.word	0x0068	; ????
 1a0:	44 7c       	andi	r20, 0xC4	; 196
 1a2:	40 00       	.word	0x0040	; ????
 1a4:	78 10       	cpse	r7, r8
 1a6:	78 00       	.word	0x0078	; ????
 1a8:	78 08       	sbc	r7, r8
 1aa:	70 00       	.word	0x0070	; ????
 1ac:	30 48       	sbci	r19, 0x80	; 128
 1ae:	30 00       	.word	0x0030	; ????
 1b0:	f8 28       	or	r15, r8
 1b2:	10 00       	.word	0x0010	; ????
 1b4:	30 48       	sbci	r19, 0x80	; 128
 1b6:	f8 00       	.word	0x00f8	; ????
 1b8:	78 10       	cpse	r7, r8
 1ba:	08 00       	.word	0x0008	; ????
 1bc:	50 58       	subi	r21, 0x80	; 128
 1be:	28 00       	.word	0x0028	; ????
 1c0:	08 3c       	cpi	r16, 0xC8	; 200
 1c2:	48 00       	.word	0x0048	; ????
 1c4:	38 40       	sbci	r19, 0x08	; 8
 1c6:	78 00       	.word	0x0078	; ????
 1c8:	38 40       	sbci	r19, 0x08	; 8
 1ca:	38 00       	.word	0x0038	; ????
 1cc:	78 20       	and	r7, r8
 1ce:	78 00       	.word	0x0078	; ????
 1d0:	48 30       	cpi	r20, 0x08	; 8
 1d2:	48 00       	.word	0x0048	; ????
 1d4:	98 a0       	ldd	r9, Y+32	; 0x20
 1d6:	78 00       	.word	0x0078	; ????
 1d8:	48 68       	ori	r20, 0x88	; 136
 1da:	58 00       	.word	0x0058	; ????
 1dc:	10 78       	andi	r17, 0x80	; 128
 1de:	84 00       	.word	0x0084	; ????
 1e0:	00 7c       	andi	r16, 0xC0	; 192
 1e2:	00 00       	nop
 1e4:	84 78       	andi	r24, 0x84	; 132
 1e6:	10 00       	.word	0x0010	; ????
 1e8:	08 04       	cpc	r0, r8
 1ea:	08 04       	cpc	r0, r8

000001ec <__ctors_end>:
 1ec:	11 24       	eor	r1, r1
 1ee:	1f be       	out	0x3f, r1	; 63
 1f0:	cf ef       	ldi	r28, 0xFF	; 255
 1f2:	d4 e0       	ldi	r29, 0x04	; 4
 1f4:	de bf       	out	0x3e, r29	; 62
 1f6:	cd bf       	out	0x3d, r28	; 61

000001f8 <__do_copy_data>:
 1f8:	11 e0       	ldi	r17, 0x01	; 1
 1fa:	a0 e0       	ldi	r26, 0x00	; 0
 1fc:	b1 e0       	ldi	r27, 0x01	; 1
 1fe:	e0 e1       	ldi	r30, 0x10	; 16
 200:	fb e0       	ldi	r31, 0x0B	; 11
 202:	02 c0       	rjmp	.+4      	; 0x208 <__do_copy_data+0x10>
 204:	05 90       	lpm	r0, Z+
 206:	0d 92       	st	X+, r0
 208:	aa 34       	cpi	r26, 0x4A	; 74
 20a:	b1 07       	cpc	r27, r17
 20c:	d9 f7       	brne	.-10     	; 0x204 <__do_copy_data+0xc>

0000020e <__do_clear_bss>:
 20e:	21 e0       	ldi	r18, 0x01	; 1
 210:	aa e4       	ldi	r26, 0x4A	; 74
 212:	b1 e0       	ldi	r27, 0x01	; 1
 214:	01 c0       	rjmp	.+2      	; 0x218 <.do_clear_bss_start>

00000216 <.do_clear_bss_loop>:
 216:	1d 92       	st	X+, r1

00000218 <.do_clear_bss_start>:
 218:	a4 35       	cpi	r26, 0x54	; 84
 21a:	b2 07       	cpc	r27, r18
 21c:	e1 f7       	brne	.-8      	; 0x216 <.do_clear_bss_loop>
 21e:	0e 94 4a 02 	call	0x494	; 0x494 <main>
 222:	0c 94 86 05 	jmp	0xb0c	; 0xb0c <_exit>

00000226 <__bad_interrupt>:
 226:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000022a <ADC_read>:
#include <util/delay.h>
#include "adc.h"

uint8_t ADC_read(DeviceType device){
	volatile char *adc = (char *) 0x1400;
	switch (device) {
 22a:	82 30       	cpi	r24, 0x02	; 2
 22c:	69 f0       	breq	.+26     	; 0x248 <ADC_read+0x1e>
 22e:	18 f4       	brcc	.+6      	; 0x236 <ADC_read+0xc>
 230:	81 30       	cpi	r24, 0x01	; 1
 232:	31 f0       	breq	.+12     	; 0x240 <ADC_read+0x16>
 234:	14 c0       	rjmp	.+40     	; 0x25e <ADC_read+0x34>
 236:	83 30       	cpi	r24, 0x03	; 3
 238:	59 f0       	breq	.+22     	; 0x250 <ADC_read+0x26>
 23a:	84 30       	cpi	r24, 0x04	; 4
 23c:	69 f0       	breq	.+26     	; 0x258 <ADC_read+0x2e>
 23e:	0f c0       	rjmp	.+30     	; 0x25e <ADC_read+0x34>
		case JOYAXIS1:
			/* Select CH1 */
			adc[0] = 0b00000100;
 240:	84 e0       	ldi	r24, 0x04	; 4
 242:	80 93 00 14 	sts	0x1400, r24
			break;
 246:	0b c0       	rjmp	.+22     	; 0x25e <ADC_read+0x34>
		
		case JOYAXIS2:
			/* Select CH2 */
			adc[0] = 0b00000101;
 248:	85 e0       	ldi	r24, 0x05	; 5
 24a:	80 93 00 14 	sts	0x1400, r24
			break;
 24e:	07 c0       	rjmp	.+14     	; 0x25e <ADC_read+0x34>
		
		case LSLIDER:
			/* Select CH3 */
			adc[0] = 0b00000110;
 250:	86 e0       	ldi	r24, 0x06	; 6
 252:	80 93 00 14 	sts	0x1400, r24
			break;
 256:	03 c0       	rjmp	.+6      	; 0x25e <ADC_read+0x34>
		
		case RSLIDER:
			/* Select CH4 */
			adc[0] = 0b00000111;
 258:	87 e0       	ldi	r24, 0x07	; 7
 25a:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 25e:	2c ec       	ldi	r18, 0xCC	; 204
 260:	8c e0       	ldi	r24, 0x0C	; 12
 262:	91 e0       	ldi	r25, 0x01	; 1
 264:	21 50       	subi	r18, 0x01	; 1
 266:	80 40       	sbci	r24, 0x00	; 0
 268:	90 40       	sbci	r25, 0x00	; 0
 26a:	e1 f7       	brne	.-8      	; 0x264 <ADC_read+0x3a>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <ADC_read+0x44>
		
		default:
			break;
	}
	_delay_ms(70);
	return adc[0];
 26e:	80 91 00 14 	lds	r24, 0x1400
 272:	08 95       	ret

00000274 <CAN_init>:

#include "can.h"

void CAN_init(void)
{
	MCP_init();
 274:	0e 94 38 02 	call	0x470	; 0x470 <MCP_init>
 278:	08 95       	ret

0000027a <CAN_message_send>:
}

/* High level function for sending a message on the CAN bus */
void CAN_message_send(can_message_t* msg)
{
 27a:	1f 93       	push	r17
 27c:	cf 93       	push	r28
 27e:	df 93       	push	r29
 280:	ec 01       	movw	r28, r24
	/* Only transmit buffer TXB0 is used */
	
	/* Loop until TXREQ is cleared */
	uint8_t status = MCP_read_status();
 282:	0e 94 10 02 	call	0x420	; 0x420 <MCP_read_status>
	uint8_t TXREQ = (status & (1 << 2));
	while (TXREQ) {
 286:	82 ff       	sbrs	r24, 2
 288:	04 c0       	rjmp	.+8      	; 0x292 <CAN_message_send+0x18>
		status = MCP_read_status();
 28a:	0e 94 10 02 	call	0x420	; 0x420 <MCP_read_status>
	/* Only transmit buffer TXB0 is used */
	
	/* Loop until TXREQ is cleared */
	uint8_t status = MCP_read_status();
	uint8_t TXREQ = (status & (1 << 2));
	while (TXREQ) {
 28e:	82 fd       	sbrc	r24, 2
 290:	fc cf       	rjmp	.-8      	; 0x28a <CAN_message_send+0x10>
		status = MCP_read_status();
		TXREQ = (status & (1 << 2));
	}
	
	/* Set message ID, standard mode*/
	MCP_write(MCP_TXB0CTRL + 1, 0); // High level identifier
 292:	60 e0       	ldi	r22, 0x00	; 0
 294:	81 e3       	ldi	r24, 0x31	; 49
 296:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <MCP_write>
	MCP_write(MCP_TXB0CTRL + 2, (msg->id << 5)); // Low level identifier
 29a:	68 81       	ld	r22, Y
 29c:	62 95       	swap	r22
 29e:	66 0f       	add	r22, r22
 2a0:	60 7e       	andi	r22, 0xE0	; 224
 2a2:	82 e3       	ldi	r24, 0x32	; 50
 2a4:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <MCP_write>
	
	/* Set data length */
	MCP_write(MCP_TXB0CTRL + 5, msg->length & 0x0F);
 2a8:	6a 81       	ldd	r22, Y+2	; 0x02
 2aa:	6f 70       	andi	r22, 0x0F	; 15
 2ac:	85 e3       	ldi	r24, 0x35	; 53
 2ae:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <MCP_write>
	
	/* Load message data */
	for (uint8_t i = 0; i < msg->length; i++) {
 2b2:	8a 81       	ldd	r24, Y+2	; 0x02
 2b4:	88 23       	and	r24, r24
 2b6:	69 f0       	breq	.+26     	; 0x2d2 <CAN_message_send+0x58>
 2b8:	10 e0       	ldi	r17, 0x00	; 0
		MCP_write(MCP_TXB0CTRL + 6 + i, msg->data[i]);
 2ba:	fe 01       	movw	r30, r28
 2bc:	e1 0f       	add	r30, r17
 2be:	f1 1d       	adc	r31, r1
 2c0:	63 81       	ldd	r22, Z+3	; 0x03
 2c2:	86 e3       	ldi	r24, 0x36	; 54
 2c4:	81 0f       	add	r24, r17
 2c6:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <MCP_write>
	
	/* Set data length */
	MCP_write(MCP_TXB0CTRL + 5, msg->length & 0x0F);
	
	/* Load message data */
	for (uint8_t i = 0; i < msg->length; i++) {
 2ca:	1f 5f       	subi	r17, 0xFF	; 255
 2cc:	8a 81       	ldd	r24, Y+2	; 0x02
 2ce:	18 17       	cp	r17, r24
 2d0:	a0 f3       	brcs	.-24     	; 0x2ba <CAN_message_send+0x40>
		MCP_write(MCP_TXB0CTRL + 6 + i, msg->data[i]);
	}
	
	/* Request to send contents of TXB0 */
	MCP_request_to_send(MCP_RTS_TX0);
 2d2:	81 e8       	ldi	r24, 0x81	; 129
 2d4:	0e 94 0b 02 	call	0x416	; 0x416 <MCP_request_to_send>
}
 2d8:	df 91       	pop	r29
 2da:	cf 91       	pop	r28
 2dc:	1f 91       	pop	r17
 2de:	08 95       	ret

000002e0 <JOYSTICK_init>:
#include "can.h"

void JOYSTICK_init(void)
{
	/* Set PB2 as input for button*/
	DDRB &= ~(1 << PB2);
 2e0:	ba 98       	cbi	0x17, 2	; 23
	PORTB &= (1 << PB2);
 2e2:	88 b3       	in	r24, 0x18	; 24
 2e4:	84 70       	andi	r24, 0x04	; 4
 2e6:	88 bb       	out	0x18, r24	; 24
 2e8:	08 95       	ret

000002ea <JOYSTICK_get_position>:
{
	
}

position_t JOYSTICK_get_position(void)
{
 2ea:	cf 93       	push	r28
	uint8_t x_value = ADC_read(JOYAXIS2);
 2ec:	82 e0       	ldi	r24, 0x02	; 2
 2ee:	0e 94 15 01 	call	0x22a	; 0x22a <ADC_read>
 2f2:	c8 2f       	mov	r28, r24
	uint8_t y_value = ADC_read(JOYAXIS1);
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	0e 94 15 01 	call	0x22a	; 0x22a <ADC_read>
	
	position_t position;
	position.x = x_value;
	position.y = y_value;
	return position;
}
 2fa:	6c 2f       	mov	r22, r28
 2fc:	78 2f       	mov	r23, r24
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	cf 91       	pop	r28
 304:	08 95       	ret

00000306 <JOYSTICK_get_direction>:

Direction JOYSTICK_get_direction(position_t pos)
{
	const uint8_t THRESHOLD = 64;
	
	if (pos.y < 127+THRESHOLD && pos.y > 127-THRESHOLD) {
 306:	80 ec       	ldi	r24, 0xC0	; 192
 308:	87 0f       	add	r24, r23
 30a:	8f 37       	cpi	r24, 0x7F	; 127
 30c:	48 f4       	brcc	.+18     	; 0x320 <JOYSTICK_get_direction+0x1a>
		if (pos.x < 127-THRESHOLD) {
 30e:	70 e0       	ldi	r23, 0x00	; 0
 310:	6f 33       	cpi	r22, 0x3F	; 63
 312:	71 05       	cpc	r23, r1
 314:	94 f0       	brlt	.+36     	; 0x33a <JOYSTICK_get_direction+0x34>
			return LEFT;
		} else if (pos.x > 127+THRESHOLD) {
 316:	60 3c       	cpi	r22, 0xC0	; 192
 318:	71 05       	cpc	r23, r1
 31a:	8c f4       	brge	.+34     	; 0x33e <JOYSTICK_get_direction+0x38>
			return DOWN;
		} else if (pos.y > 127+THRESHOLD) {
			return UP;
		}
	}
	return NEUTRAL;
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	08 95       	ret
			return LEFT;
		} else if (pos.x > 127+THRESHOLD) {
			return RIGHT;
		}
		
	} else if (pos.x < 127+THRESHOLD && pos.x > 127-THRESHOLD) {
 320:	60 54       	subi	r22, 0x40	; 64
 322:	6f 37       	cpi	r22, 0x7F	; 127
 324:	70 f4       	brcc	.+28     	; 0x342 <JOYSTICK_get_direction+0x3c>
		if (pos.y < 127-THRESHOLD) {
 326:	87 2f       	mov	r24, r23
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	8f 33       	cpi	r24, 0x3F	; 63
 32c:	91 05       	cpc	r25, r1
 32e:	5c f0       	brlt	.+22     	; 0x346 <JOYSTICK_get_direction+0x40>
			return DOWN;
		} else if (pos.y > 127+THRESHOLD) {
 330:	80 3c       	cpi	r24, 0xC0	; 192
 332:	91 05       	cpc	r25, r1
 334:	54 f4       	brge	.+20     	; 0x34a <JOYSTICK_get_direction+0x44>
			return UP;
		}
	}
	return NEUTRAL;
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	08 95       	ret
{
	const uint8_t THRESHOLD = 64;
	
	if (pos.y < 127+THRESHOLD && pos.y > 127-THRESHOLD) {
		if (pos.x < 127-THRESHOLD) {
			return LEFT;
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	08 95       	ret
		} else if (pos.x > 127+THRESHOLD) {
			return RIGHT;
 33e:	82 e0       	ldi	r24, 0x02	; 2
 340:	08 95       	ret
			return DOWN;
		} else if (pos.y > 127+THRESHOLD) {
			return UP;
		}
	}
	return NEUTRAL;
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	08 95       	ret
			return RIGHT;
		}
		
	} else if (pos.x < 127+THRESHOLD && pos.x > 127-THRESHOLD) {
		if (pos.y < 127-THRESHOLD) {
			return DOWN;
 346:	84 e0       	ldi	r24, 0x04	; 4
 348:	08 95       	ret
		} else if (pos.y > 127+THRESHOLD) {
			return UP;
 34a:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
	return NEUTRAL;
}
 34c:	08 95       	ret

0000034e <SLIDERS_get_positions>:
	int16_t percentValue = round((float)value / 127 * 100);
	return percentValue;
}

position_t SLIDERS_get_positions(void)
{
 34e:	cf 93       	push	r28
	uint8_t l_value = ADC_read(LSLIDER);
 350:	83 e0       	ldi	r24, 0x03	; 3
 352:	0e 94 15 01 	call	0x22a	; 0x22a <ADC_read>
 356:	c8 2f       	mov	r28, r24
	uint8_t r_value = ADC_read(RSLIDER);
 358:	84 e0       	ldi	r24, 0x04	; 4
 35a:	0e 94 15 01 	call	0x22a	; 0x22a <ADC_read>
 35e:	98 2f       	mov	r25, r24
 360:	e0 e0       	ldi	r30, 0x00	; 0
 362:	f0 ef       	ldi	r31, 0xF0	; 240
 364:	31 97       	sbiw	r30, 0x01	; 1
 366:	f1 f7       	brne	.-4      	; 0x364 <SLIDERS_get_positions+0x16>
	
	position_t pos;
	pos.l = l_value;
	pos.r = r_value;
	return pos;
}
 368:	60 e0       	ldi	r22, 0x00	; 0
 36a:	70 e0       	ldi	r23, 0x00	; 0
 36c:	8c 2f       	mov	r24, r28
 36e:	cf 91       	pop	r28
 370:	08 95       	ret

00000372 <JOYSTICK_read_button>:

uint8_t JOYSTICK_read_button(void)
{
	return (PINB & (1 << PB2)) == 0;
 372:	86 b3       	in	r24, 0x16	; 22
 374:	82 fb       	bst	r24, 2
 376:	88 27       	eor	r24, r24
 378:	80 f9       	bld	r24, 0
}
 37a:	91 e0       	ldi	r25, 0x01	; 1
 37c:	89 27       	eor	r24, r25
 37e:	08 95       	ret

00000380 <JOYSTICK_send_position>:

/* Sends a message containing position values 0-255 for joystick and sliders, and direction
	over the CAN bus.*/
void JOYSTICK_send_position()
{
 380:	ff 92       	push	r15
 382:	0f 93       	push	r16
 384:	1f 93       	push	r17
 386:	cf 93       	push	r28
 388:	df 93       	push	r29
 38a:	cd b7       	in	r28, 0x3d	; 61
 38c:	de b7       	in	r29, 0x3e	; 62
 38e:	2b 97       	sbiw	r28, 0x0b	; 11
 390:	0f b6       	in	r0, 0x3f	; 63
 392:	f8 94       	cli
 394:	de bf       	out	0x3e, r29	; 62
 396:	0f be       	out	0x3f, r0	; 63
 398:	cd bf       	out	0x3d, r28	; 61
	position_t joypos = JOYSTICK_get_position();
 39a:	0e 94 75 01 	call	0x2ea	; 0x2ea <JOYSTICK_get_position>
 39e:	06 2f       	mov	r16, r22
 3a0:	17 2f       	mov	r17, r23
	Direction joydir = JOYSTICK_get_direction(joypos);
 3a2:	0e 94 83 01 	call	0x306	; 0x306 <JOYSTICK_get_direction>
 3a6:	f8 2e       	mov	r15, r24
	position_t sliderpos = SLIDERS_get_positions();
 3a8:	0e 94 a7 01 	call	0x34e	; 0x34e <SLIDERS_get_positions>
	
	can_message_t can_message;
	can_message.data[0] = 'j';
 3ac:	2a e6       	ldi	r18, 0x6A	; 106
 3ae:	2c 83       	std	Y+4, r18	; 0x04
	can_message.data[1] = joydir;
 3b0:	fd 82       	std	Y+5, r15	; 0x05
	can_message.data[2] = joypos.x;
 3b2:	0e 83       	std	Y+6, r16	; 0x06
	can_message.data[3] = joypos.y;
 3b4:	1f 83       	std	Y+7, r17	; 0x07
	can_message.data[4] = sliderpos.l;
 3b6:	88 87       	std	Y+8, r24	; 0x08
	can_message.data[5] = sliderpos.r;
 3b8:	99 87       	std	Y+9, r25	; 0x09
	can_message.length = 6;
 3ba:	86 e0       	ldi	r24, 0x06	; 6
 3bc:	8b 83       	std	Y+3, r24	; 0x03
	can_message.id = 1;
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	9a 83       	std	Y+2, r25	; 0x02
 3c4:	89 83       	std	Y+1, r24	; 0x01
	
	//printf("msg_type: %i\n", can_message.data[0]);
	CAN_message_send(&can_message);
 3c6:	ce 01       	movw	r24, r28
 3c8:	01 96       	adiw	r24, 0x01	; 1
 3ca:	0e 94 3d 01 	call	0x27a	; 0x27a <CAN_message_send>
 3ce:	2b 96       	adiw	r28, 0x0b	; 11
 3d0:	0f b6       	in	r0, 0x3f	; 63
 3d2:	f8 94       	cli
 3d4:	de bf       	out	0x3e, r29	; 62
 3d6:	0f be       	out	0x3f, r0	; 63
 3d8:	cd bf       	out	0x3d, r28	; 61
 3da:	df 91       	pop	r29
 3dc:	cf 91       	pop	r28
 3de:	1f 91       	pop	r17
 3e0:	0f 91       	pop	r16
 3e2:	ff 90       	pop	r15
 3e4:	08 95       	ret

000003e6 <MCP_reset>:
	MCP_set_mode(MODE_NORMAL); // Sets normal operation mode
}

void MCP_reset(void)
{
	PORTB &= ~(1 << PB4);
 3e6:	c4 98       	cbi	0x18, 4	; 24
	SPI_master_transmit(MCP_RESET);
 3e8:	80 ec       	ldi	r24, 0xC0	; 192
 3ea:	0e 94 de 03 	call	0x7bc	; 0x7bc <SPI_master_transmit>
	PORTB |= (1 << PB4);
 3ee:	c4 9a       	sbi	0x18, 4	; 24
 3f0:	08 95       	ret

000003f2 <MCP_write>:
	PORTB |= (1 << PB4);
	return data;
}

void MCP_write(uint8_t addr, uint8_t data)
{
 3f2:	cf 93       	push	r28
 3f4:	df 93       	push	r29
 3f6:	d8 2f       	mov	r29, r24
 3f8:	c6 2f       	mov	r28, r22
	PORTB &= ~(1 << PB4);
 3fa:	c4 98       	cbi	0x18, 4	; 24
	SPI_master_transmit(MCP_WRITE);
 3fc:	82 e0       	ldi	r24, 0x02	; 2
 3fe:	0e 94 de 03 	call	0x7bc	; 0x7bc <SPI_master_transmit>
	SPI_master_transmit(addr);
 402:	8d 2f       	mov	r24, r29
 404:	0e 94 de 03 	call	0x7bc	; 0x7bc <SPI_master_transmit>
	SPI_master_transmit(data);
 408:	8c 2f       	mov	r24, r28
 40a:	0e 94 de 03 	call	0x7bc	; 0x7bc <SPI_master_transmit>
	PORTB |= (1 << PB4);
 40e:	c4 9a       	sbi	0x18, 4	; 24
}
 410:	df 91       	pop	r29
 412:	cf 91       	pop	r28
 414:	08 95       	ret

00000416 <MCP_request_to_send>:
}

/* Instructs controller to begin message transmission for the selected buffers */
void MCP_request_to_send(uint8_t buffer)
{
	PORTB &= ~(1 << PB4);
 416:	c4 98       	cbi	0x18, 4	; 24
	SPI_master_transmit(buffer);
 418:	0e 94 de 03 	call	0x7bc	; 0x7bc <SPI_master_transmit>
	PORTB |= (1 << PB4);
 41c:	c4 9a       	sbi	0x18, 4	; 24
 41e:	08 95       	ret

00000420 <MCP_read_status>:
}

/* Returns some status bits for transmit and receive functions */
uint8_t MCP_read_status(void)
{
	PORTB &= ~(1 << PB4);
 420:	c4 98       	cbi	0x18, 4	; 24
	SPI_master_transmit(MCP_READ_STATUS);
 422:	80 ea       	ldi	r24, 0xA0	; 160
 424:	0e 94 de 03 	call	0x7bc	; 0x7bc <SPI_master_transmit>
	SPI_master_transmit(0x00);
 428:	80 e0       	ldi	r24, 0x00	; 0
 42a:	0e 94 de 03 	call	0x7bc	; 0x7bc <SPI_master_transmit>
	char status = SPDR;
 42e:	8f b1       	in	r24, 0x0f	; 15
	PORTB |= (1 << PB4);
 430:	c4 9a       	sbi	0x18, 4	; 24
	return status;
}
 432:	08 95       	ret

00000434 <MCP_modify_bit>:
	MCP_modify_bit(MCP_CANCTRL, mask, mode);
}

/* Changes the value of the register bits specified by the mask */
void MCP_modify_bit(uint8_t addr, uint8_t mask, uint8_t data)
{
 434:	1f 93       	push	r17
 436:	cf 93       	push	r28
 438:	df 93       	push	r29
 43a:	18 2f       	mov	r17, r24
 43c:	d6 2f       	mov	r29, r22
 43e:	c4 2f       	mov	r28, r20
	PORTB &= ~(1 << PB4);
 440:	c4 98       	cbi	0x18, 4	; 24
	SPI_master_transmit(MCP_BITMOD);
 442:	85 e0       	ldi	r24, 0x05	; 5
 444:	0e 94 de 03 	call	0x7bc	; 0x7bc <SPI_master_transmit>
	SPI_master_transmit(addr);
 448:	81 2f       	mov	r24, r17
 44a:	0e 94 de 03 	call	0x7bc	; 0x7bc <SPI_master_transmit>
	SPI_master_transmit(mask);
 44e:	8d 2f       	mov	r24, r29
 450:	0e 94 de 03 	call	0x7bc	; 0x7bc <SPI_master_transmit>
	SPI_master_transmit(data);
 454:	8c 2f       	mov	r24, r28
 456:	0e 94 de 03 	call	0x7bc	; 0x7bc <SPI_master_transmit>
	PORTB |= (1 << PB4);
 45a:	c4 9a       	sbi	0x18, 4	; 24
 45c:	df 91       	pop	r29
 45e:	cf 91       	pop	r28
 460:	1f 91       	pop	r17
 462:	08 95       	ret

00000464 <MCP_set_mode>:

/* Set MCP mode of operation */
void MCP_set_mode(uint8_t mode)
{
	uint8_t mask = 0b11100000;
	MCP_modify_bit(MCP_CANCTRL, mask, mode);
 464:	48 2f       	mov	r20, r24
 466:	60 ee       	ldi	r22, 0xE0	; 224
 468:	8f e0       	ldi	r24, 0x0F	; 15
 46a:	0e 94 1a 02 	call	0x434	; 0x434 <MCP_modify_bit>
 46e:	08 95       	ret

00000470 <MCP_init>:

#include "mcp.h"

void MCP_init(void)
{
	SPI_master_init();
 470:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <SPI_master_init>
	MCP_reset();
 474:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <MCP_reset>
	
	MCP_modify_bit(MCP_RXB0CTRL, 0b01100000, 0xFF); // Turns masks/filters off for RX0
 478:	4f ef       	ldi	r20, 0xFF	; 255
 47a:	60 e6       	ldi	r22, 0x60	; 96
 47c:	80 e6       	ldi	r24, 0x60	; 96
 47e:	0e 94 1a 02 	call	0x434	; 0x434 <MCP_modify_bit>
	MCP_modify_bit(MCP_RXB1CTRL, 0b01100000, 0xFF); // Turns masks/filters off for RX1
 482:	4f ef       	ldi	r20, 0xFF	; 255
 484:	60 e6       	ldi	r22, 0x60	; 96
 486:	80 e7       	ldi	r24, 0x70	; 112
 488:	0e 94 1a 02 	call	0x434	; 0x434 <MCP_modify_bit>
	//MCP_set_mode(MODE_LOOPBACK); // Sets loopback operation mode for testing
	MCP_set_mode(MODE_NORMAL); // Sets normal operation mode
 48c:	80 e0       	ldi	r24, 0x00	; 0
 48e:	0e 94 32 02 	call	0x464	; 0x464 <MCP_set_mode>
 492:	08 95       	ret

00000494 <main>:
#include "can.h"

int main(void)
{
	/* Needs to be set when using external memory */
	MCUCR |= (1 << SRE);
 494:	85 b7       	in	r24, 0x35	; 53
 496:	80 68       	ori	r24, 0x80	; 128
 498:	85 bf       	out	0x35, r24	; 53

	fdevopen(USART_transmit, USART_receive); // Sets printf to serial port
 49a:	6d ee       	ldi	r22, 0xED	; 237
 49c:	73 e0       	ldi	r23, 0x03	; 3
 49e:	89 ee       	ldi	r24, 0xE9	; 233
 4a0:	93 e0       	ldi	r25, 0x03	; 3
 4a2:	0e 94 18 05 	call	0xa30	; 0xa30 <fdevopen>
	USART_init(MYUBBR);
 4a6:	8f e1       	ldi	r24, 0x1F	; 31
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <USART_init>
	OLED_init();
 4ae:	0e 94 c0 02 	call	0x580	; 0x580 <OLED_init>
	JOYSTICK_init();
 4b2:	0e 94 70 01 	call	0x2e0	; 0x2e0 <JOYSTICK_init>
	CAN_init();
 4b6:	0e 94 3a 01 	call	0x274	; 0x274 <CAN_init>
	
	OLED_pos(2,20);
 4ba:	64 e1       	ldi	r22, 0x14	; 20
 4bc:	82 e0       	ldi	r24, 0x02	; 2
 4be:	0e 94 a5 02 	call	0x54a	; 0x54a <OLED_pos>
	
	menuNode *menu = OLED_generate_menu();
 4c2:	0e 94 55 03 	call	0x6aa	; 0x6aa <OLED_generate_menu>
	OLED_print_menu(menu);
 4c6:	0e 94 99 03 	call	0x732	; 0x732 <OLED_print_menu>
	
	uint8_t currentRow = 1;
 4ca:	c1 e0       	ldi	r28, 0x01	; 1
				currentRow -= 1;
			}
			
		} else if (joydir == DOWN) {
			if (currentRow == 7) {
				currentRow = 1;
 4cc:	01 e0       	ldi	r16, 0x01	; 1
		joydir = JOYSTICK_get_direction(position);
		
		lastRow = currentRow;
		if (joydir == UP) {
			if (currentRow == 1) {
				currentRow = 7;
 4ce:	17 e0       	ldi	r17, 0x07	; 7
	Direction joydir = NEUTRAL;
	can_message_t received;
	
	while(1)
	{	
		JOYSTICK_send_position(); // Sends current position values over CAN
 4d0:	0e 94 c0 01 	call	0x380	; 0x380 <JOYSTICK_send_position>
		
		position_t position = JOYSTICK_get_position();
 4d4:	0e 94 75 01 	call	0x2ea	; 0x2ea <JOYSTICK_get_position>
		joydir = JOYSTICK_get_direction(position);
 4d8:	0e 94 83 01 	call	0x306	; 0x306 <JOYSTICK_get_direction>
		
		lastRow = currentRow;
		if (joydir == UP) {
 4dc:	83 30       	cpi	r24, 0x03	; 3
 4de:	29 f4       	brne	.+10     	; 0x4ea <main+0x56>
			if (currentRow == 1) {
 4e0:	c1 30       	cpi	r28, 0x01	; 1
 4e2:	51 f0       	breq	.+20     	; 0x4f8 <main+0x64>
				currentRow = 7;
			} else {
				currentRow -= 1;
 4e4:	df ef       	ldi	r29, 0xFF	; 255
 4e6:	dc 0f       	add	r29, r28
 4e8:	0c c0       	rjmp	.+24     	; 0x502 <__stack+0x3>
			}
			
		} else if (joydir == DOWN) {
 4ea:	84 30       	cpi	r24, 0x04	; 4
 4ec:	39 f4       	brne	.+14     	; 0x4fc <main+0x68>
			if (currentRow == 7) {
 4ee:	c7 30       	cpi	r28, 0x07	; 7
 4f0:	39 f0       	breq	.+14     	; 0x500 <__stack+0x1>
				currentRow = 1;
			} else {
				currentRow += 1;
 4f2:	d1 e0       	ldi	r29, 0x01	; 1
 4f4:	dc 0f       	add	r29, r28
 4f6:	05 c0       	rjmp	.+10     	; 0x502 <__stack+0x3>
		joydir = JOYSTICK_get_direction(position);
		
		lastRow = currentRow;
		if (joydir == UP) {
			if (currentRow == 1) {
				currentRow = 7;
 4f8:	d1 2f       	mov	r29, r17
 4fa:	03 c0       	rjmp	.+6      	; 0x502 <__stack+0x3>
 4fc:	dc 2f       	mov	r29, r28
 4fe:	01 c0       	rjmp	.+2      	; 0x502 <__stack+0x3>
				currentRow -= 1;
			}
			
		} else if (joydir == DOWN) {
			if (currentRow == 7) {
				currentRow = 1;
 500:	d0 2f       	mov	r29, r16
			} else {
				currentRow += 1;
			}
		}
		
		OLED_move_arrow(currentRow, 20, lastRow, 20);
 502:	24 e1       	ldi	r18, 0x14	; 20
 504:	4c 2f       	mov	r20, r28
 506:	64 e1       	ldi	r22, 0x14	; 20
 508:	8d 2f       	mov	r24, r29
 50a:	0e 94 30 03 	call	0x660	; 0x660 <OLED_move_arrow>
		buttonPressed = JOYSTICK_read_button();
 50e:	0e 94 b9 01 	call	0x372	; 0x372 <JOYSTICK_read_button>
		printf("CAN ID: %d\n", received.id);
		printf("Message length: %d\n", received.length);
		printf("Data: %d\n", received.data);
		*/
		
	}
 512:	cd 2f       	mov	r28, r29
 514:	dd cf       	rjmp	.-70     	; 0x4d0 <main+0x3c>

00000516 <OLED_goto_line>:
}

void OLED_write_c(char chr)
{
	volatile char *oled = (char *) 0x1000;
	oled[0] = chr;
 516:	e0 e0       	ldi	r30, 0x00	; 0
 518:	f0 e1       	ldi	r31, 0x10	; 16
 51a:	92 e2       	ldi	r25, 0x22	; 34
 51c:	90 83       	st	Z, r25
 51e:	80 83       	st	Z, r24
 520:	87 e0       	ldi	r24, 0x07	; 7
 522:	80 83       	st	Z, r24
 524:	08 95       	ret

00000526 <OLED_clear_line>:
	OLED_write_c(0x07);
}

void OLED_clear_line(uint8_t line)
{
	OLED_goto_line(line);
 526:	0e 94 8b 02 	call	0x516	; 0x516 <OLED_goto_line>
}

void OLED_write_c(char chr)
{
	volatile char *oled = (char *) 0x1000;
	oled[0] = chr;
 52a:	e0 e0       	ldi	r30, 0x00	; 0
 52c:	f0 e1       	ldi	r31, 0x10	; 16
 52e:	81 e2       	ldi	r24, 0x21	; 33
 530:	80 83       	st	Z, r24
 532:	10 82       	st	Z, r1
 534:	8f e7       	ldi	r24, 0x7F	; 127
 536:	80 83       	st	Z, r24
 538:	80 e8       	ldi	r24, 0x80	; 128
 53a:	90 e0       	ldi	r25, 0x00	; 0
}

void OLED_write_d(char chr)
{
	volatile char *oled = (char *) 0x1200;
	oled[0] = chr;
 53c:	e0 e0       	ldi	r30, 0x00	; 0
 53e:	f2 e1       	ldi	r31, 0x12	; 18
 540:	10 82       	st	Z, r1
 542:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_c(0x21);
	OLED_write_c(0x00);
	OLED_write_c(0x7F);

	/* Write zeros to line */
	for (int i = 0; i < 128; i++) {
 544:	00 97       	sbiw	r24, 0x00	; 0
 546:	e1 f7       	brne	.-8      	; 0x540 <OLED_clear_line+0x1a>
		OLED_write_d(0x00);
	}
}
 548:	08 95       	ret

0000054a <OLED_pos>:
}

void OLED_write_c(char chr)
{
	volatile char *oled = (char *) 0x1000;
	oled[0] = chr;
 54a:	e0 e0       	ldi	r30, 0x00	; 0
 54c:	f0 e1       	ldi	r31, 0x10	; 16
 54e:	92 e2       	ldi	r25, 0x22	; 34
 550:	90 83       	st	Z, r25
 552:	80 83       	st	Z, r24
 554:	87 e0       	ldi	r24, 0x07	; 7
 556:	80 83       	st	Z, r24
 558:	81 e2       	ldi	r24, 0x21	; 33
 55a:	80 83       	st	Z, r24
 55c:	60 83       	st	Z, r22
 55e:	8f e7       	ldi	r24, 0x7F	; 127
 560:	80 83       	st	Z, r24
 562:	08 95       	ret

00000564 <OLED_reset>:
	OLED_write_c(column);
	OLED_write_c(0x7F);
}

void OLED_reset(void)
{
 564:	cf 93       	push	r28
	for (uint8_t i = 0; i < 8; i++) {
 566:	c0 e0       	ldi	r28, 0x00	; 0
		OLED_clear_line(i);
 568:	8c 2f       	mov	r24, r28
 56a:	0e 94 93 02 	call	0x526	; 0x526 <OLED_clear_line>
	OLED_write_c(0x7F);
}

void OLED_reset(void)
{
	for (uint8_t i = 0; i < 8; i++) {
 56e:	cf 5f       	subi	r28, 0xFF	; 255
 570:	c8 30       	cpi	r28, 0x08	; 8
 572:	d1 f7       	brne	.-12     	; 0x568 <OLED_reset+0x4>
		OLED_clear_line(i);
	}
	OLED_pos(0,0);
 574:	60 e0       	ldi	r22, 0x00	; 0
 576:	80 e0       	ldi	r24, 0x00	; 0
 578:	0e 94 a5 02 	call	0x54a	; 0x54a <OLED_pos>

	// Redraw from SRAM?
}
 57c:	cf 91       	pop	r28
 57e:	08 95       	ret

00000580 <OLED_init>:
}

void OLED_write_c(char chr)
{
	volatile char *oled = (char *) 0x1000;
	oled[0] = chr;
 580:	e0 e0       	ldi	r30, 0x00	; 0
 582:	f0 e1       	ldi	r31, 0x10	; 16
 584:	8e ea       	ldi	r24, 0xAE	; 174
 586:	80 83       	st	Z, r24
 588:	81 ea       	ldi	r24, 0xA1	; 161
 58a:	80 83       	st	Z, r24
 58c:	8a ed       	ldi	r24, 0xDA	; 218
 58e:	80 83       	st	Z, r24
 590:	82 e1       	ldi	r24, 0x12	; 18
 592:	80 83       	st	Z, r24
 594:	88 ec       	ldi	r24, 0xC8	; 200
 596:	80 83       	st	Z, r24
 598:	88 ea       	ldi	r24, 0xA8	; 168
 59a:	80 83       	st	Z, r24
 59c:	8f e3       	ldi	r24, 0x3F	; 63
 59e:	80 83       	st	Z, r24
 5a0:	85 ed       	ldi	r24, 0xD5	; 213
 5a2:	80 83       	st	Z, r24
 5a4:	80 e8       	ldi	r24, 0x80	; 128
 5a6:	80 83       	st	Z, r24
 5a8:	81 e8       	ldi	r24, 0x81	; 129
 5aa:	80 83       	st	Z, r24
 5ac:	80 e5       	ldi	r24, 0x50	; 80
 5ae:	80 83       	st	Z, r24
 5b0:	89 ed       	ldi	r24, 0xD9	; 217
 5b2:	80 83       	st	Z, r24
 5b4:	81 e2       	ldi	r24, 0x21	; 33
 5b6:	80 83       	st	Z, r24
 5b8:	80 e2       	ldi	r24, 0x20	; 32
 5ba:	80 83       	st	Z, r24
 5bc:	10 82       	st	Z, r1
 5be:	8b ed       	ldi	r24, 0xDB	; 219
 5c0:	80 83       	st	Z, r24
 5c2:	80 e3       	ldi	r24, 0x30	; 48
 5c4:	80 83       	st	Z, r24
 5c6:	8d ea       	ldi	r24, 0xAD	; 173
 5c8:	80 83       	st	Z, r24
 5ca:	10 82       	st	Z, r1
 5cc:	84 ea       	ldi	r24, 0xA4	; 164
 5ce:	80 83       	st	Z, r24
 5d0:	86 ea       	ldi	r24, 0xA6	; 166
 5d2:	80 83       	st	Z, r24
 5d4:	8f ea       	ldi	r24, 0xAF	; 175
 5d6:	80 83       	st	Z, r24
 5d8:	80 e0       	ldi	r24, 0x00	; 0
 5da:	92 e0       	ldi	r25, 0x02	; 2
}

void OLED_write_d(char chr)
{
	volatile char *oled = (char *) 0x1200;
	oled[0] = chr;
 5dc:	e0 e0       	ldi	r30, 0x00	; 0
 5de:	f2 e1       	ldi	r31, 0x12	; 18
 5e0:	2f ef       	ldi	r18, 0xFF	; 255
 5e2:	20 83       	st	Z, r18
 5e4:	01 97       	sbiw	r24, 0x01	; 1
	OLED_write_c(0x00);
	OLED_write_c(0xa4); //out follows RAM content
	OLED_write_c(0xa6); //set normal display
	OLED_write_c(0xaf); // display on
	
	for (int i = 0; i < 512; i++)
 5e6:	00 97       	sbiw	r24, 0x00	; 0
 5e8:	e1 f7       	brne	.-8      	; 0x5e2 <OLED_init+0x62>
	{
		OLED_write_d(0xFF);
	}
	
	OLED_reset();
 5ea:	0e 94 b2 02 	call	0x564	; 0x564 <OLED_reset>
 5ee:	08 95       	ret

000005f0 <OLED_print_string>:

	// Redraw from SRAM?
}

void OLED_print_string(char* str)
{
 5f0:	cf 93       	push	r28
 5f2:	df 93       	push	r29
	uint8_t c;
	uint8_t font_width = 4; // Use sizeof array here
	uint8_t i = 0;
	while (str[i] != '\0') {
 5f4:	fc 01       	movw	r30, r24
 5f6:	20 81       	ld	r18, Z
 5f8:	22 23       	and	r18, r18
 5fa:	11 f1       	breq	.+68     	; 0x640 <OLED_print_string+0x50>
 5fc:	dc 01       	movw	r26, r24

void OLED_print_string(char* str)
{
	uint8_t c;
	uint8_t font_width = 4; // Use sizeof array here
	uint8_t i = 0;
 5fe:	40 e0       	ldi	r20, 0x00	; 0

	// Redraw from SRAM?
}

void OLED_print_string(char* str)
{
 600:	60 e0       	ldi	r22, 0x00	; 0
 602:	50 e0       	ldi	r21, 0x00	; 0
}

void OLED_write_d(char chr)
{
	volatile char *oled = (char *) 0x1200;
	oled[0] = chr;
 604:	c0 e0       	ldi	r28, 0x00	; 0
 606:	d2 e1       	ldi	r29, 0x12	; 18
 608:	18 c0       	rjmp	.+48     	; 0x63a <OLED_print_string+0x4a>
	uint8_t c;
	uint8_t font_width = 4; // Use sizeof array here
	uint8_t i = 0;
	while (str[i] != '\0') {
		for (uint8_t j = 0; j < font_width; j++) {
			c = pgm_read_byte_near(font[str[i]-32] + j);
 60a:	ec 91       	ld	r30, X
 60c:	f0 e0       	ldi	r31, 0x00	; 0
 60e:	ee 0f       	add	r30, r30
 610:	ff 1f       	adc	r31, r31
 612:	ee 0f       	add	r30, r30
 614:	ff 1f       	adc	r31, r31
 616:	e0 51       	subi	r30, 0x10	; 16
 618:	f0 40       	sbci	r31, 0x00	; 0
 61a:	e2 0f       	add	r30, r18
 61c:	f3 1f       	adc	r31, r19
 61e:	e4 91       	lpm	r30, Z
}

void OLED_write_d(char chr)
{
	volatile char *oled = (char *) 0x1200;
	oled[0] = chr;
 620:	e8 83       	st	Y, r30
 622:	2f 5f       	subi	r18, 0xFF	; 255
 624:	3f 4f       	sbci	r19, 0xFF	; 255
{
	uint8_t c;
	uint8_t font_width = 4; // Use sizeof array here
	uint8_t i = 0;
	while (str[i] != '\0') {
		for (uint8_t j = 0; j < font_width; j++) {
 626:	24 30       	cpi	r18, 0x04	; 4
 628:	31 05       	cpc	r19, r1
 62a:	79 f7       	brne	.-34     	; 0x60a <OLED_print_string+0x1a>
			c = pgm_read_byte_near(font[str[i]-32] + j);
			OLED_write_d(c);
		}
		i++;
 62c:	4f 5f       	subi	r20, 0xFF	; 255
void OLED_print_string(char* str)
{
	uint8_t c;
	uint8_t font_width = 4; // Use sizeof array here
	uint8_t i = 0;
	while (str[i] != '\0') {
 62e:	dc 01       	movw	r26, r24
 630:	a4 0f       	add	r26, r20
 632:	b1 1d       	adc	r27, r1
 634:	2c 91       	ld	r18, X
 636:	22 23       	and	r18, r18
 638:	19 f0       	breq	.+6      	; 0x640 <OLED_print_string+0x50>

	// Redraw from SRAM?
}

void OLED_print_string(char* str)
{
 63a:	26 2f       	mov	r18, r22
 63c:	35 2f       	mov	r19, r21
 63e:	e5 cf       	rjmp	.-54     	; 0x60a <OLED_print_string+0x1a>
			c = pgm_read_byte_near(font[str[i]-32] + j);
			OLED_write_d(c);
		}
		i++;
	}
}
 640:	df 91       	pop	r29
 642:	cf 91       	pop	r28
 644:	08 95       	ret

00000646 <OLED_print_arrow>:

void OLED_print_arrow(uint8_t row, uint8_t col)
{
	OLED_pos(row, col);
 646:	0e 94 a5 02 	call	0x54a	; 0x54a <OLED_pos>
}

void OLED_write_d(char chr)
{
	volatile char *oled = (char *) 0x1200;
	oled[0] = chr;
 64a:	e0 e0       	ldi	r30, 0x00	; 0
 64c:	f2 e1       	ldi	r31, 0x12	; 18
 64e:	88 e1       	ldi	r24, 0x18	; 24
 650:	80 83       	st	Z, r24
 652:	80 83       	st	Z, r24
 654:	9e e7       	ldi	r25, 0x7E	; 126
 656:	90 83       	st	Z, r25
 658:	9c e3       	ldi	r25, 0x3C	; 60
 65a:	90 83       	st	Z, r25
 65c:	80 83       	st	Z, r24
 65e:	08 95       	ret

00000660 <OLED_move_arrow>:
	OLED_write_d(0b00111100);
	OLED_write_d(0b00011000);
}

void OLED_move_arrow(uint8_t newRow, uint8_t newCol, uint8_t currentRow, uint8_t currentCol)
{
 660:	cf 93       	push	r28
 662:	df 93       	push	r29
 664:	c8 2f       	mov	r28, r24
 666:	d6 2f       	mov	r29, r22
 668:	84 2f       	mov	r24, r20
	OLED_pos(currentRow, currentCol);
 66a:	62 2f       	mov	r22, r18
 66c:	0e 94 a5 02 	call	0x54a	; 0x54a <OLED_pos>
}

void OLED_write_d(char chr)
{
	volatile char *oled = (char *) 0x1200;
	oled[0] = chr;
 670:	e0 e0       	ldi	r30, 0x00	; 0
 672:	f2 e1       	ldi	r31, 0x12	; 18
 674:	10 82       	st	Z, r1
 676:	10 82       	st	Z, r1
 678:	10 82       	st	Z, r1
 67a:	10 82       	st	Z, r1
 67c:	10 82       	st	Z, r1
	OLED_write_d(0b00000000);
	OLED_write_d(0b00000000);
	OLED_write_d(0b00000000);
	OLED_write_d(0b00000000);
	
	OLED_print_arrow(newRow, newCol);
 67e:	6d 2f       	mov	r22, r29
 680:	8c 2f       	mov	r24, r28
 682:	0e 94 23 03 	call	0x646	; 0x646 <OLED_print_arrow>
}
 686:	df 91       	pop	r29
 688:	cf 91       	pop	r28
 68a:	08 95       	ret

0000068c <OLED_create_node>:


menuNode *OLED_create_node(char* name, menuNode* parent)
{
 68c:	cf 93       	push	r28
 68e:	df 93       	push	r29
 690:	ec 01       	movw	r28, r24
	menuNode* ret = (menuNode*) malloc(sizeof(menuNode));
 692:	84 e1       	ldi	r24, 0x14	; 20
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <malloc>
	ret->name = name;
 69a:	fc 01       	movw	r30, r24
 69c:	d1 83       	std	Z+1, r29	; 0x01
 69e:	c0 83       	st	Z, r28
	ret->parent = NULL;
 6a0:	13 82       	std	Z+3, r1	; 0x03
 6a2:	12 82       	std	Z+2, r1	; 0x02
	return ret;
}
 6a4:	df 91       	pop	r29
 6a6:	cf 91       	pop	r28
 6a8:	08 95       	ret

000006aa <OLED_generate_menu>:

// Implement function for freeing memory

menuNode *OLED_generate_menu(void)
{	
 6aa:	af 92       	push	r10
 6ac:	bf 92       	push	r11
 6ae:	cf 92       	push	r12
 6b0:	df 92       	push	r13
 6b2:	ef 92       	push	r14
 6b4:	ff 92       	push	r15
 6b6:	0f 93       	push	r16
 6b8:	1f 93       	push	r17
 6ba:	cf 93       	push	r28
 6bc:	df 93       	push	r29
	menuNode *mainmenu = OLED_create_node("MAIN MENU", NULL);
 6be:	60 e0       	ldi	r22, 0x00	; 0
 6c0:	70 e0       	ldi	r23, 0x00	; 0
 6c2:	86 e0       	ldi	r24, 0x06	; 6
 6c4:	91 e0       	ldi	r25, 0x01	; 1
 6c6:	0e 94 46 03 	call	0x68c	; 0x68c <OLED_create_node>
 6ca:	ec 01       	movw	r28, r24
	menuNode *highscores = OLED_create_node("Highscores", mainmenu);
 6cc:	bc 01       	movw	r22, r24
 6ce:	80 e1       	ldi	r24, 0x10	; 16
 6d0:	91 e0       	ldi	r25, 0x01	; 1
 6d2:	0e 94 46 03 	call	0x68c	; 0x68c <OLED_create_node>
 6d6:	6c 01       	movw	r12, r24
	menuNode *playgame = OLED_create_node("Start new game", mainmenu);
 6d8:	be 01       	movw	r22, r28
 6da:	8b e1       	ldi	r24, 0x1B	; 27
 6dc:	91 e0       	ldi	r25, 0x01	; 1
 6de:	0e 94 46 03 	call	0x68c	; 0x68c <OLED_create_node>
 6e2:	5c 01       	movw	r10, r24
	menuNode *debugging = OLED_create_node("Debugging", mainmenu);
 6e4:	be 01       	movw	r22, r28
 6e6:	8a e2       	ldi	r24, 0x2A	; 42
 6e8:	91 e0       	ldi	r25, 0x01	; 1
 6ea:	0e 94 46 03 	call	0x68c	; 0x68c <OLED_create_node>
 6ee:	8c 01       	movw	r16, r24
	menuNode *calibrate = OLED_create_node("Calibrate", mainmenu);
 6f0:	be 01       	movw	r22, r28
 6f2:	84 e3       	ldi	r24, 0x34	; 52
 6f4:	91 e0       	ldi	r25, 0x01	; 1
 6f6:	0e 94 46 03 	call	0x68c	; 0x68c <OLED_create_node>
 6fa:	7c 01       	movw	r14, r24
	menuNode *difficulty = OLED_create_node("Difficulty", mainmenu);
 6fc:	be 01       	movw	r22, r28
 6fe:	8e e3       	ldi	r24, 0x3E	; 62
 700:	91 e0       	ldi	r25, 0x01	; 1
 702:	0e 94 46 03 	call	0x68c	; 0x68c <OLED_create_node>
	calibrate->parent = mainmenu;
	difficulty->parent = mainmenu;
	debugging->parent = mainmenu;
	*/
	
	mainmenu->children[1] = playgame;
 706:	bf 82       	std	Y+7, r11	; 0x07
 708:	ae 82       	std	Y+6, r10	; 0x06
	mainmenu->children[2] = highscores;
 70a:	d9 86       	std	Y+9, r13	; 0x09
 70c:	c8 86       	std	Y+8, r12	; 0x08
	mainmenu->children[3] = difficulty;
 70e:	9b 87       	std	Y+11, r25	; 0x0b
 710:	8a 87       	std	Y+10, r24	; 0x0a
	mainmenu->children[4] = calibrate;
 712:	fd 86       	std	Y+13, r15	; 0x0d
 714:	ec 86       	std	Y+12, r14	; 0x0c
	mainmenu->children[5] = debugging;
 716:	1f 87       	std	Y+15, r17	; 0x0f
 718:	0e 87       	std	Y+14, r16	; 0x0e
	
	return mainmenu;
}
 71a:	ce 01       	movw	r24, r28
 71c:	df 91       	pop	r29
 71e:	cf 91       	pop	r28
 720:	1f 91       	pop	r17
 722:	0f 91       	pop	r16
 724:	ff 90       	pop	r15
 726:	ef 90       	pop	r14
 728:	df 90       	pop	r13
 72a:	cf 90       	pop	r12
 72c:	bf 90       	pop	r11
 72e:	af 90       	pop	r10
 730:	08 95       	ret

00000732 <OLED_print_menu>:

void OLED_print_menu(menuNode *node)
{
 732:	cf 93       	push	r28
 734:	df 93       	push	r29
 736:	ec 01       	movw	r28, r24
	OLED_pos(0,50);
 738:	62 e3       	ldi	r22, 0x32	; 50
 73a:	80 e0       	ldi	r24, 0x00	; 0
 73c:	0e 94 a5 02 	call	0x54a	; 0x54a <OLED_pos>
	OLED_print_string(node->name);
 740:	88 81       	ld	r24, Y
 742:	99 81       	ldd	r25, Y+1	; 0x01
 744:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <OLED_print_string>
	//printf("%s\n", node->name);
	OLED_pos(1,50);
 748:	62 e3       	ldi	r22, 0x32	; 50
 74a:	81 e0       	ldi	r24, 0x01	; 1
 74c:	0e 94 a5 02 	call	0x54a	; 0x54a <OLED_pos>
	OLED_print_string(node->children[1]->name);
 750:	ee 81       	ldd	r30, Y+6	; 0x06
 752:	ff 81       	ldd	r31, Y+7	; 0x07
 754:	80 81       	ld	r24, Z
 756:	91 81       	ldd	r25, Z+1	; 0x01
 758:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <OLED_print_string>
	OLED_pos(2,50);
 75c:	62 e3       	ldi	r22, 0x32	; 50
 75e:	82 e0       	ldi	r24, 0x02	; 2
 760:	0e 94 a5 02 	call	0x54a	; 0x54a <OLED_pos>
	OLED_print_string(node->children[2]->name);
 764:	e8 85       	ldd	r30, Y+8	; 0x08
 766:	f9 85       	ldd	r31, Y+9	; 0x09
 768:	80 81       	ld	r24, Z
 76a:	91 81       	ldd	r25, Z+1	; 0x01
 76c:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <OLED_print_string>
	OLED_pos(3,50);
 770:	62 e3       	ldi	r22, 0x32	; 50
 772:	83 e0       	ldi	r24, 0x03	; 3
 774:	0e 94 a5 02 	call	0x54a	; 0x54a <OLED_pos>
	OLED_print_string(node->children[3]->name);
 778:	ea 85       	ldd	r30, Y+10	; 0x0a
 77a:	fb 85       	ldd	r31, Y+11	; 0x0b
 77c:	80 81       	ld	r24, Z
 77e:	91 81       	ldd	r25, Z+1	; 0x01
 780:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <OLED_print_string>
	OLED_pos(4,50);
 784:	62 e3       	ldi	r22, 0x32	; 50
 786:	84 e0       	ldi	r24, 0x04	; 4
 788:	0e 94 a5 02 	call	0x54a	; 0x54a <OLED_pos>
	OLED_print_string(node->children[4]->name);
 78c:	ec 85       	ldd	r30, Y+12	; 0x0c
 78e:	fd 85       	ldd	r31, Y+13	; 0x0d
 790:	80 81       	ld	r24, Z
 792:	91 81       	ldd	r25, Z+1	; 0x01
 794:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <OLED_print_string>
	OLED_pos(5,50);
 798:	62 e3       	ldi	r22, 0x32	; 50
 79a:	85 e0       	ldi	r24, 0x05	; 5
 79c:	0e 94 a5 02 	call	0x54a	; 0x54a <OLED_pos>
	OLED_print_string(node->children[5]->name);
 7a0:	ee 85       	ldd	r30, Y+14	; 0x0e
 7a2:	ff 85       	ldd	r31, Y+15	; 0x0f
 7a4:	80 81       	ld	r24, Z
 7a6:	91 81       	ldd	r25, Z+1	; 0x01
 7a8:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <OLED_print_string>
 7ac:	df 91       	pop	r29
 7ae:	cf 91       	pop	r28
 7b0:	08 95       	ret

000007b2 <SPI_master_init>:
#include "spi.h"

void SPI_master_init(void)
{
	/* Set ~SS, MOSI and SCK output, all others input */
	DDRB = (1 << PB4)|(1 << PB5)|(1 << PB7);
 7b2:	80 eb       	ldi	r24, 0xB0	; 176
 7b4:	87 bb       	out	0x17, r24	; 23
	
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1 << SPE)|(1 << MSTR)|(1 << SPR0);
 7b6:	81 e5       	ldi	r24, 0x51	; 81
 7b8:	8d b9       	out	0x0d, r24	; 13
 7ba:	08 95       	ret

000007bc <SPI_master_transmit>:
}

void SPI_master_transmit(uint8_t cData)
{
	/* Start transmission */
	SPDR = cData;
 7bc:	8f b9       	out	0x0f, r24	; 15
	
	/* Wait for transmission to complete */
	while (!(SPSR & (1 << SPIF))) {
 7be:	77 9b       	sbis	0x0e, 7	; 14
 7c0:	fe cf       	rjmp	.-4      	; 0x7be <SPI_master_transmit+0x2>
		;
	}
}
 7c2:	08 95       	ret

000007c4 <USART_init>:
#include "usart.h"

void USART_init(unsigned int ubrr)
{
	/* Set baud rate*/
	UBRR0H = (unsigned char)(ubrr >> 8 );
 7c4:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
 7c6:	89 b9       	out	0x09, r24	; 9
	/*Enable receiver and transmitter*/
	UCSR0B = (1 << RXEN0)|(1 << TXEN0);
 7c8:	88 e1       	ldi	r24, 0x18	; 24
 7ca:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1 << URSEL0)|(1 << USBS0)|(3 << UCSZ10);
 7cc:	8e e8       	ldi	r24, 0x8E	; 142
 7ce:	80 bd       	out	0x20, r24	; 32
 7d0:	08 95       	ret

000007d2 <USART_transmit>:
}

void USART_transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while (!( UCSR0A & (1 << UDRE0)))
 7d2:	5d 9b       	sbis	0x0b, 5	; 11
 7d4:	fe cf       	rjmp	.-4      	; 0x7d2 <USART_transmit>
		;
	/* Put data into buffer, sends the data */
	UDR0 = data;
 7d6:	8c b9       	out	0x0c, r24	; 12
 7d8:	08 95       	ret

000007da <USART_receive>:
}

unsigned char USART_receive(void)
{
	/* Wait for data to be received */
	while ( !(UCSR0A & ( 1 << RXC0)) )
 7da:	5f 9b       	sbis	0x0b, 7	; 11
 7dc:	fe cf       	rjmp	.-4      	; 0x7da <USART_receive>
		;
	/* Get and return received data from buffer */
	return UDR0;
 7de:	8c b1       	in	r24, 0x0c	; 12
}
 7e0:	08 95       	ret

000007e2 <malloc>:
 7e2:	cf 93       	push	r28
 7e4:	df 93       	push	r29
 7e6:	82 30       	cpi	r24, 0x02	; 2
 7e8:	91 05       	cpc	r25, r1
 7ea:	10 f4       	brcc	.+4      	; 0x7f0 <malloc+0xe>
 7ec:	82 e0       	ldi	r24, 0x02	; 2
 7ee:	90 e0       	ldi	r25, 0x00	; 0
 7f0:	e0 91 4c 01 	lds	r30, 0x014C
 7f4:	f0 91 4d 01 	lds	r31, 0x014D
 7f8:	20 e0       	ldi	r18, 0x00	; 0
 7fa:	30 e0       	ldi	r19, 0x00	; 0
 7fc:	a0 e0       	ldi	r26, 0x00	; 0
 7fe:	b0 e0       	ldi	r27, 0x00	; 0
 800:	30 97       	sbiw	r30, 0x00	; 0
 802:	39 f1       	breq	.+78     	; 0x852 <malloc+0x70>
 804:	40 81       	ld	r20, Z
 806:	51 81       	ldd	r21, Z+1	; 0x01
 808:	48 17       	cp	r20, r24
 80a:	59 07       	cpc	r21, r25
 80c:	b8 f0       	brcs	.+46     	; 0x83c <malloc+0x5a>
 80e:	48 17       	cp	r20, r24
 810:	59 07       	cpc	r21, r25
 812:	71 f4       	brne	.+28     	; 0x830 <malloc+0x4e>
 814:	82 81       	ldd	r24, Z+2	; 0x02
 816:	93 81       	ldd	r25, Z+3	; 0x03
 818:	10 97       	sbiw	r26, 0x00	; 0
 81a:	29 f0       	breq	.+10     	; 0x826 <malloc+0x44>
 81c:	13 96       	adiw	r26, 0x03	; 3
 81e:	9c 93       	st	X, r25
 820:	8e 93       	st	-X, r24
 822:	12 97       	sbiw	r26, 0x02	; 2
 824:	2c c0       	rjmp	.+88     	; 0x87e <malloc+0x9c>
 826:	90 93 4d 01 	sts	0x014D, r25
 82a:	80 93 4c 01 	sts	0x014C, r24
 82e:	27 c0       	rjmp	.+78     	; 0x87e <malloc+0x9c>
 830:	21 15       	cp	r18, r1
 832:	31 05       	cpc	r19, r1
 834:	31 f0       	breq	.+12     	; 0x842 <malloc+0x60>
 836:	42 17       	cp	r20, r18
 838:	53 07       	cpc	r21, r19
 83a:	18 f0       	brcs	.+6      	; 0x842 <malloc+0x60>
 83c:	a9 01       	movw	r20, r18
 83e:	db 01       	movw	r26, r22
 840:	01 c0       	rjmp	.+2      	; 0x844 <malloc+0x62>
 842:	ef 01       	movw	r28, r30
 844:	9a 01       	movw	r18, r20
 846:	bd 01       	movw	r22, r26
 848:	df 01       	movw	r26, r30
 84a:	02 80       	ldd	r0, Z+2	; 0x02
 84c:	f3 81       	ldd	r31, Z+3	; 0x03
 84e:	e0 2d       	mov	r30, r0
 850:	d7 cf       	rjmp	.-82     	; 0x800 <malloc+0x1e>
 852:	21 15       	cp	r18, r1
 854:	31 05       	cpc	r19, r1
 856:	f9 f0       	breq	.+62     	; 0x896 <malloc+0xb4>
 858:	28 1b       	sub	r18, r24
 85a:	39 0b       	sbc	r19, r25
 85c:	24 30       	cpi	r18, 0x04	; 4
 85e:	31 05       	cpc	r19, r1
 860:	80 f4       	brcc	.+32     	; 0x882 <malloc+0xa0>
 862:	8a 81       	ldd	r24, Y+2	; 0x02
 864:	9b 81       	ldd	r25, Y+3	; 0x03
 866:	61 15       	cp	r22, r1
 868:	71 05       	cpc	r23, r1
 86a:	21 f0       	breq	.+8      	; 0x874 <malloc+0x92>
 86c:	fb 01       	movw	r30, r22
 86e:	93 83       	std	Z+3, r25	; 0x03
 870:	82 83       	std	Z+2, r24	; 0x02
 872:	04 c0       	rjmp	.+8      	; 0x87c <malloc+0x9a>
 874:	90 93 4d 01 	sts	0x014D, r25
 878:	80 93 4c 01 	sts	0x014C, r24
 87c:	fe 01       	movw	r30, r28
 87e:	32 96       	adiw	r30, 0x02	; 2
 880:	44 c0       	rjmp	.+136    	; 0x90a <malloc+0x128>
 882:	fe 01       	movw	r30, r28
 884:	e2 0f       	add	r30, r18
 886:	f3 1f       	adc	r31, r19
 888:	81 93       	st	Z+, r24
 88a:	91 93       	st	Z+, r25
 88c:	22 50       	subi	r18, 0x02	; 2
 88e:	31 09       	sbc	r19, r1
 890:	39 83       	std	Y+1, r19	; 0x01
 892:	28 83       	st	Y, r18
 894:	3a c0       	rjmp	.+116    	; 0x90a <malloc+0x128>
 896:	20 91 4a 01 	lds	r18, 0x014A
 89a:	30 91 4b 01 	lds	r19, 0x014B
 89e:	23 2b       	or	r18, r19
 8a0:	41 f4       	brne	.+16     	; 0x8b2 <malloc+0xd0>
 8a2:	20 91 02 01 	lds	r18, 0x0102
 8a6:	30 91 03 01 	lds	r19, 0x0103
 8aa:	30 93 4b 01 	sts	0x014B, r19
 8ae:	20 93 4a 01 	sts	0x014A, r18
 8b2:	20 91 00 01 	lds	r18, 0x0100
 8b6:	30 91 01 01 	lds	r19, 0x0101
 8ba:	21 15       	cp	r18, r1
 8bc:	31 05       	cpc	r19, r1
 8be:	41 f4       	brne	.+16     	; 0x8d0 <malloc+0xee>
 8c0:	2d b7       	in	r18, 0x3d	; 61
 8c2:	3e b7       	in	r19, 0x3e	; 62
 8c4:	40 91 04 01 	lds	r20, 0x0104
 8c8:	50 91 05 01 	lds	r21, 0x0105
 8cc:	24 1b       	sub	r18, r20
 8ce:	35 0b       	sbc	r19, r21
 8d0:	e0 91 4a 01 	lds	r30, 0x014A
 8d4:	f0 91 4b 01 	lds	r31, 0x014B
 8d8:	e2 17       	cp	r30, r18
 8da:	f3 07       	cpc	r31, r19
 8dc:	a0 f4       	brcc	.+40     	; 0x906 <malloc+0x124>
 8de:	2e 1b       	sub	r18, r30
 8e0:	3f 0b       	sbc	r19, r31
 8e2:	28 17       	cp	r18, r24
 8e4:	39 07       	cpc	r19, r25
 8e6:	78 f0       	brcs	.+30     	; 0x906 <malloc+0x124>
 8e8:	ac 01       	movw	r20, r24
 8ea:	4e 5f       	subi	r20, 0xFE	; 254
 8ec:	5f 4f       	sbci	r21, 0xFF	; 255
 8ee:	24 17       	cp	r18, r20
 8f0:	35 07       	cpc	r19, r21
 8f2:	48 f0       	brcs	.+18     	; 0x906 <malloc+0x124>
 8f4:	4e 0f       	add	r20, r30
 8f6:	5f 1f       	adc	r21, r31
 8f8:	50 93 4b 01 	sts	0x014B, r21
 8fc:	40 93 4a 01 	sts	0x014A, r20
 900:	81 93       	st	Z+, r24
 902:	91 93       	st	Z+, r25
 904:	02 c0       	rjmp	.+4      	; 0x90a <malloc+0x128>
 906:	e0 e0       	ldi	r30, 0x00	; 0
 908:	f0 e0       	ldi	r31, 0x00	; 0
 90a:	cf 01       	movw	r24, r30
 90c:	df 91       	pop	r29
 90e:	cf 91       	pop	r28
 910:	08 95       	ret

00000912 <free>:
 912:	cf 93       	push	r28
 914:	df 93       	push	r29
 916:	00 97       	sbiw	r24, 0x00	; 0
 918:	09 f4       	brne	.+2      	; 0x91c <free+0xa>
 91a:	87 c0       	rjmp	.+270    	; 0xa2a <free+0x118>
 91c:	fc 01       	movw	r30, r24
 91e:	32 97       	sbiw	r30, 0x02	; 2
 920:	13 82       	std	Z+3, r1	; 0x03
 922:	12 82       	std	Z+2, r1	; 0x02
 924:	c0 91 4c 01 	lds	r28, 0x014C
 928:	d0 91 4d 01 	lds	r29, 0x014D
 92c:	20 97       	sbiw	r28, 0x00	; 0
 92e:	81 f4       	brne	.+32     	; 0x950 <free+0x3e>
 930:	20 81       	ld	r18, Z
 932:	31 81       	ldd	r19, Z+1	; 0x01
 934:	28 0f       	add	r18, r24
 936:	39 1f       	adc	r19, r25
 938:	80 91 4a 01 	lds	r24, 0x014A
 93c:	90 91 4b 01 	lds	r25, 0x014B
 940:	82 17       	cp	r24, r18
 942:	93 07       	cpc	r25, r19
 944:	79 f5       	brne	.+94     	; 0x9a4 <free+0x92>
 946:	f0 93 4b 01 	sts	0x014B, r31
 94a:	e0 93 4a 01 	sts	0x014A, r30
 94e:	6d c0       	rjmp	.+218    	; 0xa2a <free+0x118>
 950:	de 01       	movw	r26, r28
 952:	20 e0       	ldi	r18, 0x00	; 0
 954:	30 e0       	ldi	r19, 0x00	; 0
 956:	ae 17       	cp	r26, r30
 958:	bf 07       	cpc	r27, r31
 95a:	50 f4       	brcc	.+20     	; 0x970 <free+0x5e>
 95c:	12 96       	adiw	r26, 0x02	; 2
 95e:	4d 91       	ld	r20, X+
 960:	5c 91       	ld	r21, X
 962:	13 97       	sbiw	r26, 0x03	; 3
 964:	9d 01       	movw	r18, r26
 966:	41 15       	cp	r20, r1
 968:	51 05       	cpc	r21, r1
 96a:	09 f1       	breq	.+66     	; 0x9ae <free+0x9c>
 96c:	da 01       	movw	r26, r20
 96e:	f3 cf       	rjmp	.-26     	; 0x956 <free+0x44>
 970:	b3 83       	std	Z+3, r27	; 0x03
 972:	a2 83       	std	Z+2, r26	; 0x02
 974:	40 81       	ld	r20, Z
 976:	51 81       	ldd	r21, Z+1	; 0x01
 978:	84 0f       	add	r24, r20
 97a:	95 1f       	adc	r25, r21
 97c:	8a 17       	cp	r24, r26
 97e:	9b 07       	cpc	r25, r27
 980:	71 f4       	brne	.+28     	; 0x99e <free+0x8c>
 982:	8d 91       	ld	r24, X+
 984:	9c 91       	ld	r25, X
 986:	11 97       	sbiw	r26, 0x01	; 1
 988:	84 0f       	add	r24, r20
 98a:	95 1f       	adc	r25, r21
 98c:	02 96       	adiw	r24, 0x02	; 2
 98e:	91 83       	std	Z+1, r25	; 0x01
 990:	80 83       	st	Z, r24
 992:	12 96       	adiw	r26, 0x02	; 2
 994:	8d 91       	ld	r24, X+
 996:	9c 91       	ld	r25, X
 998:	13 97       	sbiw	r26, 0x03	; 3
 99a:	93 83       	std	Z+3, r25	; 0x03
 99c:	82 83       	std	Z+2, r24	; 0x02
 99e:	21 15       	cp	r18, r1
 9a0:	31 05       	cpc	r19, r1
 9a2:	29 f4       	brne	.+10     	; 0x9ae <free+0x9c>
 9a4:	f0 93 4d 01 	sts	0x014D, r31
 9a8:	e0 93 4c 01 	sts	0x014C, r30
 9ac:	3e c0       	rjmp	.+124    	; 0xa2a <free+0x118>
 9ae:	d9 01       	movw	r26, r18
 9b0:	13 96       	adiw	r26, 0x03	; 3
 9b2:	fc 93       	st	X, r31
 9b4:	ee 93       	st	-X, r30
 9b6:	12 97       	sbiw	r26, 0x02	; 2
 9b8:	4d 91       	ld	r20, X+
 9ba:	5d 91       	ld	r21, X+
 9bc:	a4 0f       	add	r26, r20
 9be:	b5 1f       	adc	r27, r21
 9c0:	ea 17       	cp	r30, r26
 9c2:	fb 07       	cpc	r31, r27
 9c4:	79 f4       	brne	.+30     	; 0x9e4 <free+0xd2>
 9c6:	80 81       	ld	r24, Z
 9c8:	91 81       	ldd	r25, Z+1	; 0x01
 9ca:	84 0f       	add	r24, r20
 9cc:	95 1f       	adc	r25, r21
 9ce:	02 96       	adiw	r24, 0x02	; 2
 9d0:	d9 01       	movw	r26, r18
 9d2:	11 96       	adiw	r26, 0x01	; 1
 9d4:	9c 93       	st	X, r25
 9d6:	8e 93       	st	-X, r24
 9d8:	82 81       	ldd	r24, Z+2	; 0x02
 9da:	93 81       	ldd	r25, Z+3	; 0x03
 9dc:	13 96       	adiw	r26, 0x03	; 3
 9de:	9c 93       	st	X, r25
 9e0:	8e 93       	st	-X, r24
 9e2:	12 97       	sbiw	r26, 0x02	; 2
 9e4:	e0 e0       	ldi	r30, 0x00	; 0
 9e6:	f0 e0       	ldi	r31, 0x00	; 0
 9e8:	8a 81       	ldd	r24, Y+2	; 0x02
 9ea:	9b 81       	ldd	r25, Y+3	; 0x03
 9ec:	00 97       	sbiw	r24, 0x00	; 0
 9ee:	19 f0       	breq	.+6      	; 0x9f6 <free+0xe4>
 9f0:	fe 01       	movw	r30, r28
 9f2:	ec 01       	movw	r28, r24
 9f4:	f9 cf       	rjmp	.-14     	; 0x9e8 <free+0xd6>
 9f6:	ce 01       	movw	r24, r28
 9f8:	02 96       	adiw	r24, 0x02	; 2
 9fa:	28 81       	ld	r18, Y
 9fc:	39 81       	ldd	r19, Y+1	; 0x01
 9fe:	82 0f       	add	r24, r18
 a00:	93 1f       	adc	r25, r19
 a02:	20 91 4a 01 	lds	r18, 0x014A
 a06:	30 91 4b 01 	lds	r19, 0x014B
 a0a:	28 17       	cp	r18, r24
 a0c:	39 07       	cpc	r19, r25
 a0e:	69 f4       	brne	.+26     	; 0xa2a <free+0x118>
 a10:	30 97       	sbiw	r30, 0x00	; 0
 a12:	29 f4       	brne	.+10     	; 0xa1e <free+0x10c>
 a14:	10 92 4d 01 	sts	0x014D, r1
 a18:	10 92 4c 01 	sts	0x014C, r1
 a1c:	02 c0       	rjmp	.+4      	; 0xa22 <free+0x110>
 a1e:	13 82       	std	Z+3, r1	; 0x03
 a20:	12 82       	std	Z+2, r1	; 0x02
 a22:	d0 93 4b 01 	sts	0x014B, r29
 a26:	c0 93 4a 01 	sts	0x014A, r28
 a2a:	df 91       	pop	r29
 a2c:	cf 91       	pop	r28
 a2e:	08 95       	ret

00000a30 <fdevopen>:
 a30:	0f 93       	push	r16
 a32:	1f 93       	push	r17
 a34:	cf 93       	push	r28
 a36:	df 93       	push	r29
 a38:	ec 01       	movw	r28, r24
 a3a:	8b 01       	movw	r16, r22
 a3c:	00 97       	sbiw	r24, 0x00	; 0
 a3e:	31 f4       	brne	.+12     	; 0xa4c <fdevopen+0x1c>
 a40:	61 15       	cp	r22, r1
 a42:	71 05       	cpc	r23, r1
 a44:	19 f4       	brne	.+6      	; 0xa4c <fdevopen+0x1c>
 a46:	80 e0       	ldi	r24, 0x00	; 0
 a48:	90 e0       	ldi	r25, 0x00	; 0
 a4a:	38 c0       	rjmp	.+112    	; 0xabc <fdevopen+0x8c>
 a4c:	6e e0       	ldi	r22, 0x0E	; 14
 a4e:	70 e0       	ldi	r23, 0x00	; 0
 a50:	81 e0       	ldi	r24, 0x01	; 1
 a52:	90 e0       	ldi	r25, 0x00	; 0
 a54:	0e 94 63 05 	call	0xac6	; 0xac6 <calloc>
 a58:	fc 01       	movw	r30, r24
 a5a:	00 97       	sbiw	r24, 0x00	; 0
 a5c:	a1 f3       	breq	.-24     	; 0xa46 <fdevopen+0x16>
 a5e:	80 e8       	ldi	r24, 0x80	; 128
 a60:	83 83       	std	Z+3, r24	; 0x03
 a62:	01 15       	cp	r16, r1
 a64:	11 05       	cpc	r17, r1
 a66:	71 f0       	breq	.+28     	; 0xa84 <fdevopen+0x54>
 a68:	13 87       	std	Z+11, r17	; 0x0b
 a6a:	02 87       	std	Z+10, r16	; 0x0a
 a6c:	81 e8       	ldi	r24, 0x81	; 129
 a6e:	83 83       	std	Z+3, r24	; 0x03
 a70:	80 91 4e 01 	lds	r24, 0x014E
 a74:	90 91 4f 01 	lds	r25, 0x014F
 a78:	89 2b       	or	r24, r25
 a7a:	21 f4       	brne	.+8      	; 0xa84 <fdevopen+0x54>
 a7c:	f0 93 4f 01 	sts	0x014F, r31
 a80:	e0 93 4e 01 	sts	0x014E, r30
 a84:	20 97       	sbiw	r28, 0x00	; 0
 a86:	c9 f0       	breq	.+50     	; 0xaba <fdevopen+0x8a>
 a88:	d1 87       	std	Z+9, r29	; 0x09
 a8a:	c0 87       	std	Z+8, r28	; 0x08
 a8c:	83 81       	ldd	r24, Z+3	; 0x03
 a8e:	82 60       	ori	r24, 0x02	; 2
 a90:	83 83       	std	Z+3, r24	; 0x03
 a92:	80 91 50 01 	lds	r24, 0x0150
 a96:	90 91 51 01 	lds	r25, 0x0151
 a9a:	89 2b       	or	r24, r25
 a9c:	71 f4       	brne	.+28     	; 0xaba <fdevopen+0x8a>
 a9e:	f0 93 51 01 	sts	0x0151, r31
 aa2:	e0 93 50 01 	sts	0x0150, r30
 aa6:	80 91 52 01 	lds	r24, 0x0152
 aaa:	90 91 53 01 	lds	r25, 0x0153
 aae:	89 2b       	or	r24, r25
 ab0:	21 f4       	brne	.+8      	; 0xaba <fdevopen+0x8a>
 ab2:	f0 93 53 01 	sts	0x0153, r31
 ab6:	e0 93 52 01 	sts	0x0152, r30
 aba:	cf 01       	movw	r24, r30
 abc:	df 91       	pop	r29
 abe:	cf 91       	pop	r28
 ac0:	1f 91       	pop	r17
 ac2:	0f 91       	pop	r16
 ac4:	08 95       	ret

00000ac6 <calloc>:
 ac6:	0f 93       	push	r16
 ac8:	1f 93       	push	r17
 aca:	cf 93       	push	r28
 acc:	df 93       	push	r29
 ace:	86 9f       	mul	r24, r22
 ad0:	80 01       	movw	r16, r0
 ad2:	87 9f       	mul	r24, r23
 ad4:	10 0d       	add	r17, r0
 ad6:	96 9f       	mul	r25, r22
 ad8:	10 0d       	add	r17, r0
 ada:	11 24       	eor	r1, r1
 adc:	c8 01       	movw	r24, r16
 ade:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <malloc>
 ae2:	ec 01       	movw	r28, r24
 ae4:	00 97       	sbiw	r24, 0x00	; 0
 ae6:	29 f0       	breq	.+10     	; 0xaf2 <calloc+0x2c>
 ae8:	a8 01       	movw	r20, r16
 aea:	60 e0       	ldi	r22, 0x00	; 0
 aec:	70 e0       	ldi	r23, 0x00	; 0
 aee:	0e 94 7f 05 	call	0xafe	; 0xafe <memset>
 af2:	ce 01       	movw	r24, r28
 af4:	df 91       	pop	r29
 af6:	cf 91       	pop	r28
 af8:	1f 91       	pop	r17
 afa:	0f 91       	pop	r16
 afc:	08 95       	ret

00000afe <memset>:
 afe:	dc 01       	movw	r26, r24
 b00:	01 c0       	rjmp	.+2      	; 0xb04 <memset+0x6>
 b02:	6d 93       	st	X+, r22
 b04:	41 50       	subi	r20, 0x01	; 1
 b06:	50 40       	sbci	r21, 0x00	; 0
 b08:	e0 f7       	brcc	.-8      	; 0xb02 <memset+0x4>
 b0a:	08 95       	ret

00000b0c <_exit>:
 b0c:	f8 94       	cli

00000b0e <__stop_program>:
 b0e:	ff cf       	rjmp	.-2      	; 0xb0e <__stop_program>
