
Node2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000080  00800200  00000db6  00000e4a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000db6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800280  00800280  00000eca  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000eca  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000160  00000000  00000000  00000f26  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f66  00000000  00000000  00001086  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000079f  00000000  00000000  00001fec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000099a  00000000  00000000  0000278b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000328  00000000  00000000  00003128  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003db  00000000  00000000  00003450  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000806  00000000  00000000  0000382b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000100  00000000  00000000  00004031  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	c2 c1       	rjmp	.+900    	; 0x406 <__vector_32>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 eb       	ldi	r30, 0xB6	; 182
  fc:	fd e0       	ldi	r31, 0x0D	; 13
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 38       	cpi	r26, 0x80	; 128
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 e8       	ldi	r26, 0x80	; 128
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	aa 38       	cpi	r26, 0x8A	; 138
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	e4 d0       	rcall	.+456    	; 0x2e8 <main>
 120:	48 c6       	rjmp	.+3216   	; 0xdb2 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <CAN_init>:
		MCP_write(MCP_TXB0CTRL + 6 + i, msg->data[i]);
	}
	
	/* Request to send contents of TXB0 */
	MCP_request_to_send(MCP_RTS_TX0);
}
 124:	d4 c0       	rjmp	.+424    	; 0x2ce <MCP_init>
 126:	08 95       	ret

00000128 <CAN_message_receive>:

can_message_t CAN_message_receive(void)
{
 128:	9f 92       	push	r9
 12a:	af 92       	push	r10
 12c:	bf 92       	push	r11
 12e:	cf 92       	push	r12
 130:	df 92       	push	r13
 132:	ef 92       	push	r14
 134:	ff 92       	push	r15
 136:	0f 93       	push	r16
 138:	1f 93       	push	r17
 13a:	cf 93       	push	r28
 13c:	df 93       	push	r29
 13e:	cd b7       	in	r28, 0x3d	; 61
 140:	de b7       	in	r29, 0x3e	; 62
 142:	2b 97       	sbiw	r28, 0x0b	; 11
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	f8 94       	cli
 148:	de bf       	out	0x3e, r29	; 62
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	cd bf       	out	0x3d, r28	; 61
 14e:	7c 01       	movw	r14, r24
	/* Only RXB0 is used */
	
	can_message_t message;
	uint8_t buffer = MCP_read(MCP_RXB0SIDH + 1);
 150:	82 e6       	ldi	r24, 0x62	; 98
 152:	8f d0       	rcall	.+286    	; 0x272 <MCP_read>
	message.id = (buffer >> 5);
 154:	82 95       	swap	r24
 156:	86 95       	lsr	r24
 158:	87 70       	andi	r24, 0x07	; 7
 15a:	c8 2e       	mov	r12, r24
 15c:	d1 2c       	mov	r13, r1
	buffer = MCP_read(MCP_RXB0CTRL + 5);
 15e:	85 e6       	ldi	r24, 0x65	; 101
 160:	88 d0       	rcall	.+272    	; 0x272 <MCP_read>
	message.length = (buffer & 0x0F);
 162:	8f 70       	andi	r24, 0x0F	; 15
 164:	98 2e       	mov	r9, r24
	for (uint8_t i = 0; i < message.length; i++) {
 166:	a1 f0       	breq	.+40     	; 0x190 <CAN_message_receive+0x68>
 168:	8e 01       	movw	r16, r28
 16a:	0c 5f       	subi	r16, 0xFC	; 252
 16c:	1f 4f       	sbci	r17, 0xFF	; 255
 16e:	0f 2e       	mov	r0, r31
 170:	f6 e6       	ldi	r31, 0x66	; 102
 172:	af 2e       	mov	r10, r31
 174:	f0 2d       	mov	r31, r0
 176:	a8 0e       	add	r10, r24
 178:	0f 2e       	mov	r0, r31
 17a:	f6 e6       	ldi	r31, 0x66	; 102
 17c:	bf 2e       	mov	r11, r31
 17e:	f0 2d       	mov	r31, r0
		message.data[i] = MCP_read(MCP_RXB0CTRL + 6 + i);
 180:	8b 2d       	mov	r24, r11
 182:	77 d0       	rcall	.+238    	; 0x272 <MCP_read>
 184:	f8 01       	movw	r30, r16
 186:	81 93       	st	Z+, r24
 188:	8f 01       	movw	r16, r30
 18a:	b3 94       	inc	r11
	can_message_t message;
	uint8_t buffer = MCP_read(MCP_RXB0SIDH + 1);
	message.id = (buffer >> 5);
	buffer = MCP_read(MCP_RXB0CTRL + 5);
	message.length = (buffer & 0x0F);
	for (uint8_t i = 0; i < message.length; i++) {
 18c:	ba 10       	cpse	r11, r10
 18e:	f8 cf       	rjmp	.-16     	; 0x180 <CAN_message_receive+0x58>
		message.data[i] = MCP_read(MCP_RXB0CTRL + 6 + i);
	}
	
	/* Clear CANINTF.RX0IF */
	MCP_modify_bit(MCP_CANINTF, 0x01, 0x00);
 190:	40 e0       	ldi	r20, 0x00	; 0
 192:	61 e0       	ldi	r22, 0x01	; 1
 194:	8c e2       	ldi	r24, 0x2C	; 44
 196:	82 d0       	rcall	.+260    	; 0x29c <MCP_modify_bit>
	
	return message;
 198:	da 82       	std	Y+2, r13	; 0x02
 19a:	c9 82       	std	Y+1, r12	; 0x01
 19c:	9b 82       	std	Y+3, r9	; 0x03
 19e:	8b e0       	ldi	r24, 0x0B	; 11
 1a0:	fe 01       	movw	r30, r28
 1a2:	31 96       	adiw	r30, 0x01	; 1
 1a4:	d7 01       	movw	r26, r14
 1a6:	01 90       	ld	r0, Z+
 1a8:	0d 92       	st	X+, r0
 1aa:	8a 95       	dec	r24
 1ac:	e1 f7       	brne	.-8      	; 0x1a6 <CAN_message_receive+0x7e>
}
 1ae:	c7 01       	movw	r24, r14
 1b0:	2b 96       	adiw	r28, 0x0b	; 11
 1b2:	0f b6       	in	r0, 0x3f	; 63
 1b4:	f8 94       	cli
 1b6:	de bf       	out	0x3e, r29	; 62
 1b8:	0f be       	out	0x3f, r0	; 63
 1ba:	cd bf       	out	0x3d, r28	; 61
 1bc:	df 91       	pop	r29
 1be:	cf 91       	pop	r28
 1c0:	1f 91       	pop	r17
 1c2:	0f 91       	pop	r16
 1c4:	ff 90       	pop	r15
 1c6:	ef 90       	pop	r14
 1c8:	df 90       	pop	r13
 1ca:	cf 90       	pop	r12
 1cc:	bf 90       	pop	r11
 1ce:	af 90       	pop	r10
 1d0:	9f 90       	pop	r9
 1d2:	08 95       	ret

000001d4 <CAN_message_handle>:

/* Processes a received CAN-message */
void CAN_message_handle(can_message_t msg)
{
 1d4:	ef 92       	push	r14
 1d6:	ff 92       	push	r15
 1d8:	0f 93       	push	r16
 1da:	1f 93       	push	r17
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	cd b7       	in	r28, 0x3d	; 61
 1e2:	de b7       	in	r29, 0x3e	; 62
 1e4:	2b 97       	sbiw	r28, 0x0b	; 11
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	f8 94       	cli
 1ea:	de bf       	out	0x3e, r29	; 62
 1ec:	0f be       	out	0x3f, r0	; 63
 1ee:	cd bf       	out	0x3d, r28	; 61
 1f0:	1c 83       	std	Y+4, r17	; 0x04
 1f2:	3e 83       	std	Y+6, r19	; 0x06
 1f4:	4f 83       	std	Y+7, r20	; 0x07
	printf("Message handle entered\n");
 1f6:	86 e0       	ldi	r24, 0x06	; 6
 1f8:	92 e0       	ldi	r25, 0x02	; 2
 1fa:	d2 d1       	rcall	.+932    	; 0x5a0 <puts>
	uint8_t msg_type = msg.data[0];
 1fc:	1c 81       	ldd	r17, Y+4	; 0x04
	printf("msg_type: %i\n", msg_type);
 1fe:	1f 92       	push	r1
 200:	1f 93       	push	r17
 202:	8d e1       	ldi	r24, 0x1D	; 29
 204:	92 e0       	ldi	r25, 0x02	; 2
 206:	9f 93       	push	r25
 208:	8f 93       	push	r24
 20a:	b9 d1       	rcall	.+882    	; 0x57e <printf>
	position_t received_pos;
	switch (msg_type) {
 20c:	0f 90       	pop	r0
 20e:	0f 90       	pop	r0
 210:	0f 90       	pop	r0
 212:	0f 90       	pop	r0
 214:	1a 36       	cpi	r17, 0x6A	; 106
 216:	d9 f4       	brne	.+54     	; 0x24e <CAN_message_handle+0x7a>
		case 'j':
			printf("Case 'j' entered\n");
 218:	8b e2       	ldi	r24, 0x2B	; 43
 21a:	92 e0       	ldi	r25, 0x02	; 2
 21c:	c1 d1       	rcall	.+898    	; 0x5a0 <puts>
			received_pos.x = msg.data[2];
 21e:	0e 81       	ldd	r16, Y+6	; 0x06
			received_pos.y = msg.data[3];
 220:	1f 81       	ldd	r17, Y+7	; 0x07
			printf("received_pos.x: %d\n", received_pos.x);
 222:	1f 92       	push	r1
 224:	0f 93       	push	r16
 226:	2c e3       	ldi	r18, 0x3C	; 60
 228:	32 e0       	ldi	r19, 0x02	; 2
 22a:	3f 93       	push	r19
 22c:	2f 93       	push	r18
 22e:	a7 d1       	rcall	.+846    	; 0x57e <printf>
			printf("received_pos.y: %d\n", received_pos.y);
 230:	1f 92       	push	r1
 232:	1f 93       	push	r17
 234:	20 e5       	ldi	r18, 0x50	; 80
 236:	32 e0       	ldi	r19, 0x02	; 2
 238:	3f 93       	push	r19
 23a:	2f 93       	push	r18
 23c:	a0 d1       	rcall	.+832    	; 0x57e <printf>
			
			SERVO_write(received_pos);
 23e:	80 2f       	mov	r24, r16
 240:	91 2f       	mov	r25, r17
 242:	a5 d0       	rcall	.+330    	; 0x38e <SERVO_write>
			break;
 244:	0f b6       	in	r0, 0x3f	; 63
 246:	f8 94       	cli
 248:	de bf       	out	0x3e, r29	; 62
 24a:	0f be       	out	0x3f, r0	; 63
 24c:	cd bf       	out	0x3d, r28	; 61
		default:
			break;
	}
 24e:	2b 96       	adiw	r28, 0x0b	; 11
 250:	0f b6       	in	r0, 0x3f	; 63
 252:	f8 94       	cli
 254:	de bf       	out	0x3e, r29	; 62
 256:	0f be       	out	0x3f, r0	; 63
 258:	cd bf       	out	0x3d, r28	; 61
 25a:	df 91       	pop	r29
 25c:	cf 91       	pop	r28
 25e:	1f 91       	pop	r17
 260:	0f 91       	pop	r16
 262:	ff 90       	pop	r15
 264:	ef 90       	pop	r14
 266:	08 95       	ret

00000268 <MCP_reset>:
	SPI_master_transmit(MCP_RX_STATUS);
	//SPI_master_transmit(0x00); // Unneccessary because of "repeat data out"?
	char status = SPDR;
	PORTB |= (1 << PB0);
	return status;
}
 268:	28 98       	cbi	0x05, 0	; 5
 26a:	80 ec       	ldi	r24, 0xC0	; 192
 26c:	e3 d0       	rcall	.+454    	; 0x434 <SPI_master_transmit>
 26e:	28 9a       	sbi	0x05, 0	; 5
 270:	08 95       	ret

00000272 <MCP_read>:
 272:	cf 93       	push	r28
 274:	c8 2f       	mov	r28, r24
 276:	28 98       	cbi	0x05, 0	; 5
 278:	83 e0       	ldi	r24, 0x03	; 3
 27a:	dc d0       	rcall	.+440    	; 0x434 <SPI_master_transmit>
 27c:	8c 2f       	mov	r24, r28
 27e:	da d0       	rcall	.+436    	; 0x434 <SPI_master_transmit>
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	d8 d0       	rcall	.+432    	; 0x434 <SPI_master_transmit>
 284:	8e b5       	in	r24, 0x2e	; 46
 286:	28 9a       	sbi	0x05, 0	; 5
 288:	cf 91       	pop	r28
 28a:	08 95       	ret

0000028c <MCP_read_status>:
 28c:	28 98       	cbi	0x05, 0	; 5
 28e:	80 ea       	ldi	r24, 0xA0	; 160
 290:	d1 d0       	rcall	.+418    	; 0x434 <SPI_master_transmit>
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	cf d0       	rcall	.+414    	; 0x434 <SPI_master_transmit>
 296:	8e b5       	in	r24, 0x2e	; 46
 298:	28 9a       	sbi	0x05, 0	; 5
 29a:	08 95       	ret

0000029c <MCP_modify_bit>:
	MCP_modify_bit(MCP_CANCTRL, mask, mode);
}

/* Changes the value of the register bits specified by the mask */
void MCP_modify_bit(uint8_t addr, uint8_t mask, uint8_t data)
{
 29c:	1f 93       	push	r17
 29e:	cf 93       	push	r28
 2a0:	df 93       	push	r29
 2a2:	18 2f       	mov	r17, r24
 2a4:	d6 2f       	mov	r29, r22
 2a6:	c4 2f       	mov	r28, r20
	PORTB &= ~(1 << PB0);
 2a8:	28 98       	cbi	0x05, 0	; 5
	SPI_master_transmit(MCP_BITMOD);
 2aa:	85 e0       	ldi	r24, 0x05	; 5
 2ac:	c3 d0       	rcall	.+390    	; 0x434 <SPI_master_transmit>
	SPI_master_transmit(addr);
 2ae:	81 2f       	mov	r24, r17
 2b0:	c1 d0       	rcall	.+386    	; 0x434 <SPI_master_transmit>
	SPI_master_transmit(mask);
 2b2:	8d 2f       	mov	r24, r29
 2b4:	bf d0       	rcall	.+382    	; 0x434 <SPI_master_transmit>
	SPI_master_transmit(data);
 2b6:	8c 2f       	mov	r24, r28
 2b8:	bd d0       	rcall	.+378    	; 0x434 <SPI_master_transmit>
	PORTB |= (1 << PB0);
 2ba:	28 9a       	sbi	0x05, 0	; 5
 2bc:	df 91       	pop	r29
 2be:	cf 91       	pop	r28
 2c0:	1f 91       	pop	r17
 2c2:	08 95       	ret

000002c4 <MCP_set_mode>:
			break;
		default:
			break;
	}
	
	MCP_modify_bit(MCP_CANCTRL, mask, mode);
 2c4:	48 2f       	mov	r20, r24
 2c6:	60 ee       	ldi	r22, 0xE0	; 224
 2c8:	8f e0       	ldi	r24, 0x0F	; 15
 2ca:	e8 cf       	rjmp	.-48     	; 0x29c <MCP_modify_bit>
 2cc:	08 95       	ret

000002ce <MCP_init>:
#include "MCP2515.h"
#include "mcp.h"

void MCP_init(void)
{
	SPI_master_init();
 2ce:	ad d0       	rcall	.+346    	; 0x42a <SPI_master_init>
	MCP_reset();
 2d0:	cb df       	rcall	.-106    	; 0x268 <MCP_reset>
	
	MCP_modify_bit(MCP_RXB0CTRL, 0b01100000, 0xFF); // Turns masks/filters off for RX0
 2d2:	4f ef       	ldi	r20, 0xFF	; 255
 2d4:	60 e6       	ldi	r22, 0x60	; 96
 2d6:	80 e6       	ldi	r24, 0x60	; 96
 2d8:	e1 df       	rcall	.-62     	; 0x29c <MCP_modify_bit>
	MCP_modify_bit(MCP_RXB1CTRL, 0b01100000, 0xFF); // Turns masks/filters off for RX1
 2da:	4f ef       	ldi	r20, 0xFF	; 255
 2dc:	60 e6       	ldi	r22, 0x60	; 96
 2de:	80 e7       	ldi	r24, 0x70	; 112
 2e0:	dd df       	rcall	.-70     	; 0x29c <MCP_modify_bit>
	//MCP_set_mode(MODE_LOOPBACK); // Sets loopback operation mode for testing
	MCP_set_mode(MODE_NORMAL); // Sets normal operation mode
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	ef cf       	rjmp	.-34     	; 0x2c4 <MCP_set_mode>
 2e6:	08 95       	ret

000002e8 <main>:
#include "servo.h"



int main(void)
{
 2e8:	cf 93       	push	r28
 2ea:	df 93       	push	r29
 2ec:	cd b7       	in	r28, 0x3d	; 61
 2ee:	de b7       	in	r29, 0x3e	; 62
 2f0:	2b 97       	sbiw	r28, 0x0b	; 11
 2f2:	0f b6       	in	r0, 0x3f	; 63
 2f4:	f8 94       	cli
 2f6:	de bf       	out	0x3e, r29	; 62
 2f8:	0f be       	out	0x3f, r0	; 63
 2fa:	cd bf       	out	0x3d, r28	; 61
	sei(); // Enable global interrupts
 2fc:	78 94       	sei
	
	timer1_init(); // initialize timer
 2fe:	25 d0       	rcall	.+74     	; 0x34a <timer1_init>
	fdevopen(USART_transmit, USART_receive); // Sets printf to serial port
 300:	62 e3       	ldi	r22, 0x32	; 50
 302:	72 e0       	ldi	r23, 0x02	; 2
 304:	8a e2       	ldi	r24, 0x2A	; 42
 306:	92 e0       	ldi	r25, 0x02	; 2
 308:	f0 d0       	rcall	.+480    	; 0x4ea <fdevopen>
	USART_init(MYUBBR);
 30a:	87 e6       	ldi	r24, 0x67	; 103
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	97 d0       	rcall	.+302    	; 0x43e <USART_init>
	CAN_init();
 310:	09 df       	rcall	.-494    	; 0x124 <CAN_init>
	uint8_t status, msg_arrived;
	can_message_t received_message;
	
	while(1) {	
		
		status = MCP_read_status();
 312:	bc df       	rcall	.-136    	; 0x28c <MCP_read_status>
		//printf("Status: %02x\n", status);
		msg_arrived = (status & 1);
		if (msg_arrived) {
 314:	80 ff       	sbrs	r24, 0
 316:	0f c0       	rjmp	.+30     	; 0x336 <main+0x4e>
			received_message = CAN_message_receive();
 318:	ce 01       	movw	r24, r28
 31a:	01 96       	adiw	r24, 0x01	; 1
 31c:	05 df       	rcall	.-502    	; 0x128 <CAN_message_receive>
			CAN_message_handle(received_message);
 31e:	e9 80       	ldd	r14, Y+1	; 0x01
 320:	fa 80       	ldd	r15, Y+2	; 0x02
 322:	0b 81       	ldd	r16, Y+3	; 0x03
 324:	1c 81       	ldd	r17, Y+4	; 0x04
 326:	2d 81       	ldd	r18, Y+5	; 0x05
 328:	3e 81       	ldd	r19, Y+6	; 0x06
 32a:	4f 81       	ldd	r20, Y+7	; 0x07
 32c:	58 85       	ldd	r21, Y+8	; 0x08
 32e:	69 85       	ldd	r22, Y+9	; 0x09
 330:	7a 85       	ldd	r23, Y+10	; 0x0a
 332:	8b 85       	ldd	r24, Y+11	; 0x0b
 334:	4f df       	rcall	.-354    	; 0x1d4 <CAN_message_handle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 336:	2f ef       	ldi	r18, 0xFF	; 255
 338:	80 e7       	ldi	r24, 0x70	; 112
 33a:	92 e0       	ldi	r25, 0x02	; 2
 33c:	21 50       	subi	r18, 0x01	; 1
 33e:	80 40       	sbci	r24, 0x00	; 0
 340:	90 40       	sbci	r25, 0x00	; 0
 342:	e1 f7       	brne	.-8      	; 0x33c <main+0x54>
 344:	00 c0       	rjmp	.+0      	; 0x346 <main+0x5e>
 346:	00 00       	nop
 348:	e4 cf       	rjmp	.-56     	; 0x312 <main+0x2a>

0000034a <timer1_init>:
#include "servo.h"

void timer1_init(void)
{
	// Set up timer in Fast PWM mode 14
	TCCR3A |= (1 << COM1A1)|(1 << WGM11);
 34a:	e0 e9       	ldi	r30, 0x90	; 144
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	80 81       	ld	r24, Z
 350:	82 68       	ori	r24, 0x82	; 130
 352:	80 83       	st	Z, r24
	
	// Set up timer with prescaler = 64 and PWM fast mode 14
	TCCR3B |= (1 << WGM13)|(1 << WGM12)|(1 << CS11)|(1 << CS10);
 354:	e1 e9       	ldi	r30, 0x91	; 145
 356:	f0 e0       	ldi	r31, 0x00	; 0
 358:	80 81       	ld	r24, Z
 35a:	8b 61       	ori	r24, 0x1B	; 27
 35c:	80 83       	st	Z, r24
	
	// Set up timer with TOP value = 5000 (0x1388)
	ICR3 = 0x1388;
 35e:	88 e8       	ldi	r24, 0x88	; 136
 360:	93 e1       	ldi	r25, 0x13	; 19
 362:	90 93 97 00 	sts	0x0097, r25
 366:	80 93 96 00 	sts	0x0096, r24
	
	// initialize counter
	TCNT3 = 0;
 36a:	10 92 95 00 	sts	0x0095, r1
 36e:	10 92 94 00 	sts	0x0094, r1
	
	// initialize compare value (servo to middle, 0x0177)
	OCR3A = 0x0177; //middle
 372:	87 e7       	ldi	r24, 0x77	; 119
 374:	91 e0       	ldi	r25, 0x01	; 1
 376:	90 93 99 00 	sts	0x0099, r25
 37a:	80 93 98 00 	sts	0x0098, r24
	
	// Enable compare interrupt
	TIMSK3 |= (1 << OCIE1A);
 37e:	e1 e7       	ldi	r30, 0x71	; 113
 380:	f0 e0       	ldi	r31, 0x00	; 0
 382:	80 81       	ld	r24, Z
 384:	82 60       	ori	r24, 0x02	; 2
 386:	80 83       	st	Z, r24
	
	// Set PWM port as output
	DDRE = (1 << PE3);
 388:	88 e0       	ldi	r24, 0x08	; 8
 38a:	8d b9       	out	0x0d, r24	; 13
 38c:	08 95       	ret

0000038e <SERVO_write>:
}

void SERVO_write(position_t pos)
{
 38e:	cf 92       	push	r12
 390:	df 92       	push	r13
 392:	ef 92       	push	r14
 394:	ff 92       	push	r15
	const uint32_t min = 225;
	const uint32_t max = 525;
	const uint32_t delta = max-min;
	uint32_t y = (uint32_t) pos.y;
 396:	c9 2e       	mov	r12, r25
 398:	d1 2c       	mov	r13, r1
 39a:	e1 2c       	mov	r14, r1
 39c:	f1 2c       	mov	r15, r1
	printf("Y casted: %d\n", y);
 39e:	1f 92       	push	r1
 3a0:	1f 92       	push	r1
 3a2:	1f 92       	push	r1
 3a4:	9f 93       	push	r25
 3a6:	84 e6       	ldi	r24, 0x64	; 100
 3a8:	92 e0       	ldi	r25, 0x02	; 2
 3aa:	9f 93       	push	r25
 3ac:	8f 93       	push	r24
 3ae:	e7 d0       	rcall	.+462    	; 0x57e <printf>
	uint32_t ref = y * delta/255;
 3b0:	ac e2       	ldi	r26, 0x2C	; 44
 3b2:	b1 e0       	ldi	r27, 0x01	; 1
 3b4:	a7 01       	movw	r20, r14
 3b6:	96 01       	movw	r18, r12
 3b8:	7f d0       	rcall	.+254    	; 0x4b8 <__muluhisi3>
 3ba:	2f ef       	ldi	r18, 0xFF	; 255
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	40 e0       	ldi	r20, 0x00	; 0
 3c0:	50 e0       	ldi	r21, 0x00	; 0
 3c2:	58 d0       	rcall	.+176    	; 0x474 <__udivmodsi4>
	uint32_t new_pos = min + ref;
 3c4:	69 01       	movw	r12, r18
 3c6:	7a 01       	movw	r14, r20
 3c8:	81 ee       	ldi	r24, 0xE1	; 225
 3ca:	c8 0e       	add	r12, r24
 3cc:	d1 1c       	adc	r13, r1
 3ce:	e1 1c       	adc	r14, r1
 3d0:	f1 1c       	adc	r15, r1
	
	// Update compare register
	printf("new_pos: %d\n", new_pos);
 3d2:	ff 92       	push	r15
 3d4:	ef 92       	push	r14
 3d6:	df 92       	push	r13
 3d8:	cf 92       	push	r12
 3da:	82 e7       	ldi	r24, 0x72	; 114
 3dc:	92 e0       	ldi	r25, 0x02	; 2
 3de:	9f 93       	push	r25
 3e0:	8f 93       	push	r24
 3e2:	cd d0       	rcall	.+410    	; 0x57e <printf>
	OCR3A = new_pos;
 3e4:	d0 92 99 00 	sts	0x0099, r13
 3e8:	c0 92 98 00 	sts	0x0098, r12
 3ec:	8d b7       	in	r24, 0x3d	; 61
 3ee:	9e b7       	in	r25, 0x3e	; 62
 3f0:	0c 96       	adiw	r24, 0x0c	; 12
 3f2:	0f b6       	in	r0, 0x3f	; 63
 3f4:	f8 94       	cli
 3f6:	9e bf       	out	0x3e, r25	; 62
 3f8:	0f be       	out	0x3f, r0	; 63
 3fa:	8d bf       	out	0x3d, r24	; 61
}
 3fc:	ff 90       	pop	r15
 3fe:	ef 90       	pop	r14
 400:	df 90       	pop	r13
 402:	cf 90       	pop	r12
 404:	08 95       	ret

00000406 <__vector_32>:

/* Interrupt handler for TIMER1 compare */
ISR(TIMER3_COMPA_vect) {
 406:	1f 92       	push	r1
 408:	0f 92       	push	r0
 40a:	0f b6       	in	r0, 0x3f	; 63
 40c:	0f 92       	push	r0
 40e:	11 24       	eor	r1, r1
 410:	8f 93       	push	r24
 412:	9f 93       	push	r25

	// pin toggle
	PORTE ^= (1 << PE3);
 414:	9e b1       	in	r25, 0x0e	; 14
 416:	88 e0       	ldi	r24, 0x08	; 8
 418:	89 27       	eor	r24, r25
 41a:	8e b9       	out	0x0e, r24	; 14
 41c:	9f 91       	pop	r25
 41e:	8f 91       	pop	r24
 420:	0f 90       	pop	r0
 422:	0f be       	out	0x3f, r0	; 63
 424:	0f 90       	pop	r0
 426:	1f 90       	pop	r1
 428:	18 95       	reti

0000042a <SPI_master_init>:
#include <avr/delay.h>

void SPI_master_init(void)
{
	/* Set ~SS, MOSI and SCK output, all others input */
	DDRB = (1 << PB0)|(1 << PB2)|(1 << PB1); // Setting ~SS necessary?
 42a:	87 e0       	ldi	r24, 0x07	; 7
 42c:	84 b9       	out	0x04, r24	; 4
	
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1 << SPE)|(1 << MSTR)|(1 << SPR0);
 42e:	81 e5       	ldi	r24, 0x51	; 81
 430:	8c bd       	out	0x2c, r24	; 44
 432:	08 95       	ret

00000434 <SPI_master_transmit>:
}

void SPI_master_transmit(uint8_t cData)
{
	/* Start transmission */
	SPDR = cData;
 434:	8e bd       	out	0x2e, r24	; 46
	
	/* Wait for transmission to complete */
	while (!(SPSR & (1 << SPIF))) {
 436:	0d b4       	in	r0, 0x2d	; 45
 438:	07 fe       	sbrs	r0, 7
 43a:	fd cf       	rjmp	.-6      	; 0x436 <SPI_master_transmit+0x2>
		;
	}
}
 43c:	08 95       	ret

0000043e <USART_init>:
#include <avr/io.h>

void USART_init(unsigned int ubrr)
{
	/* Set baud rate*/
	UBRR0H = (unsigned char)(ubrr >> 8 );
 43e:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
 442:	80 93 c4 00 	sts	0x00C4, r24
	/*Enable receiver and transmitter*/
	UCSR0B = (1 << RXEN0)|(1 << TXEN0);
 446:	88 e1       	ldi	r24, 0x18	; 24
 448:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1 << USBS0)|(3 << UCSZ10);
 44c:	8e e0       	ldi	r24, 0x0E	; 14
 44e:	80 93 c2 00 	sts	0x00C2, r24
 452:	08 95       	ret

00000454 <USART_transmit>:
}

void USART_transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while (!( UCSR0A & (1 << UDRE0)))
 454:	e0 ec       	ldi	r30, 0xC0	; 192
 456:	f0 e0       	ldi	r31, 0x00	; 0
 458:	90 81       	ld	r25, Z
 45a:	95 ff       	sbrs	r25, 5
 45c:	fd cf       	rjmp	.-6      	; 0x458 <USART_transmit+0x4>
		;
	/* Put data into buffer, sends the data */
	UDR0 = data;
 45e:	80 93 c6 00 	sts	0x00C6, r24
 462:	08 95       	ret

00000464 <USART_receive>:
}

unsigned char USART_receive(void)
{
	/* Wait for data to be received */
	while ( !(UCSR0A & ( 1 << RXC0)) )
 464:	e0 ec       	ldi	r30, 0xC0	; 192
 466:	f0 e0       	ldi	r31, 0x00	; 0
 468:	80 81       	ld	r24, Z
 46a:	88 23       	and	r24, r24
 46c:	ec f7       	brge	.-6      	; 0x468 <USART_receive+0x4>
		;
	/* Get and return received data from buffer */
	return UDR0;
 46e:	80 91 c6 00 	lds	r24, 0x00C6
}
 472:	08 95       	ret

00000474 <__udivmodsi4>:
 474:	a1 e2       	ldi	r26, 0x21	; 33
 476:	1a 2e       	mov	r1, r26
 478:	aa 1b       	sub	r26, r26
 47a:	bb 1b       	sub	r27, r27
 47c:	fd 01       	movw	r30, r26
 47e:	0d c0       	rjmp	.+26     	; 0x49a <__udivmodsi4_ep>

00000480 <__udivmodsi4_loop>:
 480:	aa 1f       	adc	r26, r26
 482:	bb 1f       	adc	r27, r27
 484:	ee 1f       	adc	r30, r30
 486:	ff 1f       	adc	r31, r31
 488:	a2 17       	cp	r26, r18
 48a:	b3 07       	cpc	r27, r19
 48c:	e4 07       	cpc	r30, r20
 48e:	f5 07       	cpc	r31, r21
 490:	20 f0       	brcs	.+8      	; 0x49a <__udivmodsi4_ep>
 492:	a2 1b       	sub	r26, r18
 494:	b3 0b       	sbc	r27, r19
 496:	e4 0b       	sbc	r30, r20
 498:	f5 0b       	sbc	r31, r21

0000049a <__udivmodsi4_ep>:
 49a:	66 1f       	adc	r22, r22
 49c:	77 1f       	adc	r23, r23
 49e:	88 1f       	adc	r24, r24
 4a0:	99 1f       	adc	r25, r25
 4a2:	1a 94       	dec	r1
 4a4:	69 f7       	brne	.-38     	; 0x480 <__udivmodsi4_loop>
 4a6:	60 95       	com	r22
 4a8:	70 95       	com	r23
 4aa:	80 95       	com	r24
 4ac:	90 95       	com	r25
 4ae:	9b 01       	movw	r18, r22
 4b0:	ac 01       	movw	r20, r24
 4b2:	bd 01       	movw	r22, r26
 4b4:	cf 01       	movw	r24, r30
 4b6:	08 95       	ret

000004b8 <__muluhisi3>:
 4b8:	09 d0       	rcall	.+18     	; 0x4cc <__umulhisi3>
 4ba:	a5 9f       	mul	r26, r21
 4bc:	90 0d       	add	r25, r0
 4be:	b4 9f       	mul	r27, r20
 4c0:	90 0d       	add	r25, r0
 4c2:	a4 9f       	mul	r26, r20
 4c4:	80 0d       	add	r24, r0
 4c6:	91 1d       	adc	r25, r1
 4c8:	11 24       	eor	r1, r1
 4ca:	08 95       	ret

000004cc <__umulhisi3>:
 4cc:	a2 9f       	mul	r26, r18
 4ce:	b0 01       	movw	r22, r0
 4d0:	b3 9f       	mul	r27, r19
 4d2:	c0 01       	movw	r24, r0
 4d4:	a3 9f       	mul	r26, r19
 4d6:	70 0d       	add	r23, r0
 4d8:	81 1d       	adc	r24, r1
 4da:	11 24       	eor	r1, r1
 4dc:	91 1d       	adc	r25, r1
 4de:	b2 9f       	mul	r27, r18
 4e0:	70 0d       	add	r23, r0
 4e2:	81 1d       	adc	r24, r1
 4e4:	11 24       	eor	r1, r1
 4e6:	91 1d       	adc	r25, r1
 4e8:	08 95       	ret

000004ea <fdevopen>:
 4ea:	0f 93       	push	r16
 4ec:	1f 93       	push	r17
 4ee:	cf 93       	push	r28
 4f0:	df 93       	push	r29
 4f2:	ec 01       	movw	r28, r24
 4f4:	8b 01       	movw	r16, r22
 4f6:	00 97       	sbiw	r24, 0x00	; 0
 4f8:	31 f4       	brne	.+12     	; 0x506 <fdevopen+0x1c>
 4fa:	61 15       	cp	r22, r1
 4fc:	71 05       	cpc	r23, r1
 4fe:	19 f4       	brne	.+6      	; 0x506 <fdevopen+0x1c>
 500:	80 e0       	ldi	r24, 0x00	; 0
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	37 c0       	rjmp	.+110    	; 0x574 <fdevopen+0x8a>
 506:	6e e0       	ldi	r22, 0x0E	; 14
 508:	70 e0       	ldi	r23, 0x00	; 0
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	63 d2       	rcall	.+1222   	; 0x9d6 <calloc>
 510:	fc 01       	movw	r30, r24
 512:	00 97       	sbiw	r24, 0x00	; 0
 514:	a9 f3       	breq	.-22     	; 0x500 <fdevopen+0x16>
 516:	80 e8       	ldi	r24, 0x80	; 128
 518:	83 83       	std	Z+3, r24	; 0x03
 51a:	01 15       	cp	r16, r1
 51c:	11 05       	cpc	r17, r1
 51e:	71 f0       	breq	.+28     	; 0x53c <fdevopen+0x52>
 520:	13 87       	std	Z+11, r17	; 0x0b
 522:	02 87       	std	Z+10, r16	; 0x0a
 524:	81 e8       	ldi	r24, 0x81	; 129
 526:	83 83       	std	Z+3, r24	; 0x03
 528:	80 91 80 02 	lds	r24, 0x0280
 52c:	90 91 81 02 	lds	r25, 0x0281
 530:	89 2b       	or	r24, r25
 532:	21 f4       	brne	.+8      	; 0x53c <fdevopen+0x52>
 534:	f0 93 81 02 	sts	0x0281, r31
 538:	e0 93 80 02 	sts	0x0280, r30
 53c:	20 97       	sbiw	r28, 0x00	; 0
 53e:	c9 f0       	breq	.+50     	; 0x572 <fdevopen+0x88>
 540:	d1 87       	std	Z+9, r29	; 0x09
 542:	c0 87       	std	Z+8, r28	; 0x08
 544:	83 81       	ldd	r24, Z+3	; 0x03
 546:	82 60       	ori	r24, 0x02	; 2
 548:	83 83       	std	Z+3, r24	; 0x03
 54a:	80 91 82 02 	lds	r24, 0x0282
 54e:	90 91 83 02 	lds	r25, 0x0283
 552:	89 2b       	or	r24, r25
 554:	71 f4       	brne	.+28     	; 0x572 <fdevopen+0x88>
 556:	f0 93 83 02 	sts	0x0283, r31
 55a:	e0 93 82 02 	sts	0x0282, r30
 55e:	80 91 84 02 	lds	r24, 0x0284
 562:	90 91 85 02 	lds	r25, 0x0285
 566:	89 2b       	or	r24, r25
 568:	21 f4       	brne	.+8      	; 0x572 <fdevopen+0x88>
 56a:	f0 93 85 02 	sts	0x0285, r31
 56e:	e0 93 84 02 	sts	0x0284, r30
 572:	cf 01       	movw	r24, r30
 574:	df 91       	pop	r29
 576:	cf 91       	pop	r28
 578:	1f 91       	pop	r17
 57a:	0f 91       	pop	r16
 57c:	08 95       	ret

0000057e <printf>:
 57e:	cf 93       	push	r28
 580:	df 93       	push	r29
 582:	cd b7       	in	r28, 0x3d	; 61
 584:	de b7       	in	r29, 0x3e	; 62
 586:	fe 01       	movw	r30, r28
 588:	36 96       	adiw	r30, 0x06	; 6
 58a:	61 91       	ld	r22, Z+
 58c:	71 91       	ld	r23, Z+
 58e:	af 01       	movw	r20, r30
 590:	80 91 82 02 	lds	r24, 0x0282
 594:	90 91 83 02 	lds	r25, 0x0283
 598:	30 d0       	rcall	.+96     	; 0x5fa <vfprintf>
 59a:	df 91       	pop	r29
 59c:	cf 91       	pop	r28
 59e:	08 95       	ret

000005a0 <puts>:
 5a0:	0f 93       	push	r16
 5a2:	1f 93       	push	r17
 5a4:	cf 93       	push	r28
 5a6:	df 93       	push	r29
 5a8:	e0 91 82 02 	lds	r30, 0x0282
 5ac:	f0 91 83 02 	lds	r31, 0x0283
 5b0:	23 81       	ldd	r18, Z+3	; 0x03
 5b2:	21 ff       	sbrs	r18, 1
 5b4:	1b c0       	rjmp	.+54     	; 0x5ec <puts+0x4c>
 5b6:	ec 01       	movw	r28, r24
 5b8:	00 e0       	ldi	r16, 0x00	; 0
 5ba:	10 e0       	ldi	r17, 0x00	; 0
 5bc:	89 91       	ld	r24, Y+
 5be:	60 91 82 02 	lds	r22, 0x0282
 5c2:	70 91 83 02 	lds	r23, 0x0283
 5c6:	db 01       	movw	r26, r22
 5c8:	18 96       	adiw	r26, 0x08	; 8
 5ca:	ed 91       	ld	r30, X+
 5cc:	fc 91       	ld	r31, X
 5ce:	19 97       	sbiw	r26, 0x09	; 9
 5d0:	88 23       	and	r24, r24
 5d2:	31 f0       	breq	.+12     	; 0x5e0 <puts+0x40>
 5d4:	19 95       	eicall
 5d6:	89 2b       	or	r24, r25
 5d8:	89 f3       	breq	.-30     	; 0x5bc <puts+0x1c>
 5da:	0f ef       	ldi	r16, 0xFF	; 255
 5dc:	1f ef       	ldi	r17, 0xFF	; 255
 5de:	ee cf       	rjmp	.-36     	; 0x5bc <puts+0x1c>
 5e0:	8a e0       	ldi	r24, 0x0A	; 10
 5e2:	19 95       	eicall
 5e4:	89 2b       	or	r24, r25
 5e6:	11 f4       	brne	.+4      	; 0x5ec <puts+0x4c>
 5e8:	c8 01       	movw	r24, r16
 5ea:	02 c0       	rjmp	.+4      	; 0x5f0 <puts+0x50>
 5ec:	8f ef       	ldi	r24, 0xFF	; 255
 5ee:	9f ef       	ldi	r25, 0xFF	; 255
 5f0:	df 91       	pop	r29
 5f2:	cf 91       	pop	r28
 5f4:	1f 91       	pop	r17
 5f6:	0f 91       	pop	r16
 5f8:	08 95       	ret

000005fa <vfprintf>:
 5fa:	2f 92       	push	r2
 5fc:	3f 92       	push	r3
 5fe:	4f 92       	push	r4
 600:	5f 92       	push	r5
 602:	6f 92       	push	r6
 604:	7f 92       	push	r7
 606:	8f 92       	push	r8
 608:	9f 92       	push	r9
 60a:	af 92       	push	r10
 60c:	bf 92       	push	r11
 60e:	cf 92       	push	r12
 610:	df 92       	push	r13
 612:	ef 92       	push	r14
 614:	ff 92       	push	r15
 616:	0f 93       	push	r16
 618:	1f 93       	push	r17
 61a:	cf 93       	push	r28
 61c:	df 93       	push	r29
 61e:	cd b7       	in	r28, 0x3d	; 61
 620:	de b7       	in	r29, 0x3e	; 62
 622:	2c 97       	sbiw	r28, 0x0c	; 12
 624:	0f b6       	in	r0, 0x3f	; 63
 626:	f8 94       	cli
 628:	de bf       	out	0x3e, r29	; 62
 62a:	0f be       	out	0x3f, r0	; 63
 62c:	cd bf       	out	0x3d, r28	; 61
 62e:	7c 01       	movw	r14, r24
 630:	6b 01       	movw	r12, r22
 632:	8a 01       	movw	r16, r20
 634:	fc 01       	movw	r30, r24
 636:	17 82       	std	Z+7, r1	; 0x07
 638:	16 82       	std	Z+6, r1	; 0x06
 63a:	83 81       	ldd	r24, Z+3	; 0x03
 63c:	81 ff       	sbrs	r24, 1
 63e:	b0 c1       	rjmp	.+864    	; 0x9a0 <vfprintf+0x3a6>
 640:	ce 01       	movw	r24, r28
 642:	01 96       	adiw	r24, 0x01	; 1
 644:	4c 01       	movw	r8, r24
 646:	f7 01       	movw	r30, r14
 648:	93 81       	ldd	r25, Z+3	; 0x03
 64a:	f6 01       	movw	r30, r12
 64c:	93 fd       	sbrc	r25, 3
 64e:	85 91       	lpm	r24, Z+
 650:	93 ff       	sbrs	r25, 3
 652:	81 91       	ld	r24, Z+
 654:	6f 01       	movw	r12, r30
 656:	88 23       	and	r24, r24
 658:	09 f4       	brne	.+2      	; 0x65c <vfprintf+0x62>
 65a:	9e c1       	rjmp	.+828    	; 0x998 <vfprintf+0x39e>
 65c:	85 32       	cpi	r24, 0x25	; 37
 65e:	39 f4       	brne	.+14     	; 0x66e <vfprintf+0x74>
 660:	93 fd       	sbrc	r25, 3
 662:	85 91       	lpm	r24, Z+
 664:	93 ff       	sbrs	r25, 3
 666:	81 91       	ld	r24, Z+
 668:	6f 01       	movw	r12, r30
 66a:	85 32       	cpi	r24, 0x25	; 37
 66c:	21 f4       	brne	.+8      	; 0x676 <vfprintf+0x7c>
 66e:	b7 01       	movw	r22, r14
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	0f d3       	rcall	.+1566   	; 0xc92 <fputc>
 674:	e8 cf       	rjmp	.-48     	; 0x646 <vfprintf+0x4c>
 676:	51 2c       	mov	r5, r1
 678:	31 2c       	mov	r3, r1
 67a:	20 e0       	ldi	r18, 0x00	; 0
 67c:	20 32       	cpi	r18, 0x20	; 32
 67e:	a0 f4       	brcc	.+40     	; 0x6a8 <vfprintf+0xae>
 680:	8b 32       	cpi	r24, 0x2B	; 43
 682:	69 f0       	breq	.+26     	; 0x69e <vfprintf+0xa4>
 684:	30 f4       	brcc	.+12     	; 0x692 <vfprintf+0x98>
 686:	80 32       	cpi	r24, 0x20	; 32
 688:	59 f0       	breq	.+22     	; 0x6a0 <vfprintf+0xa6>
 68a:	83 32       	cpi	r24, 0x23	; 35
 68c:	69 f4       	brne	.+26     	; 0x6a8 <vfprintf+0xae>
 68e:	20 61       	ori	r18, 0x10	; 16
 690:	2c c0       	rjmp	.+88     	; 0x6ea <vfprintf+0xf0>
 692:	8d 32       	cpi	r24, 0x2D	; 45
 694:	39 f0       	breq	.+14     	; 0x6a4 <vfprintf+0xaa>
 696:	80 33       	cpi	r24, 0x30	; 48
 698:	39 f4       	brne	.+14     	; 0x6a8 <vfprintf+0xae>
 69a:	21 60       	ori	r18, 0x01	; 1
 69c:	26 c0       	rjmp	.+76     	; 0x6ea <vfprintf+0xf0>
 69e:	22 60       	ori	r18, 0x02	; 2
 6a0:	24 60       	ori	r18, 0x04	; 4
 6a2:	23 c0       	rjmp	.+70     	; 0x6ea <vfprintf+0xf0>
 6a4:	28 60       	ori	r18, 0x08	; 8
 6a6:	21 c0       	rjmp	.+66     	; 0x6ea <vfprintf+0xf0>
 6a8:	27 fd       	sbrc	r18, 7
 6aa:	27 c0       	rjmp	.+78     	; 0x6fa <vfprintf+0x100>
 6ac:	30 ed       	ldi	r19, 0xD0	; 208
 6ae:	38 0f       	add	r19, r24
 6b0:	3a 30       	cpi	r19, 0x0A	; 10
 6b2:	78 f4       	brcc	.+30     	; 0x6d2 <vfprintf+0xd8>
 6b4:	26 ff       	sbrs	r18, 6
 6b6:	06 c0       	rjmp	.+12     	; 0x6c4 <vfprintf+0xca>
 6b8:	fa e0       	ldi	r31, 0x0A	; 10
 6ba:	5f 9e       	mul	r5, r31
 6bc:	30 0d       	add	r19, r0
 6be:	11 24       	eor	r1, r1
 6c0:	53 2e       	mov	r5, r19
 6c2:	13 c0       	rjmp	.+38     	; 0x6ea <vfprintf+0xf0>
 6c4:	8a e0       	ldi	r24, 0x0A	; 10
 6c6:	38 9e       	mul	r3, r24
 6c8:	30 0d       	add	r19, r0
 6ca:	11 24       	eor	r1, r1
 6cc:	33 2e       	mov	r3, r19
 6ce:	20 62       	ori	r18, 0x20	; 32
 6d0:	0c c0       	rjmp	.+24     	; 0x6ea <vfprintf+0xf0>
 6d2:	8e 32       	cpi	r24, 0x2E	; 46
 6d4:	21 f4       	brne	.+8      	; 0x6de <vfprintf+0xe4>
 6d6:	26 fd       	sbrc	r18, 6
 6d8:	5f c1       	rjmp	.+702    	; 0x998 <vfprintf+0x39e>
 6da:	20 64       	ori	r18, 0x40	; 64
 6dc:	06 c0       	rjmp	.+12     	; 0x6ea <vfprintf+0xf0>
 6de:	8c 36       	cpi	r24, 0x6C	; 108
 6e0:	11 f4       	brne	.+4      	; 0x6e6 <vfprintf+0xec>
 6e2:	20 68       	ori	r18, 0x80	; 128
 6e4:	02 c0       	rjmp	.+4      	; 0x6ea <vfprintf+0xf0>
 6e6:	88 36       	cpi	r24, 0x68	; 104
 6e8:	41 f4       	brne	.+16     	; 0x6fa <vfprintf+0x100>
 6ea:	f6 01       	movw	r30, r12
 6ec:	93 fd       	sbrc	r25, 3
 6ee:	85 91       	lpm	r24, Z+
 6f0:	93 ff       	sbrs	r25, 3
 6f2:	81 91       	ld	r24, Z+
 6f4:	6f 01       	movw	r12, r30
 6f6:	81 11       	cpse	r24, r1
 6f8:	c1 cf       	rjmp	.-126    	; 0x67c <vfprintf+0x82>
 6fa:	98 2f       	mov	r25, r24
 6fc:	9f 7d       	andi	r25, 0xDF	; 223
 6fe:	95 54       	subi	r25, 0x45	; 69
 700:	93 30       	cpi	r25, 0x03	; 3
 702:	28 f4       	brcc	.+10     	; 0x70e <vfprintf+0x114>
 704:	0c 5f       	subi	r16, 0xFC	; 252
 706:	1f 4f       	sbci	r17, 0xFF	; 255
 708:	ff e3       	ldi	r31, 0x3F	; 63
 70a:	f9 83       	std	Y+1, r31	; 0x01
 70c:	0d c0       	rjmp	.+26     	; 0x728 <vfprintf+0x12e>
 70e:	83 36       	cpi	r24, 0x63	; 99
 710:	31 f0       	breq	.+12     	; 0x71e <vfprintf+0x124>
 712:	83 37       	cpi	r24, 0x73	; 115
 714:	71 f0       	breq	.+28     	; 0x732 <vfprintf+0x138>
 716:	83 35       	cpi	r24, 0x53	; 83
 718:	09 f0       	breq	.+2      	; 0x71c <vfprintf+0x122>
 71a:	57 c0       	rjmp	.+174    	; 0x7ca <vfprintf+0x1d0>
 71c:	21 c0       	rjmp	.+66     	; 0x760 <vfprintf+0x166>
 71e:	f8 01       	movw	r30, r16
 720:	80 81       	ld	r24, Z
 722:	89 83       	std	Y+1, r24	; 0x01
 724:	0e 5f       	subi	r16, 0xFE	; 254
 726:	1f 4f       	sbci	r17, 0xFF	; 255
 728:	44 24       	eor	r4, r4
 72a:	43 94       	inc	r4
 72c:	51 2c       	mov	r5, r1
 72e:	54 01       	movw	r10, r8
 730:	14 c0       	rjmp	.+40     	; 0x75a <vfprintf+0x160>
 732:	38 01       	movw	r6, r16
 734:	f2 e0       	ldi	r31, 0x02	; 2
 736:	6f 0e       	add	r6, r31
 738:	71 1c       	adc	r7, r1
 73a:	f8 01       	movw	r30, r16
 73c:	a0 80       	ld	r10, Z
 73e:	b1 80       	ldd	r11, Z+1	; 0x01
 740:	26 ff       	sbrs	r18, 6
 742:	03 c0       	rjmp	.+6      	; 0x74a <vfprintf+0x150>
 744:	65 2d       	mov	r22, r5
 746:	70 e0       	ldi	r23, 0x00	; 0
 748:	02 c0       	rjmp	.+4      	; 0x74e <vfprintf+0x154>
 74a:	6f ef       	ldi	r22, 0xFF	; 255
 74c:	7f ef       	ldi	r23, 0xFF	; 255
 74e:	c5 01       	movw	r24, r10
 750:	2c 87       	std	Y+12, r18	; 0x0c
 752:	94 d2       	rcall	.+1320   	; 0xc7c <strnlen>
 754:	2c 01       	movw	r4, r24
 756:	83 01       	movw	r16, r6
 758:	2c 85       	ldd	r18, Y+12	; 0x0c
 75a:	2f 77       	andi	r18, 0x7F	; 127
 75c:	22 2e       	mov	r2, r18
 75e:	16 c0       	rjmp	.+44     	; 0x78c <vfprintf+0x192>
 760:	38 01       	movw	r6, r16
 762:	f2 e0       	ldi	r31, 0x02	; 2
 764:	6f 0e       	add	r6, r31
 766:	71 1c       	adc	r7, r1
 768:	f8 01       	movw	r30, r16
 76a:	a0 80       	ld	r10, Z
 76c:	b1 80       	ldd	r11, Z+1	; 0x01
 76e:	26 ff       	sbrs	r18, 6
 770:	03 c0       	rjmp	.+6      	; 0x778 <vfprintf+0x17e>
 772:	65 2d       	mov	r22, r5
 774:	70 e0       	ldi	r23, 0x00	; 0
 776:	02 c0       	rjmp	.+4      	; 0x77c <vfprintf+0x182>
 778:	6f ef       	ldi	r22, 0xFF	; 255
 77a:	7f ef       	ldi	r23, 0xFF	; 255
 77c:	c5 01       	movw	r24, r10
 77e:	2c 87       	std	Y+12, r18	; 0x0c
 780:	6b d2       	rcall	.+1238   	; 0xc58 <strnlen_P>
 782:	2c 01       	movw	r4, r24
 784:	2c 85       	ldd	r18, Y+12	; 0x0c
 786:	20 68       	ori	r18, 0x80	; 128
 788:	22 2e       	mov	r2, r18
 78a:	83 01       	movw	r16, r6
 78c:	23 fc       	sbrc	r2, 3
 78e:	19 c0       	rjmp	.+50     	; 0x7c2 <vfprintf+0x1c8>
 790:	83 2d       	mov	r24, r3
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	48 16       	cp	r4, r24
 796:	59 06       	cpc	r5, r25
 798:	a0 f4       	brcc	.+40     	; 0x7c2 <vfprintf+0x1c8>
 79a:	b7 01       	movw	r22, r14
 79c:	80 e2       	ldi	r24, 0x20	; 32
 79e:	90 e0       	ldi	r25, 0x00	; 0
 7a0:	78 d2       	rcall	.+1264   	; 0xc92 <fputc>
 7a2:	3a 94       	dec	r3
 7a4:	f5 cf       	rjmp	.-22     	; 0x790 <vfprintf+0x196>
 7a6:	f5 01       	movw	r30, r10
 7a8:	27 fc       	sbrc	r2, 7
 7aa:	85 91       	lpm	r24, Z+
 7ac:	27 fe       	sbrs	r2, 7
 7ae:	81 91       	ld	r24, Z+
 7b0:	5f 01       	movw	r10, r30
 7b2:	b7 01       	movw	r22, r14
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	6d d2       	rcall	.+1242   	; 0xc92 <fputc>
 7b8:	31 10       	cpse	r3, r1
 7ba:	3a 94       	dec	r3
 7bc:	f1 e0       	ldi	r31, 0x01	; 1
 7be:	4f 1a       	sub	r4, r31
 7c0:	51 08       	sbc	r5, r1
 7c2:	41 14       	cp	r4, r1
 7c4:	51 04       	cpc	r5, r1
 7c6:	79 f7       	brne	.-34     	; 0x7a6 <vfprintf+0x1ac>
 7c8:	de c0       	rjmp	.+444    	; 0x986 <vfprintf+0x38c>
 7ca:	84 36       	cpi	r24, 0x64	; 100
 7cc:	11 f0       	breq	.+4      	; 0x7d2 <vfprintf+0x1d8>
 7ce:	89 36       	cpi	r24, 0x69	; 105
 7d0:	31 f5       	brne	.+76     	; 0x81e <vfprintf+0x224>
 7d2:	f8 01       	movw	r30, r16
 7d4:	27 ff       	sbrs	r18, 7
 7d6:	07 c0       	rjmp	.+14     	; 0x7e6 <vfprintf+0x1ec>
 7d8:	60 81       	ld	r22, Z
 7da:	71 81       	ldd	r23, Z+1	; 0x01
 7dc:	82 81       	ldd	r24, Z+2	; 0x02
 7de:	93 81       	ldd	r25, Z+3	; 0x03
 7e0:	0c 5f       	subi	r16, 0xFC	; 252
 7e2:	1f 4f       	sbci	r17, 0xFF	; 255
 7e4:	08 c0       	rjmp	.+16     	; 0x7f6 <vfprintf+0x1fc>
 7e6:	60 81       	ld	r22, Z
 7e8:	71 81       	ldd	r23, Z+1	; 0x01
 7ea:	88 27       	eor	r24, r24
 7ec:	77 fd       	sbrc	r23, 7
 7ee:	80 95       	com	r24
 7f0:	98 2f       	mov	r25, r24
 7f2:	0e 5f       	subi	r16, 0xFE	; 254
 7f4:	1f 4f       	sbci	r17, 0xFF	; 255
 7f6:	2f 76       	andi	r18, 0x6F	; 111
 7f8:	b2 2e       	mov	r11, r18
 7fa:	97 ff       	sbrs	r25, 7
 7fc:	09 c0       	rjmp	.+18     	; 0x810 <vfprintf+0x216>
 7fe:	90 95       	com	r25
 800:	80 95       	com	r24
 802:	70 95       	com	r23
 804:	61 95       	neg	r22
 806:	7f 4f       	sbci	r23, 0xFF	; 255
 808:	8f 4f       	sbci	r24, 0xFF	; 255
 80a:	9f 4f       	sbci	r25, 0xFF	; 255
 80c:	20 68       	ori	r18, 0x80	; 128
 80e:	b2 2e       	mov	r11, r18
 810:	2a e0       	ldi	r18, 0x0A	; 10
 812:	30 e0       	ldi	r19, 0x00	; 0
 814:	a4 01       	movw	r20, r8
 816:	6f d2       	rcall	.+1246   	; 0xcf6 <__ultoa_invert>
 818:	a8 2e       	mov	r10, r24
 81a:	a8 18       	sub	r10, r8
 81c:	43 c0       	rjmp	.+134    	; 0x8a4 <vfprintf+0x2aa>
 81e:	85 37       	cpi	r24, 0x75	; 117
 820:	29 f4       	brne	.+10     	; 0x82c <vfprintf+0x232>
 822:	2f 7e       	andi	r18, 0xEF	; 239
 824:	b2 2e       	mov	r11, r18
 826:	2a e0       	ldi	r18, 0x0A	; 10
 828:	30 e0       	ldi	r19, 0x00	; 0
 82a:	25 c0       	rjmp	.+74     	; 0x876 <vfprintf+0x27c>
 82c:	f2 2f       	mov	r31, r18
 82e:	f9 7f       	andi	r31, 0xF9	; 249
 830:	bf 2e       	mov	r11, r31
 832:	8f 36       	cpi	r24, 0x6F	; 111
 834:	c1 f0       	breq	.+48     	; 0x866 <vfprintf+0x26c>
 836:	18 f4       	brcc	.+6      	; 0x83e <vfprintf+0x244>
 838:	88 35       	cpi	r24, 0x58	; 88
 83a:	79 f0       	breq	.+30     	; 0x85a <vfprintf+0x260>
 83c:	ad c0       	rjmp	.+346    	; 0x998 <vfprintf+0x39e>
 83e:	80 37       	cpi	r24, 0x70	; 112
 840:	19 f0       	breq	.+6      	; 0x848 <vfprintf+0x24e>
 842:	88 37       	cpi	r24, 0x78	; 120
 844:	21 f0       	breq	.+8      	; 0x84e <vfprintf+0x254>
 846:	a8 c0       	rjmp	.+336    	; 0x998 <vfprintf+0x39e>
 848:	2f 2f       	mov	r18, r31
 84a:	20 61       	ori	r18, 0x10	; 16
 84c:	b2 2e       	mov	r11, r18
 84e:	b4 fe       	sbrs	r11, 4
 850:	0d c0       	rjmp	.+26     	; 0x86c <vfprintf+0x272>
 852:	8b 2d       	mov	r24, r11
 854:	84 60       	ori	r24, 0x04	; 4
 856:	b8 2e       	mov	r11, r24
 858:	09 c0       	rjmp	.+18     	; 0x86c <vfprintf+0x272>
 85a:	24 ff       	sbrs	r18, 4
 85c:	0a c0       	rjmp	.+20     	; 0x872 <vfprintf+0x278>
 85e:	9f 2f       	mov	r25, r31
 860:	96 60       	ori	r25, 0x06	; 6
 862:	b9 2e       	mov	r11, r25
 864:	06 c0       	rjmp	.+12     	; 0x872 <vfprintf+0x278>
 866:	28 e0       	ldi	r18, 0x08	; 8
 868:	30 e0       	ldi	r19, 0x00	; 0
 86a:	05 c0       	rjmp	.+10     	; 0x876 <vfprintf+0x27c>
 86c:	20 e1       	ldi	r18, 0x10	; 16
 86e:	30 e0       	ldi	r19, 0x00	; 0
 870:	02 c0       	rjmp	.+4      	; 0x876 <vfprintf+0x27c>
 872:	20 e1       	ldi	r18, 0x10	; 16
 874:	32 e0       	ldi	r19, 0x02	; 2
 876:	f8 01       	movw	r30, r16
 878:	b7 fe       	sbrs	r11, 7
 87a:	07 c0       	rjmp	.+14     	; 0x88a <vfprintf+0x290>
 87c:	60 81       	ld	r22, Z
 87e:	71 81       	ldd	r23, Z+1	; 0x01
 880:	82 81       	ldd	r24, Z+2	; 0x02
 882:	93 81       	ldd	r25, Z+3	; 0x03
 884:	0c 5f       	subi	r16, 0xFC	; 252
 886:	1f 4f       	sbci	r17, 0xFF	; 255
 888:	06 c0       	rjmp	.+12     	; 0x896 <vfprintf+0x29c>
 88a:	60 81       	ld	r22, Z
 88c:	71 81       	ldd	r23, Z+1	; 0x01
 88e:	80 e0       	ldi	r24, 0x00	; 0
 890:	90 e0       	ldi	r25, 0x00	; 0
 892:	0e 5f       	subi	r16, 0xFE	; 254
 894:	1f 4f       	sbci	r17, 0xFF	; 255
 896:	a4 01       	movw	r20, r8
 898:	2e d2       	rcall	.+1116   	; 0xcf6 <__ultoa_invert>
 89a:	a8 2e       	mov	r10, r24
 89c:	a8 18       	sub	r10, r8
 89e:	fb 2d       	mov	r31, r11
 8a0:	ff 77       	andi	r31, 0x7F	; 127
 8a2:	bf 2e       	mov	r11, r31
 8a4:	b6 fe       	sbrs	r11, 6
 8a6:	0b c0       	rjmp	.+22     	; 0x8be <vfprintf+0x2c4>
 8a8:	2b 2d       	mov	r18, r11
 8aa:	2e 7f       	andi	r18, 0xFE	; 254
 8ac:	a5 14       	cp	r10, r5
 8ae:	50 f4       	brcc	.+20     	; 0x8c4 <vfprintf+0x2ca>
 8b0:	b4 fe       	sbrs	r11, 4
 8b2:	0a c0       	rjmp	.+20     	; 0x8c8 <vfprintf+0x2ce>
 8b4:	b2 fc       	sbrc	r11, 2
 8b6:	08 c0       	rjmp	.+16     	; 0x8c8 <vfprintf+0x2ce>
 8b8:	2b 2d       	mov	r18, r11
 8ba:	2e 7e       	andi	r18, 0xEE	; 238
 8bc:	05 c0       	rjmp	.+10     	; 0x8c8 <vfprintf+0x2ce>
 8be:	7a 2c       	mov	r7, r10
 8c0:	2b 2d       	mov	r18, r11
 8c2:	03 c0       	rjmp	.+6      	; 0x8ca <vfprintf+0x2d0>
 8c4:	7a 2c       	mov	r7, r10
 8c6:	01 c0       	rjmp	.+2      	; 0x8ca <vfprintf+0x2d0>
 8c8:	75 2c       	mov	r7, r5
 8ca:	24 ff       	sbrs	r18, 4
 8cc:	0d c0       	rjmp	.+26     	; 0x8e8 <vfprintf+0x2ee>
 8ce:	fe 01       	movw	r30, r28
 8d0:	ea 0d       	add	r30, r10
 8d2:	f1 1d       	adc	r31, r1
 8d4:	80 81       	ld	r24, Z
 8d6:	80 33       	cpi	r24, 0x30	; 48
 8d8:	11 f4       	brne	.+4      	; 0x8de <vfprintf+0x2e4>
 8da:	29 7e       	andi	r18, 0xE9	; 233
 8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <vfprintf+0x2f6>
 8de:	22 ff       	sbrs	r18, 2
 8e0:	06 c0       	rjmp	.+12     	; 0x8ee <vfprintf+0x2f4>
 8e2:	73 94       	inc	r7
 8e4:	73 94       	inc	r7
 8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <vfprintf+0x2f6>
 8e8:	82 2f       	mov	r24, r18
 8ea:	86 78       	andi	r24, 0x86	; 134
 8ec:	09 f0       	breq	.+2      	; 0x8f0 <vfprintf+0x2f6>
 8ee:	73 94       	inc	r7
 8f0:	23 fd       	sbrc	r18, 3
 8f2:	12 c0       	rjmp	.+36     	; 0x918 <vfprintf+0x31e>
 8f4:	20 ff       	sbrs	r18, 0
 8f6:	06 c0       	rjmp	.+12     	; 0x904 <vfprintf+0x30a>
 8f8:	5a 2c       	mov	r5, r10
 8fa:	73 14       	cp	r7, r3
 8fc:	18 f4       	brcc	.+6      	; 0x904 <vfprintf+0x30a>
 8fe:	53 0c       	add	r5, r3
 900:	57 18       	sub	r5, r7
 902:	73 2c       	mov	r7, r3
 904:	73 14       	cp	r7, r3
 906:	60 f4       	brcc	.+24     	; 0x920 <vfprintf+0x326>
 908:	b7 01       	movw	r22, r14
 90a:	80 e2       	ldi	r24, 0x20	; 32
 90c:	90 e0       	ldi	r25, 0x00	; 0
 90e:	2c 87       	std	Y+12, r18	; 0x0c
 910:	c0 d1       	rcall	.+896    	; 0xc92 <fputc>
 912:	73 94       	inc	r7
 914:	2c 85       	ldd	r18, Y+12	; 0x0c
 916:	f6 cf       	rjmp	.-20     	; 0x904 <vfprintf+0x30a>
 918:	73 14       	cp	r7, r3
 91a:	10 f4       	brcc	.+4      	; 0x920 <vfprintf+0x326>
 91c:	37 18       	sub	r3, r7
 91e:	01 c0       	rjmp	.+2      	; 0x922 <vfprintf+0x328>
 920:	31 2c       	mov	r3, r1
 922:	24 ff       	sbrs	r18, 4
 924:	11 c0       	rjmp	.+34     	; 0x948 <vfprintf+0x34e>
 926:	b7 01       	movw	r22, r14
 928:	80 e3       	ldi	r24, 0x30	; 48
 92a:	90 e0       	ldi	r25, 0x00	; 0
 92c:	2c 87       	std	Y+12, r18	; 0x0c
 92e:	b1 d1       	rcall	.+866    	; 0xc92 <fputc>
 930:	2c 85       	ldd	r18, Y+12	; 0x0c
 932:	22 ff       	sbrs	r18, 2
 934:	16 c0       	rjmp	.+44     	; 0x962 <vfprintf+0x368>
 936:	21 ff       	sbrs	r18, 1
 938:	03 c0       	rjmp	.+6      	; 0x940 <vfprintf+0x346>
 93a:	88 e5       	ldi	r24, 0x58	; 88
 93c:	90 e0       	ldi	r25, 0x00	; 0
 93e:	02 c0       	rjmp	.+4      	; 0x944 <vfprintf+0x34a>
 940:	88 e7       	ldi	r24, 0x78	; 120
 942:	90 e0       	ldi	r25, 0x00	; 0
 944:	b7 01       	movw	r22, r14
 946:	0c c0       	rjmp	.+24     	; 0x960 <vfprintf+0x366>
 948:	82 2f       	mov	r24, r18
 94a:	86 78       	andi	r24, 0x86	; 134
 94c:	51 f0       	breq	.+20     	; 0x962 <vfprintf+0x368>
 94e:	21 fd       	sbrc	r18, 1
 950:	02 c0       	rjmp	.+4      	; 0x956 <vfprintf+0x35c>
 952:	80 e2       	ldi	r24, 0x20	; 32
 954:	01 c0       	rjmp	.+2      	; 0x958 <vfprintf+0x35e>
 956:	8b e2       	ldi	r24, 0x2B	; 43
 958:	27 fd       	sbrc	r18, 7
 95a:	8d e2       	ldi	r24, 0x2D	; 45
 95c:	b7 01       	movw	r22, r14
 95e:	90 e0       	ldi	r25, 0x00	; 0
 960:	98 d1       	rcall	.+816    	; 0xc92 <fputc>
 962:	a5 14       	cp	r10, r5
 964:	30 f4       	brcc	.+12     	; 0x972 <vfprintf+0x378>
 966:	b7 01       	movw	r22, r14
 968:	80 e3       	ldi	r24, 0x30	; 48
 96a:	90 e0       	ldi	r25, 0x00	; 0
 96c:	92 d1       	rcall	.+804    	; 0xc92 <fputc>
 96e:	5a 94       	dec	r5
 970:	f8 cf       	rjmp	.-16     	; 0x962 <vfprintf+0x368>
 972:	aa 94       	dec	r10
 974:	f4 01       	movw	r30, r8
 976:	ea 0d       	add	r30, r10
 978:	f1 1d       	adc	r31, r1
 97a:	80 81       	ld	r24, Z
 97c:	b7 01       	movw	r22, r14
 97e:	90 e0       	ldi	r25, 0x00	; 0
 980:	88 d1       	rcall	.+784    	; 0xc92 <fputc>
 982:	a1 10       	cpse	r10, r1
 984:	f6 cf       	rjmp	.-20     	; 0x972 <vfprintf+0x378>
 986:	33 20       	and	r3, r3
 988:	09 f4       	brne	.+2      	; 0x98c <vfprintf+0x392>
 98a:	5d ce       	rjmp	.-838    	; 0x646 <vfprintf+0x4c>
 98c:	b7 01       	movw	r22, r14
 98e:	80 e2       	ldi	r24, 0x20	; 32
 990:	90 e0       	ldi	r25, 0x00	; 0
 992:	7f d1       	rcall	.+766    	; 0xc92 <fputc>
 994:	3a 94       	dec	r3
 996:	f7 cf       	rjmp	.-18     	; 0x986 <vfprintf+0x38c>
 998:	f7 01       	movw	r30, r14
 99a:	86 81       	ldd	r24, Z+6	; 0x06
 99c:	97 81       	ldd	r25, Z+7	; 0x07
 99e:	02 c0       	rjmp	.+4      	; 0x9a4 <vfprintf+0x3aa>
 9a0:	8f ef       	ldi	r24, 0xFF	; 255
 9a2:	9f ef       	ldi	r25, 0xFF	; 255
 9a4:	2c 96       	adiw	r28, 0x0c	; 12
 9a6:	0f b6       	in	r0, 0x3f	; 63
 9a8:	f8 94       	cli
 9aa:	de bf       	out	0x3e, r29	; 62
 9ac:	0f be       	out	0x3f, r0	; 63
 9ae:	cd bf       	out	0x3d, r28	; 61
 9b0:	df 91       	pop	r29
 9b2:	cf 91       	pop	r28
 9b4:	1f 91       	pop	r17
 9b6:	0f 91       	pop	r16
 9b8:	ff 90       	pop	r15
 9ba:	ef 90       	pop	r14
 9bc:	df 90       	pop	r13
 9be:	cf 90       	pop	r12
 9c0:	bf 90       	pop	r11
 9c2:	af 90       	pop	r10
 9c4:	9f 90       	pop	r9
 9c6:	8f 90       	pop	r8
 9c8:	7f 90       	pop	r7
 9ca:	6f 90       	pop	r6
 9cc:	5f 90       	pop	r5
 9ce:	4f 90       	pop	r4
 9d0:	3f 90       	pop	r3
 9d2:	2f 90       	pop	r2
 9d4:	08 95       	ret

000009d6 <calloc>:
 9d6:	0f 93       	push	r16
 9d8:	1f 93       	push	r17
 9da:	cf 93       	push	r28
 9dc:	df 93       	push	r29
 9de:	86 9f       	mul	r24, r22
 9e0:	80 01       	movw	r16, r0
 9e2:	87 9f       	mul	r24, r23
 9e4:	10 0d       	add	r17, r0
 9e6:	96 9f       	mul	r25, r22
 9e8:	10 0d       	add	r17, r0
 9ea:	11 24       	eor	r1, r1
 9ec:	c8 01       	movw	r24, r16
 9ee:	0d d0       	rcall	.+26     	; 0xa0a <malloc>
 9f0:	ec 01       	movw	r28, r24
 9f2:	00 97       	sbiw	r24, 0x00	; 0
 9f4:	21 f0       	breq	.+8      	; 0x9fe <calloc+0x28>
 9f6:	a8 01       	movw	r20, r16
 9f8:	60 e0       	ldi	r22, 0x00	; 0
 9fa:	70 e0       	ldi	r23, 0x00	; 0
 9fc:	38 d1       	rcall	.+624    	; 0xc6e <memset>
 9fe:	ce 01       	movw	r24, r28
 a00:	df 91       	pop	r29
 a02:	cf 91       	pop	r28
 a04:	1f 91       	pop	r17
 a06:	0f 91       	pop	r16
 a08:	08 95       	ret

00000a0a <malloc>:
 a0a:	cf 93       	push	r28
 a0c:	df 93       	push	r29
 a0e:	82 30       	cpi	r24, 0x02	; 2
 a10:	91 05       	cpc	r25, r1
 a12:	10 f4       	brcc	.+4      	; 0xa18 <malloc+0xe>
 a14:	82 e0       	ldi	r24, 0x02	; 2
 a16:	90 e0       	ldi	r25, 0x00	; 0
 a18:	e0 91 88 02 	lds	r30, 0x0288
 a1c:	f0 91 89 02 	lds	r31, 0x0289
 a20:	20 e0       	ldi	r18, 0x00	; 0
 a22:	30 e0       	ldi	r19, 0x00	; 0
 a24:	a0 e0       	ldi	r26, 0x00	; 0
 a26:	b0 e0       	ldi	r27, 0x00	; 0
 a28:	30 97       	sbiw	r30, 0x00	; 0
 a2a:	39 f1       	breq	.+78     	; 0xa7a <malloc+0x70>
 a2c:	40 81       	ld	r20, Z
 a2e:	51 81       	ldd	r21, Z+1	; 0x01
 a30:	48 17       	cp	r20, r24
 a32:	59 07       	cpc	r21, r25
 a34:	b8 f0       	brcs	.+46     	; 0xa64 <malloc+0x5a>
 a36:	48 17       	cp	r20, r24
 a38:	59 07       	cpc	r21, r25
 a3a:	71 f4       	brne	.+28     	; 0xa58 <malloc+0x4e>
 a3c:	82 81       	ldd	r24, Z+2	; 0x02
 a3e:	93 81       	ldd	r25, Z+3	; 0x03
 a40:	10 97       	sbiw	r26, 0x00	; 0
 a42:	29 f0       	breq	.+10     	; 0xa4e <malloc+0x44>
 a44:	13 96       	adiw	r26, 0x03	; 3
 a46:	9c 93       	st	X, r25
 a48:	8e 93       	st	-X, r24
 a4a:	12 97       	sbiw	r26, 0x02	; 2
 a4c:	2c c0       	rjmp	.+88     	; 0xaa6 <malloc+0x9c>
 a4e:	90 93 89 02 	sts	0x0289, r25
 a52:	80 93 88 02 	sts	0x0288, r24
 a56:	27 c0       	rjmp	.+78     	; 0xaa6 <malloc+0x9c>
 a58:	21 15       	cp	r18, r1
 a5a:	31 05       	cpc	r19, r1
 a5c:	31 f0       	breq	.+12     	; 0xa6a <malloc+0x60>
 a5e:	42 17       	cp	r20, r18
 a60:	53 07       	cpc	r21, r19
 a62:	18 f0       	brcs	.+6      	; 0xa6a <malloc+0x60>
 a64:	a9 01       	movw	r20, r18
 a66:	db 01       	movw	r26, r22
 a68:	01 c0       	rjmp	.+2      	; 0xa6c <malloc+0x62>
 a6a:	ef 01       	movw	r28, r30
 a6c:	9a 01       	movw	r18, r20
 a6e:	bd 01       	movw	r22, r26
 a70:	df 01       	movw	r26, r30
 a72:	02 80       	ldd	r0, Z+2	; 0x02
 a74:	f3 81       	ldd	r31, Z+3	; 0x03
 a76:	e0 2d       	mov	r30, r0
 a78:	d7 cf       	rjmp	.-82     	; 0xa28 <malloc+0x1e>
 a7a:	21 15       	cp	r18, r1
 a7c:	31 05       	cpc	r19, r1
 a7e:	f9 f0       	breq	.+62     	; 0xabe <malloc+0xb4>
 a80:	28 1b       	sub	r18, r24
 a82:	39 0b       	sbc	r19, r25
 a84:	24 30       	cpi	r18, 0x04	; 4
 a86:	31 05       	cpc	r19, r1
 a88:	80 f4       	brcc	.+32     	; 0xaaa <malloc+0xa0>
 a8a:	8a 81       	ldd	r24, Y+2	; 0x02
 a8c:	9b 81       	ldd	r25, Y+3	; 0x03
 a8e:	61 15       	cp	r22, r1
 a90:	71 05       	cpc	r23, r1
 a92:	21 f0       	breq	.+8      	; 0xa9c <malloc+0x92>
 a94:	fb 01       	movw	r30, r22
 a96:	93 83       	std	Z+3, r25	; 0x03
 a98:	82 83       	std	Z+2, r24	; 0x02
 a9a:	04 c0       	rjmp	.+8      	; 0xaa4 <malloc+0x9a>
 a9c:	90 93 89 02 	sts	0x0289, r25
 aa0:	80 93 88 02 	sts	0x0288, r24
 aa4:	fe 01       	movw	r30, r28
 aa6:	32 96       	adiw	r30, 0x02	; 2
 aa8:	44 c0       	rjmp	.+136    	; 0xb32 <malloc+0x128>
 aaa:	fe 01       	movw	r30, r28
 aac:	e2 0f       	add	r30, r18
 aae:	f3 1f       	adc	r31, r19
 ab0:	81 93       	st	Z+, r24
 ab2:	91 93       	st	Z+, r25
 ab4:	22 50       	subi	r18, 0x02	; 2
 ab6:	31 09       	sbc	r19, r1
 ab8:	39 83       	std	Y+1, r19	; 0x01
 aba:	28 83       	st	Y, r18
 abc:	3a c0       	rjmp	.+116    	; 0xb32 <malloc+0x128>
 abe:	20 91 86 02 	lds	r18, 0x0286
 ac2:	30 91 87 02 	lds	r19, 0x0287
 ac6:	23 2b       	or	r18, r19
 ac8:	41 f4       	brne	.+16     	; 0xada <malloc+0xd0>
 aca:	20 91 02 02 	lds	r18, 0x0202
 ace:	30 91 03 02 	lds	r19, 0x0203
 ad2:	30 93 87 02 	sts	0x0287, r19
 ad6:	20 93 86 02 	sts	0x0286, r18
 ada:	20 91 00 02 	lds	r18, 0x0200
 ade:	30 91 01 02 	lds	r19, 0x0201
 ae2:	21 15       	cp	r18, r1
 ae4:	31 05       	cpc	r19, r1
 ae6:	41 f4       	brne	.+16     	; 0xaf8 <malloc+0xee>
 ae8:	2d b7       	in	r18, 0x3d	; 61
 aea:	3e b7       	in	r19, 0x3e	; 62
 aec:	40 91 04 02 	lds	r20, 0x0204
 af0:	50 91 05 02 	lds	r21, 0x0205
 af4:	24 1b       	sub	r18, r20
 af6:	35 0b       	sbc	r19, r21
 af8:	e0 91 86 02 	lds	r30, 0x0286
 afc:	f0 91 87 02 	lds	r31, 0x0287
 b00:	e2 17       	cp	r30, r18
 b02:	f3 07       	cpc	r31, r19
 b04:	a0 f4       	brcc	.+40     	; 0xb2e <malloc+0x124>
 b06:	2e 1b       	sub	r18, r30
 b08:	3f 0b       	sbc	r19, r31
 b0a:	28 17       	cp	r18, r24
 b0c:	39 07       	cpc	r19, r25
 b0e:	78 f0       	brcs	.+30     	; 0xb2e <malloc+0x124>
 b10:	ac 01       	movw	r20, r24
 b12:	4e 5f       	subi	r20, 0xFE	; 254
 b14:	5f 4f       	sbci	r21, 0xFF	; 255
 b16:	24 17       	cp	r18, r20
 b18:	35 07       	cpc	r19, r21
 b1a:	48 f0       	brcs	.+18     	; 0xb2e <malloc+0x124>
 b1c:	4e 0f       	add	r20, r30
 b1e:	5f 1f       	adc	r21, r31
 b20:	50 93 87 02 	sts	0x0287, r21
 b24:	40 93 86 02 	sts	0x0286, r20
 b28:	81 93       	st	Z+, r24
 b2a:	91 93       	st	Z+, r25
 b2c:	02 c0       	rjmp	.+4      	; 0xb32 <malloc+0x128>
 b2e:	e0 e0       	ldi	r30, 0x00	; 0
 b30:	f0 e0       	ldi	r31, 0x00	; 0
 b32:	cf 01       	movw	r24, r30
 b34:	df 91       	pop	r29
 b36:	cf 91       	pop	r28
 b38:	08 95       	ret

00000b3a <free>:
 b3a:	cf 93       	push	r28
 b3c:	df 93       	push	r29
 b3e:	00 97       	sbiw	r24, 0x00	; 0
 b40:	09 f4       	brne	.+2      	; 0xb44 <free+0xa>
 b42:	87 c0       	rjmp	.+270    	; 0xc52 <free+0x118>
 b44:	fc 01       	movw	r30, r24
 b46:	32 97       	sbiw	r30, 0x02	; 2
 b48:	13 82       	std	Z+3, r1	; 0x03
 b4a:	12 82       	std	Z+2, r1	; 0x02
 b4c:	c0 91 88 02 	lds	r28, 0x0288
 b50:	d0 91 89 02 	lds	r29, 0x0289
 b54:	20 97       	sbiw	r28, 0x00	; 0
 b56:	81 f4       	brne	.+32     	; 0xb78 <free+0x3e>
 b58:	20 81       	ld	r18, Z
 b5a:	31 81       	ldd	r19, Z+1	; 0x01
 b5c:	28 0f       	add	r18, r24
 b5e:	39 1f       	adc	r19, r25
 b60:	80 91 86 02 	lds	r24, 0x0286
 b64:	90 91 87 02 	lds	r25, 0x0287
 b68:	82 17       	cp	r24, r18
 b6a:	93 07       	cpc	r25, r19
 b6c:	79 f5       	brne	.+94     	; 0xbcc <free+0x92>
 b6e:	f0 93 87 02 	sts	0x0287, r31
 b72:	e0 93 86 02 	sts	0x0286, r30
 b76:	6d c0       	rjmp	.+218    	; 0xc52 <free+0x118>
 b78:	de 01       	movw	r26, r28
 b7a:	20 e0       	ldi	r18, 0x00	; 0
 b7c:	30 e0       	ldi	r19, 0x00	; 0
 b7e:	ae 17       	cp	r26, r30
 b80:	bf 07       	cpc	r27, r31
 b82:	50 f4       	brcc	.+20     	; 0xb98 <free+0x5e>
 b84:	12 96       	adiw	r26, 0x02	; 2
 b86:	4d 91       	ld	r20, X+
 b88:	5c 91       	ld	r21, X
 b8a:	13 97       	sbiw	r26, 0x03	; 3
 b8c:	9d 01       	movw	r18, r26
 b8e:	41 15       	cp	r20, r1
 b90:	51 05       	cpc	r21, r1
 b92:	09 f1       	breq	.+66     	; 0xbd6 <free+0x9c>
 b94:	da 01       	movw	r26, r20
 b96:	f3 cf       	rjmp	.-26     	; 0xb7e <free+0x44>
 b98:	b3 83       	std	Z+3, r27	; 0x03
 b9a:	a2 83       	std	Z+2, r26	; 0x02
 b9c:	40 81       	ld	r20, Z
 b9e:	51 81       	ldd	r21, Z+1	; 0x01
 ba0:	84 0f       	add	r24, r20
 ba2:	95 1f       	adc	r25, r21
 ba4:	8a 17       	cp	r24, r26
 ba6:	9b 07       	cpc	r25, r27
 ba8:	71 f4       	brne	.+28     	; 0xbc6 <free+0x8c>
 baa:	8d 91       	ld	r24, X+
 bac:	9c 91       	ld	r25, X
 bae:	11 97       	sbiw	r26, 0x01	; 1
 bb0:	84 0f       	add	r24, r20
 bb2:	95 1f       	adc	r25, r21
 bb4:	02 96       	adiw	r24, 0x02	; 2
 bb6:	91 83       	std	Z+1, r25	; 0x01
 bb8:	80 83       	st	Z, r24
 bba:	12 96       	adiw	r26, 0x02	; 2
 bbc:	8d 91       	ld	r24, X+
 bbe:	9c 91       	ld	r25, X
 bc0:	13 97       	sbiw	r26, 0x03	; 3
 bc2:	93 83       	std	Z+3, r25	; 0x03
 bc4:	82 83       	std	Z+2, r24	; 0x02
 bc6:	21 15       	cp	r18, r1
 bc8:	31 05       	cpc	r19, r1
 bca:	29 f4       	brne	.+10     	; 0xbd6 <free+0x9c>
 bcc:	f0 93 89 02 	sts	0x0289, r31
 bd0:	e0 93 88 02 	sts	0x0288, r30
 bd4:	3e c0       	rjmp	.+124    	; 0xc52 <free+0x118>
 bd6:	d9 01       	movw	r26, r18
 bd8:	13 96       	adiw	r26, 0x03	; 3
 bda:	fc 93       	st	X, r31
 bdc:	ee 93       	st	-X, r30
 bde:	12 97       	sbiw	r26, 0x02	; 2
 be0:	4d 91       	ld	r20, X+
 be2:	5d 91       	ld	r21, X+
 be4:	a4 0f       	add	r26, r20
 be6:	b5 1f       	adc	r27, r21
 be8:	ea 17       	cp	r30, r26
 bea:	fb 07       	cpc	r31, r27
 bec:	79 f4       	brne	.+30     	; 0xc0c <free+0xd2>
 bee:	80 81       	ld	r24, Z
 bf0:	91 81       	ldd	r25, Z+1	; 0x01
 bf2:	84 0f       	add	r24, r20
 bf4:	95 1f       	adc	r25, r21
 bf6:	02 96       	adiw	r24, 0x02	; 2
 bf8:	d9 01       	movw	r26, r18
 bfa:	11 96       	adiw	r26, 0x01	; 1
 bfc:	9c 93       	st	X, r25
 bfe:	8e 93       	st	-X, r24
 c00:	82 81       	ldd	r24, Z+2	; 0x02
 c02:	93 81       	ldd	r25, Z+3	; 0x03
 c04:	13 96       	adiw	r26, 0x03	; 3
 c06:	9c 93       	st	X, r25
 c08:	8e 93       	st	-X, r24
 c0a:	12 97       	sbiw	r26, 0x02	; 2
 c0c:	e0 e0       	ldi	r30, 0x00	; 0
 c0e:	f0 e0       	ldi	r31, 0x00	; 0
 c10:	8a 81       	ldd	r24, Y+2	; 0x02
 c12:	9b 81       	ldd	r25, Y+3	; 0x03
 c14:	00 97       	sbiw	r24, 0x00	; 0
 c16:	19 f0       	breq	.+6      	; 0xc1e <free+0xe4>
 c18:	fe 01       	movw	r30, r28
 c1a:	ec 01       	movw	r28, r24
 c1c:	f9 cf       	rjmp	.-14     	; 0xc10 <free+0xd6>
 c1e:	ce 01       	movw	r24, r28
 c20:	02 96       	adiw	r24, 0x02	; 2
 c22:	28 81       	ld	r18, Y
 c24:	39 81       	ldd	r19, Y+1	; 0x01
 c26:	82 0f       	add	r24, r18
 c28:	93 1f       	adc	r25, r19
 c2a:	20 91 86 02 	lds	r18, 0x0286
 c2e:	30 91 87 02 	lds	r19, 0x0287
 c32:	28 17       	cp	r18, r24
 c34:	39 07       	cpc	r19, r25
 c36:	69 f4       	brne	.+26     	; 0xc52 <free+0x118>
 c38:	30 97       	sbiw	r30, 0x00	; 0
 c3a:	29 f4       	brne	.+10     	; 0xc46 <free+0x10c>
 c3c:	10 92 89 02 	sts	0x0289, r1
 c40:	10 92 88 02 	sts	0x0288, r1
 c44:	02 c0       	rjmp	.+4      	; 0xc4a <free+0x110>
 c46:	13 82       	std	Z+3, r1	; 0x03
 c48:	12 82       	std	Z+2, r1	; 0x02
 c4a:	d0 93 87 02 	sts	0x0287, r29
 c4e:	c0 93 86 02 	sts	0x0286, r28
 c52:	df 91       	pop	r29
 c54:	cf 91       	pop	r28
 c56:	08 95       	ret

00000c58 <strnlen_P>:
 c58:	fc 01       	movw	r30, r24
 c5a:	05 90       	lpm	r0, Z+
 c5c:	61 50       	subi	r22, 0x01	; 1
 c5e:	70 40       	sbci	r23, 0x00	; 0
 c60:	01 10       	cpse	r0, r1
 c62:	d8 f7       	brcc	.-10     	; 0xc5a <strnlen_P+0x2>
 c64:	80 95       	com	r24
 c66:	90 95       	com	r25
 c68:	8e 0f       	add	r24, r30
 c6a:	9f 1f       	adc	r25, r31
 c6c:	08 95       	ret

00000c6e <memset>:
 c6e:	dc 01       	movw	r26, r24
 c70:	01 c0       	rjmp	.+2      	; 0xc74 <memset+0x6>
 c72:	6d 93       	st	X+, r22
 c74:	41 50       	subi	r20, 0x01	; 1
 c76:	50 40       	sbci	r21, 0x00	; 0
 c78:	e0 f7       	brcc	.-8      	; 0xc72 <memset+0x4>
 c7a:	08 95       	ret

00000c7c <strnlen>:
 c7c:	fc 01       	movw	r30, r24
 c7e:	61 50       	subi	r22, 0x01	; 1
 c80:	70 40       	sbci	r23, 0x00	; 0
 c82:	01 90       	ld	r0, Z+
 c84:	01 10       	cpse	r0, r1
 c86:	d8 f7       	brcc	.-10     	; 0xc7e <strnlen+0x2>
 c88:	80 95       	com	r24
 c8a:	90 95       	com	r25
 c8c:	8e 0f       	add	r24, r30
 c8e:	9f 1f       	adc	r25, r31
 c90:	08 95       	ret

00000c92 <fputc>:
 c92:	0f 93       	push	r16
 c94:	1f 93       	push	r17
 c96:	cf 93       	push	r28
 c98:	df 93       	push	r29
 c9a:	18 2f       	mov	r17, r24
 c9c:	09 2f       	mov	r16, r25
 c9e:	eb 01       	movw	r28, r22
 ca0:	8b 81       	ldd	r24, Y+3	; 0x03
 ca2:	81 fd       	sbrc	r24, 1
 ca4:	03 c0       	rjmp	.+6      	; 0xcac <fputc+0x1a>
 ca6:	8f ef       	ldi	r24, 0xFF	; 255
 ca8:	9f ef       	ldi	r25, 0xFF	; 255
 caa:	20 c0       	rjmp	.+64     	; 0xcec <fputc+0x5a>
 cac:	82 ff       	sbrs	r24, 2
 cae:	10 c0       	rjmp	.+32     	; 0xcd0 <fputc+0x3e>
 cb0:	4e 81       	ldd	r20, Y+6	; 0x06
 cb2:	5f 81       	ldd	r21, Y+7	; 0x07
 cb4:	2c 81       	ldd	r18, Y+4	; 0x04
 cb6:	3d 81       	ldd	r19, Y+5	; 0x05
 cb8:	42 17       	cp	r20, r18
 cba:	53 07       	cpc	r21, r19
 cbc:	7c f4       	brge	.+30     	; 0xcdc <fputc+0x4a>
 cbe:	e8 81       	ld	r30, Y
 cc0:	f9 81       	ldd	r31, Y+1	; 0x01
 cc2:	9f 01       	movw	r18, r30
 cc4:	2f 5f       	subi	r18, 0xFF	; 255
 cc6:	3f 4f       	sbci	r19, 0xFF	; 255
 cc8:	39 83       	std	Y+1, r19	; 0x01
 cca:	28 83       	st	Y, r18
 ccc:	10 83       	st	Z, r17
 cce:	06 c0       	rjmp	.+12     	; 0xcdc <fputc+0x4a>
 cd0:	e8 85       	ldd	r30, Y+8	; 0x08
 cd2:	f9 85       	ldd	r31, Y+9	; 0x09
 cd4:	81 2f       	mov	r24, r17
 cd6:	19 95       	eicall
 cd8:	89 2b       	or	r24, r25
 cda:	29 f7       	brne	.-54     	; 0xca6 <fputc+0x14>
 cdc:	2e 81       	ldd	r18, Y+6	; 0x06
 cde:	3f 81       	ldd	r19, Y+7	; 0x07
 ce0:	2f 5f       	subi	r18, 0xFF	; 255
 ce2:	3f 4f       	sbci	r19, 0xFF	; 255
 ce4:	3f 83       	std	Y+7, r19	; 0x07
 ce6:	2e 83       	std	Y+6, r18	; 0x06
 ce8:	81 2f       	mov	r24, r17
 cea:	90 2f       	mov	r25, r16
 cec:	df 91       	pop	r29
 cee:	cf 91       	pop	r28
 cf0:	1f 91       	pop	r17
 cf2:	0f 91       	pop	r16
 cf4:	08 95       	ret

00000cf6 <__ultoa_invert>:
 cf6:	fa 01       	movw	r30, r20
 cf8:	aa 27       	eor	r26, r26
 cfa:	28 30       	cpi	r18, 0x08	; 8
 cfc:	51 f1       	breq	.+84     	; 0xd52 <__ultoa_invert+0x5c>
 cfe:	20 31       	cpi	r18, 0x10	; 16
 d00:	81 f1       	breq	.+96     	; 0xd62 <__ultoa_invert+0x6c>
 d02:	e8 94       	clt
 d04:	6f 93       	push	r22
 d06:	6e 7f       	andi	r22, 0xFE	; 254
 d08:	6e 5f       	subi	r22, 0xFE	; 254
 d0a:	7f 4f       	sbci	r23, 0xFF	; 255
 d0c:	8f 4f       	sbci	r24, 0xFF	; 255
 d0e:	9f 4f       	sbci	r25, 0xFF	; 255
 d10:	af 4f       	sbci	r26, 0xFF	; 255
 d12:	b1 e0       	ldi	r27, 0x01	; 1
 d14:	3e d0       	rcall	.+124    	; 0xd92 <__ultoa_invert+0x9c>
 d16:	b4 e0       	ldi	r27, 0x04	; 4
 d18:	3c d0       	rcall	.+120    	; 0xd92 <__ultoa_invert+0x9c>
 d1a:	67 0f       	add	r22, r23
 d1c:	78 1f       	adc	r23, r24
 d1e:	89 1f       	adc	r24, r25
 d20:	9a 1f       	adc	r25, r26
 d22:	a1 1d       	adc	r26, r1
 d24:	68 0f       	add	r22, r24
 d26:	79 1f       	adc	r23, r25
 d28:	8a 1f       	adc	r24, r26
 d2a:	91 1d       	adc	r25, r1
 d2c:	a1 1d       	adc	r26, r1
 d2e:	6a 0f       	add	r22, r26
 d30:	71 1d       	adc	r23, r1
 d32:	81 1d       	adc	r24, r1
 d34:	91 1d       	adc	r25, r1
 d36:	a1 1d       	adc	r26, r1
 d38:	20 d0       	rcall	.+64     	; 0xd7a <__ultoa_invert+0x84>
 d3a:	09 f4       	brne	.+2      	; 0xd3e <__ultoa_invert+0x48>
 d3c:	68 94       	set
 d3e:	3f 91       	pop	r19
 d40:	2a e0       	ldi	r18, 0x0A	; 10
 d42:	26 9f       	mul	r18, r22
 d44:	11 24       	eor	r1, r1
 d46:	30 19       	sub	r19, r0
 d48:	30 5d       	subi	r19, 0xD0	; 208
 d4a:	31 93       	st	Z+, r19
 d4c:	de f6       	brtc	.-74     	; 0xd04 <__ultoa_invert+0xe>
 d4e:	cf 01       	movw	r24, r30
 d50:	08 95       	ret
 d52:	46 2f       	mov	r20, r22
 d54:	47 70       	andi	r20, 0x07	; 7
 d56:	40 5d       	subi	r20, 0xD0	; 208
 d58:	41 93       	st	Z+, r20
 d5a:	b3 e0       	ldi	r27, 0x03	; 3
 d5c:	0f d0       	rcall	.+30     	; 0xd7c <__ultoa_invert+0x86>
 d5e:	c9 f7       	brne	.-14     	; 0xd52 <__ultoa_invert+0x5c>
 d60:	f6 cf       	rjmp	.-20     	; 0xd4e <__ultoa_invert+0x58>
 d62:	46 2f       	mov	r20, r22
 d64:	4f 70       	andi	r20, 0x0F	; 15
 d66:	40 5d       	subi	r20, 0xD0	; 208
 d68:	4a 33       	cpi	r20, 0x3A	; 58
 d6a:	18 f0       	brcs	.+6      	; 0xd72 <__ultoa_invert+0x7c>
 d6c:	49 5d       	subi	r20, 0xD9	; 217
 d6e:	31 fd       	sbrc	r19, 1
 d70:	40 52       	subi	r20, 0x20	; 32
 d72:	41 93       	st	Z+, r20
 d74:	02 d0       	rcall	.+4      	; 0xd7a <__ultoa_invert+0x84>
 d76:	a9 f7       	brne	.-22     	; 0xd62 <__ultoa_invert+0x6c>
 d78:	ea cf       	rjmp	.-44     	; 0xd4e <__ultoa_invert+0x58>
 d7a:	b4 e0       	ldi	r27, 0x04	; 4
 d7c:	a6 95       	lsr	r26
 d7e:	97 95       	ror	r25
 d80:	87 95       	ror	r24
 d82:	77 95       	ror	r23
 d84:	67 95       	ror	r22
 d86:	ba 95       	dec	r27
 d88:	c9 f7       	brne	.-14     	; 0xd7c <__ultoa_invert+0x86>
 d8a:	00 97       	sbiw	r24, 0x00	; 0
 d8c:	61 05       	cpc	r22, r1
 d8e:	71 05       	cpc	r23, r1
 d90:	08 95       	ret
 d92:	9b 01       	movw	r18, r22
 d94:	ac 01       	movw	r20, r24
 d96:	0a 2e       	mov	r0, r26
 d98:	06 94       	lsr	r0
 d9a:	57 95       	ror	r21
 d9c:	47 95       	ror	r20
 d9e:	37 95       	ror	r19
 da0:	27 95       	ror	r18
 da2:	ba 95       	dec	r27
 da4:	c9 f7       	brne	.-14     	; 0xd98 <__ultoa_invert+0xa2>
 da6:	62 0f       	add	r22, r18
 da8:	73 1f       	adc	r23, r19
 daa:	84 1f       	adc	r24, r20
 dac:	95 1f       	adc	r25, r21
 dae:	a0 1d       	adc	r26, r0
 db0:	08 95       	ret

00000db2 <_exit>:
 db2:	f8 94       	cli

00000db4 <__stop_program>:
 db4:	ff cf       	rjmp	.-2      	; 0xdb4 <__stop_program>
