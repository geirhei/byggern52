
Node2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800200  00000d08  00000d9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d08  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080020a  0080020a  00000da6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000da6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000190  00000000  00000000  00000e02  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f49  00000000  00000000  00000f92  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000778  00000000  00000000  00001edb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009da  00000000  00000000  00002653  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000330  00000000  00000000  00003030  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b6  00000000  00000000  00003360  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006b5  00000000  00000000  00003716  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000120  00000000  00000000  00003dcb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	a2 c1       	rjmp	.+836    	; 0x3c6 <__vector_32>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 e0       	ldi	r30, 0x08	; 8
  fc:	fd e0       	ldi	r31, 0x0D	; 13
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	aa 30       	cpi	r26, 0x0A	; 10
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	aa e0       	ldi	r26, 0x0A	; 10
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a4 31       	cpi	r26, 0x14	; 20
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	d5 d0       	rcall	.+426    	; 0x2ca <main>
 120:	f1 c5       	rjmp	.+3042   	; 0xd04 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <CAN_init>:
		MCP_write(MCP_TXB0CTRL + 6 + i, msg->data[i]);
	}
	
	/* Request to send contents of TXB0 */
	MCP_request_to_send(MCP_RTS_TX0);
}
 124:	c5 c0       	rjmp	.+394    	; 0x2b0 <MCP_init>
 126:	08 95       	ret

00000128 <CAN_message_receive>:

can_message_t CAN_message_receive(void)
{
 128:	9f 92       	push	r9
 12a:	af 92       	push	r10
 12c:	bf 92       	push	r11
 12e:	cf 92       	push	r12
 130:	df 92       	push	r13
 132:	ef 92       	push	r14
 134:	ff 92       	push	r15
 136:	0f 93       	push	r16
 138:	1f 93       	push	r17
 13a:	cf 93       	push	r28
 13c:	df 93       	push	r29
 13e:	cd b7       	in	r28, 0x3d	; 61
 140:	de b7       	in	r29, 0x3e	; 62
 142:	2b 97       	sbiw	r28, 0x0b	; 11
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	f8 94       	cli
 148:	de bf       	out	0x3e, r29	; 62
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	cd bf       	out	0x3d, r28	; 61
 14e:	7c 01       	movw	r14, r24
	/* Only RXB0 is used */
	
	can_message_t message;
	uint8_t buffer = MCP_read(MCP_RXB0SIDH + 1);
 150:	82 e6       	ldi	r24, 0x62	; 98
 152:	80 d0       	rcall	.+256    	; 0x254 <MCP_read>
	message.id = (buffer >> 5);
 154:	82 95       	swap	r24
 156:	86 95       	lsr	r24
 158:	87 70       	andi	r24, 0x07	; 7
 15a:	c8 2e       	mov	r12, r24
 15c:	d1 2c       	mov	r13, r1
	buffer = MCP_read(MCP_RXB0CTRL + 5);
 15e:	85 e6       	ldi	r24, 0x65	; 101
 160:	79 d0       	rcall	.+242    	; 0x254 <MCP_read>
	message.length = (buffer & 0x0F);
 162:	8f 70       	andi	r24, 0x0F	; 15
 164:	98 2e       	mov	r9, r24
	for (uint8_t i = 0; i < message.length; i++) {
 166:	a1 f0       	breq	.+40     	; 0x190 <CAN_message_receive+0x68>
 168:	8e 01       	movw	r16, r28
 16a:	0c 5f       	subi	r16, 0xFC	; 252
 16c:	1f 4f       	sbci	r17, 0xFF	; 255
 16e:	0f 2e       	mov	r0, r31
 170:	f6 e6       	ldi	r31, 0x66	; 102
 172:	af 2e       	mov	r10, r31
 174:	f0 2d       	mov	r31, r0
 176:	a8 0e       	add	r10, r24
 178:	0f 2e       	mov	r0, r31
 17a:	f6 e6       	ldi	r31, 0x66	; 102
 17c:	bf 2e       	mov	r11, r31
 17e:	f0 2d       	mov	r31, r0
		message.data[i] = MCP_read(MCP_RXB0CTRL + 6 + i);
 180:	8b 2d       	mov	r24, r11
 182:	68 d0       	rcall	.+208    	; 0x254 <MCP_read>
 184:	f8 01       	movw	r30, r16
 186:	81 93       	st	Z+, r24
 188:	8f 01       	movw	r16, r30
 18a:	b3 94       	inc	r11
	can_message_t message;
	uint8_t buffer = MCP_read(MCP_RXB0SIDH + 1);
	message.id = (buffer >> 5);
	buffer = MCP_read(MCP_RXB0CTRL + 5);
	message.length = (buffer & 0x0F);
	for (uint8_t i = 0; i < message.length; i++) {
 18c:	ba 10       	cpse	r11, r10
 18e:	f8 cf       	rjmp	.-16     	; 0x180 <CAN_message_receive+0x58>
		message.data[i] = MCP_read(MCP_RXB0CTRL + 6 + i);
	}
	
	/* Clear CANINTF.RX0IF */
	MCP_modify_bit(MCP_CANINTF, 0x01, 0x00);
 190:	40 e0       	ldi	r20, 0x00	; 0
 192:	61 e0       	ldi	r22, 0x01	; 1
 194:	8c e2       	ldi	r24, 0x2C	; 44
 196:	73 d0       	rcall	.+230    	; 0x27e <MCP_modify_bit>
	
	return message;
 198:	da 82       	std	Y+2, r13	; 0x02
 19a:	c9 82       	std	Y+1, r12	; 0x01
 19c:	9b 82       	std	Y+3, r9	; 0x03
 19e:	8b e0       	ldi	r24, 0x0B	; 11
 1a0:	fe 01       	movw	r30, r28
 1a2:	31 96       	adiw	r30, 0x01	; 1
 1a4:	d7 01       	movw	r26, r14
 1a6:	01 90       	ld	r0, Z+
 1a8:	0d 92       	st	X+, r0
 1aa:	8a 95       	dec	r24
 1ac:	e1 f7       	brne	.-8      	; 0x1a6 <CAN_message_receive+0x7e>
}
 1ae:	c7 01       	movw	r24, r14
 1b0:	2b 96       	adiw	r28, 0x0b	; 11
 1b2:	0f b6       	in	r0, 0x3f	; 63
 1b4:	f8 94       	cli
 1b6:	de bf       	out	0x3e, r29	; 62
 1b8:	0f be       	out	0x3f, r0	; 63
 1ba:	cd bf       	out	0x3d, r28	; 61
 1bc:	df 91       	pop	r29
 1be:	cf 91       	pop	r28
 1c0:	1f 91       	pop	r17
 1c2:	0f 91       	pop	r16
 1c4:	ff 90       	pop	r15
 1c6:	ef 90       	pop	r14
 1c8:	df 90       	pop	r13
 1ca:	cf 90       	pop	r12
 1cc:	bf 90       	pop	r11
 1ce:	af 90       	pop	r10
 1d0:	9f 90       	pop	r9
 1d2:	08 95       	ret

000001d4 <CAN_message_handle>:

/* Processes a received CAN-message */
void CAN_message_handle(can_message_t msg)
{
 1d4:	ef 92       	push	r14
 1d6:	ff 92       	push	r15
 1d8:	0f 93       	push	r16
 1da:	1f 93       	push	r17
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	cd b7       	in	r28, 0x3d	; 61
 1e2:	de b7       	in	r29, 0x3e	; 62
 1e4:	2b 97       	sbiw	r28, 0x0b	; 11
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	f8 94       	cli
 1ea:	de bf       	out	0x3e, r29	; 62
 1ec:	0f be       	out	0x3f, r0	; 63
 1ee:	cd bf       	out	0x3d, r28	; 61
 1f0:	3e 83       	std	Y+6, r19	; 0x06
 1f2:	4f 83       	std	Y+7, r20	; 0x07
	//printf("Message handle entered\n");
	uint8_t msg_type = msg.data[0];
	//printf("msg_type: %i\n", msg_type);
	position_t received_pos;
	switch (msg_type) {
 1f4:	1a 36       	cpi	r17, 0x6A	; 106
 1f6:	19 f4       	brne	.+6      	; 0x1fe <CAN_message_handle+0x2a>
			received_pos.x = msg.data[2];
			received_pos.y = msg.data[3];
			//printf("received_pos.x: %d\n", received_pos.x);
			//printf("received_pos.y: %d\n", received_pos.y);
			
			SERVO_write(received_pos);
 1f8:	83 2f       	mov	r24, r19
 1fa:	94 2f       	mov	r25, r20
 1fc:	cf d0       	rcall	.+414    	; 0x39c <SERVO_write>
			break;
		default:
			break;
	}
 1fe:	2b 96       	adiw	r28, 0x0b	; 11
 200:	0f b6       	in	r0, 0x3f	; 63
 202:	f8 94       	cli
 204:	de bf       	out	0x3e, r29	; 62
 206:	0f be       	out	0x3f, r0	; 63
 208:	cd bf       	out	0x3d, r28	; 61
 20a:	df 91       	pop	r29
 20c:	cf 91       	pop	r28
 20e:	1f 91       	pop	r17
 210:	0f 91       	pop	r16
 212:	ff 90       	pop	r15
 214:	ef 90       	pop	r14
 216:	08 95       	ret

00000218 <IR_init>:

void IR_init(void)
{
	// 16Mhz/128 = 125kHZ for ADC reference clock
	// Enable ADC, set ADC prescaler = 128
	ADCSRA |= (1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0);
 218:	ea e7       	ldi	r30, 0x7A	; 122
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	80 81       	ld	r24, Z
 21e:	87 60       	ori	r24, 0x07	; 7
 220:	80 83       	st	Z, r24
	
	// Set voltage reference to Avcc (5V), set left adjusted
	ADMUX |= (1 << REFS0)|(1 << ADLAR);
 222:	ac e7       	ldi	r26, 0x7C	; 124
 224:	b0 e0       	ldi	r27, 0x00	; 0
 226:	8c 91       	ld	r24, X
 228:	80 66       	ori	r24, 0x60	; 96
 22a:	8c 93       	st	X, r24
	
	// Turn on ADC
	ADCSRA |= (1 << ADEN);
 22c:	80 81       	ld	r24, Z
 22e:	80 68       	ori	r24, 0x80	; 128
 230:	80 83       	st	Z, r24
 232:	08 95       	ret

00000234 <IR_read>:
}

uint8_t IR_read(void)
{
	ADCSRA |= (1 << ADSC); // Start conversion
 234:	ea e7       	ldi	r30, 0x7A	; 122
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	80 81       	ld	r24, Z
 23a:	80 64       	ori	r24, 0x40	; 64
 23c:	80 83       	st	Z, r24
	
	while (ADCSRA & (1 << ADSC)); // Wait until conversion is done
 23e:	80 81       	ld	r24, Z
 240:	86 fd       	sbrc	r24, 6
 242:	fd cf       	rjmp	.-6      	; 0x23e <IR_read+0xa>
	return ADCH; // Return ADC value from high register
 244:	80 91 79 00 	lds	r24, 0x0079
 248:	08 95       	ret

0000024a <MCP_reset>:
	SPI_master_transmit(MCP_RX_STATUS);
	//SPI_master_transmit(0x00); // Unneccessary because of "repeat data out"?
	char status = SPDR;
	PORTB |= (1 << PB0);
	return status;
}
 24a:	28 98       	cbi	0x05, 0	; 5
 24c:	80 ec       	ldi	r24, 0xC0	; 192
 24e:	d2 d0       	rcall	.+420    	; 0x3f4 <SPI_master_transmit>
 250:	28 9a       	sbi	0x05, 0	; 5
 252:	08 95       	ret

00000254 <MCP_read>:
 254:	cf 93       	push	r28
 256:	c8 2f       	mov	r28, r24
 258:	28 98       	cbi	0x05, 0	; 5
 25a:	83 e0       	ldi	r24, 0x03	; 3
 25c:	cb d0       	rcall	.+406    	; 0x3f4 <SPI_master_transmit>
 25e:	8c 2f       	mov	r24, r28
 260:	c9 d0       	rcall	.+402    	; 0x3f4 <SPI_master_transmit>
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	c7 d0       	rcall	.+398    	; 0x3f4 <SPI_master_transmit>
 266:	8e b5       	in	r24, 0x2e	; 46
 268:	28 9a       	sbi	0x05, 0	; 5
 26a:	cf 91       	pop	r28
 26c:	08 95       	ret

0000026e <MCP_read_status>:
 26e:	28 98       	cbi	0x05, 0	; 5
 270:	80 ea       	ldi	r24, 0xA0	; 160
 272:	c0 d0       	rcall	.+384    	; 0x3f4 <SPI_master_transmit>
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	be d0       	rcall	.+380    	; 0x3f4 <SPI_master_transmit>
 278:	8e b5       	in	r24, 0x2e	; 46
 27a:	28 9a       	sbi	0x05, 0	; 5
 27c:	08 95       	ret

0000027e <MCP_modify_bit>:
	MCP_modify_bit(MCP_CANCTRL, mask, mode);
}

/* Changes the value of the register bits specified by the mask */
void MCP_modify_bit(uint8_t addr, uint8_t mask, uint8_t data)
{
 27e:	1f 93       	push	r17
 280:	cf 93       	push	r28
 282:	df 93       	push	r29
 284:	18 2f       	mov	r17, r24
 286:	d6 2f       	mov	r29, r22
 288:	c4 2f       	mov	r28, r20
	PORTB &= ~(1 << PB0);
 28a:	28 98       	cbi	0x05, 0	; 5
	SPI_master_transmit(MCP_BITMOD);
 28c:	85 e0       	ldi	r24, 0x05	; 5
 28e:	b2 d0       	rcall	.+356    	; 0x3f4 <SPI_master_transmit>
	SPI_master_transmit(addr);
 290:	81 2f       	mov	r24, r17
 292:	b0 d0       	rcall	.+352    	; 0x3f4 <SPI_master_transmit>
	SPI_master_transmit(mask);
 294:	8d 2f       	mov	r24, r29
 296:	ae d0       	rcall	.+348    	; 0x3f4 <SPI_master_transmit>
	SPI_master_transmit(data);
 298:	8c 2f       	mov	r24, r28
 29a:	ac d0       	rcall	.+344    	; 0x3f4 <SPI_master_transmit>
	PORTB |= (1 << PB0);
 29c:	28 9a       	sbi	0x05, 0	; 5
 29e:	df 91       	pop	r29
 2a0:	cf 91       	pop	r28
 2a2:	1f 91       	pop	r17
 2a4:	08 95       	ret

000002a6 <MCP_set_mode>:
			break;
		default:
			break;
	}
	
	MCP_modify_bit(MCP_CANCTRL, mask, mode);
 2a6:	48 2f       	mov	r20, r24
 2a8:	60 ee       	ldi	r22, 0xE0	; 224
 2aa:	8f e0       	ldi	r24, 0x0F	; 15
 2ac:	e8 cf       	rjmp	.-48     	; 0x27e <MCP_modify_bit>
 2ae:	08 95       	ret

000002b0 <MCP_init>:
#include "MCP2515.h"
#include "mcp.h"

void MCP_init(void)
{
	SPI_master_init();
 2b0:	9c d0       	rcall	.+312    	; 0x3ea <SPI_master_init>
	MCP_reset();
 2b2:	cb df       	rcall	.-106    	; 0x24a <MCP_reset>
	
	MCP_modify_bit(MCP_RXB0CTRL, 0b01100000, 0xFF); // Turns masks/filters off for RX0
 2b4:	4f ef       	ldi	r20, 0xFF	; 255
 2b6:	60 e6       	ldi	r22, 0x60	; 96
 2b8:	80 e6       	ldi	r24, 0x60	; 96
 2ba:	e1 df       	rcall	.-62     	; 0x27e <MCP_modify_bit>
	MCP_modify_bit(MCP_RXB1CTRL, 0b01100000, 0xFF); // Turns masks/filters off for RX1
 2bc:	4f ef       	ldi	r20, 0xFF	; 255
 2be:	60 e6       	ldi	r22, 0x60	; 96
 2c0:	80 e7       	ldi	r24, 0x70	; 112
 2c2:	dd df       	rcall	.-70     	; 0x27e <MCP_modify_bit>
	//MCP_set_mode(MODE_LOOPBACK); // Sets loopback operation mode for testing
	MCP_set_mode(MODE_NORMAL); // Sets normal operation mode
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	ef cf       	rjmp	.-34     	; 0x2a6 <MCP_set_mode>
 2c8:	08 95       	ret

000002ca <main>:
#include "can.h"
#include "ir.h"


int main(void)
{
 2ca:	cf 93       	push	r28
 2cc:	df 93       	push	r29
 2ce:	cd b7       	in	r28, 0x3d	; 61
 2d0:	de b7       	in	r29, 0x3e	; 62
 2d2:	2b 97       	sbiw	r28, 0x0b	; 11
 2d4:	0f b6       	in	r0, 0x3f	; 63
 2d6:	f8 94       	cli
 2d8:	de bf       	out	0x3e, r29	; 62
 2da:	0f be       	out	0x3f, r0	; 63
 2dc:	cd bf       	out	0x3d, r28	; 61
	sei(); // Enable global interrupts
 2de:	78 94       	sei
	
	SERVO_init(); // initialize timer
 2e0:	5b d0       	rcall	.+182    	; 0x398 <SERVO_init>
	fdevopen(USART_transmit, USART_receive); // Sets printf to serial port
 2e2:	62 e1       	ldi	r22, 0x12	; 18
 2e4:	72 e0       	ldi	r23, 0x02	; 2
 2e6:	8a e0       	ldi	r24, 0x0A	; 10
 2e8:	92 e0       	ldi	r25, 0x02	; 2
 2ea:	d5 d0       	rcall	.+426    	; 0x496 <fdevopen>
	USART_init(MYUBBR);
 2ec:	87 e6       	ldi	r24, 0x67	; 103
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	86 d0       	rcall	.+268    	; 0x3fe <USART_init>
	CAN_init();
 2f2:	18 df       	rcall	.-464    	; 0x124 <CAN_init>
	IR_init();
 2f4:	91 df       	rcall	.-222    	; 0x218 <IR_init>
	
	uint8_t status, msg_arrived;
	can_message_t received_message;
	
	uint8_t ir_res = IR_read();
 2f6:	9e df       	rcall	.-196    	; 0x234 <IR_read>
	printf("%d\n", ir_res);
 2f8:	1f 92       	push	r1
 2fa:	8f 93       	push	r24
 2fc:	86 e0       	ldi	r24, 0x06	; 6
 2fe:	92 e0       	ldi	r25, 0x02	; 2
 300:	9f 93       	push	r25
 302:	8f 93       	push	r24
 304:	12 d1       	rcall	.+548    	; 0x52a <printf>
 306:	0f 90       	pop	r0
 308:	0f 90       	pop	r0
 30a:	0f 90       	pop	r0
 30c:	0f 90       	pop	r0
	
	while(1) {
		
		ir_res = IR_read();
		printf("%d\n", ir_res);
 30e:	0f 2e       	mov	r0, r31
 310:	f6 e0       	ldi	r31, 0x06	; 6
 312:	cf 2e       	mov	r12, r31
 314:	f2 e0       	ldi	r31, 0x02	; 2
 316:	df 2e       	mov	r13, r31
 318:	f0 2d       	mov	r31, r0
	uint8_t ir_res = IR_read();
	printf("%d\n", ir_res);
	
	while(1) {
		
		ir_res = IR_read();
 31a:	8c df       	rcall	.-232    	; 0x234 <IR_read>
		printf("%d\n", ir_res);
 31c:	1f 92       	push	r1
 31e:	8f 93       	push	r24
 320:	df 92       	push	r13
 322:	cf 92       	push	r12
 324:	02 d1       	rcall	.+516    	; 0x52a <printf>
		
		status = MCP_read_status();
 326:	a3 df       	rcall	.-186    	; 0x26e <MCP_read_status>
		//printf("Status: %02x\n", status);
		msg_arrived = (status & 1);
		if (msg_arrived) {
 328:	0f 90       	pop	r0
 32a:	0f 90       	pop	r0
 32c:	0f 90       	pop	r0
 32e:	0f 90       	pop	r0
 330:	80 ff       	sbrs	r24, 0
 332:	f3 cf       	rjmp	.-26     	; 0x31a <main+0x50>
			received_message = CAN_message_receive();
 334:	ce 01       	movw	r24, r28
 336:	01 96       	adiw	r24, 0x01	; 1
 338:	f7 de       	rcall	.-530    	; 0x128 <CAN_message_receive>
			CAN_message_handle(received_message);
 33a:	e9 80       	ldd	r14, Y+1	; 0x01
 33c:	fa 80       	ldd	r15, Y+2	; 0x02
 33e:	0b 81       	ldd	r16, Y+3	; 0x03
 340:	1c 81       	ldd	r17, Y+4	; 0x04
 342:	2d 81       	ldd	r18, Y+5	; 0x05
 344:	3e 81       	ldd	r19, Y+6	; 0x06
 346:	4f 81       	ldd	r20, Y+7	; 0x07
 348:	58 85       	ldd	r21, Y+8	; 0x08
 34a:	69 85       	ldd	r22, Y+9	; 0x09
 34c:	7a 85       	ldd	r23, Y+10	; 0x0a
 34e:	8b 85       	ldd	r24, Y+11	; 0x0b
 350:	41 df       	rcall	.-382    	; 0x1d4 <CAN_message_handle>
 352:	e3 cf       	rjmp	.-58     	; 0x31a <main+0x50>

00000354 <timer3_init>:
}

void timer3_init(void)
{
	// Set up timer in Fast PWM mode 14
	TCCR3A |= (1 << COM1A1)|(1 << WGM11);
 354:	e0 e9       	ldi	r30, 0x90	; 144
 356:	f0 e0       	ldi	r31, 0x00	; 0
 358:	80 81       	ld	r24, Z
 35a:	82 68       	ori	r24, 0x82	; 130
 35c:	80 83       	st	Z, r24
	
	// Set up timer with prescaler = 64 and PWM fast mode 14
	TCCR3B |= (1 << WGM13)|(1 << WGM12)|(1 << CS11)|(1 << CS10);
 35e:	e1 e9       	ldi	r30, 0x91	; 145
 360:	f0 e0       	ldi	r31, 0x00	; 0
 362:	80 81       	ld	r24, Z
 364:	8b 61       	ori	r24, 0x1B	; 27
 366:	80 83       	st	Z, r24
	
	// Set up timer with TOP value = 5000 (0x1388)
	ICR3 = 0x1388;
 368:	88 e8       	ldi	r24, 0x88	; 136
 36a:	93 e1       	ldi	r25, 0x13	; 19
 36c:	90 93 97 00 	sts	0x0097, r25
 370:	80 93 96 00 	sts	0x0096, r24
	
	// initialize counter
	TCNT3 = 0;
 374:	10 92 95 00 	sts	0x0095, r1
 378:	10 92 94 00 	sts	0x0094, r1
	
	// initialize compare value (servo to middle, 0x0177)
	OCR3A = 0x0177; //middle
 37c:	87 e7       	ldi	r24, 0x77	; 119
 37e:	91 e0       	ldi	r25, 0x01	; 1
 380:	90 93 99 00 	sts	0x0099, r25
 384:	80 93 98 00 	sts	0x0098, r24
	
	// Enable compare interrupt
	TIMSK3 |= (1 << OCIE1A);
 388:	e1 e7       	ldi	r30, 0x71	; 113
 38a:	f0 e0       	ldi	r31, 0x00	; 0
 38c:	80 81       	ld	r24, Z
 38e:	82 60       	ori	r24, 0x02	; 2
 390:	80 83       	st	Z, r24
	
	// Set PWM port as output
	DDRE = (1 << PE3);
 392:	88 e0       	ldi	r24, 0x08	; 8
 394:	8d b9       	out	0x0d, r24	; 13
 396:	08 95       	ret

00000398 <SERVO_init>:
#include <avr/interrupt.h>
#include "servo.h"

void SERVO_init(void)
{
	timer3_init();
 398:	dd cf       	rjmp	.-70     	; 0x354 <timer3_init>
 39a:	08 95       	ret

0000039c <SERVO_write>:
{
	const uint32_t min = 225;
	const uint32_t max = 525;
	const uint32_t delta = max-min;
	uint32_t y = (uint32_t) pos.y;
	uint32_t ref = y * delta/255;
 39c:	29 2f       	mov	r18, r25
 39e:	30 e0       	ldi	r19, 0x00	; 0
 3a0:	ac e2       	ldi	r26, 0x2C	; 44
 3a2:	b1 e0       	ldi	r27, 0x01	; 1
 3a4:	69 d0       	rcall	.+210    	; 0x478 <__umulhisi3>
 3a6:	2f ef       	ldi	r18, 0xFF	; 255
 3a8:	30 e0       	ldi	r19, 0x00	; 0
 3aa:	40 e0       	ldi	r20, 0x00	; 0
 3ac:	50 e0       	ldi	r21, 0x00	; 0
 3ae:	42 d0       	rcall	.+132    	; 0x434 <__udivmodsi4>
	uint32_t new_pos = min + ref;
 3b0:	da 01       	movw	r26, r20
 3b2:	c9 01       	movw	r24, r18
 3b4:	8f 51       	subi	r24, 0x1F	; 31
 3b6:	9f 4f       	sbci	r25, 0xFF	; 255
 3b8:	af 4f       	sbci	r26, 0xFF	; 255
 3ba:	bf 4f       	sbci	r27, 0xFF	; 255
	
	// Update compare register
	//printf("new_pos: %d\n", new_pos);
	OCR3A = new_pos;
 3bc:	90 93 99 00 	sts	0x0099, r25
 3c0:	80 93 98 00 	sts	0x0098, r24
 3c4:	08 95       	ret

000003c6 <__vector_32>:
}

/* Interrupt handler for TIMER1 compare */
ISR(TIMER3_COMPA_vect) {
 3c6:	1f 92       	push	r1
 3c8:	0f 92       	push	r0
 3ca:	0f b6       	in	r0, 0x3f	; 63
 3cc:	0f 92       	push	r0
 3ce:	11 24       	eor	r1, r1
 3d0:	8f 93       	push	r24
 3d2:	9f 93       	push	r25

	// pin toggle
	PORTE ^= (1 << PE3);
 3d4:	9e b1       	in	r25, 0x0e	; 14
 3d6:	88 e0       	ldi	r24, 0x08	; 8
 3d8:	89 27       	eor	r24, r25
 3da:	8e b9       	out	0x0e, r24	; 14
 3dc:	9f 91       	pop	r25
 3de:	8f 91       	pop	r24
 3e0:	0f 90       	pop	r0
 3e2:	0f be       	out	0x3f, r0	; 63
 3e4:	0f 90       	pop	r0
 3e6:	1f 90       	pop	r1
 3e8:	18 95       	reti

000003ea <SPI_master_init>:
#include <avr/delay.h>

void SPI_master_init(void)
{
	/* Set ~SS, MOSI and SCK output, all others input */
	DDRB = (1 << PB0)|(1 << PB2)|(1 << PB1); // Setting ~SS necessary?
 3ea:	87 e0       	ldi	r24, 0x07	; 7
 3ec:	84 b9       	out	0x04, r24	; 4
	
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1 << SPE)|(1 << MSTR)|(1 << SPR0);
 3ee:	81 e5       	ldi	r24, 0x51	; 81
 3f0:	8c bd       	out	0x2c, r24	; 44
 3f2:	08 95       	ret

000003f4 <SPI_master_transmit>:
}

void SPI_master_transmit(uint8_t cData)
{
	/* Start transmission */
	SPDR = cData;
 3f4:	8e bd       	out	0x2e, r24	; 46
	
	/* Wait for transmission to complete */
	while (!(SPSR & (1 << SPIF))) {
 3f6:	0d b4       	in	r0, 0x2d	; 45
 3f8:	07 fe       	sbrs	r0, 7
 3fa:	fd cf       	rjmp	.-6      	; 0x3f6 <SPI_master_transmit+0x2>
		;
	}
}
 3fc:	08 95       	ret

000003fe <USART_init>:
#include <avr/io.h>

void USART_init(unsigned int ubrr)
{
	/* Set baud rate*/
	UBRR0H = (unsigned char)(ubrr >> 8 );
 3fe:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
 402:	80 93 c4 00 	sts	0x00C4, r24
	/*Enable receiver and transmitter*/
	UCSR0B = (1 << RXEN0)|(1 << TXEN0);
 406:	88 e1       	ldi	r24, 0x18	; 24
 408:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1 << USBS0)|(3 << UCSZ10);
 40c:	8e e0       	ldi	r24, 0x0E	; 14
 40e:	80 93 c2 00 	sts	0x00C2, r24
 412:	08 95       	ret

00000414 <USART_transmit>:
}

void USART_transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while (!( UCSR0A & (1 << UDRE0)))
 414:	e0 ec       	ldi	r30, 0xC0	; 192
 416:	f0 e0       	ldi	r31, 0x00	; 0
 418:	90 81       	ld	r25, Z
 41a:	95 ff       	sbrs	r25, 5
 41c:	fd cf       	rjmp	.-6      	; 0x418 <USART_transmit+0x4>
		;
	/* Put data into buffer, sends the data */
	UDR0 = data;
 41e:	80 93 c6 00 	sts	0x00C6, r24
 422:	08 95       	ret

00000424 <USART_receive>:
}

unsigned char USART_receive(void)
{
	/* Wait for data to be received */
	while ( !(UCSR0A & ( 1 << RXC0)) )
 424:	e0 ec       	ldi	r30, 0xC0	; 192
 426:	f0 e0       	ldi	r31, 0x00	; 0
 428:	80 81       	ld	r24, Z
 42a:	88 23       	and	r24, r24
 42c:	ec f7       	brge	.-6      	; 0x428 <USART_receive+0x4>
		;
	/* Get and return received data from buffer */
	return UDR0;
 42e:	80 91 c6 00 	lds	r24, 0x00C6
}
 432:	08 95       	ret

00000434 <__udivmodsi4>:
 434:	a1 e2       	ldi	r26, 0x21	; 33
 436:	1a 2e       	mov	r1, r26
 438:	aa 1b       	sub	r26, r26
 43a:	bb 1b       	sub	r27, r27
 43c:	fd 01       	movw	r30, r26
 43e:	0d c0       	rjmp	.+26     	; 0x45a <__udivmodsi4_ep>

00000440 <__udivmodsi4_loop>:
 440:	aa 1f       	adc	r26, r26
 442:	bb 1f       	adc	r27, r27
 444:	ee 1f       	adc	r30, r30
 446:	ff 1f       	adc	r31, r31
 448:	a2 17       	cp	r26, r18
 44a:	b3 07       	cpc	r27, r19
 44c:	e4 07       	cpc	r30, r20
 44e:	f5 07       	cpc	r31, r21
 450:	20 f0       	brcs	.+8      	; 0x45a <__udivmodsi4_ep>
 452:	a2 1b       	sub	r26, r18
 454:	b3 0b       	sbc	r27, r19
 456:	e4 0b       	sbc	r30, r20
 458:	f5 0b       	sbc	r31, r21

0000045a <__udivmodsi4_ep>:
 45a:	66 1f       	adc	r22, r22
 45c:	77 1f       	adc	r23, r23
 45e:	88 1f       	adc	r24, r24
 460:	99 1f       	adc	r25, r25
 462:	1a 94       	dec	r1
 464:	69 f7       	brne	.-38     	; 0x440 <__udivmodsi4_loop>
 466:	60 95       	com	r22
 468:	70 95       	com	r23
 46a:	80 95       	com	r24
 46c:	90 95       	com	r25
 46e:	9b 01       	movw	r18, r22
 470:	ac 01       	movw	r20, r24
 472:	bd 01       	movw	r22, r26
 474:	cf 01       	movw	r24, r30
 476:	08 95       	ret

00000478 <__umulhisi3>:
 478:	a2 9f       	mul	r26, r18
 47a:	b0 01       	movw	r22, r0
 47c:	b3 9f       	mul	r27, r19
 47e:	c0 01       	movw	r24, r0
 480:	a3 9f       	mul	r26, r19
 482:	70 0d       	add	r23, r0
 484:	81 1d       	adc	r24, r1
 486:	11 24       	eor	r1, r1
 488:	91 1d       	adc	r25, r1
 48a:	b2 9f       	mul	r27, r18
 48c:	70 0d       	add	r23, r0
 48e:	81 1d       	adc	r24, r1
 490:	11 24       	eor	r1, r1
 492:	91 1d       	adc	r25, r1
 494:	08 95       	ret

00000496 <fdevopen>:
 496:	0f 93       	push	r16
 498:	1f 93       	push	r17
 49a:	cf 93       	push	r28
 49c:	df 93       	push	r29
 49e:	ec 01       	movw	r28, r24
 4a0:	8b 01       	movw	r16, r22
 4a2:	00 97       	sbiw	r24, 0x00	; 0
 4a4:	31 f4       	brne	.+12     	; 0x4b2 <fdevopen+0x1c>
 4a6:	61 15       	cp	r22, r1
 4a8:	71 05       	cpc	r23, r1
 4aa:	19 f4       	brne	.+6      	; 0x4b2 <fdevopen+0x1c>
 4ac:	80 e0       	ldi	r24, 0x00	; 0
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	37 c0       	rjmp	.+110    	; 0x520 <fdevopen+0x8a>
 4b2:	6e e0       	ldi	r22, 0x0E	; 14
 4b4:	70 e0       	ldi	r23, 0x00	; 0
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	36 d2       	rcall	.+1132   	; 0x928 <calloc>
 4bc:	fc 01       	movw	r30, r24
 4be:	00 97       	sbiw	r24, 0x00	; 0
 4c0:	a9 f3       	breq	.-22     	; 0x4ac <fdevopen+0x16>
 4c2:	80 e8       	ldi	r24, 0x80	; 128
 4c4:	83 83       	std	Z+3, r24	; 0x03
 4c6:	01 15       	cp	r16, r1
 4c8:	11 05       	cpc	r17, r1
 4ca:	71 f0       	breq	.+28     	; 0x4e8 <fdevopen+0x52>
 4cc:	13 87       	std	Z+11, r17	; 0x0b
 4ce:	02 87       	std	Z+10, r16	; 0x0a
 4d0:	81 e8       	ldi	r24, 0x81	; 129
 4d2:	83 83       	std	Z+3, r24	; 0x03
 4d4:	80 91 0a 02 	lds	r24, 0x020A
 4d8:	90 91 0b 02 	lds	r25, 0x020B
 4dc:	89 2b       	or	r24, r25
 4de:	21 f4       	brne	.+8      	; 0x4e8 <fdevopen+0x52>
 4e0:	f0 93 0b 02 	sts	0x020B, r31
 4e4:	e0 93 0a 02 	sts	0x020A, r30
 4e8:	20 97       	sbiw	r28, 0x00	; 0
 4ea:	c9 f0       	breq	.+50     	; 0x51e <fdevopen+0x88>
 4ec:	d1 87       	std	Z+9, r29	; 0x09
 4ee:	c0 87       	std	Z+8, r28	; 0x08
 4f0:	83 81       	ldd	r24, Z+3	; 0x03
 4f2:	82 60       	ori	r24, 0x02	; 2
 4f4:	83 83       	std	Z+3, r24	; 0x03
 4f6:	80 91 0c 02 	lds	r24, 0x020C
 4fa:	90 91 0d 02 	lds	r25, 0x020D
 4fe:	89 2b       	or	r24, r25
 500:	71 f4       	brne	.+28     	; 0x51e <fdevopen+0x88>
 502:	f0 93 0d 02 	sts	0x020D, r31
 506:	e0 93 0c 02 	sts	0x020C, r30
 50a:	80 91 0e 02 	lds	r24, 0x020E
 50e:	90 91 0f 02 	lds	r25, 0x020F
 512:	89 2b       	or	r24, r25
 514:	21 f4       	brne	.+8      	; 0x51e <fdevopen+0x88>
 516:	f0 93 0f 02 	sts	0x020F, r31
 51a:	e0 93 0e 02 	sts	0x020E, r30
 51e:	cf 01       	movw	r24, r30
 520:	df 91       	pop	r29
 522:	cf 91       	pop	r28
 524:	1f 91       	pop	r17
 526:	0f 91       	pop	r16
 528:	08 95       	ret

0000052a <printf>:
 52a:	cf 93       	push	r28
 52c:	df 93       	push	r29
 52e:	cd b7       	in	r28, 0x3d	; 61
 530:	de b7       	in	r29, 0x3e	; 62
 532:	fe 01       	movw	r30, r28
 534:	36 96       	adiw	r30, 0x06	; 6
 536:	61 91       	ld	r22, Z+
 538:	71 91       	ld	r23, Z+
 53a:	af 01       	movw	r20, r30
 53c:	80 91 0c 02 	lds	r24, 0x020C
 540:	90 91 0d 02 	lds	r25, 0x020D
 544:	03 d0       	rcall	.+6      	; 0x54c <vfprintf>
 546:	df 91       	pop	r29
 548:	cf 91       	pop	r28
 54a:	08 95       	ret

0000054c <vfprintf>:
 54c:	2f 92       	push	r2
 54e:	3f 92       	push	r3
 550:	4f 92       	push	r4
 552:	5f 92       	push	r5
 554:	6f 92       	push	r6
 556:	7f 92       	push	r7
 558:	8f 92       	push	r8
 55a:	9f 92       	push	r9
 55c:	af 92       	push	r10
 55e:	bf 92       	push	r11
 560:	cf 92       	push	r12
 562:	df 92       	push	r13
 564:	ef 92       	push	r14
 566:	ff 92       	push	r15
 568:	0f 93       	push	r16
 56a:	1f 93       	push	r17
 56c:	cf 93       	push	r28
 56e:	df 93       	push	r29
 570:	cd b7       	in	r28, 0x3d	; 61
 572:	de b7       	in	r29, 0x3e	; 62
 574:	2c 97       	sbiw	r28, 0x0c	; 12
 576:	0f b6       	in	r0, 0x3f	; 63
 578:	f8 94       	cli
 57a:	de bf       	out	0x3e, r29	; 62
 57c:	0f be       	out	0x3f, r0	; 63
 57e:	cd bf       	out	0x3d, r28	; 61
 580:	7c 01       	movw	r14, r24
 582:	6b 01       	movw	r12, r22
 584:	8a 01       	movw	r16, r20
 586:	fc 01       	movw	r30, r24
 588:	17 82       	std	Z+7, r1	; 0x07
 58a:	16 82       	std	Z+6, r1	; 0x06
 58c:	83 81       	ldd	r24, Z+3	; 0x03
 58e:	81 ff       	sbrs	r24, 1
 590:	b0 c1       	rjmp	.+864    	; 0x8f2 <vfprintf+0x3a6>
 592:	ce 01       	movw	r24, r28
 594:	01 96       	adiw	r24, 0x01	; 1
 596:	4c 01       	movw	r8, r24
 598:	f7 01       	movw	r30, r14
 59a:	93 81       	ldd	r25, Z+3	; 0x03
 59c:	f6 01       	movw	r30, r12
 59e:	93 fd       	sbrc	r25, 3
 5a0:	85 91       	lpm	r24, Z+
 5a2:	93 ff       	sbrs	r25, 3
 5a4:	81 91       	ld	r24, Z+
 5a6:	6f 01       	movw	r12, r30
 5a8:	88 23       	and	r24, r24
 5aa:	09 f4       	brne	.+2      	; 0x5ae <vfprintf+0x62>
 5ac:	9e c1       	rjmp	.+828    	; 0x8ea <vfprintf+0x39e>
 5ae:	85 32       	cpi	r24, 0x25	; 37
 5b0:	39 f4       	brne	.+14     	; 0x5c0 <vfprintf+0x74>
 5b2:	93 fd       	sbrc	r25, 3
 5b4:	85 91       	lpm	r24, Z+
 5b6:	93 ff       	sbrs	r25, 3
 5b8:	81 91       	ld	r24, Z+
 5ba:	6f 01       	movw	r12, r30
 5bc:	85 32       	cpi	r24, 0x25	; 37
 5be:	21 f4       	brne	.+8      	; 0x5c8 <vfprintf+0x7c>
 5c0:	b7 01       	movw	r22, r14
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	0f d3       	rcall	.+1566   	; 0xbe4 <fputc>
 5c6:	e8 cf       	rjmp	.-48     	; 0x598 <vfprintf+0x4c>
 5c8:	51 2c       	mov	r5, r1
 5ca:	31 2c       	mov	r3, r1
 5cc:	20 e0       	ldi	r18, 0x00	; 0
 5ce:	20 32       	cpi	r18, 0x20	; 32
 5d0:	a0 f4       	brcc	.+40     	; 0x5fa <vfprintf+0xae>
 5d2:	8b 32       	cpi	r24, 0x2B	; 43
 5d4:	69 f0       	breq	.+26     	; 0x5f0 <vfprintf+0xa4>
 5d6:	30 f4       	brcc	.+12     	; 0x5e4 <vfprintf+0x98>
 5d8:	80 32       	cpi	r24, 0x20	; 32
 5da:	59 f0       	breq	.+22     	; 0x5f2 <vfprintf+0xa6>
 5dc:	83 32       	cpi	r24, 0x23	; 35
 5de:	69 f4       	brne	.+26     	; 0x5fa <vfprintf+0xae>
 5e0:	20 61       	ori	r18, 0x10	; 16
 5e2:	2c c0       	rjmp	.+88     	; 0x63c <vfprintf+0xf0>
 5e4:	8d 32       	cpi	r24, 0x2D	; 45
 5e6:	39 f0       	breq	.+14     	; 0x5f6 <vfprintf+0xaa>
 5e8:	80 33       	cpi	r24, 0x30	; 48
 5ea:	39 f4       	brne	.+14     	; 0x5fa <vfprintf+0xae>
 5ec:	21 60       	ori	r18, 0x01	; 1
 5ee:	26 c0       	rjmp	.+76     	; 0x63c <vfprintf+0xf0>
 5f0:	22 60       	ori	r18, 0x02	; 2
 5f2:	24 60       	ori	r18, 0x04	; 4
 5f4:	23 c0       	rjmp	.+70     	; 0x63c <vfprintf+0xf0>
 5f6:	28 60       	ori	r18, 0x08	; 8
 5f8:	21 c0       	rjmp	.+66     	; 0x63c <vfprintf+0xf0>
 5fa:	27 fd       	sbrc	r18, 7
 5fc:	27 c0       	rjmp	.+78     	; 0x64c <vfprintf+0x100>
 5fe:	30 ed       	ldi	r19, 0xD0	; 208
 600:	38 0f       	add	r19, r24
 602:	3a 30       	cpi	r19, 0x0A	; 10
 604:	78 f4       	brcc	.+30     	; 0x624 <vfprintf+0xd8>
 606:	26 ff       	sbrs	r18, 6
 608:	06 c0       	rjmp	.+12     	; 0x616 <vfprintf+0xca>
 60a:	fa e0       	ldi	r31, 0x0A	; 10
 60c:	5f 9e       	mul	r5, r31
 60e:	30 0d       	add	r19, r0
 610:	11 24       	eor	r1, r1
 612:	53 2e       	mov	r5, r19
 614:	13 c0       	rjmp	.+38     	; 0x63c <vfprintf+0xf0>
 616:	8a e0       	ldi	r24, 0x0A	; 10
 618:	38 9e       	mul	r3, r24
 61a:	30 0d       	add	r19, r0
 61c:	11 24       	eor	r1, r1
 61e:	33 2e       	mov	r3, r19
 620:	20 62       	ori	r18, 0x20	; 32
 622:	0c c0       	rjmp	.+24     	; 0x63c <vfprintf+0xf0>
 624:	8e 32       	cpi	r24, 0x2E	; 46
 626:	21 f4       	brne	.+8      	; 0x630 <vfprintf+0xe4>
 628:	26 fd       	sbrc	r18, 6
 62a:	5f c1       	rjmp	.+702    	; 0x8ea <vfprintf+0x39e>
 62c:	20 64       	ori	r18, 0x40	; 64
 62e:	06 c0       	rjmp	.+12     	; 0x63c <vfprintf+0xf0>
 630:	8c 36       	cpi	r24, 0x6C	; 108
 632:	11 f4       	brne	.+4      	; 0x638 <vfprintf+0xec>
 634:	20 68       	ori	r18, 0x80	; 128
 636:	02 c0       	rjmp	.+4      	; 0x63c <vfprintf+0xf0>
 638:	88 36       	cpi	r24, 0x68	; 104
 63a:	41 f4       	brne	.+16     	; 0x64c <vfprintf+0x100>
 63c:	f6 01       	movw	r30, r12
 63e:	93 fd       	sbrc	r25, 3
 640:	85 91       	lpm	r24, Z+
 642:	93 ff       	sbrs	r25, 3
 644:	81 91       	ld	r24, Z+
 646:	6f 01       	movw	r12, r30
 648:	81 11       	cpse	r24, r1
 64a:	c1 cf       	rjmp	.-126    	; 0x5ce <vfprintf+0x82>
 64c:	98 2f       	mov	r25, r24
 64e:	9f 7d       	andi	r25, 0xDF	; 223
 650:	95 54       	subi	r25, 0x45	; 69
 652:	93 30       	cpi	r25, 0x03	; 3
 654:	28 f4       	brcc	.+10     	; 0x660 <vfprintf+0x114>
 656:	0c 5f       	subi	r16, 0xFC	; 252
 658:	1f 4f       	sbci	r17, 0xFF	; 255
 65a:	ff e3       	ldi	r31, 0x3F	; 63
 65c:	f9 83       	std	Y+1, r31	; 0x01
 65e:	0d c0       	rjmp	.+26     	; 0x67a <vfprintf+0x12e>
 660:	83 36       	cpi	r24, 0x63	; 99
 662:	31 f0       	breq	.+12     	; 0x670 <vfprintf+0x124>
 664:	83 37       	cpi	r24, 0x73	; 115
 666:	71 f0       	breq	.+28     	; 0x684 <vfprintf+0x138>
 668:	83 35       	cpi	r24, 0x53	; 83
 66a:	09 f0       	breq	.+2      	; 0x66e <vfprintf+0x122>
 66c:	57 c0       	rjmp	.+174    	; 0x71c <vfprintf+0x1d0>
 66e:	21 c0       	rjmp	.+66     	; 0x6b2 <vfprintf+0x166>
 670:	f8 01       	movw	r30, r16
 672:	80 81       	ld	r24, Z
 674:	89 83       	std	Y+1, r24	; 0x01
 676:	0e 5f       	subi	r16, 0xFE	; 254
 678:	1f 4f       	sbci	r17, 0xFF	; 255
 67a:	44 24       	eor	r4, r4
 67c:	43 94       	inc	r4
 67e:	51 2c       	mov	r5, r1
 680:	54 01       	movw	r10, r8
 682:	14 c0       	rjmp	.+40     	; 0x6ac <vfprintf+0x160>
 684:	38 01       	movw	r6, r16
 686:	f2 e0       	ldi	r31, 0x02	; 2
 688:	6f 0e       	add	r6, r31
 68a:	71 1c       	adc	r7, r1
 68c:	f8 01       	movw	r30, r16
 68e:	a0 80       	ld	r10, Z
 690:	b1 80       	ldd	r11, Z+1	; 0x01
 692:	26 ff       	sbrs	r18, 6
 694:	03 c0       	rjmp	.+6      	; 0x69c <vfprintf+0x150>
 696:	65 2d       	mov	r22, r5
 698:	70 e0       	ldi	r23, 0x00	; 0
 69a:	02 c0       	rjmp	.+4      	; 0x6a0 <vfprintf+0x154>
 69c:	6f ef       	ldi	r22, 0xFF	; 255
 69e:	7f ef       	ldi	r23, 0xFF	; 255
 6a0:	c5 01       	movw	r24, r10
 6a2:	2c 87       	std	Y+12, r18	; 0x0c
 6a4:	94 d2       	rcall	.+1320   	; 0xbce <strnlen>
 6a6:	2c 01       	movw	r4, r24
 6a8:	83 01       	movw	r16, r6
 6aa:	2c 85       	ldd	r18, Y+12	; 0x0c
 6ac:	2f 77       	andi	r18, 0x7F	; 127
 6ae:	22 2e       	mov	r2, r18
 6b0:	16 c0       	rjmp	.+44     	; 0x6de <vfprintf+0x192>
 6b2:	38 01       	movw	r6, r16
 6b4:	f2 e0       	ldi	r31, 0x02	; 2
 6b6:	6f 0e       	add	r6, r31
 6b8:	71 1c       	adc	r7, r1
 6ba:	f8 01       	movw	r30, r16
 6bc:	a0 80       	ld	r10, Z
 6be:	b1 80       	ldd	r11, Z+1	; 0x01
 6c0:	26 ff       	sbrs	r18, 6
 6c2:	03 c0       	rjmp	.+6      	; 0x6ca <vfprintf+0x17e>
 6c4:	65 2d       	mov	r22, r5
 6c6:	70 e0       	ldi	r23, 0x00	; 0
 6c8:	02 c0       	rjmp	.+4      	; 0x6ce <vfprintf+0x182>
 6ca:	6f ef       	ldi	r22, 0xFF	; 255
 6cc:	7f ef       	ldi	r23, 0xFF	; 255
 6ce:	c5 01       	movw	r24, r10
 6d0:	2c 87       	std	Y+12, r18	; 0x0c
 6d2:	6b d2       	rcall	.+1238   	; 0xbaa <strnlen_P>
 6d4:	2c 01       	movw	r4, r24
 6d6:	2c 85       	ldd	r18, Y+12	; 0x0c
 6d8:	20 68       	ori	r18, 0x80	; 128
 6da:	22 2e       	mov	r2, r18
 6dc:	83 01       	movw	r16, r6
 6de:	23 fc       	sbrc	r2, 3
 6e0:	19 c0       	rjmp	.+50     	; 0x714 <vfprintf+0x1c8>
 6e2:	83 2d       	mov	r24, r3
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	48 16       	cp	r4, r24
 6e8:	59 06       	cpc	r5, r25
 6ea:	a0 f4       	brcc	.+40     	; 0x714 <vfprintf+0x1c8>
 6ec:	b7 01       	movw	r22, r14
 6ee:	80 e2       	ldi	r24, 0x20	; 32
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	78 d2       	rcall	.+1264   	; 0xbe4 <fputc>
 6f4:	3a 94       	dec	r3
 6f6:	f5 cf       	rjmp	.-22     	; 0x6e2 <vfprintf+0x196>
 6f8:	f5 01       	movw	r30, r10
 6fa:	27 fc       	sbrc	r2, 7
 6fc:	85 91       	lpm	r24, Z+
 6fe:	27 fe       	sbrs	r2, 7
 700:	81 91       	ld	r24, Z+
 702:	5f 01       	movw	r10, r30
 704:	b7 01       	movw	r22, r14
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	6d d2       	rcall	.+1242   	; 0xbe4 <fputc>
 70a:	31 10       	cpse	r3, r1
 70c:	3a 94       	dec	r3
 70e:	f1 e0       	ldi	r31, 0x01	; 1
 710:	4f 1a       	sub	r4, r31
 712:	51 08       	sbc	r5, r1
 714:	41 14       	cp	r4, r1
 716:	51 04       	cpc	r5, r1
 718:	79 f7       	brne	.-34     	; 0x6f8 <vfprintf+0x1ac>
 71a:	de c0       	rjmp	.+444    	; 0x8d8 <vfprintf+0x38c>
 71c:	84 36       	cpi	r24, 0x64	; 100
 71e:	11 f0       	breq	.+4      	; 0x724 <vfprintf+0x1d8>
 720:	89 36       	cpi	r24, 0x69	; 105
 722:	31 f5       	brne	.+76     	; 0x770 <vfprintf+0x224>
 724:	f8 01       	movw	r30, r16
 726:	27 ff       	sbrs	r18, 7
 728:	07 c0       	rjmp	.+14     	; 0x738 <vfprintf+0x1ec>
 72a:	60 81       	ld	r22, Z
 72c:	71 81       	ldd	r23, Z+1	; 0x01
 72e:	82 81       	ldd	r24, Z+2	; 0x02
 730:	93 81       	ldd	r25, Z+3	; 0x03
 732:	0c 5f       	subi	r16, 0xFC	; 252
 734:	1f 4f       	sbci	r17, 0xFF	; 255
 736:	08 c0       	rjmp	.+16     	; 0x748 <vfprintf+0x1fc>
 738:	60 81       	ld	r22, Z
 73a:	71 81       	ldd	r23, Z+1	; 0x01
 73c:	88 27       	eor	r24, r24
 73e:	77 fd       	sbrc	r23, 7
 740:	80 95       	com	r24
 742:	98 2f       	mov	r25, r24
 744:	0e 5f       	subi	r16, 0xFE	; 254
 746:	1f 4f       	sbci	r17, 0xFF	; 255
 748:	2f 76       	andi	r18, 0x6F	; 111
 74a:	b2 2e       	mov	r11, r18
 74c:	97 ff       	sbrs	r25, 7
 74e:	09 c0       	rjmp	.+18     	; 0x762 <vfprintf+0x216>
 750:	90 95       	com	r25
 752:	80 95       	com	r24
 754:	70 95       	com	r23
 756:	61 95       	neg	r22
 758:	7f 4f       	sbci	r23, 0xFF	; 255
 75a:	8f 4f       	sbci	r24, 0xFF	; 255
 75c:	9f 4f       	sbci	r25, 0xFF	; 255
 75e:	20 68       	ori	r18, 0x80	; 128
 760:	b2 2e       	mov	r11, r18
 762:	2a e0       	ldi	r18, 0x0A	; 10
 764:	30 e0       	ldi	r19, 0x00	; 0
 766:	a4 01       	movw	r20, r8
 768:	6f d2       	rcall	.+1246   	; 0xc48 <__ultoa_invert>
 76a:	a8 2e       	mov	r10, r24
 76c:	a8 18       	sub	r10, r8
 76e:	43 c0       	rjmp	.+134    	; 0x7f6 <vfprintf+0x2aa>
 770:	85 37       	cpi	r24, 0x75	; 117
 772:	29 f4       	brne	.+10     	; 0x77e <vfprintf+0x232>
 774:	2f 7e       	andi	r18, 0xEF	; 239
 776:	b2 2e       	mov	r11, r18
 778:	2a e0       	ldi	r18, 0x0A	; 10
 77a:	30 e0       	ldi	r19, 0x00	; 0
 77c:	25 c0       	rjmp	.+74     	; 0x7c8 <vfprintf+0x27c>
 77e:	f2 2f       	mov	r31, r18
 780:	f9 7f       	andi	r31, 0xF9	; 249
 782:	bf 2e       	mov	r11, r31
 784:	8f 36       	cpi	r24, 0x6F	; 111
 786:	c1 f0       	breq	.+48     	; 0x7b8 <vfprintf+0x26c>
 788:	18 f4       	brcc	.+6      	; 0x790 <vfprintf+0x244>
 78a:	88 35       	cpi	r24, 0x58	; 88
 78c:	79 f0       	breq	.+30     	; 0x7ac <vfprintf+0x260>
 78e:	ad c0       	rjmp	.+346    	; 0x8ea <vfprintf+0x39e>
 790:	80 37       	cpi	r24, 0x70	; 112
 792:	19 f0       	breq	.+6      	; 0x79a <vfprintf+0x24e>
 794:	88 37       	cpi	r24, 0x78	; 120
 796:	21 f0       	breq	.+8      	; 0x7a0 <vfprintf+0x254>
 798:	a8 c0       	rjmp	.+336    	; 0x8ea <vfprintf+0x39e>
 79a:	2f 2f       	mov	r18, r31
 79c:	20 61       	ori	r18, 0x10	; 16
 79e:	b2 2e       	mov	r11, r18
 7a0:	b4 fe       	sbrs	r11, 4
 7a2:	0d c0       	rjmp	.+26     	; 0x7be <vfprintf+0x272>
 7a4:	8b 2d       	mov	r24, r11
 7a6:	84 60       	ori	r24, 0x04	; 4
 7a8:	b8 2e       	mov	r11, r24
 7aa:	09 c0       	rjmp	.+18     	; 0x7be <vfprintf+0x272>
 7ac:	24 ff       	sbrs	r18, 4
 7ae:	0a c0       	rjmp	.+20     	; 0x7c4 <vfprintf+0x278>
 7b0:	9f 2f       	mov	r25, r31
 7b2:	96 60       	ori	r25, 0x06	; 6
 7b4:	b9 2e       	mov	r11, r25
 7b6:	06 c0       	rjmp	.+12     	; 0x7c4 <vfprintf+0x278>
 7b8:	28 e0       	ldi	r18, 0x08	; 8
 7ba:	30 e0       	ldi	r19, 0x00	; 0
 7bc:	05 c0       	rjmp	.+10     	; 0x7c8 <vfprintf+0x27c>
 7be:	20 e1       	ldi	r18, 0x10	; 16
 7c0:	30 e0       	ldi	r19, 0x00	; 0
 7c2:	02 c0       	rjmp	.+4      	; 0x7c8 <vfprintf+0x27c>
 7c4:	20 e1       	ldi	r18, 0x10	; 16
 7c6:	32 e0       	ldi	r19, 0x02	; 2
 7c8:	f8 01       	movw	r30, r16
 7ca:	b7 fe       	sbrs	r11, 7
 7cc:	07 c0       	rjmp	.+14     	; 0x7dc <vfprintf+0x290>
 7ce:	60 81       	ld	r22, Z
 7d0:	71 81       	ldd	r23, Z+1	; 0x01
 7d2:	82 81       	ldd	r24, Z+2	; 0x02
 7d4:	93 81       	ldd	r25, Z+3	; 0x03
 7d6:	0c 5f       	subi	r16, 0xFC	; 252
 7d8:	1f 4f       	sbci	r17, 0xFF	; 255
 7da:	06 c0       	rjmp	.+12     	; 0x7e8 <vfprintf+0x29c>
 7dc:	60 81       	ld	r22, Z
 7de:	71 81       	ldd	r23, Z+1	; 0x01
 7e0:	80 e0       	ldi	r24, 0x00	; 0
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	0e 5f       	subi	r16, 0xFE	; 254
 7e6:	1f 4f       	sbci	r17, 0xFF	; 255
 7e8:	a4 01       	movw	r20, r8
 7ea:	2e d2       	rcall	.+1116   	; 0xc48 <__ultoa_invert>
 7ec:	a8 2e       	mov	r10, r24
 7ee:	a8 18       	sub	r10, r8
 7f0:	fb 2d       	mov	r31, r11
 7f2:	ff 77       	andi	r31, 0x7F	; 127
 7f4:	bf 2e       	mov	r11, r31
 7f6:	b6 fe       	sbrs	r11, 6
 7f8:	0b c0       	rjmp	.+22     	; 0x810 <vfprintf+0x2c4>
 7fa:	2b 2d       	mov	r18, r11
 7fc:	2e 7f       	andi	r18, 0xFE	; 254
 7fe:	a5 14       	cp	r10, r5
 800:	50 f4       	brcc	.+20     	; 0x816 <vfprintf+0x2ca>
 802:	b4 fe       	sbrs	r11, 4
 804:	0a c0       	rjmp	.+20     	; 0x81a <vfprintf+0x2ce>
 806:	b2 fc       	sbrc	r11, 2
 808:	08 c0       	rjmp	.+16     	; 0x81a <vfprintf+0x2ce>
 80a:	2b 2d       	mov	r18, r11
 80c:	2e 7e       	andi	r18, 0xEE	; 238
 80e:	05 c0       	rjmp	.+10     	; 0x81a <vfprintf+0x2ce>
 810:	7a 2c       	mov	r7, r10
 812:	2b 2d       	mov	r18, r11
 814:	03 c0       	rjmp	.+6      	; 0x81c <vfprintf+0x2d0>
 816:	7a 2c       	mov	r7, r10
 818:	01 c0       	rjmp	.+2      	; 0x81c <vfprintf+0x2d0>
 81a:	75 2c       	mov	r7, r5
 81c:	24 ff       	sbrs	r18, 4
 81e:	0d c0       	rjmp	.+26     	; 0x83a <vfprintf+0x2ee>
 820:	fe 01       	movw	r30, r28
 822:	ea 0d       	add	r30, r10
 824:	f1 1d       	adc	r31, r1
 826:	80 81       	ld	r24, Z
 828:	80 33       	cpi	r24, 0x30	; 48
 82a:	11 f4       	brne	.+4      	; 0x830 <vfprintf+0x2e4>
 82c:	29 7e       	andi	r18, 0xE9	; 233
 82e:	09 c0       	rjmp	.+18     	; 0x842 <vfprintf+0x2f6>
 830:	22 ff       	sbrs	r18, 2
 832:	06 c0       	rjmp	.+12     	; 0x840 <vfprintf+0x2f4>
 834:	73 94       	inc	r7
 836:	73 94       	inc	r7
 838:	04 c0       	rjmp	.+8      	; 0x842 <vfprintf+0x2f6>
 83a:	82 2f       	mov	r24, r18
 83c:	86 78       	andi	r24, 0x86	; 134
 83e:	09 f0       	breq	.+2      	; 0x842 <vfprintf+0x2f6>
 840:	73 94       	inc	r7
 842:	23 fd       	sbrc	r18, 3
 844:	12 c0       	rjmp	.+36     	; 0x86a <vfprintf+0x31e>
 846:	20 ff       	sbrs	r18, 0
 848:	06 c0       	rjmp	.+12     	; 0x856 <vfprintf+0x30a>
 84a:	5a 2c       	mov	r5, r10
 84c:	73 14       	cp	r7, r3
 84e:	18 f4       	brcc	.+6      	; 0x856 <vfprintf+0x30a>
 850:	53 0c       	add	r5, r3
 852:	57 18       	sub	r5, r7
 854:	73 2c       	mov	r7, r3
 856:	73 14       	cp	r7, r3
 858:	60 f4       	brcc	.+24     	; 0x872 <vfprintf+0x326>
 85a:	b7 01       	movw	r22, r14
 85c:	80 e2       	ldi	r24, 0x20	; 32
 85e:	90 e0       	ldi	r25, 0x00	; 0
 860:	2c 87       	std	Y+12, r18	; 0x0c
 862:	c0 d1       	rcall	.+896    	; 0xbe4 <fputc>
 864:	73 94       	inc	r7
 866:	2c 85       	ldd	r18, Y+12	; 0x0c
 868:	f6 cf       	rjmp	.-20     	; 0x856 <vfprintf+0x30a>
 86a:	73 14       	cp	r7, r3
 86c:	10 f4       	brcc	.+4      	; 0x872 <vfprintf+0x326>
 86e:	37 18       	sub	r3, r7
 870:	01 c0       	rjmp	.+2      	; 0x874 <vfprintf+0x328>
 872:	31 2c       	mov	r3, r1
 874:	24 ff       	sbrs	r18, 4
 876:	11 c0       	rjmp	.+34     	; 0x89a <vfprintf+0x34e>
 878:	b7 01       	movw	r22, r14
 87a:	80 e3       	ldi	r24, 0x30	; 48
 87c:	90 e0       	ldi	r25, 0x00	; 0
 87e:	2c 87       	std	Y+12, r18	; 0x0c
 880:	b1 d1       	rcall	.+866    	; 0xbe4 <fputc>
 882:	2c 85       	ldd	r18, Y+12	; 0x0c
 884:	22 ff       	sbrs	r18, 2
 886:	16 c0       	rjmp	.+44     	; 0x8b4 <vfprintf+0x368>
 888:	21 ff       	sbrs	r18, 1
 88a:	03 c0       	rjmp	.+6      	; 0x892 <vfprintf+0x346>
 88c:	88 e5       	ldi	r24, 0x58	; 88
 88e:	90 e0       	ldi	r25, 0x00	; 0
 890:	02 c0       	rjmp	.+4      	; 0x896 <vfprintf+0x34a>
 892:	88 e7       	ldi	r24, 0x78	; 120
 894:	90 e0       	ldi	r25, 0x00	; 0
 896:	b7 01       	movw	r22, r14
 898:	0c c0       	rjmp	.+24     	; 0x8b2 <vfprintf+0x366>
 89a:	82 2f       	mov	r24, r18
 89c:	86 78       	andi	r24, 0x86	; 134
 89e:	51 f0       	breq	.+20     	; 0x8b4 <vfprintf+0x368>
 8a0:	21 fd       	sbrc	r18, 1
 8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <vfprintf+0x35c>
 8a4:	80 e2       	ldi	r24, 0x20	; 32
 8a6:	01 c0       	rjmp	.+2      	; 0x8aa <vfprintf+0x35e>
 8a8:	8b e2       	ldi	r24, 0x2B	; 43
 8aa:	27 fd       	sbrc	r18, 7
 8ac:	8d e2       	ldi	r24, 0x2D	; 45
 8ae:	b7 01       	movw	r22, r14
 8b0:	90 e0       	ldi	r25, 0x00	; 0
 8b2:	98 d1       	rcall	.+816    	; 0xbe4 <fputc>
 8b4:	a5 14       	cp	r10, r5
 8b6:	30 f4       	brcc	.+12     	; 0x8c4 <vfprintf+0x378>
 8b8:	b7 01       	movw	r22, r14
 8ba:	80 e3       	ldi	r24, 0x30	; 48
 8bc:	90 e0       	ldi	r25, 0x00	; 0
 8be:	92 d1       	rcall	.+804    	; 0xbe4 <fputc>
 8c0:	5a 94       	dec	r5
 8c2:	f8 cf       	rjmp	.-16     	; 0x8b4 <vfprintf+0x368>
 8c4:	aa 94       	dec	r10
 8c6:	f4 01       	movw	r30, r8
 8c8:	ea 0d       	add	r30, r10
 8ca:	f1 1d       	adc	r31, r1
 8cc:	80 81       	ld	r24, Z
 8ce:	b7 01       	movw	r22, r14
 8d0:	90 e0       	ldi	r25, 0x00	; 0
 8d2:	88 d1       	rcall	.+784    	; 0xbe4 <fputc>
 8d4:	a1 10       	cpse	r10, r1
 8d6:	f6 cf       	rjmp	.-20     	; 0x8c4 <vfprintf+0x378>
 8d8:	33 20       	and	r3, r3
 8da:	09 f4       	brne	.+2      	; 0x8de <vfprintf+0x392>
 8dc:	5d ce       	rjmp	.-838    	; 0x598 <vfprintf+0x4c>
 8de:	b7 01       	movw	r22, r14
 8e0:	80 e2       	ldi	r24, 0x20	; 32
 8e2:	90 e0       	ldi	r25, 0x00	; 0
 8e4:	7f d1       	rcall	.+766    	; 0xbe4 <fputc>
 8e6:	3a 94       	dec	r3
 8e8:	f7 cf       	rjmp	.-18     	; 0x8d8 <vfprintf+0x38c>
 8ea:	f7 01       	movw	r30, r14
 8ec:	86 81       	ldd	r24, Z+6	; 0x06
 8ee:	97 81       	ldd	r25, Z+7	; 0x07
 8f0:	02 c0       	rjmp	.+4      	; 0x8f6 <vfprintf+0x3aa>
 8f2:	8f ef       	ldi	r24, 0xFF	; 255
 8f4:	9f ef       	ldi	r25, 0xFF	; 255
 8f6:	2c 96       	adiw	r28, 0x0c	; 12
 8f8:	0f b6       	in	r0, 0x3f	; 63
 8fa:	f8 94       	cli
 8fc:	de bf       	out	0x3e, r29	; 62
 8fe:	0f be       	out	0x3f, r0	; 63
 900:	cd bf       	out	0x3d, r28	; 61
 902:	df 91       	pop	r29
 904:	cf 91       	pop	r28
 906:	1f 91       	pop	r17
 908:	0f 91       	pop	r16
 90a:	ff 90       	pop	r15
 90c:	ef 90       	pop	r14
 90e:	df 90       	pop	r13
 910:	cf 90       	pop	r12
 912:	bf 90       	pop	r11
 914:	af 90       	pop	r10
 916:	9f 90       	pop	r9
 918:	8f 90       	pop	r8
 91a:	7f 90       	pop	r7
 91c:	6f 90       	pop	r6
 91e:	5f 90       	pop	r5
 920:	4f 90       	pop	r4
 922:	3f 90       	pop	r3
 924:	2f 90       	pop	r2
 926:	08 95       	ret

00000928 <calloc>:
 928:	0f 93       	push	r16
 92a:	1f 93       	push	r17
 92c:	cf 93       	push	r28
 92e:	df 93       	push	r29
 930:	86 9f       	mul	r24, r22
 932:	80 01       	movw	r16, r0
 934:	87 9f       	mul	r24, r23
 936:	10 0d       	add	r17, r0
 938:	96 9f       	mul	r25, r22
 93a:	10 0d       	add	r17, r0
 93c:	11 24       	eor	r1, r1
 93e:	c8 01       	movw	r24, r16
 940:	0d d0       	rcall	.+26     	; 0x95c <malloc>
 942:	ec 01       	movw	r28, r24
 944:	00 97       	sbiw	r24, 0x00	; 0
 946:	21 f0       	breq	.+8      	; 0x950 <calloc+0x28>
 948:	a8 01       	movw	r20, r16
 94a:	60 e0       	ldi	r22, 0x00	; 0
 94c:	70 e0       	ldi	r23, 0x00	; 0
 94e:	38 d1       	rcall	.+624    	; 0xbc0 <memset>
 950:	ce 01       	movw	r24, r28
 952:	df 91       	pop	r29
 954:	cf 91       	pop	r28
 956:	1f 91       	pop	r17
 958:	0f 91       	pop	r16
 95a:	08 95       	ret

0000095c <malloc>:
 95c:	cf 93       	push	r28
 95e:	df 93       	push	r29
 960:	82 30       	cpi	r24, 0x02	; 2
 962:	91 05       	cpc	r25, r1
 964:	10 f4       	brcc	.+4      	; 0x96a <malloc+0xe>
 966:	82 e0       	ldi	r24, 0x02	; 2
 968:	90 e0       	ldi	r25, 0x00	; 0
 96a:	e0 91 12 02 	lds	r30, 0x0212
 96e:	f0 91 13 02 	lds	r31, 0x0213
 972:	20 e0       	ldi	r18, 0x00	; 0
 974:	30 e0       	ldi	r19, 0x00	; 0
 976:	a0 e0       	ldi	r26, 0x00	; 0
 978:	b0 e0       	ldi	r27, 0x00	; 0
 97a:	30 97       	sbiw	r30, 0x00	; 0
 97c:	39 f1       	breq	.+78     	; 0x9cc <malloc+0x70>
 97e:	40 81       	ld	r20, Z
 980:	51 81       	ldd	r21, Z+1	; 0x01
 982:	48 17       	cp	r20, r24
 984:	59 07       	cpc	r21, r25
 986:	b8 f0       	brcs	.+46     	; 0x9b6 <malloc+0x5a>
 988:	48 17       	cp	r20, r24
 98a:	59 07       	cpc	r21, r25
 98c:	71 f4       	brne	.+28     	; 0x9aa <malloc+0x4e>
 98e:	82 81       	ldd	r24, Z+2	; 0x02
 990:	93 81       	ldd	r25, Z+3	; 0x03
 992:	10 97       	sbiw	r26, 0x00	; 0
 994:	29 f0       	breq	.+10     	; 0x9a0 <malloc+0x44>
 996:	13 96       	adiw	r26, 0x03	; 3
 998:	9c 93       	st	X, r25
 99a:	8e 93       	st	-X, r24
 99c:	12 97       	sbiw	r26, 0x02	; 2
 99e:	2c c0       	rjmp	.+88     	; 0x9f8 <malloc+0x9c>
 9a0:	90 93 13 02 	sts	0x0213, r25
 9a4:	80 93 12 02 	sts	0x0212, r24
 9a8:	27 c0       	rjmp	.+78     	; 0x9f8 <malloc+0x9c>
 9aa:	21 15       	cp	r18, r1
 9ac:	31 05       	cpc	r19, r1
 9ae:	31 f0       	breq	.+12     	; 0x9bc <malloc+0x60>
 9b0:	42 17       	cp	r20, r18
 9b2:	53 07       	cpc	r21, r19
 9b4:	18 f0       	brcs	.+6      	; 0x9bc <malloc+0x60>
 9b6:	a9 01       	movw	r20, r18
 9b8:	db 01       	movw	r26, r22
 9ba:	01 c0       	rjmp	.+2      	; 0x9be <malloc+0x62>
 9bc:	ef 01       	movw	r28, r30
 9be:	9a 01       	movw	r18, r20
 9c0:	bd 01       	movw	r22, r26
 9c2:	df 01       	movw	r26, r30
 9c4:	02 80       	ldd	r0, Z+2	; 0x02
 9c6:	f3 81       	ldd	r31, Z+3	; 0x03
 9c8:	e0 2d       	mov	r30, r0
 9ca:	d7 cf       	rjmp	.-82     	; 0x97a <malloc+0x1e>
 9cc:	21 15       	cp	r18, r1
 9ce:	31 05       	cpc	r19, r1
 9d0:	f9 f0       	breq	.+62     	; 0xa10 <malloc+0xb4>
 9d2:	28 1b       	sub	r18, r24
 9d4:	39 0b       	sbc	r19, r25
 9d6:	24 30       	cpi	r18, 0x04	; 4
 9d8:	31 05       	cpc	r19, r1
 9da:	80 f4       	brcc	.+32     	; 0x9fc <malloc+0xa0>
 9dc:	8a 81       	ldd	r24, Y+2	; 0x02
 9de:	9b 81       	ldd	r25, Y+3	; 0x03
 9e0:	61 15       	cp	r22, r1
 9e2:	71 05       	cpc	r23, r1
 9e4:	21 f0       	breq	.+8      	; 0x9ee <malloc+0x92>
 9e6:	fb 01       	movw	r30, r22
 9e8:	93 83       	std	Z+3, r25	; 0x03
 9ea:	82 83       	std	Z+2, r24	; 0x02
 9ec:	04 c0       	rjmp	.+8      	; 0x9f6 <malloc+0x9a>
 9ee:	90 93 13 02 	sts	0x0213, r25
 9f2:	80 93 12 02 	sts	0x0212, r24
 9f6:	fe 01       	movw	r30, r28
 9f8:	32 96       	adiw	r30, 0x02	; 2
 9fa:	44 c0       	rjmp	.+136    	; 0xa84 <malloc+0x128>
 9fc:	fe 01       	movw	r30, r28
 9fe:	e2 0f       	add	r30, r18
 a00:	f3 1f       	adc	r31, r19
 a02:	81 93       	st	Z+, r24
 a04:	91 93       	st	Z+, r25
 a06:	22 50       	subi	r18, 0x02	; 2
 a08:	31 09       	sbc	r19, r1
 a0a:	39 83       	std	Y+1, r19	; 0x01
 a0c:	28 83       	st	Y, r18
 a0e:	3a c0       	rjmp	.+116    	; 0xa84 <malloc+0x128>
 a10:	20 91 10 02 	lds	r18, 0x0210
 a14:	30 91 11 02 	lds	r19, 0x0211
 a18:	23 2b       	or	r18, r19
 a1a:	41 f4       	brne	.+16     	; 0xa2c <malloc+0xd0>
 a1c:	20 91 02 02 	lds	r18, 0x0202
 a20:	30 91 03 02 	lds	r19, 0x0203
 a24:	30 93 11 02 	sts	0x0211, r19
 a28:	20 93 10 02 	sts	0x0210, r18
 a2c:	20 91 00 02 	lds	r18, 0x0200
 a30:	30 91 01 02 	lds	r19, 0x0201
 a34:	21 15       	cp	r18, r1
 a36:	31 05       	cpc	r19, r1
 a38:	41 f4       	brne	.+16     	; 0xa4a <malloc+0xee>
 a3a:	2d b7       	in	r18, 0x3d	; 61
 a3c:	3e b7       	in	r19, 0x3e	; 62
 a3e:	40 91 04 02 	lds	r20, 0x0204
 a42:	50 91 05 02 	lds	r21, 0x0205
 a46:	24 1b       	sub	r18, r20
 a48:	35 0b       	sbc	r19, r21
 a4a:	e0 91 10 02 	lds	r30, 0x0210
 a4e:	f0 91 11 02 	lds	r31, 0x0211
 a52:	e2 17       	cp	r30, r18
 a54:	f3 07       	cpc	r31, r19
 a56:	a0 f4       	brcc	.+40     	; 0xa80 <malloc+0x124>
 a58:	2e 1b       	sub	r18, r30
 a5a:	3f 0b       	sbc	r19, r31
 a5c:	28 17       	cp	r18, r24
 a5e:	39 07       	cpc	r19, r25
 a60:	78 f0       	brcs	.+30     	; 0xa80 <malloc+0x124>
 a62:	ac 01       	movw	r20, r24
 a64:	4e 5f       	subi	r20, 0xFE	; 254
 a66:	5f 4f       	sbci	r21, 0xFF	; 255
 a68:	24 17       	cp	r18, r20
 a6a:	35 07       	cpc	r19, r21
 a6c:	48 f0       	brcs	.+18     	; 0xa80 <malloc+0x124>
 a6e:	4e 0f       	add	r20, r30
 a70:	5f 1f       	adc	r21, r31
 a72:	50 93 11 02 	sts	0x0211, r21
 a76:	40 93 10 02 	sts	0x0210, r20
 a7a:	81 93       	st	Z+, r24
 a7c:	91 93       	st	Z+, r25
 a7e:	02 c0       	rjmp	.+4      	; 0xa84 <malloc+0x128>
 a80:	e0 e0       	ldi	r30, 0x00	; 0
 a82:	f0 e0       	ldi	r31, 0x00	; 0
 a84:	cf 01       	movw	r24, r30
 a86:	df 91       	pop	r29
 a88:	cf 91       	pop	r28
 a8a:	08 95       	ret

00000a8c <free>:
 a8c:	cf 93       	push	r28
 a8e:	df 93       	push	r29
 a90:	00 97       	sbiw	r24, 0x00	; 0
 a92:	09 f4       	brne	.+2      	; 0xa96 <free+0xa>
 a94:	87 c0       	rjmp	.+270    	; 0xba4 <free+0x118>
 a96:	fc 01       	movw	r30, r24
 a98:	32 97       	sbiw	r30, 0x02	; 2
 a9a:	13 82       	std	Z+3, r1	; 0x03
 a9c:	12 82       	std	Z+2, r1	; 0x02
 a9e:	c0 91 12 02 	lds	r28, 0x0212
 aa2:	d0 91 13 02 	lds	r29, 0x0213
 aa6:	20 97       	sbiw	r28, 0x00	; 0
 aa8:	81 f4       	brne	.+32     	; 0xaca <free+0x3e>
 aaa:	20 81       	ld	r18, Z
 aac:	31 81       	ldd	r19, Z+1	; 0x01
 aae:	28 0f       	add	r18, r24
 ab0:	39 1f       	adc	r19, r25
 ab2:	80 91 10 02 	lds	r24, 0x0210
 ab6:	90 91 11 02 	lds	r25, 0x0211
 aba:	82 17       	cp	r24, r18
 abc:	93 07       	cpc	r25, r19
 abe:	79 f5       	brne	.+94     	; 0xb1e <free+0x92>
 ac0:	f0 93 11 02 	sts	0x0211, r31
 ac4:	e0 93 10 02 	sts	0x0210, r30
 ac8:	6d c0       	rjmp	.+218    	; 0xba4 <free+0x118>
 aca:	de 01       	movw	r26, r28
 acc:	20 e0       	ldi	r18, 0x00	; 0
 ace:	30 e0       	ldi	r19, 0x00	; 0
 ad0:	ae 17       	cp	r26, r30
 ad2:	bf 07       	cpc	r27, r31
 ad4:	50 f4       	brcc	.+20     	; 0xaea <free+0x5e>
 ad6:	12 96       	adiw	r26, 0x02	; 2
 ad8:	4d 91       	ld	r20, X+
 ada:	5c 91       	ld	r21, X
 adc:	13 97       	sbiw	r26, 0x03	; 3
 ade:	9d 01       	movw	r18, r26
 ae0:	41 15       	cp	r20, r1
 ae2:	51 05       	cpc	r21, r1
 ae4:	09 f1       	breq	.+66     	; 0xb28 <free+0x9c>
 ae6:	da 01       	movw	r26, r20
 ae8:	f3 cf       	rjmp	.-26     	; 0xad0 <free+0x44>
 aea:	b3 83       	std	Z+3, r27	; 0x03
 aec:	a2 83       	std	Z+2, r26	; 0x02
 aee:	40 81       	ld	r20, Z
 af0:	51 81       	ldd	r21, Z+1	; 0x01
 af2:	84 0f       	add	r24, r20
 af4:	95 1f       	adc	r25, r21
 af6:	8a 17       	cp	r24, r26
 af8:	9b 07       	cpc	r25, r27
 afa:	71 f4       	brne	.+28     	; 0xb18 <free+0x8c>
 afc:	8d 91       	ld	r24, X+
 afe:	9c 91       	ld	r25, X
 b00:	11 97       	sbiw	r26, 0x01	; 1
 b02:	84 0f       	add	r24, r20
 b04:	95 1f       	adc	r25, r21
 b06:	02 96       	adiw	r24, 0x02	; 2
 b08:	91 83       	std	Z+1, r25	; 0x01
 b0a:	80 83       	st	Z, r24
 b0c:	12 96       	adiw	r26, 0x02	; 2
 b0e:	8d 91       	ld	r24, X+
 b10:	9c 91       	ld	r25, X
 b12:	13 97       	sbiw	r26, 0x03	; 3
 b14:	93 83       	std	Z+3, r25	; 0x03
 b16:	82 83       	std	Z+2, r24	; 0x02
 b18:	21 15       	cp	r18, r1
 b1a:	31 05       	cpc	r19, r1
 b1c:	29 f4       	brne	.+10     	; 0xb28 <free+0x9c>
 b1e:	f0 93 13 02 	sts	0x0213, r31
 b22:	e0 93 12 02 	sts	0x0212, r30
 b26:	3e c0       	rjmp	.+124    	; 0xba4 <free+0x118>
 b28:	d9 01       	movw	r26, r18
 b2a:	13 96       	adiw	r26, 0x03	; 3
 b2c:	fc 93       	st	X, r31
 b2e:	ee 93       	st	-X, r30
 b30:	12 97       	sbiw	r26, 0x02	; 2
 b32:	4d 91       	ld	r20, X+
 b34:	5d 91       	ld	r21, X+
 b36:	a4 0f       	add	r26, r20
 b38:	b5 1f       	adc	r27, r21
 b3a:	ea 17       	cp	r30, r26
 b3c:	fb 07       	cpc	r31, r27
 b3e:	79 f4       	brne	.+30     	; 0xb5e <free+0xd2>
 b40:	80 81       	ld	r24, Z
 b42:	91 81       	ldd	r25, Z+1	; 0x01
 b44:	84 0f       	add	r24, r20
 b46:	95 1f       	adc	r25, r21
 b48:	02 96       	adiw	r24, 0x02	; 2
 b4a:	d9 01       	movw	r26, r18
 b4c:	11 96       	adiw	r26, 0x01	; 1
 b4e:	9c 93       	st	X, r25
 b50:	8e 93       	st	-X, r24
 b52:	82 81       	ldd	r24, Z+2	; 0x02
 b54:	93 81       	ldd	r25, Z+3	; 0x03
 b56:	13 96       	adiw	r26, 0x03	; 3
 b58:	9c 93       	st	X, r25
 b5a:	8e 93       	st	-X, r24
 b5c:	12 97       	sbiw	r26, 0x02	; 2
 b5e:	e0 e0       	ldi	r30, 0x00	; 0
 b60:	f0 e0       	ldi	r31, 0x00	; 0
 b62:	8a 81       	ldd	r24, Y+2	; 0x02
 b64:	9b 81       	ldd	r25, Y+3	; 0x03
 b66:	00 97       	sbiw	r24, 0x00	; 0
 b68:	19 f0       	breq	.+6      	; 0xb70 <free+0xe4>
 b6a:	fe 01       	movw	r30, r28
 b6c:	ec 01       	movw	r28, r24
 b6e:	f9 cf       	rjmp	.-14     	; 0xb62 <free+0xd6>
 b70:	ce 01       	movw	r24, r28
 b72:	02 96       	adiw	r24, 0x02	; 2
 b74:	28 81       	ld	r18, Y
 b76:	39 81       	ldd	r19, Y+1	; 0x01
 b78:	82 0f       	add	r24, r18
 b7a:	93 1f       	adc	r25, r19
 b7c:	20 91 10 02 	lds	r18, 0x0210
 b80:	30 91 11 02 	lds	r19, 0x0211
 b84:	28 17       	cp	r18, r24
 b86:	39 07       	cpc	r19, r25
 b88:	69 f4       	brne	.+26     	; 0xba4 <free+0x118>
 b8a:	30 97       	sbiw	r30, 0x00	; 0
 b8c:	29 f4       	brne	.+10     	; 0xb98 <free+0x10c>
 b8e:	10 92 13 02 	sts	0x0213, r1
 b92:	10 92 12 02 	sts	0x0212, r1
 b96:	02 c0       	rjmp	.+4      	; 0xb9c <free+0x110>
 b98:	13 82       	std	Z+3, r1	; 0x03
 b9a:	12 82       	std	Z+2, r1	; 0x02
 b9c:	d0 93 11 02 	sts	0x0211, r29
 ba0:	c0 93 10 02 	sts	0x0210, r28
 ba4:	df 91       	pop	r29
 ba6:	cf 91       	pop	r28
 ba8:	08 95       	ret

00000baa <strnlen_P>:
 baa:	fc 01       	movw	r30, r24
 bac:	05 90       	lpm	r0, Z+
 bae:	61 50       	subi	r22, 0x01	; 1
 bb0:	70 40       	sbci	r23, 0x00	; 0
 bb2:	01 10       	cpse	r0, r1
 bb4:	d8 f7       	brcc	.-10     	; 0xbac <strnlen_P+0x2>
 bb6:	80 95       	com	r24
 bb8:	90 95       	com	r25
 bba:	8e 0f       	add	r24, r30
 bbc:	9f 1f       	adc	r25, r31
 bbe:	08 95       	ret

00000bc0 <memset>:
 bc0:	dc 01       	movw	r26, r24
 bc2:	01 c0       	rjmp	.+2      	; 0xbc6 <memset+0x6>
 bc4:	6d 93       	st	X+, r22
 bc6:	41 50       	subi	r20, 0x01	; 1
 bc8:	50 40       	sbci	r21, 0x00	; 0
 bca:	e0 f7       	brcc	.-8      	; 0xbc4 <memset+0x4>
 bcc:	08 95       	ret

00000bce <strnlen>:
 bce:	fc 01       	movw	r30, r24
 bd0:	61 50       	subi	r22, 0x01	; 1
 bd2:	70 40       	sbci	r23, 0x00	; 0
 bd4:	01 90       	ld	r0, Z+
 bd6:	01 10       	cpse	r0, r1
 bd8:	d8 f7       	brcc	.-10     	; 0xbd0 <strnlen+0x2>
 bda:	80 95       	com	r24
 bdc:	90 95       	com	r25
 bde:	8e 0f       	add	r24, r30
 be0:	9f 1f       	adc	r25, r31
 be2:	08 95       	ret

00000be4 <fputc>:
 be4:	0f 93       	push	r16
 be6:	1f 93       	push	r17
 be8:	cf 93       	push	r28
 bea:	df 93       	push	r29
 bec:	18 2f       	mov	r17, r24
 bee:	09 2f       	mov	r16, r25
 bf0:	eb 01       	movw	r28, r22
 bf2:	8b 81       	ldd	r24, Y+3	; 0x03
 bf4:	81 fd       	sbrc	r24, 1
 bf6:	03 c0       	rjmp	.+6      	; 0xbfe <fputc+0x1a>
 bf8:	8f ef       	ldi	r24, 0xFF	; 255
 bfa:	9f ef       	ldi	r25, 0xFF	; 255
 bfc:	20 c0       	rjmp	.+64     	; 0xc3e <fputc+0x5a>
 bfe:	82 ff       	sbrs	r24, 2
 c00:	10 c0       	rjmp	.+32     	; 0xc22 <fputc+0x3e>
 c02:	4e 81       	ldd	r20, Y+6	; 0x06
 c04:	5f 81       	ldd	r21, Y+7	; 0x07
 c06:	2c 81       	ldd	r18, Y+4	; 0x04
 c08:	3d 81       	ldd	r19, Y+5	; 0x05
 c0a:	42 17       	cp	r20, r18
 c0c:	53 07       	cpc	r21, r19
 c0e:	7c f4       	brge	.+30     	; 0xc2e <fputc+0x4a>
 c10:	e8 81       	ld	r30, Y
 c12:	f9 81       	ldd	r31, Y+1	; 0x01
 c14:	9f 01       	movw	r18, r30
 c16:	2f 5f       	subi	r18, 0xFF	; 255
 c18:	3f 4f       	sbci	r19, 0xFF	; 255
 c1a:	39 83       	std	Y+1, r19	; 0x01
 c1c:	28 83       	st	Y, r18
 c1e:	10 83       	st	Z, r17
 c20:	06 c0       	rjmp	.+12     	; 0xc2e <fputc+0x4a>
 c22:	e8 85       	ldd	r30, Y+8	; 0x08
 c24:	f9 85       	ldd	r31, Y+9	; 0x09
 c26:	81 2f       	mov	r24, r17
 c28:	19 95       	eicall
 c2a:	89 2b       	or	r24, r25
 c2c:	29 f7       	brne	.-54     	; 0xbf8 <fputc+0x14>
 c2e:	2e 81       	ldd	r18, Y+6	; 0x06
 c30:	3f 81       	ldd	r19, Y+7	; 0x07
 c32:	2f 5f       	subi	r18, 0xFF	; 255
 c34:	3f 4f       	sbci	r19, 0xFF	; 255
 c36:	3f 83       	std	Y+7, r19	; 0x07
 c38:	2e 83       	std	Y+6, r18	; 0x06
 c3a:	81 2f       	mov	r24, r17
 c3c:	90 2f       	mov	r25, r16
 c3e:	df 91       	pop	r29
 c40:	cf 91       	pop	r28
 c42:	1f 91       	pop	r17
 c44:	0f 91       	pop	r16
 c46:	08 95       	ret

00000c48 <__ultoa_invert>:
 c48:	fa 01       	movw	r30, r20
 c4a:	aa 27       	eor	r26, r26
 c4c:	28 30       	cpi	r18, 0x08	; 8
 c4e:	51 f1       	breq	.+84     	; 0xca4 <__ultoa_invert+0x5c>
 c50:	20 31       	cpi	r18, 0x10	; 16
 c52:	81 f1       	breq	.+96     	; 0xcb4 <__ultoa_invert+0x6c>
 c54:	e8 94       	clt
 c56:	6f 93       	push	r22
 c58:	6e 7f       	andi	r22, 0xFE	; 254
 c5a:	6e 5f       	subi	r22, 0xFE	; 254
 c5c:	7f 4f       	sbci	r23, 0xFF	; 255
 c5e:	8f 4f       	sbci	r24, 0xFF	; 255
 c60:	9f 4f       	sbci	r25, 0xFF	; 255
 c62:	af 4f       	sbci	r26, 0xFF	; 255
 c64:	b1 e0       	ldi	r27, 0x01	; 1
 c66:	3e d0       	rcall	.+124    	; 0xce4 <__ultoa_invert+0x9c>
 c68:	b4 e0       	ldi	r27, 0x04	; 4
 c6a:	3c d0       	rcall	.+120    	; 0xce4 <__ultoa_invert+0x9c>
 c6c:	67 0f       	add	r22, r23
 c6e:	78 1f       	adc	r23, r24
 c70:	89 1f       	adc	r24, r25
 c72:	9a 1f       	adc	r25, r26
 c74:	a1 1d       	adc	r26, r1
 c76:	68 0f       	add	r22, r24
 c78:	79 1f       	adc	r23, r25
 c7a:	8a 1f       	adc	r24, r26
 c7c:	91 1d       	adc	r25, r1
 c7e:	a1 1d       	adc	r26, r1
 c80:	6a 0f       	add	r22, r26
 c82:	71 1d       	adc	r23, r1
 c84:	81 1d       	adc	r24, r1
 c86:	91 1d       	adc	r25, r1
 c88:	a1 1d       	adc	r26, r1
 c8a:	20 d0       	rcall	.+64     	; 0xccc <__ultoa_invert+0x84>
 c8c:	09 f4       	brne	.+2      	; 0xc90 <__ultoa_invert+0x48>
 c8e:	68 94       	set
 c90:	3f 91       	pop	r19
 c92:	2a e0       	ldi	r18, 0x0A	; 10
 c94:	26 9f       	mul	r18, r22
 c96:	11 24       	eor	r1, r1
 c98:	30 19       	sub	r19, r0
 c9a:	30 5d       	subi	r19, 0xD0	; 208
 c9c:	31 93       	st	Z+, r19
 c9e:	de f6       	brtc	.-74     	; 0xc56 <__ultoa_invert+0xe>
 ca0:	cf 01       	movw	r24, r30
 ca2:	08 95       	ret
 ca4:	46 2f       	mov	r20, r22
 ca6:	47 70       	andi	r20, 0x07	; 7
 ca8:	40 5d       	subi	r20, 0xD0	; 208
 caa:	41 93       	st	Z+, r20
 cac:	b3 e0       	ldi	r27, 0x03	; 3
 cae:	0f d0       	rcall	.+30     	; 0xcce <__ultoa_invert+0x86>
 cb0:	c9 f7       	brne	.-14     	; 0xca4 <__ultoa_invert+0x5c>
 cb2:	f6 cf       	rjmp	.-20     	; 0xca0 <__ultoa_invert+0x58>
 cb4:	46 2f       	mov	r20, r22
 cb6:	4f 70       	andi	r20, 0x0F	; 15
 cb8:	40 5d       	subi	r20, 0xD0	; 208
 cba:	4a 33       	cpi	r20, 0x3A	; 58
 cbc:	18 f0       	brcs	.+6      	; 0xcc4 <__ultoa_invert+0x7c>
 cbe:	49 5d       	subi	r20, 0xD9	; 217
 cc0:	31 fd       	sbrc	r19, 1
 cc2:	40 52       	subi	r20, 0x20	; 32
 cc4:	41 93       	st	Z+, r20
 cc6:	02 d0       	rcall	.+4      	; 0xccc <__ultoa_invert+0x84>
 cc8:	a9 f7       	brne	.-22     	; 0xcb4 <__ultoa_invert+0x6c>
 cca:	ea cf       	rjmp	.-44     	; 0xca0 <__ultoa_invert+0x58>
 ccc:	b4 e0       	ldi	r27, 0x04	; 4
 cce:	a6 95       	lsr	r26
 cd0:	97 95       	ror	r25
 cd2:	87 95       	ror	r24
 cd4:	77 95       	ror	r23
 cd6:	67 95       	ror	r22
 cd8:	ba 95       	dec	r27
 cda:	c9 f7       	brne	.-14     	; 0xcce <__ultoa_invert+0x86>
 cdc:	00 97       	sbiw	r24, 0x00	; 0
 cde:	61 05       	cpc	r22, r1
 ce0:	71 05       	cpc	r23, r1
 ce2:	08 95       	ret
 ce4:	9b 01       	movw	r18, r22
 ce6:	ac 01       	movw	r20, r24
 ce8:	0a 2e       	mov	r0, r26
 cea:	06 94       	lsr	r0
 cec:	57 95       	ror	r21
 cee:	47 95       	ror	r20
 cf0:	37 95       	ror	r19
 cf2:	27 95       	ror	r18
 cf4:	ba 95       	dec	r27
 cf6:	c9 f7       	brne	.-14     	; 0xcea <__ultoa_invert+0xa2>
 cf8:	62 0f       	add	r22, r18
 cfa:	73 1f       	adc	r23, r19
 cfc:	84 1f       	adc	r24, r20
 cfe:	95 1f       	adc	r25, r21
 d00:	a0 1d       	adc	r26, r0
 d02:	08 95       	ret

00000d04 <_exit>:
 d04:	f8 94       	cli

00000d06 <__stop_program>:
 d06:	ff cf       	rjmp	.-2      	; 0xd06 <__stop_program>
