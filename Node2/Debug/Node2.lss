
Node2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  00000752  000007e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000752  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800206  00800206  000007ec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007ec  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000168  00000000  00000000  0000081c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e20  00000000  00000000  00000984  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006e9  00000000  00000000  000017a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008c8  00000000  00000000  00001e8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002fc  00000000  00000000  00002758  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038e  00000000  00000000  00002a54  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000670  00000000  00000000  00002de2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000108  00000000  00000000  00003452  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	6c c1       	rjmp	.+728    	; 0x35a <__vector_32>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 e5       	ldi	r30, 0x52	; 82
  fc:	f7 e0       	ldi	r31, 0x07	; 7
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 30       	cpi	r26, 0x06	; 6
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a6 e0       	ldi	r26, 0x06	; 6
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a0 31       	cpi	r26, 0x10	; 16
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	bc d0       	rcall	.+376    	; 0x298 <main>
 120:	16 c3       	rjmp	.+1580   	; 0x74e <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <CAN_init>:
		MCP_write(MCP_TXB0CTRL + 6 + i, msg->data[i]);
	}
	
	/* Request to send contents of TXB0 */
	MCP_request_to_send(MCP_RTS_TX0);
}
 124:	ac c0       	rjmp	.+344    	; 0x27e <MCP_init>
 126:	08 95       	ret

00000128 <CAN_message_receive>:

can_message_t CAN_message_receive(void)
{
 128:	9f 92       	push	r9
 12a:	af 92       	push	r10
 12c:	bf 92       	push	r11
 12e:	cf 92       	push	r12
 130:	df 92       	push	r13
 132:	ef 92       	push	r14
 134:	ff 92       	push	r15
 136:	0f 93       	push	r16
 138:	1f 93       	push	r17
 13a:	cf 93       	push	r28
 13c:	df 93       	push	r29
 13e:	cd b7       	in	r28, 0x3d	; 61
 140:	de b7       	in	r29, 0x3e	; 62
 142:	2b 97       	sbiw	r28, 0x0b	; 11
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	f8 94       	cli
 148:	de bf       	out	0x3e, r29	; 62
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	cd bf       	out	0x3d, r28	; 61
 14e:	7c 01       	movw	r14, r24
	/* Only RXB0 is used */
	
	can_message_t message;
	uint8_t buffer = MCP_read(MCP_RXB0SIDH + 1);
 150:	82 e6       	ldi	r24, 0x62	; 98
 152:	67 d0       	rcall	.+206    	; 0x222 <MCP_read>
	message.id = (buffer >> 5);
 154:	82 95       	swap	r24
 156:	86 95       	lsr	r24
 158:	87 70       	andi	r24, 0x07	; 7
 15a:	c8 2e       	mov	r12, r24
 15c:	d1 2c       	mov	r13, r1
	buffer = MCP_read(MCP_RXB0CTRL + 5);
 15e:	85 e6       	ldi	r24, 0x65	; 101
 160:	60 d0       	rcall	.+192    	; 0x222 <MCP_read>
	message.length = (buffer & 0x0F);
 162:	8f 70       	andi	r24, 0x0F	; 15
 164:	98 2e       	mov	r9, r24
	for (uint8_t i = 0; i < message.length; i++) {
 166:	a1 f0       	breq	.+40     	; 0x190 <CAN_message_receive+0x68>
 168:	8e 01       	movw	r16, r28
 16a:	0c 5f       	subi	r16, 0xFC	; 252
 16c:	1f 4f       	sbci	r17, 0xFF	; 255
 16e:	0f 2e       	mov	r0, r31
 170:	f6 e6       	ldi	r31, 0x66	; 102
 172:	af 2e       	mov	r10, r31
 174:	f0 2d       	mov	r31, r0
 176:	a8 0e       	add	r10, r24
 178:	0f 2e       	mov	r0, r31
 17a:	f6 e6       	ldi	r31, 0x66	; 102
 17c:	bf 2e       	mov	r11, r31
 17e:	f0 2d       	mov	r31, r0
		message.data[i] = MCP_read(MCP_RXB0CTRL + 6 + i);
 180:	8b 2d       	mov	r24, r11
 182:	4f d0       	rcall	.+158    	; 0x222 <MCP_read>
 184:	f8 01       	movw	r30, r16
 186:	81 93       	st	Z+, r24
 188:	8f 01       	movw	r16, r30
 18a:	b3 94       	inc	r11
	can_message_t message;
	uint8_t buffer = MCP_read(MCP_RXB0SIDH + 1);
	message.id = (buffer >> 5);
	buffer = MCP_read(MCP_RXB0CTRL + 5);
	message.length = (buffer & 0x0F);
	for (uint8_t i = 0; i < message.length; i++) {
 18c:	ba 10       	cpse	r11, r10
 18e:	f8 cf       	rjmp	.-16     	; 0x180 <CAN_message_receive+0x58>
		message.data[i] = MCP_read(MCP_RXB0CTRL + 6 + i);
	}
	
	/* Clear CANINTF.RX0IF */
	MCP_modify_bit(MCP_CANINTF, 0x01, 0x00);
 190:	40 e0       	ldi	r20, 0x00	; 0
 192:	61 e0       	ldi	r22, 0x01	; 1
 194:	8c e2       	ldi	r24, 0x2C	; 44
 196:	5a d0       	rcall	.+180    	; 0x24c <MCP_modify_bit>
	
	return message;
 198:	da 82       	std	Y+2, r13	; 0x02
 19a:	c9 82       	std	Y+1, r12	; 0x01
 19c:	9b 82       	std	Y+3, r9	; 0x03
 19e:	8b e0       	ldi	r24, 0x0B	; 11
 1a0:	fe 01       	movw	r30, r28
 1a2:	31 96       	adiw	r30, 0x01	; 1
 1a4:	d7 01       	movw	r26, r14
 1a6:	01 90       	ld	r0, Z+
 1a8:	0d 92       	st	X+, r0
 1aa:	8a 95       	dec	r24
 1ac:	e1 f7       	brne	.-8      	; 0x1a6 <CAN_message_receive+0x7e>
}
 1ae:	c7 01       	movw	r24, r14
 1b0:	2b 96       	adiw	r28, 0x0b	; 11
 1b2:	0f b6       	in	r0, 0x3f	; 63
 1b4:	f8 94       	cli
 1b6:	de bf       	out	0x3e, r29	; 62
 1b8:	0f be       	out	0x3f, r0	; 63
 1ba:	cd bf       	out	0x3d, r28	; 61
 1bc:	df 91       	pop	r29
 1be:	cf 91       	pop	r28
 1c0:	1f 91       	pop	r17
 1c2:	0f 91       	pop	r16
 1c4:	ff 90       	pop	r15
 1c6:	ef 90       	pop	r14
 1c8:	df 90       	pop	r13
 1ca:	cf 90       	pop	r12
 1cc:	bf 90       	pop	r11
 1ce:	af 90       	pop	r10
 1d0:	9f 90       	pop	r9
 1d2:	08 95       	ret

000001d4 <CAN_message_handle>:

/* Processes a received CAN-message */
void CAN_message_handle(can_message_t msg)
{
 1d4:	ef 92       	push	r14
 1d6:	ff 92       	push	r15
 1d8:	0f 93       	push	r16
 1da:	1f 93       	push	r17
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	cd b7       	in	r28, 0x3d	; 61
 1e2:	de b7       	in	r29, 0x3e	; 62
 1e4:	2b 97       	sbiw	r28, 0x0b	; 11
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	f8 94       	cli
 1ea:	de bf       	out	0x3e, r29	; 62
 1ec:	0f be       	out	0x3f, r0	; 63
 1ee:	cd bf       	out	0x3d, r28	; 61
 1f0:	3e 83       	std	Y+6, r19	; 0x06
 1f2:	4f 83       	std	Y+7, r20	; 0x07
	//printf("Message handle entered\n");
	uint8_t msg_type = msg.data[0];
	//printf("msg_type: %i\n", msg_type);
	position_t received_pos;
	switch (msg_type) {
 1f4:	1a 36       	cpi	r17, 0x6A	; 106
 1f6:	19 f4       	brne	.+6      	; 0x1fe <CAN_message_handle+0x2a>
			received_pos.x = msg.data[2];
			received_pos.y = msg.data[3];
			//printf("received_pos.x: %d\n", received_pos.x);
			//printf("received_pos.y: %d\n", received_pos.y);
			
			SERVO_write(received_pos);
 1f8:	83 2f       	mov	r24, r19
 1fa:	94 2f       	mov	r25, r20
 1fc:	99 d0       	rcall	.+306    	; 0x330 <SERVO_write>
			break;
		default:
			break;
	}
 1fe:	2b 96       	adiw	r28, 0x0b	; 11
 200:	0f b6       	in	r0, 0x3f	; 63
 202:	f8 94       	cli
 204:	de bf       	out	0x3e, r29	; 62
 206:	0f be       	out	0x3f, r0	; 63
 208:	cd bf       	out	0x3d, r28	; 61
 20a:	df 91       	pop	r29
 20c:	cf 91       	pop	r28
 20e:	1f 91       	pop	r17
 210:	0f 91       	pop	r16
 212:	ff 90       	pop	r15
 214:	ef 90       	pop	r14
 216:	08 95       	ret

00000218 <MCP_reset>:
	SPI_master_transmit(MCP_RX_STATUS);
	//SPI_master_transmit(0x00); // Unneccessary because of "repeat data out"?
	char status = SPDR;
	PORTB |= (1 << PB0);
	return status;
}
 218:	28 98       	cbi	0x05, 0	; 5
 21a:	80 ec       	ldi	r24, 0xC0	; 192
 21c:	b5 d0       	rcall	.+362    	; 0x388 <SPI_master_transmit>
 21e:	28 9a       	sbi	0x05, 0	; 5
 220:	08 95       	ret

00000222 <MCP_read>:
 222:	cf 93       	push	r28
 224:	c8 2f       	mov	r28, r24
 226:	28 98       	cbi	0x05, 0	; 5
 228:	83 e0       	ldi	r24, 0x03	; 3
 22a:	ae d0       	rcall	.+348    	; 0x388 <SPI_master_transmit>
 22c:	8c 2f       	mov	r24, r28
 22e:	ac d0       	rcall	.+344    	; 0x388 <SPI_master_transmit>
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	aa d0       	rcall	.+340    	; 0x388 <SPI_master_transmit>
 234:	8e b5       	in	r24, 0x2e	; 46
 236:	28 9a       	sbi	0x05, 0	; 5
 238:	cf 91       	pop	r28
 23a:	08 95       	ret

0000023c <MCP_read_status>:
 23c:	28 98       	cbi	0x05, 0	; 5
 23e:	80 ea       	ldi	r24, 0xA0	; 160
 240:	a3 d0       	rcall	.+326    	; 0x388 <SPI_master_transmit>
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	a1 d0       	rcall	.+322    	; 0x388 <SPI_master_transmit>
 246:	8e b5       	in	r24, 0x2e	; 46
 248:	28 9a       	sbi	0x05, 0	; 5
 24a:	08 95       	ret

0000024c <MCP_modify_bit>:
	MCP_modify_bit(MCP_CANCTRL, mask, mode);
}

/* Changes the value of the register bits specified by the mask */
void MCP_modify_bit(uint8_t addr, uint8_t mask, uint8_t data)
{
 24c:	1f 93       	push	r17
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	18 2f       	mov	r17, r24
 254:	d6 2f       	mov	r29, r22
 256:	c4 2f       	mov	r28, r20
	PORTB &= ~(1 << PB0);
 258:	28 98       	cbi	0x05, 0	; 5
	SPI_master_transmit(MCP_BITMOD);
 25a:	85 e0       	ldi	r24, 0x05	; 5
 25c:	95 d0       	rcall	.+298    	; 0x388 <SPI_master_transmit>
	SPI_master_transmit(addr);
 25e:	81 2f       	mov	r24, r17
 260:	93 d0       	rcall	.+294    	; 0x388 <SPI_master_transmit>
	SPI_master_transmit(mask);
 262:	8d 2f       	mov	r24, r29
 264:	91 d0       	rcall	.+290    	; 0x388 <SPI_master_transmit>
	SPI_master_transmit(data);
 266:	8c 2f       	mov	r24, r28
 268:	8f d0       	rcall	.+286    	; 0x388 <SPI_master_transmit>
	PORTB |= (1 << PB0);
 26a:	28 9a       	sbi	0x05, 0	; 5
 26c:	df 91       	pop	r29
 26e:	cf 91       	pop	r28
 270:	1f 91       	pop	r17
 272:	08 95       	ret

00000274 <MCP_set_mode>:
			break;
		default:
			break;
	}
	
	MCP_modify_bit(MCP_CANCTRL, mask, mode);
 274:	48 2f       	mov	r20, r24
 276:	60 ee       	ldi	r22, 0xE0	; 224
 278:	8f e0       	ldi	r24, 0x0F	; 15
 27a:	e8 cf       	rjmp	.-48     	; 0x24c <MCP_modify_bit>
 27c:	08 95       	ret

0000027e <MCP_init>:
#include "MCP2515.h"
#include "mcp.h"

void MCP_init(void)
{
	SPI_master_init();
 27e:	7f d0       	rcall	.+254    	; 0x37e <SPI_master_init>
	MCP_reset();
 280:	cb df       	rcall	.-106    	; 0x218 <MCP_reset>
	
	MCP_modify_bit(MCP_RXB0CTRL, 0b01100000, 0xFF); // Turns masks/filters off for RX0
 282:	4f ef       	ldi	r20, 0xFF	; 255
 284:	60 e6       	ldi	r22, 0x60	; 96
 286:	80 e6       	ldi	r24, 0x60	; 96
 288:	e1 df       	rcall	.-62     	; 0x24c <MCP_modify_bit>
	MCP_modify_bit(MCP_RXB1CTRL, 0b01100000, 0xFF); // Turns masks/filters off for RX1
 28a:	4f ef       	ldi	r20, 0xFF	; 255
 28c:	60 e6       	ldi	r22, 0x60	; 96
 28e:	80 e7       	ldi	r24, 0x70	; 112
 290:	dd df       	rcall	.-70     	; 0x24c <MCP_modify_bit>
	//MCP_set_mode(MODE_LOOPBACK); // Sets loopback operation mode for testing
	MCP_set_mode(MODE_NORMAL); // Sets normal operation mode
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	ef cf       	rjmp	.-34     	; 0x274 <MCP_set_mode>
 296:	08 95       	ret

00000298 <main>:
#include "usart_2.h"
#include "can.h"


int main(void)
{
 298:	cf 93       	push	r28
 29a:	df 93       	push	r29
 29c:	cd b7       	in	r28, 0x3d	; 61
 29e:	de b7       	in	r29, 0x3e	; 62
 2a0:	2b 97       	sbiw	r28, 0x0b	; 11
 2a2:	0f b6       	in	r0, 0x3f	; 63
 2a4:	f8 94       	cli
 2a6:	de bf       	out	0x3e, r29	; 62
 2a8:	0f be       	out	0x3f, r0	; 63
 2aa:	cd bf       	out	0x3d, r28	; 61
	sei(); // Enable global interrupts
 2ac:	78 94       	sei
	
	SERVO_init(); // initialize timer
 2ae:	3e d0       	rcall	.+124    	; 0x32c <SERVO_init>
	fdevopen(USART_transmit, USART_receive); // Sets printf to serial port
 2b0:	6c ed       	ldi	r22, 0xDC	; 220
 2b2:	71 e0       	ldi	r23, 0x01	; 1
 2b4:	84 ed       	ldi	r24, 0xD4	; 212
 2b6:	91 e0       	ldi	r25, 0x01	; 1
 2b8:	b8 d0       	rcall	.+368    	; 0x42a <fdevopen>
	USART_init(MYUBBR);
 2ba:	87 e6       	ldi	r24, 0x67	; 103
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	69 d0       	rcall	.+210    	; 0x392 <USART_init>
	CAN_init();
 2c0:	31 df       	rcall	.-414    	; 0x124 <CAN_init>
	uint8_t status, msg_arrived;
	can_message_t received_message;
	
	while(1) {	
		
		status = MCP_read_status();
 2c2:	bc df       	rcall	.-136    	; 0x23c <MCP_read_status>
		//printf("Status: %02x\n", status);
		msg_arrived = (status & 1);
		if (msg_arrived) {
 2c4:	80 ff       	sbrs	r24, 0
 2c6:	fd cf       	rjmp	.-6      	; 0x2c2 <main+0x2a>
			received_message = CAN_message_receive();
 2c8:	ce 01       	movw	r24, r28
 2ca:	01 96       	adiw	r24, 0x01	; 1
 2cc:	2d df       	rcall	.-422    	; 0x128 <CAN_message_receive>
			CAN_message_handle(received_message);
 2ce:	e9 80       	ldd	r14, Y+1	; 0x01
 2d0:	fa 80       	ldd	r15, Y+2	; 0x02
 2d2:	0b 81       	ldd	r16, Y+3	; 0x03
 2d4:	1c 81       	ldd	r17, Y+4	; 0x04
 2d6:	2d 81       	ldd	r18, Y+5	; 0x05
 2d8:	3e 81       	ldd	r19, Y+6	; 0x06
 2da:	4f 81       	ldd	r20, Y+7	; 0x07
 2dc:	58 85       	ldd	r21, Y+8	; 0x08
 2de:	69 85       	ldd	r22, Y+9	; 0x09
 2e0:	7a 85       	ldd	r23, Y+10	; 0x0a
 2e2:	8b 85       	ldd	r24, Y+11	; 0x0b
 2e4:	77 df       	rcall	.-274    	; 0x1d4 <CAN_message_handle>
 2e6:	ed cf       	rjmp	.-38     	; 0x2c2 <main+0x2a>

000002e8 <timer1_init>:
}

void timer1_init(void)
{
	// Set up timer in Fast PWM mode 14
	TCCR3A |= (1 << COM1A1)|(1 << WGM11);
 2e8:	e0 e9       	ldi	r30, 0x90	; 144
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	80 81       	ld	r24, Z
 2ee:	82 68       	ori	r24, 0x82	; 130
 2f0:	80 83       	st	Z, r24
	
	// Set up timer with prescaler = 64 and PWM fast mode 14
	TCCR3B |= (1 << WGM13)|(1 << WGM12)|(1 << CS11)|(1 << CS10);
 2f2:	e1 e9       	ldi	r30, 0x91	; 145
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	80 81       	ld	r24, Z
 2f8:	8b 61       	ori	r24, 0x1B	; 27
 2fa:	80 83       	st	Z, r24
	
	// Set up timer with TOP value = 5000 (0x1388)
	ICR3 = 0x1388;
 2fc:	88 e8       	ldi	r24, 0x88	; 136
 2fe:	93 e1       	ldi	r25, 0x13	; 19
 300:	90 93 97 00 	sts	0x0097, r25
 304:	80 93 96 00 	sts	0x0096, r24
	
	// initialize counter
	TCNT3 = 0;
 308:	10 92 95 00 	sts	0x0095, r1
 30c:	10 92 94 00 	sts	0x0094, r1
	
	// initialize compare value (servo to middle, 0x0177)
	OCR3A = 0x0177; //middle
 310:	87 e7       	ldi	r24, 0x77	; 119
 312:	91 e0       	ldi	r25, 0x01	; 1
 314:	90 93 99 00 	sts	0x0099, r25
 318:	80 93 98 00 	sts	0x0098, r24
	
	// Enable compare interrupt
	TIMSK3 |= (1 << OCIE1A);
 31c:	e1 e7       	ldi	r30, 0x71	; 113
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	80 81       	ld	r24, Z
 322:	82 60       	ori	r24, 0x02	; 2
 324:	80 83       	st	Z, r24
	
	// Set PWM port as output
	DDRE = (1 << PE3);
 326:	88 e0       	ldi	r24, 0x08	; 8
 328:	8d b9       	out	0x0d, r24	; 13
 32a:	08 95       	ret

0000032c <SERVO_init>:
#include <avr/interrupt.h>
#include "servo.h"

void SERVO_init(void)
{
	timer1_init();
 32c:	dd cf       	rjmp	.-70     	; 0x2e8 <timer1_init>
 32e:	08 95       	ret

00000330 <SERVO_write>:
{
	const uint32_t min = 225;
	const uint32_t max = 525;
	const uint32_t delta = max-min;
	uint32_t y = (uint32_t) pos.y;
	uint32_t ref = y * delta/255;
 330:	29 2f       	mov	r18, r25
 332:	30 e0       	ldi	r19, 0x00	; 0
 334:	ac e2       	ldi	r26, 0x2C	; 44
 336:	b1 e0       	ldi	r27, 0x01	; 1
 338:	69 d0       	rcall	.+210    	; 0x40c <__umulhisi3>
 33a:	2f ef       	ldi	r18, 0xFF	; 255
 33c:	30 e0       	ldi	r19, 0x00	; 0
 33e:	40 e0       	ldi	r20, 0x00	; 0
 340:	50 e0       	ldi	r21, 0x00	; 0
 342:	42 d0       	rcall	.+132    	; 0x3c8 <__udivmodsi4>
	uint32_t new_pos = min + ref;
 344:	da 01       	movw	r26, r20
 346:	c9 01       	movw	r24, r18
 348:	8f 51       	subi	r24, 0x1F	; 31
 34a:	9f 4f       	sbci	r25, 0xFF	; 255
 34c:	af 4f       	sbci	r26, 0xFF	; 255
 34e:	bf 4f       	sbci	r27, 0xFF	; 255
	
	// Update compare register
	//printf("new_pos: %d\n", new_pos);
	OCR3A = new_pos;
 350:	90 93 99 00 	sts	0x0099, r25
 354:	80 93 98 00 	sts	0x0098, r24
 358:	08 95       	ret

0000035a <__vector_32>:
}

/* Interrupt handler for TIMER1 compare */
ISR(TIMER3_COMPA_vect) {
 35a:	1f 92       	push	r1
 35c:	0f 92       	push	r0
 35e:	0f b6       	in	r0, 0x3f	; 63
 360:	0f 92       	push	r0
 362:	11 24       	eor	r1, r1
 364:	8f 93       	push	r24
 366:	9f 93       	push	r25

	// pin toggle
	PORTE ^= (1 << PE3);
 368:	9e b1       	in	r25, 0x0e	; 14
 36a:	88 e0       	ldi	r24, 0x08	; 8
 36c:	89 27       	eor	r24, r25
 36e:	8e b9       	out	0x0e, r24	; 14
 370:	9f 91       	pop	r25
 372:	8f 91       	pop	r24
 374:	0f 90       	pop	r0
 376:	0f be       	out	0x3f, r0	; 63
 378:	0f 90       	pop	r0
 37a:	1f 90       	pop	r1
 37c:	18 95       	reti

0000037e <SPI_master_init>:
#include <avr/delay.h>

void SPI_master_init(void)
{
	/* Set ~SS, MOSI and SCK output, all others input */
	DDRB = (1 << PB0)|(1 << PB2)|(1 << PB1); // Setting ~SS necessary?
 37e:	87 e0       	ldi	r24, 0x07	; 7
 380:	84 b9       	out	0x04, r24	; 4
	
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1 << SPE)|(1 << MSTR)|(1 << SPR0);
 382:	81 e5       	ldi	r24, 0x51	; 81
 384:	8c bd       	out	0x2c, r24	; 44
 386:	08 95       	ret

00000388 <SPI_master_transmit>:
}

void SPI_master_transmit(uint8_t cData)
{
	/* Start transmission */
	SPDR = cData;
 388:	8e bd       	out	0x2e, r24	; 46
	
	/* Wait for transmission to complete */
	while (!(SPSR & (1 << SPIF))) {
 38a:	0d b4       	in	r0, 0x2d	; 45
 38c:	07 fe       	sbrs	r0, 7
 38e:	fd cf       	rjmp	.-6      	; 0x38a <SPI_master_transmit+0x2>
		;
	}
}
 390:	08 95       	ret

00000392 <USART_init>:
#include <avr/io.h>

void USART_init(unsigned int ubrr)
{
	/* Set baud rate*/
	UBRR0H = (unsigned char)(ubrr >> 8 );
 392:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
 396:	80 93 c4 00 	sts	0x00C4, r24
	/*Enable receiver and transmitter*/
	UCSR0B = (1 << RXEN0)|(1 << TXEN0);
 39a:	88 e1       	ldi	r24, 0x18	; 24
 39c:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1 << USBS0)|(3 << UCSZ10);
 3a0:	8e e0       	ldi	r24, 0x0E	; 14
 3a2:	80 93 c2 00 	sts	0x00C2, r24
 3a6:	08 95       	ret

000003a8 <USART_transmit>:
}

void USART_transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while (!( UCSR0A & (1 << UDRE0)))
 3a8:	e0 ec       	ldi	r30, 0xC0	; 192
 3aa:	f0 e0       	ldi	r31, 0x00	; 0
 3ac:	90 81       	ld	r25, Z
 3ae:	95 ff       	sbrs	r25, 5
 3b0:	fd cf       	rjmp	.-6      	; 0x3ac <USART_transmit+0x4>
		;
	/* Put data into buffer, sends the data */
	UDR0 = data;
 3b2:	80 93 c6 00 	sts	0x00C6, r24
 3b6:	08 95       	ret

000003b8 <USART_receive>:
}

unsigned char USART_receive(void)
{
	/* Wait for data to be received */
	while ( !(UCSR0A & ( 1 << RXC0)) )
 3b8:	e0 ec       	ldi	r30, 0xC0	; 192
 3ba:	f0 e0       	ldi	r31, 0x00	; 0
 3bc:	80 81       	ld	r24, Z
 3be:	88 23       	and	r24, r24
 3c0:	ec f7       	brge	.-6      	; 0x3bc <USART_receive+0x4>
		;
	/* Get and return received data from buffer */
	return UDR0;
 3c2:	80 91 c6 00 	lds	r24, 0x00C6
}
 3c6:	08 95       	ret

000003c8 <__udivmodsi4>:
 3c8:	a1 e2       	ldi	r26, 0x21	; 33
 3ca:	1a 2e       	mov	r1, r26
 3cc:	aa 1b       	sub	r26, r26
 3ce:	bb 1b       	sub	r27, r27
 3d0:	fd 01       	movw	r30, r26
 3d2:	0d c0       	rjmp	.+26     	; 0x3ee <__udivmodsi4_ep>

000003d4 <__udivmodsi4_loop>:
 3d4:	aa 1f       	adc	r26, r26
 3d6:	bb 1f       	adc	r27, r27
 3d8:	ee 1f       	adc	r30, r30
 3da:	ff 1f       	adc	r31, r31
 3dc:	a2 17       	cp	r26, r18
 3de:	b3 07       	cpc	r27, r19
 3e0:	e4 07       	cpc	r30, r20
 3e2:	f5 07       	cpc	r31, r21
 3e4:	20 f0       	brcs	.+8      	; 0x3ee <__udivmodsi4_ep>
 3e6:	a2 1b       	sub	r26, r18
 3e8:	b3 0b       	sbc	r27, r19
 3ea:	e4 0b       	sbc	r30, r20
 3ec:	f5 0b       	sbc	r31, r21

000003ee <__udivmodsi4_ep>:
 3ee:	66 1f       	adc	r22, r22
 3f0:	77 1f       	adc	r23, r23
 3f2:	88 1f       	adc	r24, r24
 3f4:	99 1f       	adc	r25, r25
 3f6:	1a 94       	dec	r1
 3f8:	69 f7       	brne	.-38     	; 0x3d4 <__udivmodsi4_loop>
 3fa:	60 95       	com	r22
 3fc:	70 95       	com	r23
 3fe:	80 95       	com	r24
 400:	90 95       	com	r25
 402:	9b 01       	movw	r18, r22
 404:	ac 01       	movw	r20, r24
 406:	bd 01       	movw	r22, r26
 408:	cf 01       	movw	r24, r30
 40a:	08 95       	ret

0000040c <__umulhisi3>:
 40c:	a2 9f       	mul	r26, r18
 40e:	b0 01       	movw	r22, r0
 410:	b3 9f       	mul	r27, r19
 412:	c0 01       	movw	r24, r0
 414:	a3 9f       	mul	r26, r19
 416:	70 0d       	add	r23, r0
 418:	81 1d       	adc	r24, r1
 41a:	11 24       	eor	r1, r1
 41c:	91 1d       	adc	r25, r1
 41e:	b2 9f       	mul	r27, r18
 420:	70 0d       	add	r23, r0
 422:	81 1d       	adc	r24, r1
 424:	11 24       	eor	r1, r1
 426:	91 1d       	adc	r25, r1
 428:	08 95       	ret

0000042a <fdevopen>:
 42a:	0f 93       	push	r16
 42c:	1f 93       	push	r17
 42e:	cf 93       	push	r28
 430:	df 93       	push	r29
 432:	ec 01       	movw	r28, r24
 434:	8b 01       	movw	r16, r22
 436:	00 97       	sbiw	r24, 0x00	; 0
 438:	31 f4       	brne	.+12     	; 0x446 <fdevopen+0x1c>
 43a:	61 15       	cp	r22, r1
 43c:	71 05       	cpc	r23, r1
 43e:	19 f4       	brne	.+6      	; 0x446 <fdevopen+0x1c>
 440:	80 e0       	ldi	r24, 0x00	; 0
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	37 c0       	rjmp	.+110    	; 0x4b4 <fdevopen+0x8a>
 446:	6e e0       	ldi	r22, 0x0E	; 14
 448:	70 e0       	ldi	r23, 0x00	; 0
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	37 d0       	rcall	.+110    	; 0x4be <calloc>
 450:	fc 01       	movw	r30, r24
 452:	00 97       	sbiw	r24, 0x00	; 0
 454:	a9 f3       	breq	.-22     	; 0x440 <fdevopen+0x16>
 456:	80 e8       	ldi	r24, 0x80	; 128
 458:	83 83       	std	Z+3, r24	; 0x03
 45a:	01 15       	cp	r16, r1
 45c:	11 05       	cpc	r17, r1
 45e:	71 f0       	breq	.+28     	; 0x47c <fdevopen+0x52>
 460:	13 87       	std	Z+11, r17	; 0x0b
 462:	02 87       	std	Z+10, r16	; 0x0a
 464:	81 e8       	ldi	r24, 0x81	; 129
 466:	83 83       	std	Z+3, r24	; 0x03
 468:	80 91 06 02 	lds	r24, 0x0206
 46c:	90 91 07 02 	lds	r25, 0x0207
 470:	89 2b       	or	r24, r25
 472:	21 f4       	brne	.+8      	; 0x47c <fdevopen+0x52>
 474:	f0 93 07 02 	sts	0x0207, r31
 478:	e0 93 06 02 	sts	0x0206, r30
 47c:	20 97       	sbiw	r28, 0x00	; 0
 47e:	c9 f0       	breq	.+50     	; 0x4b2 <fdevopen+0x88>
 480:	d1 87       	std	Z+9, r29	; 0x09
 482:	c0 87       	std	Z+8, r28	; 0x08
 484:	83 81       	ldd	r24, Z+3	; 0x03
 486:	82 60       	ori	r24, 0x02	; 2
 488:	83 83       	std	Z+3, r24	; 0x03
 48a:	80 91 08 02 	lds	r24, 0x0208
 48e:	90 91 09 02 	lds	r25, 0x0209
 492:	89 2b       	or	r24, r25
 494:	71 f4       	brne	.+28     	; 0x4b2 <fdevopen+0x88>
 496:	f0 93 09 02 	sts	0x0209, r31
 49a:	e0 93 08 02 	sts	0x0208, r30
 49e:	80 91 0a 02 	lds	r24, 0x020A
 4a2:	90 91 0b 02 	lds	r25, 0x020B
 4a6:	89 2b       	or	r24, r25
 4a8:	21 f4       	brne	.+8      	; 0x4b2 <fdevopen+0x88>
 4aa:	f0 93 0b 02 	sts	0x020B, r31
 4ae:	e0 93 0a 02 	sts	0x020A, r30
 4b2:	cf 01       	movw	r24, r30
 4b4:	df 91       	pop	r29
 4b6:	cf 91       	pop	r28
 4b8:	1f 91       	pop	r17
 4ba:	0f 91       	pop	r16
 4bc:	08 95       	ret

000004be <calloc>:
 4be:	0f 93       	push	r16
 4c0:	1f 93       	push	r17
 4c2:	cf 93       	push	r28
 4c4:	df 93       	push	r29
 4c6:	86 9f       	mul	r24, r22
 4c8:	80 01       	movw	r16, r0
 4ca:	87 9f       	mul	r24, r23
 4cc:	10 0d       	add	r17, r0
 4ce:	96 9f       	mul	r25, r22
 4d0:	10 0d       	add	r17, r0
 4d2:	11 24       	eor	r1, r1
 4d4:	c8 01       	movw	r24, r16
 4d6:	0d d0       	rcall	.+26     	; 0x4f2 <malloc>
 4d8:	ec 01       	movw	r28, r24
 4da:	00 97       	sbiw	r24, 0x00	; 0
 4dc:	21 f0       	breq	.+8      	; 0x4e6 <calloc+0x28>
 4de:	a8 01       	movw	r20, r16
 4e0:	60 e0       	ldi	r22, 0x00	; 0
 4e2:	70 e0       	ldi	r23, 0x00	; 0
 4e4:	2d d1       	rcall	.+602    	; 0x740 <memset>
 4e6:	ce 01       	movw	r24, r28
 4e8:	df 91       	pop	r29
 4ea:	cf 91       	pop	r28
 4ec:	1f 91       	pop	r17
 4ee:	0f 91       	pop	r16
 4f0:	08 95       	ret

000004f2 <malloc>:
 4f2:	cf 93       	push	r28
 4f4:	df 93       	push	r29
 4f6:	82 30       	cpi	r24, 0x02	; 2
 4f8:	91 05       	cpc	r25, r1
 4fa:	10 f4       	brcc	.+4      	; 0x500 <malloc+0xe>
 4fc:	82 e0       	ldi	r24, 0x02	; 2
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	e0 91 0e 02 	lds	r30, 0x020E
 504:	f0 91 0f 02 	lds	r31, 0x020F
 508:	20 e0       	ldi	r18, 0x00	; 0
 50a:	30 e0       	ldi	r19, 0x00	; 0
 50c:	a0 e0       	ldi	r26, 0x00	; 0
 50e:	b0 e0       	ldi	r27, 0x00	; 0
 510:	30 97       	sbiw	r30, 0x00	; 0
 512:	39 f1       	breq	.+78     	; 0x562 <malloc+0x70>
 514:	40 81       	ld	r20, Z
 516:	51 81       	ldd	r21, Z+1	; 0x01
 518:	48 17       	cp	r20, r24
 51a:	59 07       	cpc	r21, r25
 51c:	b8 f0       	brcs	.+46     	; 0x54c <malloc+0x5a>
 51e:	48 17       	cp	r20, r24
 520:	59 07       	cpc	r21, r25
 522:	71 f4       	brne	.+28     	; 0x540 <malloc+0x4e>
 524:	82 81       	ldd	r24, Z+2	; 0x02
 526:	93 81       	ldd	r25, Z+3	; 0x03
 528:	10 97       	sbiw	r26, 0x00	; 0
 52a:	29 f0       	breq	.+10     	; 0x536 <malloc+0x44>
 52c:	13 96       	adiw	r26, 0x03	; 3
 52e:	9c 93       	st	X, r25
 530:	8e 93       	st	-X, r24
 532:	12 97       	sbiw	r26, 0x02	; 2
 534:	2c c0       	rjmp	.+88     	; 0x58e <malloc+0x9c>
 536:	90 93 0f 02 	sts	0x020F, r25
 53a:	80 93 0e 02 	sts	0x020E, r24
 53e:	27 c0       	rjmp	.+78     	; 0x58e <malloc+0x9c>
 540:	21 15       	cp	r18, r1
 542:	31 05       	cpc	r19, r1
 544:	31 f0       	breq	.+12     	; 0x552 <malloc+0x60>
 546:	42 17       	cp	r20, r18
 548:	53 07       	cpc	r21, r19
 54a:	18 f0       	brcs	.+6      	; 0x552 <malloc+0x60>
 54c:	a9 01       	movw	r20, r18
 54e:	db 01       	movw	r26, r22
 550:	01 c0       	rjmp	.+2      	; 0x554 <malloc+0x62>
 552:	ef 01       	movw	r28, r30
 554:	9a 01       	movw	r18, r20
 556:	bd 01       	movw	r22, r26
 558:	df 01       	movw	r26, r30
 55a:	02 80       	ldd	r0, Z+2	; 0x02
 55c:	f3 81       	ldd	r31, Z+3	; 0x03
 55e:	e0 2d       	mov	r30, r0
 560:	d7 cf       	rjmp	.-82     	; 0x510 <malloc+0x1e>
 562:	21 15       	cp	r18, r1
 564:	31 05       	cpc	r19, r1
 566:	f9 f0       	breq	.+62     	; 0x5a6 <malloc+0xb4>
 568:	28 1b       	sub	r18, r24
 56a:	39 0b       	sbc	r19, r25
 56c:	24 30       	cpi	r18, 0x04	; 4
 56e:	31 05       	cpc	r19, r1
 570:	80 f4       	brcc	.+32     	; 0x592 <malloc+0xa0>
 572:	8a 81       	ldd	r24, Y+2	; 0x02
 574:	9b 81       	ldd	r25, Y+3	; 0x03
 576:	61 15       	cp	r22, r1
 578:	71 05       	cpc	r23, r1
 57a:	21 f0       	breq	.+8      	; 0x584 <malloc+0x92>
 57c:	fb 01       	movw	r30, r22
 57e:	93 83       	std	Z+3, r25	; 0x03
 580:	82 83       	std	Z+2, r24	; 0x02
 582:	04 c0       	rjmp	.+8      	; 0x58c <malloc+0x9a>
 584:	90 93 0f 02 	sts	0x020F, r25
 588:	80 93 0e 02 	sts	0x020E, r24
 58c:	fe 01       	movw	r30, r28
 58e:	32 96       	adiw	r30, 0x02	; 2
 590:	44 c0       	rjmp	.+136    	; 0x61a <malloc+0x128>
 592:	fe 01       	movw	r30, r28
 594:	e2 0f       	add	r30, r18
 596:	f3 1f       	adc	r31, r19
 598:	81 93       	st	Z+, r24
 59a:	91 93       	st	Z+, r25
 59c:	22 50       	subi	r18, 0x02	; 2
 59e:	31 09       	sbc	r19, r1
 5a0:	39 83       	std	Y+1, r19	; 0x01
 5a2:	28 83       	st	Y, r18
 5a4:	3a c0       	rjmp	.+116    	; 0x61a <malloc+0x128>
 5a6:	20 91 0c 02 	lds	r18, 0x020C
 5aa:	30 91 0d 02 	lds	r19, 0x020D
 5ae:	23 2b       	or	r18, r19
 5b0:	41 f4       	brne	.+16     	; 0x5c2 <malloc+0xd0>
 5b2:	20 91 02 02 	lds	r18, 0x0202
 5b6:	30 91 03 02 	lds	r19, 0x0203
 5ba:	30 93 0d 02 	sts	0x020D, r19
 5be:	20 93 0c 02 	sts	0x020C, r18
 5c2:	20 91 00 02 	lds	r18, 0x0200
 5c6:	30 91 01 02 	lds	r19, 0x0201
 5ca:	21 15       	cp	r18, r1
 5cc:	31 05       	cpc	r19, r1
 5ce:	41 f4       	brne	.+16     	; 0x5e0 <malloc+0xee>
 5d0:	2d b7       	in	r18, 0x3d	; 61
 5d2:	3e b7       	in	r19, 0x3e	; 62
 5d4:	40 91 04 02 	lds	r20, 0x0204
 5d8:	50 91 05 02 	lds	r21, 0x0205
 5dc:	24 1b       	sub	r18, r20
 5de:	35 0b       	sbc	r19, r21
 5e0:	e0 91 0c 02 	lds	r30, 0x020C
 5e4:	f0 91 0d 02 	lds	r31, 0x020D
 5e8:	e2 17       	cp	r30, r18
 5ea:	f3 07       	cpc	r31, r19
 5ec:	a0 f4       	brcc	.+40     	; 0x616 <malloc+0x124>
 5ee:	2e 1b       	sub	r18, r30
 5f0:	3f 0b       	sbc	r19, r31
 5f2:	28 17       	cp	r18, r24
 5f4:	39 07       	cpc	r19, r25
 5f6:	78 f0       	brcs	.+30     	; 0x616 <malloc+0x124>
 5f8:	ac 01       	movw	r20, r24
 5fa:	4e 5f       	subi	r20, 0xFE	; 254
 5fc:	5f 4f       	sbci	r21, 0xFF	; 255
 5fe:	24 17       	cp	r18, r20
 600:	35 07       	cpc	r19, r21
 602:	48 f0       	brcs	.+18     	; 0x616 <malloc+0x124>
 604:	4e 0f       	add	r20, r30
 606:	5f 1f       	adc	r21, r31
 608:	50 93 0d 02 	sts	0x020D, r21
 60c:	40 93 0c 02 	sts	0x020C, r20
 610:	81 93       	st	Z+, r24
 612:	91 93       	st	Z+, r25
 614:	02 c0       	rjmp	.+4      	; 0x61a <malloc+0x128>
 616:	e0 e0       	ldi	r30, 0x00	; 0
 618:	f0 e0       	ldi	r31, 0x00	; 0
 61a:	cf 01       	movw	r24, r30
 61c:	df 91       	pop	r29
 61e:	cf 91       	pop	r28
 620:	08 95       	ret

00000622 <free>:
 622:	cf 93       	push	r28
 624:	df 93       	push	r29
 626:	00 97       	sbiw	r24, 0x00	; 0
 628:	09 f4       	brne	.+2      	; 0x62c <free+0xa>
 62a:	87 c0       	rjmp	.+270    	; 0x73a <free+0x118>
 62c:	fc 01       	movw	r30, r24
 62e:	32 97       	sbiw	r30, 0x02	; 2
 630:	13 82       	std	Z+3, r1	; 0x03
 632:	12 82       	std	Z+2, r1	; 0x02
 634:	c0 91 0e 02 	lds	r28, 0x020E
 638:	d0 91 0f 02 	lds	r29, 0x020F
 63c:	20 97       	sbiw	r28, 0x00	; 0
 63e:	81 f4       	brne	.+32     	; 0x660 <free+0x3e>
 640:	20 81       	ld	r18, Z
 642:	31 81       	ldd	r19, Z+1	; 0x01
 644:	28 0f       	add	r18, r24
 646:	39 1f       	adc	r19, r25
 648:	80 91 0c 02 	lds	r24, 0x020C
 64c:	90 91 0d 02 	lds	r25, 0x020D
 650:	82 17       	cp	r24, r18
 652:	93 07       	cpc	r25, r19
 654:	79 f5       	brne	.+94     	; 0x6b4 <free+0x92>
 656:	f0 93 0d 02 	sts	0x020D, r31
 65a:	e0 93 0c 02 	sts	0x020C, r30
 65e:	6d c0       	rjmp	.+218    	; 0x73a <free+0x118>
 660:	de 01       	movw	r26, r28
 662:	20 e0       	ldi	r18, 0x00	; 0
 664:	30 e0       	ldi	r19, 0x00	; 0
 666:	ae 17       	cp	r26, r30
 668:	bf 07       	cpc	r27, r31
 66a:	50 f4       	brcc	.+20     	; 0x680 <free+0x5e>
 66c:	12 96       	adiw	r26, 0x02	; 2
 66e:	4d 91       	ld	r20, X+
 670:	5c 91       	ld	r21, X
 672:	13 97       	sbiw	r26, 0x03	; 3
 674:	9d 01       	movw	r18, r26
 676:	41 15       	cp	r20, r1
 678:	51 05       	cpc	r21, r1
 67a:	09 f1       	breq	.+66     	; 0x6be <free+0x9c>
 67c:	da 01       	movw	r26, r20
 67e:	f3 cf       	rjmp	.-26     	; 0x666 <free+0x44>
 680:	b3 83       	std	Z+3, r27	; 0x03
 682:	a2 83       	std	Z+2, r26	; 0x02
 684:	40 81       	ld	r20, Z
 686:	51 81       	ldd	r21, Z+1	; 0x01
 688:	84 0f       	add	r24, r20
 68a:	95 1f       	adc	r25, r21
 68c:	8a 17       	cp	r24, r26
 68e:	9b 07       	cpc	r25, r27
 690:	71 f4       	brne	.+28     	; 0x6ae <free+0x8c>
 692:	8d 91       	ld	r24, X+
 694:	9c 91       	ld	r25, X
 696:	11 97       	sbiw	r26, 0x01	; 1
 698:	84 0f       	add	r24, r20
 69a:	95 1f       	adc	r25, r21
 69c:	02 96       	adiw	r24, 0x02	; 2
 69e:	91 83       	std	Z+1, r25	; 0x01
 6a0:	80 83       	st	Z, r24
 6a2:	12 96       	adiw	r26, 0x02	; 2
 6a4:	8d 91       	ld	r24, X+
 6a6:	9c 91       	ld	r25, X
 6a8:	13 97       	sbiw	r26, 0x03	; 3
 6aa:	93 83       	std	Z+3, r25	; 0x03
 6ac:	82 83       	std	Z+2, r24	; 0x02
 6ae:	21 15       	cp	r18, r1
 6b0:	31 05       	cpc	r19, r1
 6b2:	29 f4       	brne	.+10     	; 0x6be <free+0x9c>
 6b4:	f0 93 0f 02 	sts	0x020F, r31
 6b8:	e0 93 0e 02 	sts	0x020E, r30
 6bc:	3e c0       	rjmp	.+124    	; 0x73a <free+0x118>
 6be:	d9 01       	movw	r26, r18
 6c0:	13 96       	adiw	r26, 0x03	; 3
 6c2:	fc 93       	st	X, r31
 6c4:	ee 93       	st	-X, r30
 6c6:	12 97       	sbiw	r26, 0x02	; 2
 6c8:	4d 91       	ld	r20, X+
 6ca:	5d 91       	ld	r21, X+
 6cc:	a4 0f       	add	r26, r20
 6ce:	b5 1f       	adc	r27, r21
 6d0:	ea 17       	cp	r30, r26
 6d2:	fb 07       	cpc	r31, r27
 6d4:	79 f4       	brne	.+30     	; 0x6f4 <free+0xd2>
 6d6:	80 81       	ld	r24, Z
 6d8:	91 81       	ldd	r25, Z+1	; 0x01
 6da:	84 0f       	add	r24, r20
 6dc:	95 1f       	adc	r25, r21
 6de:	02 96       	adiw	r24, 0x02	; 2
 6e0:	d9 01       	movw	r26, r18
 6e2:	11 96       	adiw	r26, 0x01	; 1
 6e4:	9c 93       	st	X, r25
 6e6:	8e 93       	st	-X, r24
 6e8:	82 81       	ldd	r24, Z+2	; 0x02
 6ea:	93 81       	ldd	r25, Z+3	; 0x03
 6ec:	13 96       	adiw	r26, 0x03	; 3
 6ee:	9c 93       	st	X, r25
 6f0:	8e 93       	st	-X, r24
 6f2:	12 97       	sbiw	r26, 0x02	; 2
 6f4:	e0 e0       	ldi	r30, 0x00	; 0
 6f6:	f0 e0       	ldi	r31, 0x00	; 0
 6f8:	8a 81       	ldd	r24, Y+2	; 0x02
 6fa:	9b 81       	ldd	r25, Y+3	; 0x03
 6fc:	00 97       	sbiw	r24, 0x00	; 0
 6fe:	19 f0       	breq	.+6      	; 0x706 <free+0xe4>
 700:	fe 01       	movw	r30, r28
 702:	ec 01       	movw	r28, r24
 704:	f9 cf       	rjmp	.-14     	; 0x6f8 <free+0xd6>
 706:	ce 01       	movw	r24, r28
 708:	02 96       	adiw	r24, 0x02	; 2
 70a:	28 81       	ld	r18, Y
 70c:	39 81       	ldd	r19, Y+1	; 0x01
 70e:	82 0f       	add	r24, r18
 710:	93 1f       	adc	r25, r19
 712:	20 91 0c 02 	lds	r18, 0x020C
 716:	30 91 0d 02 	lds	r19, 0x020D
 71a:	28 17       	cp	r18, r24
 71c:	39 07       	cpc	r19, r25
 71e:	69 f4       	brne	.+26     	; 0x73a <free+0x118>
 720:	30 97       	sbiw	r30, 0x00	; 0
 722:	29 f4       	brne	.+10     	; 0x72e <free+0x10c>
 724:	10 92 0f 02 	sts	0x020F, r1
 728:	10 92 0e 02 	sts	0x020E, r1
 72c:	02 c0       	rjmp	.+4      	; 0x732 <free+0x110>
 72e:	13 82       	std	Z+3, r1	; 0x03
 730:	12 82       	std	Z+2, r1	; 0x02
 732:	d0 93 0d 02 	sts	0x020D, r29
 736:	c0 93 0c 02 	sts	0x020C, r28
 73a:	df 91       	pop	r29
 73c:	cf 91       	pop	r28
 73e:	08 95       	ret

00000740 <memset>:
 740:	dc 01       	movw	r26, r24
 742:	01 c0       	rjmp	.+2      	; 0x746 <memset+0x6>
 744:	6d 93       	st	X+, r22
 746:	41 50       	subi	r20, 0x01	; 1
 748:	50 40       	sbci	r21, 0x00	; 0
 74a:	e0 f7       	brcc	.-8      	; 0x744 <memset+0x4>
 74c:	08 95       	ret

0000074e <_exit>:
 74e:	f8 94       	cli

00000750 <__stop_program>:
 750:	ff cf       	rjmp	.-2      	; 0x750 <__stop_program>
