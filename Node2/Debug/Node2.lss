
Node2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  00000582  00000616  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000582  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800206  00800206  0000061c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000061c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000158  00000000  00000000  0000064c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ddc  00000000  00000000  000007a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006f1  00000000  00000000  00001580  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008e5  00000000  00000000  00001c71  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002a8  00000000  00000000  00002558  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b1  00000000  00000000  00002800  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000584  00000000  00000000  00002bb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f8  00000000  00000000  00003135  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	d3 c0       	rjmp	.+422    	; 0x1ec <__vector_17>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 e8       	ldi	r30, 0x82	; 130
  fc:	f5 e0       	ldi	r31, 0x05	; 5
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 30       	cpi	r26, 0x06	; 6
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a6 e0       	ldi	r26, 0x06	; 6
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a0 31       	cpi	r26, 0x10	; 16
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	2f d0       	rcall	.+94     	; 0x17e <main>
 120:	2e c2       	rjmp	.+1116   	; 0x57e <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <CAN_init>:
#include "MCP2515.h"
#include "can.h"

void CAN_init(void)
{
	MCP_init();
 124:	1f c0       	rjmp	.+62     	; 0x164 <MCP_init>
 126:	08 95       	ret

00000128 <MCP_reset>:
	SPI_master_transmit(MCP_RX_STATUS);
	//SPI_master_transmit(0x00); // Unneccessary because of "repeat data out"?
	char status = SPDR;
	PORTB |= (1 << PB0);
	return status;
}
 128:	28 98       	cbi	0x05, 0	; 5
 12a:	80 ec       	ldi	r24, 0xC0	; 192
 12c:	76 d0       	rcall	.+236    	; 0x21a <SPI_master_transmit>
 12e:	28 9a       	sbi	0x05, 0	; 5
 130:	08 95       	ret

00000132 <MCP_modify_bit>:
	MCP_modify_bit(MCP_CANCTRL, mask, mode);
}

/* Changes the value of the register bits specified by the mask */
void MCP_modify_bit(uint8_t addr, uint8_t mask, uint8_t data)
{
 132:	1f 93       	push	r17
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	18 2f       	mov	r17, r24
 13a:	d6 2f       	mov	r29, r22
 13c:	c4 2f       	mov	r28, r20
	PORTB &= ~(1 << PB0);
 13e:	28 98       	cbi	0x05, 0	; 5
	SPI_master_transmit(MCP_BITMOD);
 140:	85 e0       	ldi	r24, 0x05	; 5
 142:	6b d0       	rcall	.+214    	; 0x21a <SPI_master_transmit>
	SPI_master_transmit(addr);
 144:	81 2f       	mov	r24, r17
 146:	69 d0       	rcall	.+210    	; 0x21a <SPI_master_transmit>
	SPI_master_transmit(mask);
 148:	8d 2f       	mov	r24, r29
 14a:	67 d0       	rcall	.+206    	; 0x21a <SPI_master_transmit>
	SPI_master_transmit(data);
 14c:	8c 2f       	mov	r24, r28
 14e:	65 d0       	rcall	.+202    	; 0x21a <SPI_master_transmit>
	PORTB |= (1 << PB0);
 150:	28 9a       	sbi	0x05, 0	; 5
 152:	df 91       	pop	r29
 154:	cf 91       	pop	r28
 156:	1f 91       	pop	r17
 158:	08 95       	ret

0000015a <MCP_set_mode>:
			break;
		default:
			break;
	}
	
	MCP_modify_bit(MCP_CANCTRL, mask, mode);
 15a:	48 2f       	mov	r20, r24
 15c:	60 ee       	ldi	r22, 0xE0	; 224
 15e:	8f e0       	ldi	r24, 0x0F	; 15
 160:	e8 cf       	rjmp	.-48     	; 0x132 <MCP_modify_bit>
 162:	08 95       	ret

00000164 <MCP_init>:
#include "MCP2515.h"
#include "mcp.h"

void MCP_init(void)
{
	SPI_master_init();
 164:	55 d0       	rcall	.+170    	; 0x210 <SPI_master_init>
	MCP_reset();
 166:	e0 df       	rcall	.-64     	; 0x128 <MCP_reset>
	
	MCP_modify_bit(MCP_RXB0CTRL, 0b01100000, 0xFF); // Turns masks/filters off for RX0
 168:	4f ef       	ldi	r20, 0xFF	; 255
 16a:	60 e6       	ldi	r22, 0x60	; 96
 16c:	80 e6       	ldi	r24, 0x60	; 96
 16e:	e1 df       	rcall	.-62     	; 0x132 <MCP_modify_bit>
	MCP_modify_bit(MCP_RXB1CTRL, 0b01100000, 0xFF); // Turns masks/filters off for RX1
 170:	4f ef       	ldi	r20, 0xFF	; 255
 172:	60 e6       	ldi	r22, 0x60	; 96
 174:	80 e7       	ldi	r24, 0x70	; 112
 176:	dd df       	rcall	.-70     	; 0x132 <MCP_modify_bit>
	//MCP_set_mode(MODE_LOOPBACK); // Sets loopback operation mode for testing
	MCP_set_mode(MODE_NORMAL); // Sets normal operation mode
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	ef cf       	rjmp	.-34     	; 0x15a <MCP_set_mode>
 17c:	08 95       	ret

0000017e <main>:



int main(void)
{
	sei(); // Enable global interrupts
 17e:	78 94       	sei
	
	timer1_init(); // initialize timer
 180:	13 d0       	rcall	.+38     	; 0x1a8 <timer1_init>
	fdevopen(USART_transmit, USART_receive); // Sets printf to serial port
 182:	65 e2       	ldi	r22, 0x25	; 37
 184:	71 e0       	ldi	r23, 0x01	; 1
 186:	8d e1       	ldi	r24, 0x1D	; 29
 188:	91 e0       	ldi	r25, 0x01	; 1
 18a:	67 d0       	rcall	.+206    	; 0x25a <fdevopen>
	USART_init(MYUBBR);
 18c:	87 e6       	ldi	r24, 0x67	; 103
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	49 d0       	rcall	.+146    	; 0x224 <USART_init>
	CAN_init();
 192:	c8 df       	rcall	.-112    	; 0x124 <CAN_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 194:	2f ef       	ldi	r18, 0xFF	; 255
 196:	89 e6       	ldi	r24, 0x69	; 105
 198:	98 e1       	ldi	r25, 0x18	; 24
 19a:	21 50       	subi	r18, 0x01	; 1
 19c:	80 40       	sbci	r24, 0x00	; 0
 19e:	90 40       	sbci	r25, 0x00	; 0
 1a0:	e1 f7       	brne	.-8      	; 0x19a <main+0x1c>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <main+0x26>
 1a4:	00 00       	nop
 1a6:	f6 cf       	rjmp	.-20     	; 0x194 <main+0x16>

000001a8 <timer1_init>:
	uint8_t ref = pos.y * delta/255;
	uint8_t new_pos = min + ref;
	
	// Update compare register
	//printf("new_pos: %d\n", new_pos);
	OCR1A = new_pos;
 1a8:	e0 e8       	ldi	r30, 0x80	; 128
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	80 81       	ld	r24, Z
 1ae:	82 68       	ori	r24, 0x82	; 130
 1b0:	80 83       	st	Z, r24
 1b2:	e1 e8       	ldi	r30, 0x81	; 129
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	8b 61       	ori	r24, 0x1B	; 27
 1ba:	80 83       	st	Z, r24
 1bc:	88 e8       	ldi	r24, 0x88	; 136
 1be:	93 e1       	ldi	r25, 0x13	; 19
 1c0:	90 93 87 00 	sts	0x0087, r25
 1c4:	80 93 86 00 	sts	0x0086, r24
 1c8:	10 92 85 00 	sts	0x0085, r1
 1cc:	10 92 84 00 	sts	0x0084, r1
 1d0:	87 e7       	ldi	r24, 0x77	; 119
 1d2:	91 e0       	ldi	r25, 0x01	; 1
 1d4:	90 93 89 00 	sts	0x0089, r25
 1d8:	80 93 88 00 	sts	0x0088, r24
 1dc:	ef e6       	ldi	r30, 0x6F	; 111
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	80 81       	ld	r24, Z
 1e2:	82 60       	ori	r24, 0x02	; 2
 1e4:	80 83       	st	Z, r24
 1e6:	80 e2       	ldi	r24, 0x20	; 32
 1e8:	84 b9       	out	0x04, r24	; 4
 1ea:	08 95       	ret

000001ec <__vector_17>:
}

/* Interrupt handler for TIMER1 compare */
ISR(TIMER1_COMPA_vect) {
 1ec:	1f 92       	push	r1
 1ee:	0f 92       	push	r0
 1f0:	0f b6       	in	r0, 0x3f	; 63
 1f2:	0f 92       	push	r0
 1f4:	11 24       	eor	r1, r1
 1f6:	8f 93       	push	r24
 1f8:	9f 93       	push	r25

	// pin toggle
	PORTB ^= (1 << PB5);
 1fa:	95 b1       	in	r25, 0x05	; 5
 1fc:	80 e2       	ldi	r24, 0x20	; 32
 1fe:	89 27       	eor	r24, r25
 200:	85 b9       	out	0x05, r24	; 5
 202:	9f 91       	pop	r25
 204:	8f 91       	pop	r24
 206:	0f 90       	pop	r0
 208:	0f be       	out	0x3f, r0	; 63
 20a:	0f 90       	pop	r0
 20c:	1f 90       	pop	r1
 20e:	18 95       	reti

00000210 <SPI_master_init>:
#include <avr/delay.h>

void SPI_master_init(void)
{
	/* Set ~SS, MOSI and SCK output, all others input */
	DDRB = (1 << PB0)|(1 << PB2)|(1 << PB1); // Setting ~SS necessary?
 210:	87 e0       	ldi	r24, 0x07	; 7
 212:	84 b9       	out	0x04, r24	; 4
	
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1 << SPE)|(1 << MSTR)|(1 << SPR0);
 214:	81 e5       	ldi	r24, 0x51	; 81
 216:	8c bd       	out	0x2c, r24	; 44
 218:	08 95       	ret

0000021a <SPI_master_transmit>:
}

void SPI_master_transmit(uint8_t cData)
{
	/* Start transmission */
	SPDR = cData;
 21a:	8e bd       	out	0x2e, r24	; 46
	
	/* Wait for transmission to complete */
	while (!(SPSR & (1 << SPIF))) {
 21c:	0d b4       	in	r0, 0x2d	; 45
 21e:	07 fe       	sbrs	r0, 7
 220:	fd cf       	rjmp	.-6      	; 0x21c <SPI_master_transmit+0x2>
		;
	}
}
 222:	08 95       	ret

00000224 <USART_init>:
#include <avr/io.h>

void USART_init(unsigned int ubrr)
{
	/* Set baud rate*/
	UBRR0H = (unsigned char)(ubrr >> 8 );
 224:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
 228:	80 93 c4 00 	sts	0x00C4, r24
	/*Enable receiver and transmitter*/
	UCSR0B = (1 << RXEN0)|(1 << TXEN0);
 22c:	88 e1       	ldi	r24, 0x18	; 24
 22e:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1 << USBS0)|(3 << UCSZ10);
 232:	8e e0       	ldi	r24, 0x0E	; 14
 234:	80 93 c2 00 	sts	0x00C2, r24
 238:	08 95       	ret

0000023a <USART_transmit>:
}

void USART_transmit(unsigned char data)
{
	/* Wait for empty transmit buffer */
	while (!( UCSR0A & (1 << UDRE0)))
 23a:	e0 ec       	ldi	r30, 0xC0	; 192
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	90 81       	ld	r25, Z
 240:	95 ff       	sbrs	r25, 5
 242:	fd cf       	rjmp	.-6      	; 0x23e <USART_transmit+0x4>
		;
	/* Put data into buffer, sends the data */
	UDR0 = data;
 244:	80 93 c6 00 	sts	0x00C6, r24
 248:	08 95       	ret

0000024a <USART_receive>:
}

unsigned char USART_receive(void)
{
	/* Wait for data to be received */
	while ( !(UCSR0A & ( 1 << RXC0)) )
 24a:	e0 ec       	ldi	r30, 0xC0	; 192
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	80 81       	ld	r24, Z
 250:	88 23       	and	r24, r24
 252:	ec f7       	brge	.-6      	; 0x24e <USART_receive+0x4>
		;
	/* Get and return received data from buffer */
	return UDR0;
 254:	80 91 c6 00 	lds	r24, 0x00C6
}
 258:	08 95       	ret

0000025a <fdevopen>:
 25a:	0f 93       	push	r16
 25c:	1f 93       	push	r17
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
 262:	ec 01       	movw	r28, r24
 264:	8b 01       	movw	r16, r22
 266:	00 97       	sbiw	r24, 0x00	; 0
 268:	31 f4       	brne	.+12     	; 0x276 <fdevopen+0x1c>
 26a:	61 15       	cp	r22, r1
 26c:	71 05       	cpc	r23, r1
 26e:	19 f4       	brne	.+6      	; 0x276 <fdevopen+0x1c>
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	37 c0       	rjmp	.+110    	; 0x2e4 <fdevopen+0x8a>
 276:	6e e0       	ldi	r22, 0x0E	; 14
 278:	70 e0       	ldi	r23, 0x00	; 0
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	37 d0       	rcall	.+110    	; 0x2ee <calloc>
 280:	fc 01       	movw	r30, r24
 282:	00 97       	sbiw	r24, 0x00	; 0
 284:	a9 f3       	breq	.-22     	; 0x270 <fdevopen+0x16>
 286:	80 e8       	ldi	r24, 0x80	; 128
 288:	83 83       	std	Z+3, r24	; 0x03
 28a:	01 15       	cp	r16, r1
 28c:	11 05       	cpc	r17, r1
 28e:	71 f0       	breq	.+28     	; 0x2ac <fdevopen+0x52>
 290:	13 87       	std	Z+11, r17	; 0x0b
 292:	02 87       	std	Z+10, r16	; 0x0a
 294:	81 e8       	ldi	r24, 0x81	; 129
 296:	83 83       	std	Z+3, r24	; 0x03
 298:	80 91 06 02 	lds	r24, 0x0206
 29c:	90 91 07 02 	lds	r25, 0x0207
 2a0:	89 2b       	or	r24, r25
 2a2:	21 f4       	brne	.+8      	; 0x2ac <fdevopen+0x52>
 2a4:	f0 93 07 02 	sts	0x0207, r31
 2a8:	e0 93 06 02 	sts	0x0206, r30
 2ac:	20 97       	sbiw	r28, 0x00	; 0
 2ae:	c9 f0       	breq	.+50     	; 0x2e2 <fdevopen+0x88>
 2b0:	d1 87       	std	Z+9, r29	; 0x09
 2b2:	c0 87       	std	Z+8, r28	; 0x08
 2b4:	83 81       	ldd	r24, Z+3	; 0x03
 2b6:	82 60       	ori	r24, 0x02	; 2
 2b8:	83 83       	std	Z+3, r24	; 0x03
 2ba:	80 91 08 02 	lds	r24, 0x0208
 2be:	90 91 09 02 	lds	r25, 0x0209
 2c2:	89 2b       	or	r24, r25
 2c4:	71 f4       	brne	.+28     	; 0x2e2 <fdevopen+0x88>
 2c6:	f0 93 09 02 	sts	0x0209, r31
 2ca:	e0 93 08 02 	sts	0x0208, r30
 2ce:	80 91 0a 02 	lds	r24, 0x020A
 2d2:	90 91 0b 02 	lds	r25, 0x020B
 2d6:	89 2b       	or	r24, r25
 2d8:	21 f4       	brne	.+8      	; 0x2e2 <fdevopen+0x88>
 2da:	f0 93 0b 02 	sts	0x020B, r31
 2de:	e0 93 0a 02 	sts	0x020A, r30
 2e2:	cf 01       	movw	r24, r30
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	1f 91       	pop	r17
 2ea:	0f 91       	pop	r16
 2ec:	08 95       	ret

000002ee <calloc>:
 2ee:	0f 93       	push	r16
 2f0:	1f 93       	push	r17
 2f2:	cf 93       	push	r28
 2f4:	df 93       	push	r29
 2f6:	86 9f       	mul	r24, r22
 2f8:	80 01       	movw	r16, r0
 2fa:	87 9f       	mul	r24, r23
 2fc:	10 0d       	add	r17, r0
 2fe:	96 9f       	mul	r25, r22
 300:	10 0d       	add	r17, r0
 302:	11 24       	eor	r1, r1
 304:	c8 01       	movw	r24, r16
 306:	0d d0       	rcall	.+26     	; 0x322 <malloc>
 308:	ec 01       	movw	r28, r24
 30a:	00 97       	sbiw	r24, 0x00	; 0
 30c:	21 f0       	breq	.+8      	; 0x316 <calloc+0x28>
 30e:	a8 01       	movw	r20, r16
 310:	60 e0       	ldi	r22, 0x00	; 0
 312:	70 e0       	ldi	r23, 0x00	; 0
 314:	2d d1       	rcall	.+602    	; 0x570 <memset>
 316:	ce 01       	movw	r24, r28
 318:	df 91       	pop	r29
 31a:	cf 91       	pop	r28
 31c:	1f 91       	pop	r17
 31e:	0f 91       	pop	r16
 320:	08 95       	ret

00000322 <malloc>:
 322:	cf 93       	push	r28
 324:	df 93       	push	r29
 326:	82 30       	cpi	r24, 0x02	; 2
 328:	91 05       	cpc	r25, r1
 32a:	10 f4       	brcc	.+4      	; 0x330 <malloc+0xe>
 32c:	82 e0       	ldi	r24, 0x02	; 2
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	e0 91 0e 02 	lds	r30, 0x020E
 334:	f0 91 0f 02 	lds	r31, 0x020F
 338:	20 e0       	ldi	r18, 0x00	; 0
 33a:	30 e0       	ldi	r19, 0x00	; 0
 33c:	a0 e0       	ldi	r26, 0x00	; 0
 33e:	b0 e0       	ldi	r27, 0x00	; 0
 340:	30 97       	sbiw	r30, 0x00	; 0
 342:	39 f1       	breq	.+78     	; 0x392 <malloc+0x70>
 344:	40 81       	ld	r20, Z
 346:	51 81       	ldd	r21, Z+1	; 0x01
 348:	48 17       	cp	r20, r24
 34a:	59 07       	cpc	r21, r25
 34c:	b8 f0       	brcs	.+46     	; 0x37c <malloc+0x5a>
 34e:	48 17       	cp	r20, r24
 350:	59 07       	cpc	r21, r25
 352:	71 f4       	brne	.+28     	; 0x370 <malloc+0x4e>
 354:	82 81       	ldd	r24, Z+2	; 0x02
 356:	93 81       	ldd	r25, Z+3	; 0x03
 358:	10 97       	sbiw	r26, 0x00	; 0
 35a:	29 f0       	breq	.+10     	; 0x366 <malloc+0x44>
 35c:	13 96       	adiw	r26, 0x03	; 3
 35e:	9c 93       	st	X, r25
 360:	8e 93       	st	-X, r24
 362:	12 97       	sbiw	r26, 0x02	; 2
 364:	2c c0       	rjmp	.+88     	; 0x3be <malloc+0x9c>
 366:	90 93 0f 02 	sts	0x020F, r25
 36a:	80 93 0e 02 	sts	0x020E, r24
 36e:	27 c0       	rjmp	.+78     	; 0x3be <malloc+0x9c>
 370:	21 15       	cp	r18, r1
 372:	31 05       	cpc	r19, r1
 374:	31 f0       	breq	.+12     	; 0x382 <malloc+0x60>
 376:	42 17       	cp	r20, r18
 378:	53 07       	cpc	r21, r19
 37a:	18 f0       	brcs	.+6      	; 0x382 <malloc+0x60>
 37c:	a9 01       	movw	r20, r18
 37e:	db 01       	movw	r26, r22
 380:	01 c0       	rjmp	.+2      	; 0x384 <malloc+0x62>
 382:	ef 01       	movw	r28, r30
 384:	9a 01       	movw	r18, r20
 386:	bd 01       	movw	r22, r26
 388:	df 01       	movw	r26, r30
 38a:	02 80       	ldd	r0, Z+2	; 0x02
 38c:	f3 81       	ldd	r31, Z+3	; 0x03
 38e:	e0 2d       	mov	r30, r0
 390:	d7 cf       	rjmp	.-82     	; 0x340 <malloc+0x1e>
 392:	21 15       	cp	r18, r1
 394:	31 05       	cpc	r19, r1
 396:	f9 f0       	breq	.+62     	; 0x3d6 <malloc+0xb4>
 398:	28 1b       	sub	r18, r24
 39a:	39 0b       	sbc	r19, r25
 39c:	24 30       	cpi	r18, 0x04	; 4
 39e:	31 05       	cpc	r19, r1
 3a0:	80 f4       	brcc	.+32     	; 0x3c2 <malloc+0xa0>
 3a2:	8a 81       	ldd	r24, Y+2	; 0x02
 3a4:	9b 81       	ldd	r25, Y+3	; 0x03
 3a6:	61 15       	cp	r22, r1
 3a8:	71 05       	cpc	r23, r1
 3aa:	21 f0       	breq	.+8      	; 0x3b4 <malloc+0x92>
 3ac:	fb 01       	movw	r30, r22
 3ae:	93 83       	std	Z+3, r25	; 0x03
 3b0:	82 83       	std	Z+2, r24	; 0x02
 3b2:	04 c0       	rjmp	.+8      	; 0x3bc <malloc+0x9a>
 3b4:	90 93 0f 02 	sts	0x020F, r25
 3b8:	80 93 0e 02 	sts	0x020E, r24
 3bc:	fe 01       	movw	r30, r28
 3be:	32 96       	adiw	r30, 0x02	; 2
 3c0:	44 c0       	rjmp	.+136    	; 0x44a <malloc+0x128>
 3c2:	fe 01       	movw	r30, r28
 3c4:	e2 0f       	add	r30, r18
 3c6:	f3 1f       	adc	r31, r19
 3c8:	81 93       	st	Z+, r24
 3ca:	91 93       	st	Z+, r25
 3cc:	22 50       	subi	r18, 0x02	; 2
 3ce:	31 09       	sbc	r19, r1
 3d0:	39 83       	std	Y+1, r19	; 0x01
 3d2:	28 83       	st	Y, r18
 3d4:	3a c0       	rjmp	.+116    	; 0x44a <malloc+0x128>
 3d6:	20 91 0c 02 	lds	r18, 0x020C
 3da:	30 91 0d 02 	lds	r19, 0x020D
 3de:	23 2b       	or	r18, r19
 3e0:	41 f4       	brne	.+16     	; 0x3f2 <malloc+0xd0>
 3e2:	20 91 02 02 	lds	r18, 0x0202
 3e6:	30 91 03 02 	lds	r19, 0x0203
 3ea:	30 93 0d 02 	sts	0x020D, r19
 3ee:	20 93 0c 02 	sts	0x020C, r18
 3f2:	20 91 00 02 	lds	r18, 0x0200
 3f6:	30 91 01 02 	lds	r19, 0x0201
 3fa:	21 15       	cp	r18, r1
 3fc:	31 05       	cpc	r19, r1
 3fe:	41 f4       	brne	.+16     	; 0x410 <malloc+0xee>
 400:	2d b7       	in	r18, 0x3d	; 61
 402:	3e b7       	in	r19, 0x3e	; 62
 404:	40 91 04 02 	lds	r20, 0x0204
 408:	50 91 05 02 	lds	r21, 0x0205
 40c:	24 1b       	sub	r18, r20
 40e:	35 0b       	sbc	r19, r21
 410:	e0 91 0c 02 	lds	r30, 0x020C
 414:	f0 91 0d 02 	lds	r31, 0x020D
 418:	e2 17       	cp	r30, r18
 41a:	f3 07       	cpc	r31, r19
 41c:	a0 f4       	brcc	.+40     	; 0x446 <malloc+0x124>
 41e:	2e 1b       	sub	r18, r30
 420:	3f 0b       	sbc	r19, r31
 422:	28 17       	cp	r18, r24
 424:	39 07       	cpc	r19, r25
 426:	78 f0       	brcs	.+30     	; 0x446 <malloc+0x124>
 428:	ac 01       	movw	r20, r24
 42a:	4e 5f       	subi	r20, 0xFE	; 254
 42c:	5f 4f       	sbci	r21, 0xFF	; 255
 42e:	24 17       	cp	r18, r20
 430:	35 07       	cpc	r19, r21
 432:	48 f0       	brcs	.+18     	; 0x446 <malloc+0x124>
 434:	4e 0f       	add	r20, r30
 436:	5f 1f       	adc	r21, r31
 438:	50 93 0d 02 	sts	0x020D, r21
 43c:	40 93 0c 02 	sts	0x020C, r20
 440:	81 93       	st	Z+, r24
 442:	91 93       	st	Z+, r25
 444:	02 c0       	rjmp	.+4      	; 0x44a <malloc+0x128>
 446:	e0 e0       	ldi	r30, 0x00	; 0
 448:	f0 e0       	ldi	r31, 0x00	; 0
 44a:	cf 01       	movw	r24, r30
 44c:	df 91       	pop	r29
 44e:	cf 91       	pop	r28
 450:	08 95       	ret

00000452 <free>:
 452:	cf 93       	push	r28
 454:	df 93       	push	r29
 456:	00 97       	sbiw	r24, 0x00	; 0
 458:	09 f4       	brne	.+2      	; 0x45c <free+0xa>
 45a:	87 c0       	rjmp	.+270    	; 0x56a <free+0x118>
 45c:	fc 01       	movw	r30, r24
 45e:	32 97       	sbiw	r30, 0x02	; 2
 460:	13 82       	std	Z+3, r1	; 0x03
 462:	12 82       	std	Z+2, r1	; 0x02
 464:	c0 91 0e 02 	lds	r28, 0x020E
 468:	d0 91 0f 02 	lds	r29, 0x020F
 46c:	20 97       	sbiw	r28, 0x00	; 0
 46e:	81 f4       	brne	.+32     	; 0x490 <free+0x3e>
 470:	20 81       	ld	r18, Z
 472:	31 81       	ldd	r19, Z+1	; 0x01
 474:	28 0f       	add	r18, r24
 476:	39 1f       	adc	r19, r25
 478:	80 91 0c 02 	lds	r24, 0x020C
 47c:	90 91 0d 02 	lds	r25, 0x020D
 480:	82 17       	cp	r24, r18
 482:	93 07       	cpc	r25, r19
 484:	79 f5       	brne	.+94     	; 0x4e4 <free+0x92>
 486:	f0 93 0d 02 	sts	0x020D, r31
 48a:	e0 93 0c 02 	sts	0x020C, r30
 48e:	6d c0       	rjmp	.+218    	; 0x56a <free+0x118>
 490:	de 01       	movw	r26, r28
 492:	20 e0       	ldi	r18, 0x00	; 0
 494:	30 e0       	ldi	r19, 0x00	; 0
 496:	ae 17       	cp	r26, r30
 498:	bf 07       	cpc	r27, r31
 49a:	50 f4       	brcc	.+20     	; 0x4b0 <free+0x5e>
 49c:	12 96       	adiw	r26, 0x02	; 2
 49e:	4d 91       	ld	r20, X+
 4a0:	5c 91       	ld	r21, X
 4a2:	13 97       	sbiw	r26, 0x03	; 3
 4a4:	9d 01       	movw	r18, r26
 4a6:	41 15       	cp	r20, r1
 4a8:	51 05       	cpc	r21, r1
 4aa:	09 f1       	breq	.+66     	; 0x4ee <free+0x9c>
 4ac:	da 01       	movw	r26, r20
 4ae:	f3 cf       	rjmp	.-26     	; 0x496 <free+0x44>
 4b0:	b3 83       	std	Z+3, r27	; 0x03
 4b2:	a2 83       	std	Z+2, r26	; 0x02
 4b4:	40 81       	ld	r20, Z
 4b6:	51 81       	ldd	r21, Z+1	; 0x01
 4b8:	84 0f       	add	r24, r20
 4ba:	95 1f       	adc	r25, r21
 4bc:	8a 17       	cp	r24, r26
 4be:	9b 07       	cpc	r25, r27
 4c0:	71 f4       	brne	.+28     	; 0x4de <free+0x8c>
 4c2:	8d 91       	ld	r24, X+
 4c4:	9c 91       	ld	r25, X
 4c6:	11 97       	sbiw	r26, 0x01	; 1
 4c8:	84 0f       	add	r24, r20
 4ca:	95 1f       	adc	r25, r21
 4cc:	02 96       	adiw	r24, 0x02	; 2
 4ce:	91 83       	std	Z+1, r25	; 0x01
 4d0:	80 83       	st	Z, r24
 4d2:	12 96       	adiw	r26, 0x02	; 2
 4d4:	8d 91       	ld	r24, X+
 4d6:	9c 91       	ld	r25, X
 4d8:	13 97       	sbiw	r26, 0x03	; 3
 4da:	93 83       	std	Z+3, r25	; 0x03
 4dc:	82 83       	std	Z+2, r24	; 0x02
 4de:	21 15       	cp	r18, r1
 4e0:	31 05       	cpc	r19, r1
 4e2:	29 f4       	brne	.+10     	; 0x4ee <free+0x9c>
 4e4:	f0 93 0f 02 	sts	0x020F, r31
 4e8:	e0 93 0e 02 	sts	0x020E, r30
 4ec:	3e c0       	rjmp	.+124    	; 0x56a <free+0x118>
 4ee:	d9 01       	movw	r26, r18
 4f0:	13 96       	adiw	r26, 0x03	; 3
 4f2:	fc 93       	st	X, r31
 4f4:	ee 93       	st	-X, r30
 4f6:	12 97       	sbiw	r26, 0x02	; 2
 4f8:	4d 91       	ld	r20, X+
 4fa:	5d 91       	ld	r21, X+
 4fc:	a4 0f       	add	r26, r20
 4fe:	b5 1f       	adc	r27, r21
 500:	ea 17       	cp	r30, r26
 502:	fb 07       	cpc	r31, r27
 504:	79 f4       	brne	.+30     	; 0x524 <free+0xd2>
 506:	80 81       	ld	r24, Z
 508:	91 81       	ldd	r25, Z+1	; 0x01
 50a:	84 0f       	add	r24, r20
 50c:	95 1f       	adc	r25, r21
 50e:	02 96       	adiw	r24, 0x02	; 2
 510:	d9 01       	movw	r26, r18
 512:	11 96       	adiw	r26, 0x01	; 1
 514:	9c 93       	st	X, r25
 516:	8e 93       	st	-X, r24
 518:	82 81       	ldd	r24, Z+2	; 0x02
 51a:	93 81       	ldd	r25, Z+3	; 0x03
 51c:	13 96       	adiw	r26, 0x03	; 3
 51e:	9c 93       	st	X, r25
 520:	8e 93       	st	-X, r24
 522:	12 97       	sbiw	r26, 0x02	; 2
 524:	e0 e0       	ldi	r30, 0x00	; 0
 526:	f0 e0       	ldi	r31, 0x00	; 0
 528:	8a 81       	ldd	r24, Y+2	; 0x02
 52a:	9b 81       	ldd	r25, Y+3	; 0x03
 52c:	00 97       	sbiw	r24, 0x00	; 0
 52e:	19 f0       	breq	.+6      	; 0x536 <free+0xe4>
 530:	fe 01       	movw	r30, r28
 532:	ec 01       	movw	r28, r24
 534:	f9 cf       	rjmp	.-14     	; 0x528 <free+0xd6>
 536:	ce 01       	movw	r24, r28
 538:	02 96       	adiw	r24, 0x02	; 2
 53a:	28 81       	ld	r18, Y
 53c:	39 81       	ldd	r19, Y+1	; 0x01
 53e:	82 0f       	add	r24, r18
 540:	93 1f       	adc	r25, r19
 542:	20 91 0c 02 	lds	r18, 0x020C
 546:	30 91 0d 02 	lds	r19, 0x020D
 54a:	28 17       	cp	r18, r24
 54c:	39 07       	cpc	r19, r25
 54e:	69 f4       	brne	.+26     	; 0x56a <free+0x118>
 550:	30 97       	sbiw	r30, 0x00	; 0
 552:	29 f4       	brne	.+10     	; 0x55e <free+0x10c>
 554:	10 92 0f 02 	sts	0x020F, r1
 558:	10 92 0e 02 	sts	0x020E, r1
 55c:	02 c0       	rjmp	.+4      	; 0x562 <free+0x110>
 55e:	13 82       	std	Z+3, r1	; 0x03
 560:	12 82       	std	Z+2, r1	; 0x02
 562:	d0 93 0d 02 	sts	0x020D, r29
 566:	c0 93 0c 02 	sts	0x020C, r28
 56a:	df 91       	pop	r29
 56c:	cf 91       	pop	r28
 56e:	08 95       	ret

00000570 <memset>:
 570:	dc 01       	movw	r26, r24
 572:	01 c0       	rjmp	.+2      	; 0x576 <memset+0x6>
 574:	6d 93       	st	X+, r22
 576:	41 50       	subi	r20, 0x01	; 1
 578:	50 40       	sbci	r21, 0x00	; 0
 57a:	e0 f7       	brcc	.-8      	; 0x574 <memset+0x4>
 57c:	08 95       	ret

0000057e <_exit>:
 57e:	f8 94       	cli

00000580 <__stop_program>:
 580:	ff cf       	rjmp	.-2      	; 0x580 <__stop_program>
